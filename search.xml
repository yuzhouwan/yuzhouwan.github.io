<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Antlr</title>
    <url>/posts/55501/</url>
    <content><![CDATA[<h2 id="什么是-Antlr"><a href="#什么是-Antlr" class="headerlink" title="什么是 Antlr?"></a>什么是 Antlr?</h2><p>　<strong>ANTLR</strong>™ (<strong>AN</strong>other <strong>T</strong>ool for <strong>L</strong>anguage <strong>R</strong>ecognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It’s widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build and walk parse trees.</p>
<h2 id="为什么要有-Antlr"><a href="#为什么要有-Antlr" class="headerlink" title="为什么要有 Antlr?"></a>为什么要有 Antlr?</h2><h3 id="简易性"><a href="#简易性" class="headerlink" title="简易性"></a>简易性</h3><p>　可以通过断言（Predicate）解决识别冲突<br>　支持动作（Action）和返回值（Return Value）<br>　它可以根据输入自动生成语法树，并可视化的展示出来</p>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>　复杂情况下，需要基于语法树遍历（walking the tree）生成目标代码<br>　Embeded action 将处理代码跟语法描述混合起来，语法复杂时使语法文件臃肿<br>　语法可能经常需要修改，而语法的主要表达式却不会变动，因此，Antlr 将语法识别与转换、生成（目标代码）的处理分离</p>
<span id="more"></span>
<h2 id="Antlr-工作机制"><a href="#Antlr-工作机制" class="headerlink" title="Antlr 工作机制"></a>Antlr 工作机制</h2><h3 id="词法分析器（Lexer）"><a href="#词法分析器（Lexer）" class="headerlink" title="词法分析器（Lexer）"></a>词法分析器（Lexer）</h3><p>　分析量化字符流，翻译成离散的字符组（也就是一堆 Token）, 包括关键字，标识符，符号（symbols）和操作符，以供语法分析器使用</p>
<h3 id="语法分析器（Parser）"><a href="#语法分析器（Parser）" class="headerlink" title="语法分析器（Parser）"></a>语法分析器（Parser）</h3><p>　将 Tokens 组织起来，并转换成为目标语言语法（默认是 <a href="https://yuzhouwan.com/posts/27328/">Java</a>）定义所允许的序列</p>
<h3 id="树分析器（Tree-Parser）"><a href="#树分析器（Tree-Parser）" class="headerlink" title="树分析器（Tree Parser）"></a>树分析器（Tree Parser）</h3><p>　用于对语法分析生成的抽象语法树进行遍历，并在先序经过每个树节点的时候，进行一些定制操作</p>
<h2 id="Antlr-运作流程"><a href="#Antlr-运作流程" class="headerlink" title="Antlr 运作流程"></a>Antlr 运作流程</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Download</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib</span><br><span class="line">$ curl -O https://www.antlr.org/download/antlr-4.7.2-complete.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add antlr-4.7.2-complete.jar to your CLASSPATH</span></span><br><span class="line"><span class="comment"># Create aliases for the ANTLR Tool, and TestRig</span></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> CLASSPATH=<span class="string">".:/usr/local/lib/antlr-4.7.2-complete.jar:<span class="variable">$CLASSPATH</span>"</span></span><br><span class="line">  <span class="built_in">alias</span> antlr4=<span class="string">'java -Xmx500M -cp "/usr/local/lib/antlr-4.7.2-complete.jar:$CLASSPATH" org.antlr.v4.Tool'</span></span><br><span class="line">  <span class="built_in">alias</span> grun=<span class="string">'java -Xmx500M -cp "/usr/local/lib/antlr-4.7.2-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig'</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编写源文件"><a href="#编写源文件" class="headerlink" title="编写源文件"></a>编写源文件</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim Benedict.g4</span><br><span class="line">  // Define a grammar called Benedict</span><br><span class="line">  grammar Benedict;</span><br><span class="line">  r    : <span class="string">'hello'</span> Name ;         // match keyword hello followed by an identifier</span><br><span class="line">  Name : [a-z]+ ;               // match lower-case identifiers</span><br><span class="line">  WS   : [ \t\r\n]+ -&gt; skip ;   // skip spaces, tabs, newlines</span><br></pre></td></tr></tbody></table></figure>
<h3 id="词法语法分析"><a href="#词法语法分析" class="headerlink" title="词法语法分析"></a>词法语法分析</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ antlr4 Benedict.g4</span><br><span class="line">$ ll</span><br><span class="line">  total 36K</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   93  1 15 14:47 Benedict.g4</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  321  1 15 14:47 Benedict.interp</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   38  1 15 14:47 Benedict.tokens</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 1.3K  1 15 14:47 BenedictBaseListener.java</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 1.3K  1 15 14:47 BenedictLexer.interp</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 3.7K  1 15 14:47 BenedictLexer.java</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   38  1 15 14:47 BenedictLexer.tokens</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  569  1 15 14:47 BenedictListener.java</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 3.9K  1 15 14:47 BenedictParser.java</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ javac Benedict*.java</span><br><span class="line">$ ll</span><br><span class="line">  total 60K</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   93  1 15 14:47  Benedict.g4</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  321  1 15 14:47  Benedict.interp</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   38  1 15 14:47  Benedict.tokens</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  822  1 15 14:48  BenedictBaseListener.class</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 1.3K  1 15 14:47  BenedictBaseListener.java</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 3.8K  1 15 14:48  BenedictLexer.class</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 1.3K  1 15 14:47  BenedictLexer.interp</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 3.7K  1 15 14:47  BenedictLexer.java</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   38  1 15 14:47  BenedictLexer.tokens</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  329  1 15 14:48  BenedictListener.class</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  569  1 15 14:47  BenedictListener.java</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel  896  1 15 14:48 <span class="string">'BenedictParser$SayContext.class'</span></span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 4.4K  1 15 14:48  BenedictParser.class</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 3.9K  1 15 14:47  BenedictParser.java</span><br><span class="line"></span><br><span class="line">$ grun Benedict r -tree</span><br><span class="line">  hello benedict</span><br><span class="line">  (r hello benedict)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ grun Benedict r -gui</span><br><span class="line">  hello benedict</span><br><span class="line">  ^D</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/antlr/antlr4_hello_benedict.png" alt="antlr say hello example"></p>
<center>（对 <a href="https://www.antlr.org/" target="_blank">Antlr4</a>™ 输出界面的截图）</center>



<h2 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h2><h3 id="给每次-antlr-的结果文件添加-package"><a href="#给每次-antlr-的结果文件添加-package" class="headerlink" title="给每次 antlr 的结果文件添加 package"></a>给每次 antlr 的结果文件添加 package</h3><p>　在 .g4 中使用 <code>@header{ ... }</code> 添加 </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@header</span>{</span><br><span class="line">    <span class="keyword">package</span> com.yuzhouwan.antlr;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="确定节点与子节点之间的关系"><a href="#确定节点与子节点之间的关系" class="headerlink" title="确定节点与子节点之间的关系"></a>确定节点与子节点之间的关系</h3><p>　使用 <code>if-else</code> 在 <code>exit/enter()</code> 中判别，节点与子节点之间的关系，确定是否是 operator</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">say</span><br><span class="line">    : <span class="string">'say'</span> Colon Name    #Colon</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">`benedictListener` 将会得到一个定位粒度为 Colon 的访问节点</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enter a parse tree produced by the {<span class="doctag">@code</span> Colon}</span></span><br><span class="line"><span class="comment"> * labeled alternative in {<span class="doctag">@link</span> benedictParser#say}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ctx the parse tree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enterColon</span><span class="params">(benedictParser.ColonContext ctx)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exit a parse tree produced by the {<span class="doctag">@code</span> Colon}</span></span><br><span class="line"><span class="comment"> * labeled alternative in {<span class="doctag">@link</span> benedictParser#say}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ctx the parse tree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exitColon</span><span class="params">(benedictParser.ColonContext ctx)</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://github.com/antlr/antlr4/blob/master/doc/getting-started.md">Getting Started with ANTLR v4</a></li>
<li><a href="https://www.antlr.org/api/maven-plugin/latest/examples/simple.html">ANTLR 4 Maven plugin</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://www.quora.com/Which-is-better-ANTLR-or-JavaCC-Why">Which is better, ANTLR or JavaCC? Why?</a></li>
<li><a href="https://tomassetti.me/parsing-any-language-in-java-in-5-minutes-using-antlr-for-example-python/">Parsing Any Language in Java in 5 Minutes Using ANTLR: for Example Python</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/47179842">用 Golang 和 Antlr4 实现词法解析器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28516587">Go 的 AST（抽象语法树）</a></li>
<li><a href="https://blog.gopheracademy.com/advent-2017/parsing-with-antlr4-and-go/">Parsing with ANTLR 4 and Go</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/ftomassetti/python-ast">Python parser built using ANTLR</a></li>
<li><a href="https://github.com/antlr/grammars-v4/tree/master/golang">Golang Grammar</a></li>
<li><a href="https://github.com/yuroyoro/goast-viewer">Golang AST visualizer</a></li>
<li><a href="https://github.com/dglo/java2go">Convert Java code to something like Go</a></li>
<li><strong><a href="https://github.com/apache/druid/blob/master/core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4">Expr.g4</a></strong></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Antlr</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Calcite：一款开源 SQL 解析工具</title>
    <url>/posts/201018/</url>
    <content><![CDATA[<h2 id="Apache-Calcite-是什么？"><a href="#Apache-Calcite-是什么？" class="headerlink" title="Apache Calcite 是什么？"></a>Apache Calcite 是什么？</h2><blockquote>
<p><strong><a href="https://github.com/apache/calcite">Apache Calcite</a></strong>™ is a dynamic data management framework.</p>
</blockquote>
<p><img data-src="/picture/calcite/calcite_mountain.jpg" alt="Calcite Mountain"></p>
<center>（图片来源：<a href="https://pixabay.com/photos/landscape-travertine-pamukkale-2380833/" target="_blank">Pixabay</a>™ 官网，已确认无版权）</center>






<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Catelog"><a href="#Catelog" class="headerlink" title="Catelog"></a>Catelog</h3><p>　用于定义 SQL 语义相关的元数据与命名空间</p>
<h3 id="SQL-Parser"><a href="#SQL-Parser" class="headerlink" title="SQL Parser"></a>SQL Parser</h3><p>　负责将 SQL 转化成 AST（<strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree）</p>
<h3 id="SQL-Validator"><a href="#SQL-Validator" class="headerlink" title="SQL Validator"></a>SQL Validator</h3><p>　负责通过 Catalog 对 AST 进行校证</p>
<h3 id="Query-Optimizer"><a href="#Query-Optimizer" class="headerlink" title="Query Optimizer"></a>Query Optimizer</h3><p>　负责将 AST 转化成物理执行计划、优化物理执行计划</p>
<h3 id="SQL-Generator"><a href="#SQL-Generator" class="headerlink" title="SQL Generator"></a>SQL Generator</h3><p>　负责将物理执行计划反向转化成 SQL 语句</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>支持标准 SQL 语言</li>
<li>通过适配器（<a href="https://calcite.apache.org/docs/adapter.html">Adapter</a>）可以支持连接任何数据源</li>
<li>支持丰富的关系代数（并集、交集、连接、笛卡尔积等）</li>
<li>支持对逻辑规划规则进行定制（例如 Filter 下推）</li>
<li>支持成本模型优化（<strong>CBO</strong>, <strong>C</strong>ost-<strong>B</strong>ased <strong>O</strong>ptimizer 和 <strong>RBO</strong>, <strong>R</strong>ule-<strong>B</strong>ased <strong>O</strong>ptimizer）</li>
<li>支持管理物化视图（<a href="https://calcite.apache.org/docs/materialized_views.html">Materialized view</a>）</li>
<li>支持查询流式数据</li>
<li>稳定可靠（开发迭代 10 年以上）</li>
<li>已贡献给 Apache 基金会（于 2013 年）</li>
<li>开源社区活跃（<a href="https://yuzhouwan.com/posts/5845/">Apache Druid</a>、Apache Hive、Apache Drill、<a href="https://yuzhouwan.com/posts/20644/">Apache Flink</a>、<a href="https://yuzhouwan.com/posts/45888/#Phoenix-%E5%91%BD%E4%BB%A4">Apache Phoenix</a> 等项目均在使用）</li>
</ul>
<div class="note success">Apache Calcite 借助开源的 JavaCC 完成 SQL 解析，将 SQL 语句转化为 Java 代码</div>
<div class="note success">Apache Calcite 还使用了轻量级 Janino 编译运行时 Java 代码，以便灵活地管理元数据</div>

<span id="more"></span>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="/picture/calcite/apache_calcite_architecture.jpg" alt="Apache Calcite Architecture"></p>
<center>（图片来源：<a href="https://arxiv.org/pdf/1802.10233.pdf" target="_blank">arxiv.org</a>™）</center>



<h3 id="专注的层面"><a href="#专注的层面" class="headerlink" title="专注的层面"></a>专注的层面</h3><pre class="mermaid">graph TD

query_language(fa:fa-language Query Language)
query_optimization(fa:fa-fast-forward Query Optimization)
query_execution(fa:fa-spinner Query Execution)
data_management(fa:fa-cog Data Management)
data_storage(fa:fa-database Data Storage)

query_language ==&gt; query_optimization
query_optimization ==&gt; query_execution
query_execution ==&gt; data_management
data_management ==&gt; data_storage

style data_management fill:#808080
style data_storage fill:#808080</pre>

<div class="note info">其中，数据管理和存储，交由第三方计算和存储引擎实现</div>



<h3 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h3><pre class="mermaid">graph LR

SQL[SQL]
Parser(fa:fa-align-left Parser)
AST[AST]
Validate(fa:fa-check-square-o Validate)
RelNode[RelNode]
Optimize(fa:fa-fast-forward Optimize)
Plan[Plan]
Execute(fa:fa-spinner Execute)

SQL --&gt; Parser
Parser --&gt; AST
AST --&gt; Validate
Validate --&gt; RelNode
RelNode --&gt; Optimize
Optimize --&gt; Plan
Plan --&gt; Execute

style Parser fill:#0099FF
style Validate fill:#0099FF
style Optimize fill:#0099FF
style Execute fill:#0099FF</pre>



<h3 id="RBO"><a href="#RBO" class="headerlink" title="RBO"></a>RBO</h3><h3 id="谓词下推"><a href="#谓词下推" class="headerlink" title="谓词下推"></a>谓词下推</h3><pre class="mermaid">graph BT

Set1(fa:fa-table Set1)
Set2(fa:fa-table Set2)
Join(fa:fa-compress Join)
Filter(fa:fa-filter Filter)
Set1'(fa:fa-table Set1)
Set2'(fa:fa-table Set2)
Join'(fa:fa-compress Join)
Filter'(fa:fa-filter Filter)

Set1 --&gt; Join
Set2 ==&gt; Join
Join ==&gt; Filter

Set1' --&gt; Join'
Set2' ==&gt; Filter'
Filter' ==&gt; Join'

style Filter fill:#009933
style Filter' fill:#009933</pre>

<h3 id="列裁剪"><a href="#列裁剪" class="headerlink" title="列裁剪"></a>列裁剪</h3><pre class="mermaid">graph BT

Set1(fa:fa-table Set1)
Set2(fa:fa-table Set2)
Join(fa:fa-compress Join on Set1.id == Set2.id)
Res(fa:fa-table Set1.name, Set1.age)
Set1'(fa:fa-table Set1)
Set2'(fa:fa-table Set2)
Crop'(fa:fa-cut Crop and only keep id)
Join'(fa:fa-compress Join on Set1.id == Set2.id)
Res'(fa:fa-table Set1.name, Set1.age)

Set1 --&gt; Join
Set2 ==&gt; Join
Join ==&gt; Res

Set1' --&gt; Join'
Set2' ==&gt; Crop'
Crop' ==&gt; Join'
Join' ==&gt; Res'

style Crop' fill:#009933</pre>

<h3 id="常量折叠"><a href="#常量折叠" class="headerlink" title="常量折叠"></a>常量折叠</h3><pre class="mermaid">graph BT

Set1(fa:fa-table Set1)
Set2(fa:fa-table Set2)
Join(fa:fa-compress Join)
Res(fa:fa-table Set1.name, Set1.age, 1024 + 996)
Set1'(fa:fa-table Set1)
Set2'(fa:fa-table Set2)
Join'(fa:fa-compress Join)
Res'(fa:fa-table Set1.name, Set1.age, 2020)

Set1 --&gt; Join
Set2 --&gt; Join
Join --&gt; Res

Set1' --&gt; Join'
Set2' --&gt; Join'
Join' --&gt; Res'

style Res' fill:#009933</pre>



<h3 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">查询语言</th>
<th style="text-align:center">JDBC</th>
<th style="text-align:center">SQL 解析与校验</th>
<th style="text-align:center">Relational Algebra</th>
<th style="text-align:center">Execution Engine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Apache Drill</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yuzhouwan.com/posts/5845/"><strong>Apache Druid</strong></a></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
<tr>
<td style="text-align:center"><strong>Apache Phoenix</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center"><a href="https://yuzhouwan.com/posts/45888/">Apache HBase</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Apache Solr</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native, Enumerable, <a href="https://yuzhouwan.com/posts/22654/#Lucene-1">Apache Lucene</a></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yuzhouwan.com/posts/25015/"><strong>Apache Storm</strong></a></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
<tr>
<td style="text-align:center"><strong>Apache Kylin</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center"></td>
<td style="text-align:center">Enumerable, Apache HBase</td>
</tr>
<tr>
<td style="text-align:center"><strong>MapD</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center"></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
<tr>
<td style="text-align:center"><strong>Lingual</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center"></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Cascading</td>
</tr>
<tr>
<td style="text-align:center"><strong>Apache Hive</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Apache Tez, <a href="https://yuzhouwan.com/posts/4735/">Apache Spark</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Qubole Quark</strong></td>
<td style="text-align:center">SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Apache Hive, <a href="https://yuzhouwan.com/posts/200906/">Presto</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Apache Apex</strong></td>
<td style="text-align:center">Streaming SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yuzhouwan.com/posts/20644/"><strong>Apache Flink</strong></a></td>
<td style="text-align:center">Streaming SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
<tr>
<td style="text-align:center"><strong>Apache Samza</strong></td>
<td style="text-align:center">Streaming SQL</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">Native</td>
</tr>
</tbody>
</table>
</div>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 --single-branch --branch master https://github.com/apache/calcite.git</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> calcite/example/csv</span><br><span class="line">$ ./sqlline</span><br></pre></td></tr></tbody></table></figure>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sqlline&gt; !connect jdbc:calcite:model=src/<span class="built_in">test</span>/resources/model.json admin admin</span><br></pre></td></tr></tbody></table></figure>
<h3 id="展示所有-Tables"><a href="#展示所有-Tables" class="headerlink" title="展示所有 Tables"></a>展示所有 Tables</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">0: jdbc:calcite:model=src/<span class="built_in">test</span>/resources/mode&gt; !tables</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+-----------+-------------+------------+--------------+---------+----------+------------+-----------+---------------------------+----------------+</span><br><span class="line">| TABLE_CAT | TABLE_SCHEM | TABLE_NAME |  TABLE_TYPE  | REMARKS | TYPE_CAT | TYPE_SCHEM | TYPE_NAME | SELF_REFERENCING_COL_NAME | REF_GENERATION |</span><br><span class="line">+-----------+-------------+------------+--------------+---------+----------+------------+-----------+---------------------------+----------------+</span><br><span class="line">|           | SALES       | DEPTS      | TABLE        |         |          |            |           |                           |                |</span><br><span class="line">|           | SALES       | EMPS       | TABLE        |         |          |            |           |                           |                |</span><br><span class="line">|           | SALES       | SDEPTS     | TABLE        |         |          |            |           |                           |                |</span><br><span class="line">|           | metadata    | COLUMNS    | SYSTEM TABLE |         |          |            |           |                           |                |</span><br><span class="line">|           | metadata    | TABLES     | SYSTEM TABLE |         |          |            |           |                           |                |</span><br><span class="line">+-----------+-------------+------------+--------------+---------+----------+------------+-----------+---------------------------+----------------+</span><br></pre></td></tr></tbody></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:calcite:model<span class="operator">=</span>src<span class="operator">/</span>test<span class="operator">/</span>resources<span class="operator">/</span>mode<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emps;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+-------+-------+--------+--------+---------------+-------+------+---------+---------+------------+</span><br><span class="line">| EMPNO | NAME  | DEPTNO | GENDER |     CITY      | EMPID | AGE  | SLACKER | MANAGER |  JOINEDAT  |</span><br><span class="line">+-------+-------+--------+--------+---------------+-------+------+---------+---------+------------+</span><br><span class="line">| 100   | Fred  | 10     |        |               | 30    | 25   | <span class="literal">true</span>    | <span class="literal">false</span>   | 1996-08-03 |</span><br><span class="line">| 110   | Eric  | 20     | M      | San Francisco | 3     | 80   |         | <span class="literal">false</span>   | 2001-01-01 |</span><br><span class="line">| 110   | John  | 40     | M      | Vancouver     | 2     | null | <span class="literal">false</span>   | <span class="literal">true</span>    | 2002-05-03 |</span><br><span class="line">| 120   | Wilma | 20     | F      |               | 1     | 5    |         | <span class="literal">true</span>    | 2005-09-07 |</span><br><span class="line">| 130   | Alice | 40     | F      | Vancouver     | 2     | null | <span class="literal">false</span>   | <span class="literal">true</span>    | 2007-01-01 |</span><br><span class="line">+-------+-------+--------+--------+---------------+-------+------+---------+---------+------------+</span><br><span class="line">5 rows selected (1.266 seconds)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:calcite:model<span class="operator">=</span>src<span class="operator">/</span>test<span class="operator">/</span>resources<span class="operator">/</span>mode<span class="operator">&gt;</span> <span class="keyword">SELECT</span> d.name, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">. . . . . . . . . . . . . . . . . . semicolon<span class="operator">&gt;</span> <span class="keyword">FROM</span> emps <span class="keyword">AS</span> e</span><br><span class="line">. . . . . . . . . . . . . . . . . . semicolon<span class="operator">&gt;</span> <span class="keyword">JOIN</span> depts <span class="keyword">AS</span> d <span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line">. . . . . . . . . . . . . . . . . . semicolon<span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> d.name;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+-----------+--------+</span><br><span class="line">|   NAME    | EXPR<span class="variable">$1</span> |</span><br><span class="line">+-----------+--------+</span><br><span class="line">| Sales     | 1      |</span><br><span class="line">| Marketing | 2      |</span><br><span class="line">+-----------+--------+</span><br><span class="line">2 rows selected (0.336 seconds)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:calcite:model<span class="operator">=</span>src<span class="operator">/</span>test<span class="operator">/</span>resources<span class="operator">/</span>mode<span class="operator">&gt;</span> <span class="keyword">VALUES</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">'Hello, '</span> <span class="operator">||</span> <span class="string">'world!'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| EXPR<span class="variable">$0</span> |</span><br><span class="line">+--------+</span><br><span class="line">| 13     |</span><br><span class="line">+--------+</span><br><span class="line">1 row selected (0.092 seconds)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="社区发展"><a href="#社区发展" class="headerlink" title="社区发展"></a>社区发展</h2><h3 id="Star-趋势"><a href="#Star-趋势" class="headerlink" title="Star 趋势"></a>Star 趋势</h3><p><img data-src="/picture/calcite/apache_calcite_star_history.jpg" alt="Apache Calcite Star History"></p>
<center>（图片来源：<a href="https://star-history.t9t.io/#apache/calcite&amp;apache/drill&amp;prestodb/presto&amp;prestosql/presto" target="_blank">star-history.t9t.io</a>™ 官网）</center>

<h3 id="个人贡献"><a href="#个人贡献" class="headerlink" title="个人贡献"></a>个人贡献</h3><ul>
<li><a href="https://github.com/apache/calcite/pulls?q=is%3Apr+author%3Aasdf2014">Pull Request</a></li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://calcite.apache.org/docs/">Apache Calcite</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="https://arxiv.org/pdf/1802.10233.pdf">Apache Calcite: A Foundational Framework for Optimized Query Processing Over Heterogeneous Data Sources</a></li>
<li><a href="https://www.cse.iitb.ac.in/infolab/Data/Courses/CS632/Papers/Volcano-graefe.pdf">The Volcano Optimizer Generator: Extensibility and Efficient Search</a></li>
<li><a href="https://15721.courses.cs.cmu.edu/spring2018/papers/15-optimizer1/graefe-ieee1995.pdf">The Cascades Framework for Query Optimization</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/javacc/javacc">JavaCC: The most popular parser generator for use with Java applications</a></li>
<li><a href="https://github.com/janino-compiler/janino">Janino is a super-small, super-fast Java™ compiler</a></li>
<li><a href="https://issues.apache.org/jira/projects/CALCITE">Apache Calcite Jira</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><h4 id="Apache-Calcite"><a href="#Apache-Calcite" class="headerlink" title="Apache Calcite"></a>Apache Calcite</h4><ul>
<li><a href="https://www.slideshare.net/JordanHalterman/introduction-to-apache-calcite">Introduction to Apache Calcite</a></li>
<li><a href="https://www.jianshu.com/p/2dfbd71b7f0f">Apache Calcite 简介</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/67560995">Apache Calcite 为什么能这么流行</a></li>
<li><a href="https://blog.csdn.net/QXC1281/article/details/89060701">Apache Calcite 教程 - 关系代数</a></li>
<li><a href="https://www.cnblogs.com/listenfwind/p/13192259.html">深入浅出 Calcite 与 SQL CBO（Cost-Based Optimizer）优化</a></li>
</ul>
<h4 id="JavaCC"><a href="#JavaCC" class="headerlink" title="JavaCC"></a>JavaCC</h4><ul>
<li>JavaCC、解析树和 XQuery 语法，<a href="https://www.ibm.com/developerworks/cn/xml/x-javacc/part1/index.html">第 1 部分</a> &amp; <a href="https://www.ibm.com/developerworks/cn/xml/x-javacc/part2/index.html">第 2 部分</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Apache Calcite</tag>
        <tag>JavaCC</tag>
        <tag>Janino</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Aapche Drill：一款分布式查询引擎</title>
    <url>/posts/201025/</url>
    <content><![CDATA[<h2 id="Aapche-Drill-是什么？"><a href="#Aapche-Drill-是什么？" class="headerlink" title="Aapche Drill 是什么？"></a>Aapche Drill 是什么？</h2><blockquote>
<p><strong><a href="https://github.com/apache/drill">Apache Drill</a></strong>™ is a distributed MPP query layer that supports SQL and alternative query languages against NoSQL and Hadoop data storage systems. It was inspired in part by <a href="http://research.google.com/pubs/pub36632.html">Google’s Dremel</a>.</p>
</blockquote>
<p><img data-src="/picture/drill/drill.jpg" alt="Drill"></p>
<center>（图片来源：<a href="https://www.pexels.com/zh-cn/photo/87236/" target="_blank">Pexels</a>™ 官网，已确认无版权）</center>





<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>支持自定义的嵌套数据结构</li>
<li>兼容 Hive（包括 Hive 的 UDF，且支持自定义 UDF）</li>
<li>高性能、低延迟的 SQL 查询</li>
<li>支持多数据源（插件化，包括 <a href="https://yuzhouwan.com/posts/26002/">Apache Kafka</a>、<a href="https://yuzhouwan.com/posts/45888/">Apache HBase</a>、Apache Hive、OpenTSDB、S3 <a href="https://drill.apache.org/docs/connect-a-data-source-introduction/">等</a>）</li>
</ul>
<div class="note info">UDF（User Defined Funcation）：用户定义普通函数，只作用于单行记录</div>
<div class="note info">UDAF（User Defined Aggregation Funcation）：用户定义聚合函数，只作用于多行记录</div>
<div class="note info">UDTF（User Defined Table Generating Funcation）：用户定义表生成函数，可以输入一行记录输出多行记录</div>

<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>与标准 SQL 略有不同</li>
<li>外部依赖较多（基于 <a href="https://yuzhouwan.com/posts/31915/">Apache ZooKeeper</a> 实现分布式、基于 <a href="https://yuzhouwan.com/posts/201018/">Apache Calcite</a> 实现 SQL 解析）</li>
<li>比较小众，相关资料缺乏</li>
</ul>
<span id="more"></span>
<h2 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h2><h3 id="Apache-Drill-vs-Presto"><a href="#Apache-Drill-vs-Presto" class="headerlink" title="Apache Drill vs Presto"></a>Apache Drill vs Presto</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Apache Drill</th>
<th style="text-align:center">Presto</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>针对领域</strong></td>
<td style="text-align:center">非关系型数据库</td>
<td style="text-align:center">分布式数据库</td>
</tr>
<tr>
<td style="text-align:center"><strong>企业级</strong></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
</tr>
<tr>
<td style="text-align:center"><strong>成功案例</strong></td>
<td style="text-align:center">MapR™</td>
<td style="text-align:center">Teradata™</td>
</tr>
<tr>
<td style="text-align:center"><strong>部署</strong></td>
<td style="text-align:center">较繁琐</td>
<td style="text-align:center">较快捷</td>
</tr>
</tbody>
</table>
</div>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="https://www.apache.org/dyn/closer.cgi?path=/drill/drill-1.18.0/apache-drill-1.18.0.tar.gz">下载</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://mirror.bit.edu.cn/apache/drill/drill-1.18.0/apache-drill-1.18.0.tar.gz</span><br><span class="line">$ tar zxvf apache-drill-1.18.0.tar.gz</span><br><span class="line">$ ln -s apache-drill-1.18.0 drill</span><br><span class="line">$ <span class="built_in">cd</span> drill</span><br></pre></td></tr></tbody></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/drill-embedded</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Apache Drill 1.18.0</span><br><span class="line"><span class="string">"In Drill We Trust."</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="展示所有-Tables"><a href="#展示所有-Tables" class="headerlink" title="展示所有 Tables"></a>展示所有 Tables</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">apache drill<span class="operator">&gt;</span> <span class="operator">!</span>tables</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+-----------+--------------------+----------------------+--------------+---------+----------+------------+-----------+---------------------------+----------------+</span><br><span class="line">| TABLE_CAT |    TABLE_SCHEM     |      TABLE_NAME      |  TABLE_TYPE  | REMARKS | TYPE_CAT | TYPE_SCHEM | TYPE_NAME | SELF_REFERENCING_COL_NAME | REF_GENERATION |</span><br><span class="line">+-----------+--------------------+----------------------+--------------+---------+----------+------------+-----------+---------------------------+----------------+</span><br><span class="line">| DRILL     | information_schema | CATALOGS             | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | information_schema | COLUMNS              | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | information_schema | FILES                | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | information_schema | PARTITIONS           | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | information_schema | SCHEMATA             | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | information_schema | TABLES               | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | information_schema | VIEWS                | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | boot                 | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | connections          | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | drillbits            | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | <span class="built_in">functions</span>            | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | internal_options     | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | internal_options_old | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | memory               | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | options              | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | options_old          | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | profiles             | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | profiles_json        | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | threads              | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">| DRILL     | sys                | version              | SYSTEM TABLE | null    | null     | null       | null      | null                      | null           |</span><br><span class="line">+-----------+--------------------+----------------------+--------------+---------+----------+------------+-----------+---------------------------+----------------+</span><br></pre></td></tr></tbody></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">apache drill<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> cp.`employee.json` limit <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+-------------+-----------------+------------+-----------+-------------+--------------------+----------+---------------+------------+-----------------------+---------+---------------+-----------------+----------------+--------+-------------------+</span><br><span class="line">| employee_id |    full_name    | first_name | last_name | position_id |   position_title   | store_id | department_id | birth_date |       hire_date       | salary  | supervisor_id | education_level | marital_status | gender |  management_role  |</span><br><span class="line">+-------------+-----------------+------------+-----------+-------------+--------------------+----------+---------------+------------+-----------------------+---------+---------------+-----------------+----------------+--------+-------------------+</span><br><span class="line">| 1           | Sheri Nowmer    | Sheri      | Nowmer    | 1           | President          | 0        | 1             | 1961-08-26 | 1994-12-01 00:00:00.0 | 80000.0 | 0             | Graduate Degree | S              | F      | Senior Management |</span><br><span class="line">| 2           | Derrick Whelply | Derrick    | Whelply   | 2           | VP Country Manager | 0        | 1             | 1915-07-03 | 1994-12-01 00:00:00.0 | 40000.0 | 1             | Graduate Degree | M              | M      | Senior Management |</span><br><span class="line">+-------------+-----------------+------------+-----------+-------------+--------------------+----------+---------------+------------+-----------------------+---------+---------------+-----------------+----------------+--------+-------------------+</span><br><span class="line">2 rows selected (0.281 seconds)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apache drill&gt; !quit</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="默认时区是-UTC"><a href="#默认时区是-UTC" class="headerlink" title="默认时区是 UTC"></a><a href="https://drill.apache.org/docs/data-type-conversion/#time-zone-limitation">默认时区是 UTC</a></h3><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> to_timestamp(CONCAT(`<span class="type">timestamp</span>`, <span class="string">' +0800'</span>), <span class="string">'YYYY-MM-dd HH:mm:ss.SSS Z'</span>) <span class="keyword">AS</span> tm <span class="keyword">FROM</span> `yuzhouwan`.`blog`</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://drill.apache.org/docs/drill-introduction/">Apache Drill Introduction</a></li>
<li><a href="https://drill.apache.org/docs/drill-query-execution/">Apache Drill Query Execution</a></li>
<li><a href="https://drill.apache.org/docs/reserved-keywords/">Apache Drill Keywords</a></li>
<li><a href="https://www.bookstack.cn/read/apache-drill-cn-1.4/README.md">Apache Drill 1.4 参考手册</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Apache Calcite</tag>
        <tag>SQL</tag>
        <tag>Aapche Drill</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache OpenWhisk：一款高性能的开源 Serverless 云平台</title>
    <url>/posts/201008/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="42fdb1ba84d21f8d439d45d1370ac6b3dbbb5c694bad0fcefa59a5832ed5d397"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Serverless</category>
      </categories>
      <tags>
        <tag>Apache OpenWhisk</tag>
        <tag>Serverless</tag>
        <tag>FaaS</tag>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Storm 与 Kafka 的整合应用</title>
    <url>/posts/25015/</url>
    <content><![CDATA[<p><br></p>
<p>　Apache Storm 和 Apache Kafka 相关知识，可以分别参考《<a href="https://yuzhouwan.com/posts/13977/">Apache Storm 简介</a>》和《<a href="https://yuzhouwan.com/posts/26002/">Apache Kafka 分布式消息队列框架</a>》</p>
<h2 id="搭建-Storm-和-Kafka-的基础环境"><a href="#搭建-Storm-和-Kafka-的基础环境" class="headerlink" title="搭建 Storm 和 Kafka 的基础环境"></a>搭建 Storm 和 Kafka 的基础环境</h2><h3 id="搭建-Storm-Kafka-集群"><a href="#搭建-Storm-Kafka-集群" class="headerlink" title="搭建 Storm / Kafka 集群"></a>搭建 <a href="https://yuzhouwan.com/posts/39683/#Storm">Storm</a> / <a href="https://yuzhouwan.com/posts/39683#Kafka">Kafka</a> 集群</h3><p>　具体安装步骤，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/39683/#Storm">Apache Eagle</a>》</p>
<h3 id="启动-Kafka"><a href="#启动-Kafka" class="headerlink" title="启动 Kafka"></a>启动 Kafka</h3><ul>
<li>Start the zookeeper and kafka server</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line">$ bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Create a topic</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic my-replicated-topic</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>List topics</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h2 id="发送-Message-往-Kafka"><a href="#发送-Message-往-Kafka" class="headerlink" title="发送 Message 往 Kafka"></a>发送 Message 往 Kafka</h2><h3 id="编写-SendMessageToKafka"><a href="#编写-SendMessageToKafka" class="headerlink" title="编写 SendMessageToKafka"></a>编写 SendMessageToKafka</h3><ul>
<li>根据 kafka 中 cluster 的属性，定义好 Producer</li>
<li>利用 <code>Producer.send(KeyedMessage)</code> 方法，将 <code>topic - message</code> 发送给 Kafka</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageToKafka</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Producer&lt;String, String&gt; producer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"zk.connect"</span>, <span class="string">"192.168.1.201:2181"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.1.201:9092"</span>);</span><br><span class="line">    ProducerConfig config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">    producer = <span class="keyword">new</span> Producer&lt;String, String&gt;(config);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... arg)</span> </span>{</span><br><span class="line">    init();</span><br><span class="line">    KeyedMessage&lt;String, String&gt; data = <span class="keyword">new</span> KeyedMessage&lt;String, String&gt;(<span class="string">"my-replicated-topic"</span>, <span class="string">"asdf2015"</span>);</span><br><span class="line">    producer.send(data);</span><br><span class="line">    producer.close();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Run the main method</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">com.yuzhouwan.hadoop.customer_behaviour_analyse.kafka.SendMessageToKafka</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Check out the message that tht broker catched</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</span><br></pre></td></tr></tbody></table></figure>
<p>　Then, u will see that the <code>asdf2015</code> message was sent sucessfully.</p>
<h2 id="从-Kafka-中获得-Message"><a href="#从-Kafka-中获得-Message" class="headerlink" title="从 Kafka 中获得 Message"></a>从 Kafka 中获得 Message</h2><h3 id="编写-TestMessageScheme"><a href="#编写-TestMessageScheme" class="headerlink" title="编写 TestMessageScheme"></a>编写 TestMessageScheme</h3><ul>
<li>在 <code>deserialize(byte[])</code> 方法中将 message 显示</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMessageScheme</span> <span class="keyword">implements</span> <span class="title">Scheme</span> </span>{</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] ser)</span> </span>{</span><br><span class="line"></span><br><span class="line">    String msg;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      msg = <span class="keyword">new</span> String(ser, <span class="string">"UTF-8"</span>);</span><br><span class="line">      System.out.println(<span class="string">"$$$$$$$$$$$$$$"</span> + msg);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Values(msg);</span><br><span class="line">    } <span class="keyword">catch</span> (UnsupportedEncodingException e) {</span><br><span class="line">      LOGGER.error(<span class="string">"Can not parse the provide message from bytes."</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编写-ShowKafkaMessageBolt"><a href="#编写-ShowKafkaMessageBolt" class="headerlink" title="编写 ShowKafkaMessageBolt"></a>编写 ShowKafkaMessageBolt</h3><ul>
<li>在 <code>prepare(Map, TopologyContext, OutputCollector)</code> 中得到 <code>OutputCollector</code>（emit 方法完成 message 的发射）、<code>Context</code>（提供 <code>name/id</code> 之类的属性）</li>
<li>在 <code>execute(Tuple)</code> 中完成 message 处理工作</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowKafkaMessageBolt</span> <span class="keyword">implements</span> <span class="title">IRichBolt</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> OutputCollector collector;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings("rawtypes")</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map stormConf, TopologyContext context, OutputCollector collector)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.collector = collector;</span><br><span class="line">    <span class="keyword">this</span>.name = context.getThisComponentId();</span><br><span class="line">    <span class="keyword">this</span>.id = context.getThisTaskId();</span><br><span class="line">    System.out.println(<span class="string">"Bolt: "</span> + name + <span class="string">" and Id: "</span> + id + <span class="string">" prepared ##################"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input != <span class="keyword">null</span>) {</span><br><span class="line">      String message = input.getString(<span class="number">0</span>);</span><br><span class="line">      collector.emit(<span class="keyword">new</span> Values(message));</span><br><span class="line">      System.out.println(message);</span><br><span class="line">    }</span><br><span class="line">    collector.ack(input);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编写-BehaviourAnalyse"><a href="#编写-BehaviourAnalyse" class="headerlink" title="编写 BehaviourAnalyse"></a>编写 BehaviourAnalyse</h3><ul>
<li>基于 <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a> 属性 定义 Broker</li>
<li>整合 broker、topic、zkRoot、spoutId 和 TestMessageScheme 为 SpoutConfig，完成 KafkaSpout 的实例化</li>
<li>利用 LocalCluster 完成 topology 的提交</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BehaviourAnalyse</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">    BrokerHosts brokerHosts = <span class="keyword">new</span> ZkHosts(<span class="string">"192.168.1.201:2181"</span>);</span><br><span class="line">    String topic = <span class="string">"my-replicated-topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * We can get the param from the 'config/zookeeper.properties' path.&lt;BR&gt;</span></span><br><span class="line"><span class="comment">      * # the directory where the snapshot is stored.&lt;BR&gt;</span></span><br><span class="line"><span class="comment">      * dataDir=/tmp/zookeeper</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    String zkRoot = <span class="string">"/tmp/zookeeper"</span>;</span><br><span class="line">    String spoutId = <span class="string">"myKafka"</span>;</span><br><span class="line"></span><br><span class="line">    SpoutConfig spoutConfig = <span class="keyword">new</span> SpoutConfig(brokerHosts, topic, zkRoot,</span><br><span class="line">                                              spoutId);</span><br><span class="line">    spoutConfig.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> TestMessageScheme());</span><br><span class="line"></span><br><span class="line">    TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">    KafkaSpout kafkaSpout = <span class="keyword">new</span> KafkaSpout(spoutConfig);</span><br><span class="line">    builder.setSpout(<span class="string">"kafka-spout"</span>, kafkaSpout);</span><br><span class="line"></span><br><span class="line">    builder.setBolt(<span class="string">"show-message-bolt"</span>, <span class="keyword">new</span> ShowKafkaMessageBolt())</span><br><span class="line">      .shuffleGrouping(<span class="string">"kafka-spout"</span>);</span><br><span class="line"></span><br><span class="line">    Config conf = <span class="keyword">new</span> Config();</span><br><span class="line">    conf.setDebug(<span class="keyword">true</span>);</span><br><span class="line">    conf.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">    cluster.submitTopology(<span class="string">"Show-Message-From-Kafka"</span>, conf, builder.createTopology());</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>run the main method</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">com.yuzhouwan.hadoop.customer_behaviour_analyse.BehaviourAnalyse</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>start a kafka´s producer</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-replicated-topic</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Input a sentence ending, like:</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">This is a message from kafka.</span><br></pre></td></tr></tbody></table></figure>
<p>　You will see the information which shows in console sucessfully :-)</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li>Get the value of <code>metadata.broker.list</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim config/producer.properties</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>查看 Storm 与其他框架的兼容版本</li>
</ul>
<p>　<a href="http://mvnrepository.com/artifact/org.apache.storm">http://mvnrepository.com/artifact/org.apache.storm</a></p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Storm</tag>
        <tag>Apache Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Storm 简介</title>
    <url>/posts/13977/</url>
    <content><![CDATA[<h2 id="Storm-是什么？"><a href="#Storm-是什么？" class="headerlink" title="Storm 是什么？"></a>Storm 是什么？</h2><p>　<strong>Apache Storm</strong>™ is a free and open source distributed realtime computation system. Storm makes it easy to reliably process unbounded streams of data, doing for realtime processing what Hadoop did for batch processing.</p>
<h2 id="为什么要有-Storm？"><a href="#为什么要有-Storm？" class="headerlink" title="为什么要有 Storm？"></a>为什么要有 Storm？</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>　具备经济、快速、可靠、易扩充、数据共享、设备共享、通讯方便、灵活等分布式所具备的特性</p>
<h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p>　计算在多线程、进程 和 服务器之间并行进行</p>
<h3 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h3><p>　能管理工作进程 和 节点的故障<br>　消息处理，能得到一次完成处理的保证</p>
<h3 id="编程模型简单"><a href="#编程模型简单" class="headerlink" title="编程模型简单"></a>编程模型简单</h3><p>　降低了并行批处理复杂性</p>
<h3 id="高效实时"><a href="#高效实时" class="headerlink" title="高效实时"></a>高效实时</h3><p>　利用 ZeroMQ 保证了消息的快速处理</p>
<h3 id="支持热部署"><a href="#支持热部署" class="headerlink" title="支持热部署"></a>支持热部署</h3><p>　加速应用开发</p>
<span id="more"></span>
<h2 id="Storm-工作机制"><a href="#Storm-工作机制" class="headerlink" title="Storm 工作机制"></a>Storm 工作机制</h2><h3 id="一些主要概念"><a href="#一些主要概念" class="headerlink" title="一些主要概念"></a>一些主要概念</h3><ul>
<li>Topology（计算拓扑）</li>
<li>Stream（消息流）</li>
<li>Spout（消息源）</li>
<li>Bolt（消息处理者）</li>
<li>grouping（数据的分发方式）</li>
<li>Topology（拓扑）</li>
<li>Worker（工作进程）</li>
<li>Task（执行具体逻辑的任务）</li>
<li>Executor（执行 Task 的线程）</li>
<li>Configuration（配置）</li>
</ul>
<div class="note info">To be continued...</div>


<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Storm</tag>
        <tag>Apache Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Benedict Jin&#39;s Blog</title>
    <url>/posts/18517/</url>
    <content><![CDATA[<h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>　<strong>Welcome to My Blog!</strong></p>
<h2 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h2><p>　吾生有涯而学无涯，以有涯而逐无涯（有点断章取义，不过追寻知识的热情是必要的）</p>
<h2 id="大事件纪实"><a href="#大事件纪实" class="headerlink" title="大事件纪实"></a>大事件纪实</h2><div class="table-container">
<table>
<thead>
<tr>
<th>标题</th>
<th>内容</th>
<th>日期</th>
</tr>
</thead>
<tbody>
<tr>
<td>混沌初开</td>
<td>建站第一天</td>
<td>2014-11-01</td>
</tr>
<tr>
<td>模糊的记忆</td>
<td>Hexo 框架 / next 主题 / 七牛图床 / Gulp 压缩 / 静态资源 CDN / 支持 MathJax</td>
<td>2014~2016</td>
</tr>
<tr>
<td>多说关闭</td>
<td>评论系统切换为 Disqus</td>
<td>2017-04-10</td>
</tr>
<tr>
<td>Order by Update</td>
<td>文章以<strong>最后更新时间</strong>倒排展示（避免养成隔一段时间水一篇的坏习惯）</td>
<td>2017-04-22</td>
</tr>
<tr>
<td>Aliyun 备案</td>
<td>苏 ICP</td>
<td>2017-05-25</td>
</tr>
<tr>
<td>全站 HTTPS</td>
<td>TrustAsia 域名证书</td>
<td>2017-10-10</td>
</tr>
<tr>
<td>Coding.net</td>
<td>静态页面从 github.io 切换为 coding.net（香港服务器）</td>
<td>2017-11-15</td>
</tr>
<tr>
<td>不蒜子 502</td>
<td>页面统计切换为 Lean Cloud，之前的 PV / UV 统计无奈清零</td>
<td>2017-11-19</td>
</tr>
<tr>
<td>DDoS 攻击解除</td>
<td>回归不蒜子</td>
<td>2017-11-20</td>
</tr>
<tr>
<td>Gitment</td>
<td>延迟加载 Gitment</td>
<td>2018-05-29</td>
</tr>
<tr>
<td>回归 Github Page</td>
<td>Github Page 开始支持 HTTPS</td>
<td>2019-04-20</td>
</tr>
<tr>
<td>全站 CDN</td>
<td>阿里云 DCDN</td>
<td>2019-04-21</td>
</tr>
<tr>
<td>简繁切换</td>
<td>支持简体与繁体切换</td>
<td>2019-04-27</td>
</tr>
<tr>
<td>支持 Gitalk</td>
<td>Gitment 验证存在跨域问题，而 Gitalk 可以无缝迁移</td>
<td>2019-05-01</td>
</tr>
<tr>
<td>支持 DaoVoice</td>
<td>可以匿名留言，在线沟通</td>
<td>2019-05-02</td>
</tr>
<tr>
<td>暂闭 DaoVoice</td>
<td>出于其服务稳定性的考量，暂时关闭</td>
<td>2019-05-11</td>
</tr>
<tr>
<td>设计 Logo</td>
<td>新 Logo 寓意着浩瀚宇宙中的一处安心的港湾</td>
<td>2019-05-11</td>
</tr>
<tr>
<td>源站迁移</td>
<td>全站迁移至阿里云 OSS，代替 Github Page 作为源站</td>
<td>2020–01-01</td>
</tr>
<tr>
<td>镜像网站</td>
<td>搭建镜像网站 <a href="https://yuzhouwan.github.io/">yuzhouwan.github.io</a></td>
<td>2020-02-09</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<h2 id="代码库"><a href="#代码库" class="headerlink" title="代码库"></a>代码库</h2><ul>
<li>Advance <a href="https://yuzhouwan.com/posts/2254/">Maven</a> Skill</li>
<li><a href="https://yuzhouwan.com/tags/">BigData</a><ul>
<li><a href="https://yuzhouwan.com/posts/60504/">Hadoop</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/25015/">Storm</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/4735/">Spark</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/45888/">HBase</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/22654/">ElasticSearch</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/5845/">Druid</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/26002/">Kafka</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/22654/#%e6%95%b4%e5%90%88%e5%bc%80%e5%8f%91">Flume</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/2129/">Redis</a> <strong>/</strong> <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a></li>
</ul>
</li>
<li>Hack technology<ul>
<li><a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/algorithms">Algorithm</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/algorithms/leetcode">Leetcode</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/codegen">Code Generate</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/effective">Effective Code</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/algorithms/thread">Multi Threads</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/lambda">Lambda</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/snmp">SNMP</a></li>
</ul>
</li>
<li>Languages<ul>
<li><a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker">Java</a> for Most Logic <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/scala/com/yuzhouwan/hacker">Scala</a> Feature <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/groovy/com/yuzhouwan/hacker">Groovy</a> for DSL <strong>/</strong> <a href="https://yuzhouwan.com/posts/43687/">Python</a> for <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/yuzhouwan-hacker-python">SQL Parser</a> &amp; <a href="https://yuzhouwan.com/posts/42737/">AI</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/src/main/resources/shell/gc_monitor2.sh">Shell</a> for <a href="https://yuzhouwan.com/posts/27328/">JVM</a> Monitor</li>
</ul>
</li>
<li><a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-site">WebSite</a><ul>
<li><a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-site/yuzhouwan-site-service/src/test/java/com/yuzhouwan/site/service">RPC</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-site/yuzhouwan-site-service/src/main/java/com/yuzhouwan/site/service/nio">NIO</a> <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-site/yuzhouwan-site-service/src/main/resources">Spring</a> stuff <strong>/</strong> <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-site/yuzhouwan-site-service/src/main/webapp">Swagger</a> for Doc</li>
</ul>
</li>
<li>A lot of Commons <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-common/src/main/java/com/yuzhouwan/common/util">Utils</a></li>
</ul>
<h2 id="技术交流群"><a href="#技术交流群" class="headerlink" title="技术交流群"></a>技术交流群</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="BigData-生态圈"><a href="#BigData-生态圈" class="headerlink" title="BigData 生态圈"></a><strong><a href="https://yuzhouwan.com/categories/大数据/">BigData 生态圈</a></strong></h3><p>　讨论大数据生态圈的各种领域，包括：</p>
<ul>
<li>Spark / Storm / Hadoop / Flink / Heron / Cassandra / Docker 主流框架</li>
<li>Paxos / Raft / Gossip / Consistent Hashing / Chubby / ZooKeeper 分布式算法与架构</li>
<li>Java / Python / Golang / Scala / Clojure / Ruby 各大流行语言</li>
<li>PostgreSQL / HBase / Hive / ElasticSearch / Redis / Druid 数据持久化策略</li>
<li>Data Mining / Machine Learning / Deep Learning / AI 数据分析领域 等等</li>
</ul>
<h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a><strong><a href="https://yuzhouwan.com/posts/42737/">人工智能</a></strong></h3><p>　研究 人工智能 相关领域，欢迎加入，互相学习，共同进步<br>　讨论包括，统计学、NLP、Data Mining、Deep Learning、Machine Learning、人工智能 等相关领域</p>
<p>　从 深蓝到 AlaphZero，人工智能的智力水平、普适性、学习能力 正在以爆炸式地速度快速发展；<br>　从 棋类到 医学，人工智能开始在各类应用领域，都在大展身手；<br>　从 CPU / GPU 到 TPU，人工智能的计算能力正向着无法穷举的极限不断逼近…</p>
<p>　本群持续沉淀的一篇人工智能的文章：<a href="https://yuzhouwan.com/posts/42737/">https://yuzhouwan.com/posts/42737/</a></p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a><strong><a href="https://yuzhouwan.com/posts/666/">算法</a></strong></h3><p>　讨论算法的各种领域：</p>
<ul>
<li>从底层常用 Algorithm，到分布式算法、框架，再到高可用系统架构</li>
<li>从原始的模式匹配，到机器学习、深度学习、神经网络，再到人工智能</li>
<li>从网络路由算法，到数据库 B+Tree、香农信息论，再到 Linux 内核算法</li>
</ul>
<p>　汲取世界的方方面面，不断充实技术树，踏踏实实地点亮每一片枝叶  </p>
<p>　本群长期进行 <a href="https://yuzhouwan.com/posts/666/">“LeetCode 组队刷题活动”</a></p>
<h2 id="搜索引擎收录"><a href="#搜索引擎收录" class="headerlink" title="搜索引擎收录"></a>搜索引擎收录</h2><p>　Just <a href="https://www.google.com/search?q=%E5%AE%87%E5%AE%99%E6%B9%BE">Google</a> it :D</p>
<p><img data-src="/picture/blog/google_yuzhouwan.png" alt="Google Yuzhouwan.com"></p>
]]></content>
      <categories>
        <category>关于本站</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>DIRT</title>
    <url>/posts/47609/</url>
    <content><![CDATA[<h2 id="DIRT-是什么？"><a href="#DIRT-是什么？" class="headerlink" title="DIRT 是什么？"></a>DIRT 是什么？</h2><p>　DIRT：数据密集型实时（<strong>D</strong>ata-<strong>I</strong>ntensive <strong>R</strong>eal-<strong>T</strong>ime）</p>
<h2 id="为什么适用于-Node-js-开发？"><a href="#为什么适用于-Node-js-开发？" class="headerlink" title="为什么适用于 Node.js 开发？"></a>为什么适用于 Node.js 开发？</h2><h3 id="轻量"><a href="#轻量" class="headerlink" title="轻量"></a>轻量</h3><p>　因为 <a href="https://yuzhouwan.com/posts/23363/">Node.js</a> 自身在 I/O 上非常轻量，它善于将数据从一个管道混排 或 代理到另一个管道上，这能在处理大量请求时持有很多开放的连接，并且只占用一小部分内存（如同浏览器一样，保证了响应能力）</p>
<h3 id="Web-发展形势"><a href="#Web-发展形势" class="headerlink" title="Web 发展形势"></a>Web 发展形势</h3><p>　不管是用实时组件增强已有程序，还是打造全新的程序，Web 都在朝着响应性和协作型环境逐渐进发<br>而这种新型的 Web 应用程序需要一个能够实时相应大量并发请求的平台来支撑它们（除此之外，还有 I/O 负载较重的程序也可以用到）</p>
<span id="more"></span>
<h3 id="Node-js-作为-JavaScript-程序的平台"><a href="#Node-js-作为-JavaScript-程序的平台" class="headerlink" title="Node.js 作为 JavaScript 程序的平台"></a>Node.js 作为 JavaScript 程序的平台</h3><ul>
<li>Timer API (for example, setTimeout)</li>
<li>Console API (for example, console.log)</li>
<li>Network and File I/O modules (HTTP, TLS, HTTPS, filesystem (POSIX), Datagram (UDP), and NET (TCP))</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle 实战</title>
    <url>/posts/190816/</url>
    <content><![CDATA[<h2 id="Gradle-是什么？"><a href="#Gradle-是什么？" class="headerlink" title="Gradle 是什么？"></a>Gradle 是什么？</h2><p>　Gradle™ 是一个基于 Apache Ant 和 Apache <a href="https://yuzhouwan.com/posts/2254/">Maven</a> 概念的项目自动化建构工具。它使用一种基于 Groovy 的特定领域语言来声明项目设置，而不是传统的 XML。当前其支持的语言限于 <a href="https://yuzhouwan.com/posts/27328/">Java</a>、<a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/groovy/com/yuzhouwan/hacker/dsl">Groovy</a> 和 <a href="https://yuzhouwan.com/posts/18651/">Scala</a>，计划未来将支持更多的语言。  — <a href="https://zh.wikipedia.org/wiki/Gradle">wikipedia.org</a></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>DSL 声明项目的配置，更加直观</li>
<li>细粒度的传递依赖管理</li>
<li>增量编译</li>
<li>高效的内存执行</li>
</ul>
<span id="more"></span>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装-Gradle"><a href="#安装-Gradle" class="headerlink" title="安装 Gradle"></a>安装 Gradle</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>　在 Gradle 的<a href="https://gradle.org/releases/">下载页面</a>，下载 gradle-5.4.1-all.zip 文件，解压至 <code>D:\apps\gradle</code>，并添加环境变量 <code>PATH=D:\apps\gradle\gradle-5.4.1\bin</code></p>
<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install gradle</span><br><span class="line">$ brew upgrade gradle</span><br></pre></td></tr></tbody></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">$ gradle -v</span><br><span class="line">  ------------------------------------------------------------</span><br><span class="line">  Gradle 5.4.1</span><br><span class="line">  ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">  Build time:   2019-04-26 08:14:42 UTC</span><br><span class="line">  Revision:     261d171646b36a6a28d5a19a69676cd098a4c19d</span><br><span class="line"></span><br><span class="line">  Kotlin:       1.3.21</span><br><span class="line">  Groovy:       2.5.4</span><br><span class="line">  Ant:          Apache Ant(TM) version 1.9.13 compiled on July 10 2018</span><br><span class="line">  JVM:          11.0.4 (Oracle Corporation 11.0.4+10-LTS)</span><br><span class="line">  OS:           Mac OS X 10.14.6 x86_64</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Gradle-代理设置"><a href="#Gradle-代理设置" class="headerlink" title="Gradle 代理设置"></a>Gradle 代理设置</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gradle xxx -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者修改 gradle.properties 配置文件</span></span><br><span class="line">$ vim gradle.properties</span><br><span class="line">  systemProp.http.proxyHost=192.168.1.101</span><br><span class="line">  systemProp.http.proxyPort=8080</span><br><span class="line">  systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</span><br><span class="line">  systemProp.https.proxyHost=192.168.1.101</span><br><span class="line">  systemProp.https.proxyPort=8080</span><br><span class="line">  systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果在 Kafka 源码目录下修改的 gradle.properties 无法生效，可以直接拷贝到 ~/.gradle 目录下</div>



<h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line">$ gradle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 `-x test` 参数，可跳过单元测试</span></span><br><span class="line">$ gradle -x <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随后，生成可以用 Intellij Idea 打开的工程</span></span><br><span class="line">$ gradle idea</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">如果 Gradle 的配置文件里面，没有设置 idea 插件，导致项目模块无法被识别。则需要删除 .idea 文件夹，并以 build.gradle 打开为项目，即可</div>





<h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="不同的项目使用的-Gradle-版本不一致"><a href="#不同的项目使用的-Gradle-版本不一致" class="headerlink" title="不同的项目使用的 Gradle 版本不一致"></a>不同的项目使用的 Gradle 版本不一致</h3><p>　可以使用 <code>./gradlew</code> 包装器，就可以避免使用本地安装的 Gradle。Gradlew 会根据项目各自指定的 Gradle 版本进行下载，确保和项目要求的编译环境一致。常用命令如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./gradlew build</span><br></pre></td></tr></tbody></table></figure>
<h3 id="运行单元测试时，报错-No-Class-Found"><a href="#运行单元测试时，报错-No-Class-Found" class="headerlink" title="运行单元测试时，报错 No Class Found"></a>运行单元测试时，报错 No Class Found</h3><p>　修改 <code>Build and run using</code> 和 <code>Run tests using</code> 两个选项为 <code>Gradle</code>（默认为 <code>IntelliJ IDEA</code>）</p>
<p><img data-src="/picture/gradle/gradle_idea_config_for_testcase.png" alt="Configurations of Gradle in Intellij Idea for Testcases"></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>™ 的截图）</center>



<h3 id="并发执行任务"><a href="#并发执行任务" class="headerlink" title="并发执行任务"></a>并发执行任务</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">$ vim gradle.properties</span><br><span class="line">  org.gradle.parallel=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行任务时指定参数</span></span><br><span class="line">$ ./gradlew &lt;task&gt; --parallel</span><br></pre></td></tr></tbody></table></figure>
<h3 id="无法正常识别-module-下的代码"><a href="#无法正常识别-module-下的代码" class="headerlink" title="无法正常识别 module 下的代码"></a><a href="https://docs.gradle.org/current/userguide/idea_plugin.html">无法正常识别 module 下的代码</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 清理所有的 IDEA 配置文件</span></span><br><span class="line">$ ./gradlew cleanIdea</span><br><span class="line"><span class="comment"># 生成 IDEA 配置文件</span></span><br><span class="line">$ ./gradlew idea</span><br></pre></td></tr></tbody></table></figure>
<h3 id="加载本地-jar"><a href="#加载本地-jar" class="headerlink" title="加载本地 jar"></a>加载本地 jar</h3><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 加载单个 jar 包</span></span><br><span class="line">dependencies { compile files(<span class="string">'libs/yuzhouwan.jar'</span>) }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载多个 jar 包</span></span><br><span class="line">dependencies { compile fileTree(<span class="attr">dir:</span> <span class="string">'libs'</span>, <span class="attr">include:</span> [<span class="string">'*.jar'</span>]) }</span><br><span class="line">dependencies { compile fileTree(<span class="attr">dir:</span> <span class="string">'libs'</span>, <span class="attr">include:</span> [<span class="string">'yuzhouwan.jar'</span>]) }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://docs.gradle.org/current/userguide/userguide.html">Gradle User Manual</a></li>
<li><a href="https://www.gitbook.com/book/dongchuan/gradle-user-guide-/details">Gradle User Guide 中文版</a></li>
<li><a href="https://docs.gradle.org/3.3/userguide/gradle_daemon.html#when_should_i_not_use_the_gradle_daemon">When should I not use the Gradle Daemon?</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://gradle.org/maven-vs-gradle/">Gradle vs Maven Comparison</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/gradle/gradle">Gradle</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Apache Kafka</tag>
        <tag>Gradle</tag>
        <tag>Ant</tag>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>Groovy</tag>
        <tag>Scala</tag>
        <tag>Windows</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop RPC 源码领略</title>
    <url>/posts/60504/</url>
    <content><![CDATA[<h2 id="什么是-RPC？"><a href="#什么是-RPC？" class="headerlink" title="什么是 RPC？"></a>什么是 RPC？</h2><p>　In distributed computing, a <strong>remote procedure call</strong> (<strong>RPC</strong>) is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote. This is a form of client–server interaction (caller is client, executor is server), typically implemented via a request–response message-passing system.</p>
<h2 id="为什么要有-RPC？"><a href="#为什么要有-RPC？" class="headerlink" title="为什么要有 RPC？"></a>为什么要有 RPC？</h2><h3 id="地域性"><a href="#地域性" class="headerlink" title="地域性"></a>地域性</h3><p>　当主机不可达时，通过远程调用可以使得终端操作目标机器成为可能</p>
<h3 id="含糖性"><a href="#含糖性" class="headerlink" title="含糖性"></a>含糖性</h3><p>　底层的网络通信细节封装入 API，方便网络分布式系统的开发</p>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>　在 Hadoop 分布式系统中，上层的分布式子系统（MapReduce、YARN、HDFS …）能够共用这个网络通信模块</p>
<h2 id="Hadoop-的-RPC-调用链"><a href="#Hadoop-的-RPC-调用链" class="headerlink" title="Hadoop 的 RPC 调用链"></a>Hadoop 的 RPC 调用链</h2><p>　这里我们以 “从 HDFS 下载一个文件” 为例</p>
<h3 id="启动-Hadoop-集群的-DFS、YARN"><a href="#启动-Hadoop-集群的-DFS、YARN" class="headerlink" title="启动 Hadoop 集群的 DFS、YARN"></a>启动 Hadoop 集群的 DFS、YARN</h3><p>   <img data-src="/picture/hadoop/hadoop_hdfs.png" alt="hdfs"><br>   <span id="more"></span></p>
<h3 id="可以使用-Explorer-的-50070-端口，查看-NameNode"><a href="#可以使用-Explorer-的-50070-端口，查看-NameNode" class="headerlink" title="可以使用 Explorer 的 50070 端口，查看 NameNode"></a>可以使用 Explorer 的 50070 端口，查看 NameNode</h3><p>   <img data-src="/picture/hadoop/hadoop_host_yuzhouwan.png" alt="host - yuzhouwan"></p>
<h3 id="通过-FileSystem-的-get-uri-conf-user-初始化-FS"><a href="#通过-FileSystem-的-get-uri-conf-user-初始化-FS" class="headerlink" title="通过 FileSystem 的 get(uri, conf, user) 初始化 FS"></a>通过 FileSystem 的 get(uri, conf, user) 初始化 FS</h3><p>   <img data-src="/picture/hadoop/hadoop_file_system.png" alt="FileSystem"></p>
<h3 id="抽象类-FileSystem-拥有-13-个子类"><a href="#抽象类-FileSystem-拥有-13-个子类" class="headerlink" title="抽象类 FileSystem 拥有 13 个子类"></a>抽象类 FileSystem 拥有 13 个子类</h3><p>   <img data-src="/picture/hadoop/hadoop_file_systems.png" alt="FileSystems"></p>
<h3 id="加载配置文件，并给相应属性赋值"><a href="#加载配置文件，并给相应属性赋值" class="headerlink" title="加载配置文件，并给相应属性赋值"></a>加载配置文件，并给相应属性赋值</h3><p>   <img data-src="/picture/hadoop/hadoop_file_system_get_uri_conf_user.png" alt="FileSystem.get(uri,conf,user)"></p>
<h3 id="反射-org-apache-hadoop-hdfs-DistributedFileSystem"><a href="#反射-org-apache-hadoop-hdfs-DistributedFileSystem" class="headerlink" title="反射 org.apache.hadoop.hdfs.DistributedFileSystem"></a>反射 org.apache.hadoop.hdfs.DistributedFileSystem</h3><p>   <img data-src="/picture/hadoop/hadoop_reflection_utils_new_instance_dfs.png" alt="ReflectionUtils.newInstance--DFS"></p>
<h3 id="调用-initialize-uri-conf-初始化-DFS"><a href="#调用-initialize-uri-conf-初始化-DFS" class="headerlink" title="调用 initialize(uri, conf) 初始化 DFS"></a>调用 initialize(uri, conf) 初始化 DFS</h3><p>   <img data-src="/picture/hadoop/hadoop_dfs_initialize.png" alt="DFS.initialize"></p>
<h3 id="获得-DFSClient-代理"><a href="#获得-DFSClient-代理" class="headerlink" title="获得 DFSClient 代理"></a>获得 DFSClient 代理</h3><p>   <img data-src="/picture/hadoop/hadoop_dfs_client.png" alt="DFSClient(nameNodeUri,rpcNamenode,conf,stats)"></p>
<h3 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h3><p>   <img data-src="/picture/hadoop/hadoop_proxy.png" alt="Proxy"></p>
<h3 id="让-DFSClient-持有-uri、conf、statistics"><a href="#让-DFSClient-持有-uri、conf、statistics" class="headerlink" title="让 DFSClient 持有 uri、conf、statistics"></a>让 DFSClient 持有 uri、conf、statistics</h3><p>  <img data-src="/picture/hadoop/hadoop_dfs_client_.png" alt="DFSClient"></p>
<h3 id="解析-uri"><a href="#解析-uri" class="headerlink" title="解析 uri"></a>解析 uri</h3><p>   <img data-src="/picture/hadoop/hadoop_uri_create.png" alt="URI.create"></p>
<h3 id="根据用户组信息中的简单用户名，获取工作路径"><a href="#根据用户组信息中的简单用户名，获取工作路径" class="headerlink" title="根据用户组信息中的简单用户名，获取工作路径"></a>根据用户组信息中的简单用户名，获取工作路径</h3><p>   <img data-src="/picture/hadoop/hadoop_dfs_get_home_directory.png" alt="DFS.getHomeDirectory"></p>
<h3 id="FileSystem-完成初始化"><a href="#FileSystem-完成初始化" class="headerlink" title="FileSystem 完成初始化"></a>FileSystem 完成初始化</h3><p>   <img data-src="/picture/hadoop/hadoop_dfs_is_ok.png" alt="DFS-is-ok!!!"></p>
<h3 id="利用-FS-open-path-打开读取流"><a href="#利用-FS-open-path-打开读取流" class="headerlink" title="利用 FS.open(path) 打开读取流"></a>利用 FS.open(path) 打开读取流</h3><p>   <img data-src="/picture/hadoop/hadoop_distributed_file_system.png" alt="DistributedFileSystem"></p>
<h3 id="解析-path"><a href="#解析-path" class="headerlink" title="解析 path"></a>解析 path</h3><p>   <img data-src="/picture/hadoop/hadoop_path.png" alt="Path"></p>
<h3 id="装饰-open-方法"><a href="#装饰-open-方法" class="headerlink" title="装饰 open() 方法"></a>装饰 open() 方法</h3><p>   <img data-src="/picture/hadoop/hadoop_fs_data_input_stream.png" alt="FSDataInputStream--open(path)"></p>
<h3 id="FileSystemLinkResolver-回调函数"><a href="#FileSystemLinkResolver-回调函数" class="headerlink" title="FileSystemLinkResolver 回调函数"></a>FileSystemLinkResolver 回调函数</h3><p>   <img data-src="/picture/hadoop/hadoop_dfs_open.png" alt="DFS.open(f,bufferSize)"></p>
<h3 id="HdfsDataInputStream-读取流"><a href="#HdfsDataInputStream-读取流" class="headerlink" title="HdfsDataInputStream 读取流"></a>HdfsDataInputStream 读取流</h3><p>   <img data-src="/picture/hadoop/hadoop_hdfs_data_input_stream.png" alt="HdfsDataInputStream"></p>
<h3 id="FileOutputStream-写入流"><a href="#FileOutputStream-写入流" class="headerlink" title="FileOutputStream 写入流"></a>FileOutputStream 写入流</h3><p>   <img data-src="/picture/hadoop/hadoop_file_output_stream.png" alt="FileOutputStream"></p>
<h3 id="缓冲池"><a href="#缓冲池" class="headerlink" title="缓冲池"></a>缓冲池</h3><p>   <img data-src="/picture/hadoop/hadoop_buff_size.png" alt="buffSize"></p>
<h3 id="IOUtils-封装的拷贝方法"><a href="#IOUtils-封装的拷贝方法" class="headerlink" title="IOUtils 封装的拷贝方法"></a>IOUtils 封装的拷贝方法</h3><p>   <img data-src="/picture/hadoop/hadoop_ioutils.png" alt="IOUtiles.copyBytes(in,out,buffSize)"></p>
<h3 id="Download-over"><a href="#Download-over" class="headerlink" title="Download over!"></a>Download over!</h3><p>   <img data-src="/picture/hadoop/hadoop_rpc_success.png" alt="RPC-success"></p>
<h2 id="自己实现一套-RPC-系统"><a href="#自己实现一套-RPC-系统" class="headerlink" title="自己实现一套 RPC 系统"></a>自己实现一套 RPC 系统</h2><p>Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-site/yuzhouwan-site-service/src/main/java/com/yuzhouwan/site/service/rpc">here</a>.</p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Hadoop</tag>
        <tag>HDFS</tag>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm 实战</title>
    <url>/posts/200926/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f796428bbe8e47998d3bb7ee0c79a2d9ab6fa9a113146a6b191c46a3d70f554d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>HDFS</tag>
        <tag>Helm</tag>
        <tag>Apache Druid</tag>
        <tag>PrestoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty：从入门到实践</title>
    <url>/posts/200316/</url>
    <content><![CDATA[<h2 id="Netty-是什么？"><a href="#Netty-是什么？" class="headerlink" title="Netty 是什么？"></a>Netty 是什么？</h2><blockquote>
<p><strong><a href="https://netty.io/">Netty</a></strong>™ is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>　代表一个到实体（硬件设备、文件、网络 Socket 等）的开放连接，如读操作或写操作</p>
<h3 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h3><p>　代表一个在处理完某个事件之后，被调用的方法</p>
<h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p>　代表一个异步操作结果的占位符</p>
<h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>　代表一个可能会触发相应动作的事件连接被激活、用户事件等</p>
<h3 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h3><p>　代表一个响应特定事件而被执行的回调</p>
<span id="more"></span>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>统一的 API</li>
<li>简单易用</li>
<li>高性能</li>
<li>健壮</li>
<li>安全</li>
<li>庞大的社区支持</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img data-src="/picture/netty/netty_components.png" alt=""></p>
<center>（图片来源：<a href="https://netty.io/" target="_blank">Netty</a>™ 官网）</center>





<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="String-与-ByteBuf-的互相转换"><a href="#String-与-ByteBuf-的互相转换" class="headerlink" title="String 与 ByteBuf 的互相转换"></a>String 与 ByteBuf 的互相转换</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String s = <span class="string">"yuzhouwan.com"</span>;</span><br><span class="line"><span class="keyword">final</span> ByteBuf buf = Unpooled.wrappedBuffer(s.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">buf.readBytes(bytes);</span><br><span class="line">Assert.assertEquals(s, <span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8));</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提高-LEAK-检测的级别"><a href="#提高-LEAK-检测的级别" class="headerlink" title="提高 LEAK 检测的级别"></a>提高 LEAK 检测的级别</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-Dio.netty.leakDetection.level=PARANOID</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.PARANOID)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="技术内幕"><a href="#技术内幕" class="headerlink" title="技术内幕"></a>技术内幕</h2><h3 id="Netty-和-TCP-的关系"><a href="#Netty-和-TCP-的关系" class="headerlink" title="Netty 和 TCP 的关系"></a>Netty 和 TCP 的关系</h3><p>　本质上，Netty 仍然会调用 <a href="https://yuzhouwan.com/posts/190413/">Java</a> 的 Socket 库（如常见的 IO、NIO 和 NIO2 等），而 Java 自身也是对操作系统 Socket 接口的封装。到了操作系统层面，Socket 仍然会走 TCP 协议。所以，可以将 Netty 理解为，是对 TCP 协议的高度封装</p>
<h3 id="IdleStateHandler-和-ReadTimeoutHandler-WriteTimeoutHandler-的异同"><a href="#IdleStateHandler-和-ReadTimeoutHandler-WriteTimeoutHandler-的异同" class="headerlink" title="IdleStateHandler 和 ReadTimeoutHandler / WriteTimeoutHandler 的异同"></a>IdleStateHandler 和 ReadTimeoutHandler / WriteTimeoutHandler 的异同</h3><p>　三者均是基于心跳机制来完成 socket 超时断开的，前者的功能实际上包含了后两者，<strong>IdleStateHandler</strong> 可以同时对 read / write 请求进行超时控制</p>
<h3 id="DefaultFileRegion-和-HttpChunkedInput-的区别"><a href="#DefaultFileRegion-和-HttpChunkedInput-的区别" class="headerlink" title="DefaultFileRegion 和 HttpChunkedInput 的区别"></a>DefaultFileRegion 和 HttpChunkedInput 的区别</h3><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul>
<li>二者都是应用于大文件传输的</li>
<li>而 <strong>HttpChunkedInput</strong> 可应用于 SSL（<strong>S</strong>ecure <strong>S</strong>ockets <strong>L</strong>ayer）协议</li>
</ul>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a><a href="https://github.com/netty/netty/tree/4.1/example/src/main/java/io/netty/example/http/file">用法</a></h4><ul>
<li><strong>DefaultFileRegion</strong> 需要在 <code>ChannelHandlerContext</code> 写入时指定文件的字节长度</li>
<li><strong>DefaultFileRegion</strong> 完成文件传输之后，需要再发送一个 <code>LastHttpContent.EMPTY_LAST_CONTENT</code> 标识位，以通知客户端断开连接</li>
<li><strong>HttpChunkedInput</strong> 只需要指定 chunk 块的大小</li>
<li><strong>HttpChunkedInput</strong> 需要在 <code>ChannelHandlerContext</code> 的 pipeline 中增加 <code>ChunkedWriteHandler</code></li>
</ul>
<h3 id="EpollEventLoopGroup-和-NioEventLoopGroup-的区别"><a href="#EpollEventLoopGroup-和-NioEventLoopGroup-的区别" class="headerlink" title="EpollEventLoopGroup 和 NioEventLoopGroup 的区别"></a>EpollEventLoopGroup 和 NioEventLoopGroup 的区别</h3><p>　Java 中的 NIO 会根据操作系统不同，选用不同的 Selector 实现，例如 <a href="https://yuzhouwan.com/posts/15691/">Linux</a> 对应 <code>EPollSelectorProvider</code>（epoll 模式）和 <code>PollSelectorProvider</code>（selector 模式）、<a href="https://yuzhouwan.com/posts/190101/">MacOS</a> 对应 <code>KQueueSelectorProvider</code>、Windows 对应 <code>WindowsSelectorProvider</code>。由此可见，<strong>EpollEventLoopGroup</strong> 只能被应用于 Linux 环境中。其主要优势是：</p>
<ul>
<li>使用的是边缘触发（<strong>ET</strong>，<strong>e</strong>dge-<strong>t</strong>riggered），而非使用水位触发（<strong>LT</strong>，<strong>l</strong>evel-<strong>t</strong>riggered）</li>
<li>提供了更多的配置参数，如 <code>TCP_CORK</code>、<code>SO_REUSEADDR</code> 等</li>
<li>通过 JNI 调用 C 代码，可以减少 GC 压力</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://netty.io/wiki/native-transports.html">Using the Linux native transport</a></li>
<li><a href="https://www.zhihu.com/question/20122137/answer/14049112">epoll 或者 kqueue 的原理是什么？</a></li>
</ul>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="Connection-reset-by-peer"><a href="#Connection-reset-by-peer" class="headerlink" title="Connection reset by peer"></a>Connection reset by peer</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">io.netty.channel.unix.Errors$NativeIoException: readAddress(..) failed: Connection reset by peer</span><br></pre></td></tr></tbody></table></figure>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>　客户端和服务器未统一使用 TCP 短连接或者长连接导致的</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><h5 id="短连接-vs-长连接"><a href="#短连接-vs-长连接" class="headerlink" title="短连接 vs 长连接"></a>短连接 vs 长连接</h5><ul>
<li><p>短连接</p>
<p>每次请求都需要先建立 TCP 连接（三次握手），再执行业务逻辑，最后关闭连接（四次挥手）</p>
<ul>
<li>优点<ul>
<li>实现简单</li>
</ul>
</li>
<li>缺点<ul>
<li>性能较差，大量资源消耗在了 TCP 层面的交互上</li>
<li>出现大量 <code>TIME_WAIT</code> 状态的 TCP 连接。如果未设置 <code>SO_REUSEADDR</code> 参数，则可能出现端口被占满的问题。因为连接被主动关闭后，TCP 连接的状态仍然会是 <code>TIME_WAIT</code>，只有等两个 MSL 后（<strong>M</strong>aximum <strong>S</strong>egment <strong>L</strong>ifetime，报文最大生存时间，<a href="https://tools.ietf.org/rfc/rfc793.txt">RFC 793</a> 规范中 MSL 取值为 2 分钟），才会回到 CLOSED 状态</li>
</ul>
</li>
</ul>
</li>
<li><p>长连接</p>
<p>连接建立完，不释放连接</p>
<ul>
<li>优点<ul>
<li>性能较高，不需要重复建立或关闭 TCP 连接</li>
<li>不会出现 <code>CLOSE_WAIT</code> 和 <code>TIME_WAIT</code> 的问题</li>
</ul>
</li>
<li>缺点<ul>
<li>实现复杂，需要使用连接池来维护长连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ netstat -ant</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://javadoc.io/static/io.netty/netty-all/4.1.49.Final/io/netty/util/ReferenceCountUtil.html">ReferenceCountUtil</a></li>
<li><a href="https://netty.io/wiki/reference-counted-objects.html">Reference counted objects</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li>《<a href="https://book.douban.com/subject/27038538/">Netty 实战</a>》</li>
<li>《<a href="https://book.douban.com/subject/30381214/">Netty 进阶之路：跟着案例学 Netty</a>》</li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://www.jianshu.com/p/7290fec6ce38">Google Protobuf 与 Netty 结合</a></li>
<li><a href="https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ">How do SO_REUSEADDR and SO_REUSEPORT differ?</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/netty/netty/issues/2182">Fix a bug where HttpObjectAggregator doesn’t always produce FullHttpMessage</a></li>
<li><a href="https://github.com/apache/shardingsphere/blob/3c82fb8c9e158028ed76d12b24e6c6413a3c03ea/sharding-proxy-postgresql/src/main/java/org/apache/shardingsphere/shardingproxy/frontend/postgresql/PostgreSQLFrontendHandler.java#L69">PostgreSQLFrontendHandler - channelWritabilityChanged</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx：一款高性能的反向代理服务器</title>
    <url>/posts/200321/</url>
    <content><![CDATA[<h2 id="Nginx-是什么？"><a href="#Nginx-是什么？" class="headerlink" title="Nginx 是什么？"></a>Nginx 是什么？</h2><blockquote>
<p><strong><a href="http://nginx.org/">Nginx</a></strong>™ [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server</p>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>　在 Nginx <a href="https://nginx.org/download/">Archive</a> 下载页面，下载 <a href="https://nginx.org/download/nginx-1.13.12.tar.gz">nginx-1.13.12.tar.gz</a> 安装包</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum -y install openssl openssl-devel</span><br><span class="line">$ yum -y install pcre-devel</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tar zxvf nginx-1.13.12.tar.gz</span><br><span class="line"><span class="comment"># 必须要跳转到 nginx 安装目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.13.12</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf</span><br><span class="line">$ make -j4 &amp;&amp; make -j4 install</span><br></pre></td></tr></tbody></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/</span><br><span class="line">$ sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/nginx.conf</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ps -ef | grep nginx</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root     107034      1  0 Oct31 ?        00:00:00 nginx: master process sbin/nginx</span><br><span class="line">nobody   107036 107034  0 Oct31 ?        00:00:00 nginx: worker process</span><br><span class="line">nobody   107266 107265  0 Oct31 ?        00:00:00 tsar --check --apache --cpu --mem --load --io --traffic --tcp --partition --nginx --swap</span><br><span class="line">root     107270  97588  0 Oct31 pts/1    00:00:00 grep nginx</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sbin/nginx -s stop</span><br></pre></td></tr></tbody></table></figure>
<h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">35em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.org/"</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Commercial support is available at</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.com/"</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim nginx.conf</span><br></pre></td></tr></tbody></table></figure>
<h3 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sbin/nginx -s reload</span><br></pre></td></tr></tbody></table></figure>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看流量详情</span></span><br><span class="line">$ tail -f logs/access.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看异常日志</span></span><br><span class="line">$ tail -f logs/error.log</span><br></pre></td></tr></tbody></table></figure>
<h2 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h2><h3 id="Upstream-模块"><a href="#Upstream-模块" class="headerlink" title="Upstream 模块"></a>Upstream 模块</h3><p>　通过 <code>upstream</code> 模块，可以将源地址（当前集群）和镜像地址（目标集群）分组</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">upstream curr {</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server 192.168.0.102:8080;</span><br><span class="line">    keepalive 64;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">upstream dest {</span><br><span class="line">    server 192.168.0.103:8080;</span><br><span class="line">    server 192.168.0.104:8080;</span><br><span class="line">    keepalive 64;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Server-模块"><a href="#Server-模块" class="headerlink" title="Server 模块"></a>Server 模块</h3><p>　如下定义了当前 Nginx 进程（<code>localhost</code>）监听的端口（<code>80</code>）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen         80;</span><br><span class="line">    server_name    localhost;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note warning">注意观察 logs/error.log 日志，检查是否出现端口冲突的日志，以调整这里面的端口号</div>



<h3 id="Location-模块"><a href="#Location-模块" class="headerlink" title="Location 模块"></a>Location 模块</h3><p>　<code>server</code> 模块下的 <code>location</code> 模块，可以定义流量转发的规则，<code>location /</code> 会接受所有 Nginx 进来的流量，而 <code>mirror /mirror;</code> 会将流量转发到镜像地址，而 <code>location /mirror</code> 则定义了转发的规则</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">location / {</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    mirror /mirror;</span><br><span class="line">    mirror_request_body on;</span><br><span class="line">    proxy_pass http://curr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">location /mirror {</span><br><span class="line">    internal;</span><br><span class="line">    proxy_pass http://dest<span class="variable">$request_uri</span>;</span><br><span class="line">    proxy_set_header X-Original-URI <span class="variable">$request_uri</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><h4 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#user              nginx;</span></span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format          main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                              <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                              <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log          logs/access.log  main;</span><br><span class="line">    sendfile            on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"></span><br><span class="line">    upstream curr {</span><br><span class="line">        server localhost:8080;</span><br><span class="line">        keepalive 64;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen         80;</span><br><span class="line">        server_name    localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log    logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            mirror_request_body on;</span><br><span class="line">            proxy_pass http://curr;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        error_page     500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="集群间转发"><a href="#集群间转发" class="headerlink" title="集群间转发"></a>集群间转发</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#user              nginx;</span></span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format          main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                              <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                              <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log          logs/access.log  main;</span><br><span class="line">    sendfile            on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"></span><br><span class="line">    upstream curr {</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        server 192.168.0.102:8080;</span><br><span class="line">        keepalive 64;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    upstream dest {</span><br><span class="line">        server 192.168.0.103:8080;</span><br><span class="line">        server 192.168.0.104:8080;</span><br><span class="line">        keepalive 64;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen         80;</span><br><span class="line">        server_name    localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log    logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            mirror /mirror;</span><br><span class="line">            mirror_request_body on;</span><br><span class="line">            proxy_pass http://curr;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /mirror {</span><br><span class="line">            internal;</span><br><span class="line">            proxy_pass http://dest<span class="variable">$request_uri</span>;</span><br><span class="line">            proxy_set_header X-Original-URI <span class="variable">$request_uri</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        error_page     500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="轮询策略"><a href="#轮询策略" class="headerlink" title="轮询策略"></a>轮询策略</h2><h3 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h3><p>　按时间顺序逐一将请求发送到不同的服务器，并且服务器故障后，会被自动剔除</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">upstream yuzhouwan {</span><br><span class="line">  server 192.168.0.101:80 max_fails=3 fail_timeout=3s weight=9;</span><br><span class="line">  server 192.168.0.102:80 max_fails=3 fail_timeout=3s weight=9;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">Nginx 默认会采用 RR（round-robin）简单轮询策略</div>



<h3 id="balance"><a href="#balance" class="headerlink" title="balance"></a>balance</h3><p>　支持指定轮询的几率，参数 <code>weight</code> 的数值和访问几率成正比，常用于集群中服务器资源不均的场景</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">upstream yuzhouwan {</span><br><span class="line">  server 192.168.0.101:80 weight=6;</span><br><span class="line">  server 192.168.0.102:80 weight=1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>　按访问 ip 的 hash 结果将请求发送到不同的服务器，这样每个访客固定访问一个后端服务器。可以在 <a href="https://yuzhouwan.com/posts/48905/">Session</a> 有状态情况下，避免请求被转发到不同的服务器后，需要重复登录的问题</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">upstream yuzhouwan {</span><br><span class="line">  ip_hash;</span><br><span class="line">  server 192.168.0.101:80;</span><br><span class="line">  server 192.168.0.102:80;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="fair"><a href="#fair" class="headerlink" title="fair"></a><a href="https://github.com/gnosek/nginx-upstream-fair">fair</a></h3><p>　按服务器的响应时间来分配请求，响应时间短的优先分配</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">upstream yuzhouwan {</span><br><span class="line">  fair;</span><br><span class="line">  server 192.168.0.101:80;</span><br><span class="line">  server 192.168.0.102:80;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a><a href="https://github.com/evanmiller/nginx_upstream_hash">url_hash</a></h3><p>　按访问 url 的 hash 结果来分配请求，可以充分发挥服务器上缓存的作用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">upstream yuzhouwan {</span><br><span class="line">  <span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">  hash_method crc32;</span><br><span class="line">  server 192.168.0.101:80;</span><br><span class="line">  server 192.168.0.102:80;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="client-intended-to-send-too-large-body"><a href="#client-intended-to-send-too-large-body" class="headerlink" title="client intended to send too large body"></a>client intended to send too large body</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>　Nginx 默认不允许发送超过 1MB 的请求体，由 <code>client_max_body_size</code> 参数控制</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim nginx.conf</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">http {</span><br><span class="line">  client_max_body_size 10M;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sbin/nginx -s reload</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html">补充</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">默认值</th>
<th style="text-align:center">作用域</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>chunked_transfer_encoding</code></td>
<td style="text-align:center">是否开启 HTTP/1.1 下的 chunked 编码</td>
<td style="text-align:center">on</td>
<td style="text-align:center">http, server, location</td>
</tr>
<tr>
<td style="text-align:center"><code>client_header_buffer_size</code></td>
<td style="text-align:center">请求头的大小限制</td>
<td style="text-align:center">1k</td>
<td style="text-align:center">http, server</td>
</tr>
<tr>
<td style="text-align:center"><code>client_body_timeout</code></td>
<td style="text-align:center">读取请求体的超时限制</td>
<td style="text-align:center">60s</td>
<td style="text-align:center">http, server, location</td>
</tr>
</tbody>
</table>
</div>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 模块</title>
    <url>/posts/23363/</url>
    <content><![CDATA[<h2 id="Node-js-是什么？"><a href="#Node-js-是什么？" class="headerlink" title="Node.js 是什么？"></a>Node.js 是什么？</h2><blockquote>
<p><a href="https://nodejs.org/en/">Node.js</a>® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p>
</blockquote>
<h2 id="为什么要有-Node-模块？"><a href="#为什么要有-Node-模块？" class="headerlink" title="为什么要有 Node 模块？"></a>为什么要有 Node 模块？</h2><p>　模块，是 Node 让代码易于重用的一种组织和包装方式</p>
<span id="more"></span>
<h2 id="模块创建流程"><a href="#模块创建流程" class="headerlink" title="模块创建流程"></a>模块创建流程</h2><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">exports</span>.printA = A;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./module_'</span>);</span><br><span class="line">a.printA();</span><br></pre></td></tr></tbody></table></figure>
<h3 id="模块暴露构造函数"><a href="#模块暴露构造函数" class="headerlink" title="模块暴露构造函数"></a>模块暴露构造函数</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>{</span><br><span class="line">    <span class="built_in">this</span>.input = input;</span><br><span class="line">}</span><br><span class="line">B.prototype.printB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.input);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">exports</span> = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> B = <span class="built_in">require</span>(<span class="string">'./module_'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B(<span class="string">'asdf'</span>);</span><br><span class="line">b.printB();</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>exports</p>
<p>只是对 module.exports 的一个全局引用，最初被定义为一个可以添加属性的空对象</p>
</li>
<li><p>exports.printA</p>
<p>是 module.exports.printA 的简写</p>
</li>
<li><p>exports = B</p>
<p>将会打破 module.exports 和 exports 之间的引用关系</p>
</li>
<li><p>module.exports = exports</p>
<p>可以修复链接</p>
</li>
</ul>
<h2 id="Monkey-Patching"><a href="#Monkey-Patching" class="headerlink" title="Monkey Patching"></a>Monkey Patching</h2><p>　Node 将模块作为对象缓存起来。第一个文件会将模块返回的数据存到程序的内存中，第二个文件就不用再去访问和计算模块的源文件了。并且，第二次引入有机会修改缓存的数据</p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Module</tag>
      </tags>
  </entry>
  <entry>
    <title>Qcon 2015 见闻之一：猿题库</title>
    <url>/posts/17444/</url>
    <content><![CDATA[<h2 id="什么是-‘猿题库’"><a href="#什么是-‘猿题库’" class="headerlink" title="什么是 ‘猿题库’ ?"></a>什么是 ‘猿题库’ ?</h2><p>　初高中刷题利器 - - <a href="http://yuantiku.com/">猿题库 官网</a></p>
<p>　猿：猿到人的进化 - - <a href="http://qconbeijing.com/">QCon</a></p>
<h2 id="在线教育领域应用-ML"><a href="#在线教育领域应用-ML" class="headerlink" title="在线教育领域应用 ML"></a>在线教育领域应用 <a href="https://yuzhouwan.com/posts/4735/">ML</a></h2><h3 id="小猿搜题"><a href="#小猿搜题" class="headerlink" title="小猿搜题"></a>小猿搜题</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Photo（手机横屏采集题目）-&gt; Prepare -&gt; Split -&gt; CNN识别 -&gt; NLP纠错 -&gt; 搜索 -&gt; 返回题目</span><br><span class="line">                      -&gt; 插图匹配 --------------------------------------&gt;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>Photo</p>
<p>内容多样，模糊图（30%），公式（50%）</p>
</li>
<li><p>Prepare</p>
<p>横屏（转向），黑底白字</p>
</li>
<li><p>Split</p>
<p>公式分词（根号）</p>
</li>
<li><p><a href="https://yuzhouwan.com/posts/42737">CNN</a> 识别</p>
<p>卷积神经网络（Model）、标记数据、自动生成、DL（SGD -&gt; 高斯牛顿）</p>
</li>
<li><p>NLP 纠错</p>
<p>语言模型（e.g, ‘回边形’ -&gt; ‘四边形’）</p>
</li>
<li><p>搜索</p>
<p>分词、inverted-index、排序、Learning to Rank、GBRT</p>
</li>
<li><p>插图匹配</p>
<p>SIFT、高命中</p>
</li>
</ul>
<span id="more"></span>
<h3 id="学生能力预测"><a href="#学生能力预测" class="headerlink" title="学生能力预测"></a>学生能力预测</h3><ul>
<li><p>项目反应理论</p>
<p>IRT -&gt; FTRL</p>
</li>
<li><p>特征</p>
<p>用户（学校 + 地区 + 目标考试）、题目（知识点 + 关键字）、时序（距离目标考试时间）</p>
</li>
</ul>
<h3 id="猿辅导老师推荐"><a href="#猿辅导老师推荐" class="headerlink" title="猿辅导老师推荐"></a>猿辅导老师推荐</h3><ul>
<li><p>推荐系统</p>
<p>冷启动、Item-base</p>
</li>
<li><p>ML</p>
<p>logistic factorization machine、E&amp;E（挖掘潜力）</p>
</li>
</ul>
<h2 id="未来走向"><a href="#未来走向" class="headerlink" title="未来走向"></a>未来走向</h2><ul>
<li><p>知识图谱</p>
<p>学生成长之路：题目 + 学生 = 提升后的学生（可量化）</p>
</li>
<li><p>手写识别</p>
<p>手写搜题 + 解答题 + 自动判卷</p>
</li>
<li><p>高考机器</p>
<p>机器自动出题、做题</p>
</li>
<li><p>智能芯片</p>
<p>极短的时间内，将十几年需要学习的知识学习完</p>
</li>
</ul>
<p><strong>最后感谢：猿题库 研究部总监 — <a href="http://2015.qconbeijing.com/speakers/201685">邓澍军</a> 的精彩演讲！</strong></p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>见闻</category>
      </categories>
      <tags>
        <tag>Qcon</tag>
        <tag>猿题库</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SSO</title>
    <url>/posts/5517/</url>
    <content><![CDATA[<h2 id="SSO-是什么？"><a href="#SSO-是什么？" class="headerlink" title="SSO 是什么？"></a>SSO 是什么？</h2><p>　SSO（<strong>S</strong>ingle <strong>S</strong>ign-<strong>o</strong>n），即单点登录，指在一个多系统共存的环境下，用户在一处登录后，就不用在其他系统中重新登录，也就是说用户的一次登录能得到其他所有系统的信任</p>
<h2 id="为什么要有-SSO？"><a href="#为什么要有-SSO？" class="headerlink" title="为什么要有 SSO？"></a>为什么要有 SSO？</h2><p>　尤其，大型网站背后是成百上千的子系统，用户一次操作或交易可能涉及到几十个子系统的协作<br>　如果每次子系统都需要用户认证，不仅用户会疯掉，各子系统也会为这种重复认证的逻辑搞疯掉</p>
<span id="more"></span>
<h2 id="SSO-框架"><a href="#SSO-框架" class="headerlink" title="SSO 框架"></a>SSO 框架</h2><h3 id="CAS（Central-Authentication-Server）"><a href="#CAS（Central-Authentication-Server）" class="headerlink" title="CAS（Central Authentication Server）"></a>CAS（<strong>C</strong>entral <strong>A</strong>uthentication <strong>S</strong>erver）</h3><p>　是 Yale 大学发起的一个开源项目，据统计，大概每 10 个采用开源构建 Web SSO 的 Java 项目，就有 8 个使用 CAS</p>
<h3 id="Passport-认证服务"><a href="#Passport-认证服务" class="headerlink" title="Passport 认证服务"></a>Passport 认证服务</h3><p>　ASP.NET 基于 Form 的认证方法</p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>SSO</tag>
        <tag>Session</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala 实战</title>
    <url>/posts/18651/</url>
    <content><![CDATA[<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>) span (_ &lt; <span class="number">3</span>)       <span class="comment">// (List(1), List(9, 2, 4, 5))  碰到不符合就结束</span></span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>) partition (_ &lt; <span class="number">3</span>)  <span class="comment">// (List(1, 2), List(9, 4, 5))  扫描所有</span></span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>) splitAt <span class="number">2</span>          <span class="comment">// (List(1, 9), List(2, 4, 5))  以下标为分割点</span></span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>) groupBy (<span class="number">5</span> &lt; _)    <span class="comment">// Map(false -&gt; List(1, 2, 4, 5), true -&gt; List(9))  分割成 Map 对象，以 Boolean 类型为 Key</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><h4 id="grouped"><a href="#grouped" class="headerlink" title="grouped"></a>grouped</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.{<span class="type">AbstractIterator</span>, mutable}</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.{<span class="type">SparkConf</span>, <span class="type">SparkContext</span>}</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">BigquerySparkSession</span>._</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line"><span class="keyword">val</span> builder = <span class="type">SparkSession</span>.builder().config(conf).enableHiveSupport()</span><br><span class="line"><span class="keyword">val</span> spark = builder.getOrCreateBigquerySparkSession()</span><br><span class="line"><span class="keyword">val</span> df = spark.sql(<span class="string">"use db; select * from table"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataset = df.rdd.mapPartitions(iter =&gt; {</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将每个 partition 中的多行数据，以 100 为长度作为一组，进行一次批处理</span></span><br><span class="line">  iter.grouped(<span class="number">100</span>)</span><br><span class="line">    .flatMap(rows =&gt; {</span><br><span class="line">      <span class="keyword">val</span> records = <span class="keyword">new</span> mutable.<span class="type">MutableList</span>[<span class="type">String</span>]()</span><br><span class="line">      rows.foreach(row =&gt; records.add(<span class="type">JSON</span>.toJSONString(row, <span class="literal">false</span>)))</span><br><span class="line">      records</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> filteredEmptyLine = dataset</span><br><span class="line">  .filter(_ != <span class="literal">null</span>)</span><br><span class="line">  .map(<span class="type">JSON</span>.toJSONString(_, <span class="literal">false</span>))</span><br><span class="line">  .filter(_.trim.length != <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">scala&gt; <span class="class"><span class="keyword">object</span> <span class="title">Types</span> <span class="keyword">extends</span> <span class="title">Enumeration</span> </span>{</span><br><span class="line">     |   <span class="class"><span class="keyword">type</span> <span class="title">Types</span> </span>= <span class="type">Value</span></span><br><span class="line">     |   <span class="keyword">val</span> <span class="type">ZERO</span>, <span class="type">ONE</span>, <span class="type">TWO</span> = <span class="type">Value</span></span><br><span class="line">     |</span><br><span class="line">     |   <span class="function"><span class="keyword">def</span> <span class="title">toType</span></span>(types: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">Types</span>] = {</span><br><span class="line">     |     <span class="comment">// Types.values.filter(_.toString.trim.toUpperCase.equals(types.trim.</span></span><br><span class="line">toUpperCase)).headOption</span><br><span class="line">     |     <span class="type">Types</span>.values.find(_.toString.trim.toUpperCase.equals(types.trim.toUpp</span><br><span class="line">erCase))</span><br><span class="line">     |   }</span><br><span class="line">     | }</span><br><span class="line">defined <span class="class"><span class="keyword">object</span> <span class="title">Types</span></span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Types</span>.toType(<span class="string">"Zero"</span>)</span><br><span class="line">res6: <span class="type">Option</span>[<span class="type">Types</span>.<span class="type">Types</span>] = <span class="type">Some</span>(<span class="type">ZERO</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Types</span>.toType(<span class="string">"ONE"</span>)</span><br><span class="line">res7: <span class="type">Option</span>[<span class="type">Types</span>.<span class="type">Types</span>] = <span class="type">Some</span>(<span class="type">ONE</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Types</span>.toType(<span class="string">"two"</span>)</span><br><span class="line">res8: <span class="type">Option</span>[<span class="type">Types</span>.<span class="type">Types</span>] = <span class="type">Some</span>(<span class="type">TWO</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Types</span>.toType(<span class="string">"three"</span>)</span><br><span class="line">res9: <span class="type">Option</span>[<span class="type">Types</span>.<span class="type">Types</span>] = <span class="type">None</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Types</span>.toType(<span class="string">"THREE"</span>)</span><br><span class="line">res10: <span class="type">Option</span>[<span class="type">Types</span>.<span class="type">Types</span>] = <span class="type">None</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Case-class"><a href="#Case-class" class="headerlink" title="Case class"></a>Case class</h3><h4 id="和-class-的-8-个不同之处"><a href="#和-class-的-8-个不同之处" class="headerlink" title="和 class 的 8 个不同之处"></a>和 class 的 8 个不同之处</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> bj = <span class="type">Person</span>(<span class="string">"Benedict Jin"</span>, <span class="number">18</span>)</span><br><span class="line">bj: <span class="type">Person</span> = <span class="type">Person</span>(<span class="type">Benedict</span> <span class="type">Jin</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数的访问权限都是 public</span></span><br><span class="line">scala&gt; bj.name</span><br><span class="line">res0: <span class="type">String</span> = <span class="type">Benedict</span> <span class="type">Jin</span></span><br><span class="line"></span><br><span class="line">scala&gt; bj.age</span><br><span class="line">res1: <span class="type">Integer</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更加简洁的 toString 打印</span></span><br><span class="line">scala&gt; bj.toString</span><br><span class="line">res2: <span class="type">String</span> = <span class="type">Person</span>(<span class="type">Benedict</span> <span class="type">Jin</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认实现了 hashCode 和 equals 方法</span></span><br><span class="line">scala&gt; bj.hashCode</span><br><span class="line">res3: <span class="type">Int</span> = <span class="number">1059149039</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Person</span>(<span class="string">"Benedict Jin"</span>, <span class="number">18</span>).hashCode</span><br><span class="line">res4: <span class="type">Int</span> = <span class="number">1059149039</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Person</span>(<span class="string">"Benedict Jin"</span>, <span class="number">18</span>) == bj</span><br><span class="line">res5: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认实现了 java.io.Serializable 接口，支持序列化</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> java.io._</span><br><span class="line"><span class="keyword">import</span> java.io._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> bos = <span class="keyword">new</span> <span class="type">ByteArrayOutputStream</span></span><br><span class="line">bos: java.io.<span class="type">ByteArrayOutputStream</span> =</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(bos)</span><br><span class="line">oos: java.io.<span class="type">ObjectOutputStream</span> = java.io.<span class="type">ObjectOutputStream</span>@<span class="number">62</span>ddd21b</span><br><span class="line"></span><br><span class="line">scala&gt; oos.writeObject(bj)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> obj = <span class="keyword">new</span> <span class="type">ObjectInputStream</span>(<span class="keyword">new</span> <span class="type">ByteArrayInputStream</span>(bos.toByteArray)</span><br><span class="line">).readObject()</span><br><span class="line">obj: <span class="type">Object</span> = <span class="type">Person</span>(<span class="type">Benedict</span> <span class="type">Jin</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Person</span>(<span class="string">"Benedict Jin"</span>, <span class="number">18</span>) == obj</span><br><span class="line">res6: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持 match</span></span><br><span class="line">scala&gt; bj <span class="keyword">match</span> {</span><br><span class="line">     |   <span class="keyword">case</span> <span class="type">Person</span>(<span class="string">"Benedict Jin"</span>, <span class="number">18</span>) =&gt; println(<span class="string">"matched"</span>)</span><br><span class="line">     |   <span class="keyword">case</span> _ =&gt; println(<span class="string">"non-matched"</span>)</span><br><span class="line">     | }</span><br><span class="line">matched</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认继承 scala.Product 类，并实现了其中的方法</span></span><br><span class="line">scala&gt; bj.productArity</span><br><span class="line">res7: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">scala&gt; bj.productIterator.next()</span><br><span class="line">res8: <span class="type">Any</span> = <span class="type">Benedict</span> <span class="type">Jin</span></span><br><span class="line"></span><br><span class="line">scala&gt; bj.productElement(<span class="number">1</span>)</span><br><span class="line">res9: <span class="type">Any</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">scala&gt; bj.productPrefix</span><br><span class="line">res10: <span class="type">String</span> = <span class="type">Person</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="打印-trait-中的字段"><a href="#打印-trait-中的字段" class="headerlink" title="打印 trait 中的字段"></a>打印 trait 中的字段</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">scala&gt; <span class="class"><span class="keyword">trait</span> <span class="title">T</span> </span>{</span><br><span class="line">     |   <span class="keyword">var</span> t: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">     | }</span><br><span class="line">defined <span class="class"><span class="keyword">trait</span> <span class="title">T</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常情况下，不会打印 trait 中的字段</span></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> <span class="keyword">with</span> <span class="title">T</span></span></span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Person</span>(<span class="string">"Benedict Jin"</span>)</span><br><span class="line">res6: <span class="type">Person</span> = <span class="type">Person</span>(<span class="type">Benedict</span> <span class="type">Jin</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 ScalaRunTime._toString(this) 来覆写 toString 方法，可以避免 case class 的 toString 方法被篡改</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> scala.runtime.<span class="type">ScalaRunTime</span></span><br><span class="line"><span class="keyword">import</span> scala.runtime.<span class="type">ScalaRunTime</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person2</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> <span class="keyword">with</span> <span class="title">T</span> </span>{</span><br><span class="line">     |   <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = <span class="type">ScalaRunTime</span>._toString(<span class="keyword">this</span>)</span><br><span class="line">     | }</span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Person2</span>(<span class="string">"Benedict Jin"</span>).toString</span><br><span class="line">res7: <span class="type">String</span> = <span class="type">Person2</span>(<span class="type">Benedict</span> <span class="type">Jin</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写 toString 来打印 trait 中的字段</span></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person3</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> <span class="keyword">with</span> <span class="title">T</span> </span>{</span><br><span class="line">     |   <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = <span class="string">s"Person3(<span class="subst">${this.name}</span>, <span class="subst">${this.t}</span>)"</span></span><br><span class="line">     | }</span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> p3 = <span class="type">Person3</span>(<span class="string">"Benedict Jin"</span>)</span><br><span class="line">p3: <span class="type">Person3</span> = <span class="type">Person3</span>(<span class="type">Benedict</span> <span class="type">Jin</span>, )</span><br><span class="line"></span><br><span class="line">scala&gt; p3.t = <span class="string">"t"</span></span><br><span class="line">p3.t: <span class="type">String</span> = t</span><br><span class="line"></span><br><span class="line">scala&gt; p3.toString</span><br><span class="line">res8: <span class="type">String</span> = <span class="type">Person3</span>(<span class="type">Benedict</span> <span class="type">Jin</span>, t)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>　详见，《在不同场景下，<a href="https://yuzhouwan.com/posts/27328/#Scala">如何选择合适的 JVM 语言</a>》</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="classOf-和-getClass-的区别"><a href="#classOf-和-getClass-的区别" class="headerlink" title="classOf 和 getClass 的区别"></a>classOf 和 getClass 的区别</h3><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">scala&gt; <span class="class"><span class="keyword">class</span>  <span class="title">A</span></span></span><br><span class="line">  defined <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> a = <span class="keyword">new</span> <span class="type">A</span></span><br><span class="line">  a: <span class="type">A</span> = <span class="type">A</span>@<span class="number">1</span>d483de4</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 的任意子类</span></span><br><span class="line">scala&gt; a.getClass</span><br><span class="line">  res0: <span class="type">Class</span>[_ &lt;: <span class="type">A</span>] = <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A 类本身</span></span><br><span class="line">scala&gt; classOf[<span class="type">A</span>]</span><br><span class="line">  res1: <span class="type">Class</span>[<span class="type">A</span>] = <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两者是等价的</span></span><br><span class="line">scala&gt; a.getClass == classOf[<span class="type">A</span>]</span><br><span class="line">  res2: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getClass 的返回值，是不能直接赋值给 Class[A] 的</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> c: <span class="type">Class</span>[<span class="type">A</span>] = a.getClass</span><br><span class="line">  &lt;console&gt;:<span class="number">13</span>: error: <span class="class"><span class="keyword">type</span> <span class="title">mismatch</span></span>;</span><br><span class="line">   found   : <span class="type">Class</span>[?<span class="number">0</span>] where <span class="class"><span class="keyword">type</span> <span class="title">?0</span> <span class="title">&lt;</span></span>: <span class="type">A</span></span><br><span class="line">   required: <span class="type">Class</span>[<span class="type">A</span>]</span><br><span class="line">  <span class="type">Note</span>: ?<span class="number">0</span> &lt;: <span class="type">A</span>, but <span class="type">Java</span>-defined <span class="class"><span class="keyword">class</span> <span class="title">Class</span> <span class="title">is</span> <span class="title">invariant</span> <span class="title">in</span> <span class="title">type</span> <span class="title">T</span>.</span></span><br><span class="line">  <span class="type">You</span> may wish to investigate a wildcard <span class="class"><span class="keyword">type</span> <span class="title">such</span> <span class="title">as</span> `<span class="title">_</span> <span class="title">&lt;</span></span>: <span class="type">A</span>`. (<span class="type">SLS</span> <span class="number">3.2</span><span class="number">.10</span>)</span><br><span class="line">         <span class="keyword">val</span> c:<span class="type">Class</span>[<span class="type">A</span>] = a.getClass</span><br><span class="line">                            ^</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要声明 Class[_ &lt;: A] 才行，类似于 Java 里面的 Class&lt;? extends A&gt;</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> c: <span class="type">Class</span>[_ &lt;: <span class="type">A</span>] = a.getClass</span><br><span class="line">  c: <span class="type">Class</span>[_ &lt;: <span class="type">A</span>] = <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是获取全限定名的返回值，却是一样的</span></span><br><span class="line">scala&gt; c.getName</span><br><span class="line">  res3: <span class="type">String</span> = <span class="type">A</span></span><br><span class="line"></span><br><span class="line">scala&gt; classOf[<span class="type">A</span>].getName</span><br><span class="line">  res4: <span class="type">String</span> = <span class="type">A</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="稳定的标识符模式"><a href="#稳定的标识符模式" class="headerlink" title="稳定的标识符模式"></a>稳定的标识符模式</h3><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 如果不用 ` 反引号将 a / b / c 变量括起来</span></span><br><span class="line"><span class="comment">// 那么这些变量，其实就变成了指向 i 的别名，已经和 match 外层的 a / b / c 变量无关了</span></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">m</span></span>(i: <span class="type">Int</span>) = {</span><br><span class="line">     |   <span class="keyword">val</span> a = <span class="number">3</span></span><br><span class="line">     |   <span class="keyword">val</span> b = <span class="number">2</span></span><br><span class="line">     |   <span class="keyword">val</span> c = <span class="number">1</span></span><br><span class="line">     |   i <span class="keyword">match</span> {</span><br><span class="line">     |     <span class="keyword">case</span> `a` =&gt; <span class="number">0</span></span><br><span class="line">     |     <span class="keyword">case</span> `b` =&gt; <span class="number">-1</span></span><br><span class="line">     |     <span class="keyword">case</span> `c` =&gt; <span class="number">4</span></span><br><span class="line">     |     <span class="keyword">case</span> _ =&gt; <span class="number">2</span></span><br><span class="line">     |   }</span><br><span class="line">     | }</span><br><span class="line">m: (i: <span class="type">Int</span>)<span class="type">Int</span></span><br><span class="line"></span><br><span class="line">scala&gt; m(<span class="number">1</span>)</span><br><span class="line">res17: <span class="type">Int</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">scala&gt; m(<span class="number">2</span>)</span><br><span class="line">res18: <span class="type">Int</span> = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">scala&gt; m(<span class="number">3</span>)</span><br><span class="line">res19: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，使用反引号将变量括起来之后，scala 会在字节码层面做优化</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 0: iconst_3</span></span><br><span class="line"><span class="comment"> 1: istore_2</span></span><br><span class="line"><span class="comment"> 2: iconst_2</span></span><br><span class="line"><span class="comment"> 3: istore_3</span></span><br><span class="line"><span class="comment"> 4: iconst_1</span></span><br><span class="line"><span class="comment"> 5: istore          4</span></span><br><span class="line"><span class="comment"> 7: iload_1</span></span><br><span class="line"><span class="comment"> 8: istore          5</span></span><br><span class="line"><span class="comment">10: iload_2</span></span><br><span class="line"><span class="comment">11: iload           5</span></span><br><span class="line"><span class="comment">13: if_icmpne       22</span></span><br><span class="line"><span class="comment">16: iconst_0</span></span><br><span class="line"><span class="comment">17: istore          6</span></span><br><span class="line"><span class="comment">19: goto            50</span></span><br><span class="line"><span class="comment">22: iload_3</span></span><br><span class="line"><span class="comment">23: iload           5</span></span><br><span class="line"><span class="comment">25: if_icmpne       34</span></span><br><span class="line"><span class="comment">28: iconst_m1</span></span><br><span class="line"><span class="comment">29: istore          6</span></span><br><span class="line"><span class="comment">31: goto            50</span></span><br><span class="line"><span class="comment">34: iload           4</span></span><br><span class="line"><span class="comment">36: iload           5</span></span><br><span class="line"><span class="comment">38: if_icmpne       47</span></span><br><span class="line"><span class="comment">41: iconst_4</span></span><br><span class="line"><span class="comment">42: istore          6</span></span><br><span class="line"><span class="comment">44: goto            50</span></span><br><span class="line"><span class="comment">47: iconst_2</span></span><br><span class="line"><span class="comment">48: istore          6</span></span><br><span class="line"><span class="comment">50: iload           6</span></span><br><span class="line"><span class="comment">52: ireturn</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/main/scala/com/yuzhouwan/hacker/cases/CaseStableIdentifier.scala">here</a> and <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/main/scala/com/yuzhouwan/hacker/cases/CaseNotStableIdentifier.scala">here</a>.</p>
<h3 id="在函数调用里面，对变量进行赋值"><a href="#在函数调用里面，对变量进行赋值" class="headerlink" title="在函数调用里面，对变量进行赋值"></a>在函数调用里面，对变量进行赋值</h3><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> map = <span class="keyword">new</span> java.util.<span class="type">LinkedHashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</span><br><span class="line">map: java.util.<span class="type">LinkedHashMap</span>[<span class="type">String</span>,<span class="type">String</span>] = {}</span><br><span class="line"></span><br><span class="line">scala&gt; map.put(<span class="string">"1"</span>, <span class="string">"1"</span>)</span><br><span class="line">res0: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">scala&gt; map.put(<span class="string">"2"</span>, <span class="string">"2"</span>)</span><br><span class="line">res1: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">scala&gt; map.put(<span class="string">"3"</span>, <span class="string">"3"</span>)</span><br><span class="line">res2: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">scala&gt; map</span><br><span class="line">res3: java.util.<span class="type">LinkedHashMap</span>[<span class="type">String</span>,<span class="type">String</span>] = {<span class="number">1</span>=<span class="number">1</span>, <span class="number">2</span>=<span class="number">2</span>, <span class="number">3</span>=<span class="number">3</span>}</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">var</span> s = <span class="string">"1 "</span></span><br><span class="line">s: <span class="type">String</span> = <span class="string">"1 "</span></span><br><span class="line"></span><br><span class="line">scala&gt; map.containsValue(s)</span><br><span class="line">res4: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然已经将 s.trim 赋值给 s 变量了，但是传入 map.containsValue 方法的仍然是未进行 trim 操作之前的 s 变量</span></span><br><span class="line"><span class="comment">// 这里和 Java 是不一样的，Java 会将已经赋值之后的变量值，传入到方法中</span></span><br><span class="line">scala&gt; map.containsValue(s = s.trim)</span><br><span class="line">res5: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">scala&gt; s</span><br><span class="line">res6: <span class="type">String</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="string">"1"</span>.equals(s)</span><br><span class="line">res7: <span class="type">Boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Java-的-Lambda-表达式转为-Scala-的-Function"><a href="#Java-的-Lambda-表达式转为-Scala-的-Function" class="headerlink" title="Java 的 Lambda 表达式转为 Scala 的 Function"></a>Java 的 Lambda 表达式转为 Scala 的 Function</h3><h4 id="Java-的-Lambda-表达式"><a href="#Java-的-Lambda-表达式" class="headerlink" title="Java 的 Lambda 表达式"></a>Java 的 Lambda 表达式</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; BLOG_ID = ThreadLocal.withInitial(() -&gt; <span class="string">"null"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="反面示例"><a href="#反面示例" class="headerlink" title="反面示例"></a>反面示例</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 直接填入 lambda 表达式，IDE 并不会报错，但是会在代码编译阶段报错</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="type">BLOG_ID</span>: <span class="type">ThreadLocal</span>[<span class="type">String</span>] = <span class="type">ThreadLocal</span>.withInitial(() -&gt; <span class="string">"null"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即便把 function 单独拿出来作为 Supplier 变量进行申明，仍然会出现编译错误</span></span><br><span class="line"><span class="keyword">val</span> blogIdFunc: java.util.function.<span class="type">Supplier</span>[<span class="type">String</span>] = () =&gt; <span class="string">"null"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体编译报错，如下：</span></span><br><span class="line"><span class="keyword">val</span> func: java.util.function.<span class="type">Supplier</span>[<span class="type">String</span>] = () =&gt; <span class="string">"null"</span></span><br><span class="line"> error: <span class="class"><span class="keyword">type</span> <span class="title">mismatch</span></span>;</span><br><span class="line"> found   : () =&gt; <span class="type">String</span></span><br><span class="line"> required: java.util.function.<span class="type">Supplier</span>[<span class="type">String</span>]</span><br><span class="line">       <span class="keyword">val</span> func: java.util.function.<span class="type">Supplier</span>[<span class="type">String</span>] = () =&gt; <span class="string">"null"</span></span><br><span class="line">                                                          ^</span><br></pre></td></tr></tbody></table></figure>
<h4 id="正面示例"><a href="#正面示例" class="headerlink" title="正面示例"></a>正面示例</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 写成 new Supplier[T]{...} 的写法之后，则可以完成编译</span></span><br><span class="line"><span class="comment">// 不过，奇怪的是，编译器仍然会提示，可以将代码优化为 () =&gt; "null"</span></span><br><span class="line"><span class="keyword">val</span> blogIdFunc: java.util.function.<span class="type">Supplier</span>[<span class="type">String</span>] = <span class="keyword">new</span> <span class="type">Supplier</span>[<span class="type">String</span>] { <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(): <span class="type">String</span> = <span class="string">"null"</span> }</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="type">BLOG_ID</span>: <span class="type">ThreadLocal</span>[<span class="type">String</span>] = <span class="type">ThreadLocal</span>.withInitial(blogIdFunc)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 如果这部分代码还需要运行在 JDK7 及以下版本的 JVM 环境中，则可以改成普通的 "初始化 ThreadLocal" 方式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="type">BLOG_ID</span>: <span class="type">ThreadLocal</span>[<span class="type">String</span>] = <span class="keyword">new</span> <span class="type">ThreadLocal</span>[<span class="type">String</span>]() {</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialValue</span></span>(): <span class="type">String</span> = <span class="string">"null"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，如果存在 "跨父子线程" 和 "线程池缓存" 的场景，则可以使用 TransmittableThreadLocal 来替换原生的 ThreadLocal</span></span><br><span class="line"><span class="comment">// 不过，在使用 TTL 时，需要注意以下两点：</span></span><br><span class="line"><span class="comment">//   1) 根据 JDK 版本选择合适版本的 TTL 框架（JDK7 只能使用 2.2.2 及以下版本的 TTL）</span></span><br><span class="line"><span class="comment">//   2) 及时使用 remove 方法完成主动清理，提高 GC 效率</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/algorithms/thread/ttl/TransmittableThreadLocalTest.java">here</a>.</p>
<h3 id="如何传递变长参数"><a href="#如何传递变长参数" class="headerlink" title="如何传递变长参数"></a>如何传递变长参数</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">detail</span></span>(d: <span class="type">Any</span>*): <span class="type">Unit</span> = println(<span class="string">"%s_%s"</span>.format(d))</span><br><span class="line">detail: (d: <span class="type">Any</span>*)<span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">scala&gt; detail(<span class="string">"a"</span>, <span class="string">"b"</span>)</span><br><span class="line">java.util.<span class="type">MissingFormatArgumentException</span>: <span class="type">Format</span> specifier '%s'</span><br><span class="line">  at java.util.<span class="type">Formatter</span>.format(<span class="type">Formatter</span>.java:<span class="number">2519</span>)</span><br><span class="line">  at java.util.<span class="type">Formatter</span>.format(<span class="type">Formatter</span>.java:<span class="number">2455</span>)</span><br><span class="line">  at java.lang.<span class="type">String</span>.format(<span class="type">String</span>.java:<span class="number">2940</span>)</span><br><span class="line">  at scala.collection.immutable.<span class="type">StringLike</span>$<span class="keyword">class</span>.format(<span class="type">StringLike</span>.scala:<span class="number">318</span>)</span><br><span class="line">  at scala.collection.immutable.<span class="type">StringOps</span>.format(<span class="type">StringOps</span>.scala:<span class="number">29</span>)</span><br><span class="line">  at .detail(&lt;console&gt;:<span class="number">11</span>)</span><br><span class="line">  ... <span class="number">32</span> elided</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在函数中，想要将传入的变长参数，保持成多个参数的特性，传递下去的话，需要声明 : _*</span></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">detail</span></span>(d: <span class="type">Any</span>*): <span class="type">Unit</span> = println(<span class="string">"%s_%s"</span>.format(d: _*))</span><br><span class="line">detail: (d: <span class="type">Any</span>*)<span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">scala&gt; detail(<span class="string">"a"</span>, <span class="string">"b"</span>)</span><br><span class="line">a_b</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 如果直接用 String.format，会因为占位符和变长参数 数量不一致，导致报错</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countSubString</span></span>(str: <span class="type">String</span>, sub: <span class="type">String</span>): <span class="type">Int</span> = str.sliding(sub.length).count(slide =&gt; slide == sub)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patchSubString</span></span>(str: <span class="type">String</span>, sub: <span class="type">String</span>): <span class="type">String</span> = str.patch(str.lastIndexOf(sub), <span class="string">""</span>, sub.length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 superFormat 方法来解决该问题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superFormat</span></span>(str: <span class="type">String</span>, detail: <span class="type">String</span>*): <span class="type">String</span> = {</span><br><span class="line">  <span class="keyword">val</span> holderSize: <span class="type">Int</span> = countSubString(str, <span class="string">"%s"</span>)</span><br><span class="line">  <span class="keyword">val</span> detailSize: <span class="type">Int</span> = detail.size</span><br><span class="line">  <span class="keyword">var</span> result: <span class="type">String</span> = str</span><br><span class="line">  <span class="keyword">if</span> (detailSize &lt; holderSize) {</span><br><span class="line">    <span class="keyword">for</span> (_ &lt;- <span class="number">0</span> until (holderSize - detailSize)) {</span><br><span class="line">      result = patchSubString(result, <span class="string">"%s"</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  result.format(detail: _*)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/src/main/scala/com/yuzhouwan/common/util/StrUtils4Scala.scala">here</a> and <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/src/test/scala/com/yuzhouwan/common/util/StrUtils4ScalaTest.scala">here</a>.</p>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> java.util</span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> l = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">String</span>]()</span><br><span class="line">l: java.util.<span class="type">LinkedList</span>[<span class="type">String</span>] = []</span><br><span class="line"></span><br><span class="line">scala&gt; l.add(<span class="string">"yuzhouwan.com"</span>)</span><br><span class="line">res0: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Seq</span>(l)</span><br><span class="line">res1: <span class="type">Seq</span>[java.util.<span class="type">LinkedList</span>[<span class="type">String</span>]] = <span class="type">List</span>([yuzhouwan.com])</span><br><span class="line"></span><br><span class="line">scala&gt; l.toSeq</span><br><span class="line">&lt;console&gt;:<span class="number">14</span>: error: value toSeq is not a member of java.util.<span class="type">LinkedList</span>[<span class="type">String</span>]</span><br><span class="line">       l.toSeq</span><br><span class="line">         ^</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这可能是每个 java 开发，在接触 scala 的时候，都会遇到的问题，，有点小恶心</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>._</span><br><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>._</span><br><span class="line"></span><br><span class="line">scala&gt; l.toSeq</span><br><span class="line">res3: <span class="type">Seq</span>[<span class="type">String</span>] = <span class="type">Buffer</span>(yuzhouwan.com)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://www.amazon.cn/dp/0134540565">Scala for the Impatient，2nd Edition</a></li>
<li><a href="https://www.amazon.cn/dp/1119267226">Professional Scala</a></li>
<li><a href="https://www.amazon.cn/dp/1484230353">Practical Scala DSLs</a></li>
<li><a href="https://www.amazon.cn/dp/1484231074">Scala for Java Developers</a></li>
<li><a href="https://www.amazon.cn/dp/178646604X">Scala High Performance Programming</a></li>
<li><a href="https://www.amazon.cn/dp/B01E4X8X52">Scala 程序设计（第 2 版）</a></li>
<li><a href="https://www.amazon.cn/dp/B073ZTH556">快学 Scala（第 2 版）</a></li>
<li><a href="https://www.amazon.cn/dp/B00CBBKJ0W">Scala 程序设计：Java 虚拟机多核编程实战</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Scala</tag>
        <tag>JVM</tag>
        <tag>Apache Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Serverless 详解</title>
    <url>/posts/201001/</url>
    <content><![CDATA[<h2 id="Serverless-是什么？"><a href="#Serverless-是什么？" class="headerlink" title="Serverless 是什么？"></a>Serverless 是什么？</h2><blockquote>
<p>Serverless computing is a cloud computing execution model in which the cloud provider runs the server, and dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. It can be a form of utility computing. — <a href="https://en.wikipedia.org/wiki/Serverless_computing">wikipedia.org</a></p>
<p>Serverless architectures are application designs that incorporate third-party “Backend as a Service” (BaaS) services, and/or that include custom code run in managed, ephemeral containers on a “Functions as a Service” (FaaS) platform. — <a href="https://martinfowler.com/articles/serverless.html">《Serverless Architectures》</a></p>
<p>无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务（例如 AWS Lambda 服务），客户端逻辑和服务托管远程过程调用的组合。  — <a href="https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/">亚马逊 AWS 官方博客</a></p>
<p>Serverless（无服务器架构）是指服务端逻辑由开发者实现，运行在无状态的计算容器中，由事件触发，完全被第三方管理，其业务层面的状态则存储在数据库或其他介质中。  — <a href="https://www.bookstack.cn/read/serverless-handbook/concepts-what-is-serverless.md">《无服务架构实践手册》</a></p>
<p>If your PaaS can efficiently start instances in 20ms that run for half a second, then call it serverless.  — Adrian Cockroft</p>
</blockquote>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="低成本"><a href="#低成本" class="headerlink" title="低成本"></a>低成本</h4><h5 id="运维成本"><a href="#运维成本" class="headerlink" title="运维成本"></a>运维成本</h5><p>　服务器、中间件、数据库等均托管于 BaaS/FaaS 平台，用户无需再参与基础设施及软件的维护，省去了集群的运维成本</p>
<h5 id="开发成本"><a href="#开发成本" class="headerlink" title="开发成本"></a>开发成本</h5><p>　对比 IaaS 或者 PaaS 平台的服务器或者操作系统，Serverless 的架构中，用户操作的是服务化的组件，比如存储服务、授权服务等，可以缩短开发周期，节约时间成本</p>
<h4 id="按需计费"><a href="#按需计费" class="headerlink" title="按需计费"></a>按需计费</h4><p>　Serverless/FaaS 区别于 IaaS/PaaS 预先分配计算资源的计费方式，其计费方式通常是按请求次数及运行时间。如此一来，不仅可以最大程度地利用资源，还能实现真正的按需计费，以降低用户的使用成本</p>
<p><img data-src="/picture/serverless/serverless_cost.png" alt="Serverless cost"></p>
<center>（使用 <a href="https://www.apple.com/cn/ipad/" target="_blank">iPad</a>™ 手绘而成）</center>

<h4 id="高扩展"><a href="#高扩展" class="headerlink" title="高扩展"></a>高扩展</h4><p>　自动进行横向扩展（毫秒级部署，秒级生命周期）</p>
<h4 id="高资源利用率"><a href="#高资源利用率" class="headerlink" title="高资源利用率"></a>高资源利用率</h4><p>　提供细粒度的计算能力，最大限度满足实时需求，使得资源利用率大幅度提升</p>
<h4 id="NoOps"><a href="#NoOps" class="headerlink" title="NoOps"></a>NoOps</h4><p>　运维的发展经历了，人肉运维、自动化运维、DevOps、AiOps 等。而 Serverless 模式下，用户只需要关心业务编码，真正实现了零运维成本</p>
<div class="note info">从更广泛的意义上来讲，Ops 除了指服务器维护，还会包括部署、网络、安全、监控、故障恢复和水平扩展等</div>

<span id="more"></span>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><p>　对于有状态的服务，使用 Serverless 可能会导致灵活性降低。而在借助第三方存储媒介的时候，因为无法使用连接池，也使得创建与释放连接的成本加重</p>
<div class="note info">第三方存储媒介包括数据库、分布式缓存和云盘等</div>

<h4 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h4><p>　Serverless 应用程序是无状态、分布式、低耦合的，导致很难实现低延迟</p>
<h4 id="资源争用"><a href="#资源争用" class="headerlink" title="资源争用"></a>资源争用</h4><p>　多租户模式下，资源隔离控制不当的话，会导致资源争用，使得某一个任务影响到其他任务的运行</p>
<h4 id="没有统一的规范"><a href="#没有统一的规范" class="headerlink" title="没有统一的规范"></a>没有统一的规范</h4><p>　业内没有形成统一的接口和规范，导致很难跨平台地使用不同云服务厂商的 Serverless 产品</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>价格敏感场景（针对测试阶段 Demo 级别的实例输出）</li>
<li>流式事件处理（视频流、图片流等）</li>
<li>事件驱动架构</li>
<li>响应式架构</li>
<li>IoT 物联网</li>
<li>资源利用率低的业务（大部分时间空闲，只在固定时间触发计算）</li>
<li>流量突发场景（难以预估流量高峰的峰值或时间点）</li>
<li>混合云场景</li>
<li>Edge Computing 边缘计算（将应用部署至 CDN 节点，通过 CDN 触发 Lambda，在网络边缘节点直接完成计算，以提高响应速度）</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="Serverless-发展路线图"><a href="#Serverless-发展路线图" class="headerlink" title="Serverless 发展路线图"></a>Serverless 发展路线图</h3><pre class="mermaid">gantt

dateFormat YYYY-MM-DD
title Serverless 发展路线图

section 概念提出
《Why The Future Of Software And Apps Is Serverless?》 : done , 首次提出 Serverless 概念 , 2012-10-15 , 2014-11-13

section 产品落地
AWS Lambda 发布 : done , 从概念落地为产品 , 2014-11-13 , 2015-07-09

section 完全构建
AWS API Gateway 发布 : done , AWS Lambda 和 AWS API Gateway 的结合，使得完全构建 Serverless 成为可能 , 2015-07-09 , 2015-10-13

section 成功案例
PlayOnSports 生产级 Serverless 应用 : done , 第一例商业案例大获成功 , 2015-10-13 , 2016-05-25

section 积极布道
举办第一届 Serverless Conf : done , 第一届 Serverless Conf 在纽约成功举办 , 2016-05-25 , 2017-01-01

section 厂商跟风
众多厂商争相入市 : done, IaaS 和 PaaS 厂商跟风，包括 Google Cloud Functions、Azure Funcions、IBM OpenWhis、阿里云函数计算等 , 2017-01-01 , 2018-01-01

section 蓬勃发展
Serverless 借势迅速发展 : active , 去中心化、轻量虚拟化、细粒度计算等技术蓬勃发展 , 2018-01-01 , 2021-01-01</pre>



<h3 id="云计算发展路线图"><a href="#云计算发展路线图" class="headerlink" title="云计算发展路线图"></a>云计算发展路线图</h3><pre class="mermaid">graph TD
start[Start] --&gt; IDC(物理机房)
IDC --&gt; IaaS(基础设施即服务)
IaaS --&gt; PaaS(平台即服务)
PaaS --&gt; SaaS(软件即服务)
SaaS --&gt; Serverless(Serverless)
Serverless --&gt; BaaS(后端即服务)
Serverless --&gt; FaaS(函数即服务)
BaaS --&gt; e[End?]
FaaS --&gt; e[End?]</pre>



<h4 id="IDC"><a href="#IDC" class="headerlink" title="IDC"></a>IDC</h4><p>　物理机房</p>
<h4 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>　<strong><a href="https://en.wikipedia.org/wiki/Infrastructure_as_a_service">IaaS</a></strong>，全称 <strong>I</strong>nfrastructure <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice，表示<strong>基础设施即服务</strong>，也有称作 <strong>H</strong>ardware <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice</p>
<h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul>
<li><p>公有云</p>
<p>公有云是放在公共的互联网上的，只要是平台上的用户都可以使用</p>
</li>
<li><p>私有云</p>
<p>私有云是为某一个客户单独构建，可以最大程度地保证数据安全和服务质量</p>
</li>
<li><p>混合云</p>
<p>混合云融合了公有云和私有云，将重要数据保存在本地私有云环境，同时将非核心数据上传公有云处理</p>
</li>
</ul>
<h5 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h5><ul>
<li><p>国内</p>
<p>阿里云™、知名 IaaS 平台™、青云™、盛大云™、华为云™、太平洋电信™、51IDC™、UCloud™</p>
</li>
<li><p>国外</p>
<p>Amazon AWS（Elastic Compute Cloud）™、Google Compute Engine™、EMC™、IBM™</p>
</li>
</ul>
<h4 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>　<strong><a href="https://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a></strong>，全称 <strong>P</strong>latform <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice，表示<strong>平台即服务</strong>。用户可以自己部署操作系统和软件</p>
<h5 id="平台-1"><a href="#平台-1" class="headerlink" title="平台"></a>平台</h5><ul>
<li><p>国内</p>
<p>AppCan™、APICloud™、Testin™、Coding™、八百客™、云之讯™、追信魔盒™、机智云™</p>
</li>
<li><p>国外</p>
<p>Google App Engine™、Amazon Elastic Beanstalk™、Microsoft Azure™、VMware Cloud Foundry™</p>
</li>
</ul>
<h4 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>　<strong><a href="https://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a></strong>，全称 <strong>S</strong>oftware <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice，表示<strong>软件即服务</strong>。软件的开发、管理、部署都交给第三方，不需要担心任何技术问题，可以拿来即用。省去技术团队，直接应用云端系统进行运营和使用即可</p>
<h5 id="平台-2"><a href="#平台-2" class="headerlink" title="平台"></a>平台</h5><ul>
<li><p>国内</p>
<p>阿里钉钉™、用友超客™、明道™、今目标™、Tower™、纷享销客™、红圈营销™、小满科技™、腾腾科技™、麦客™、美洽™、销售易™、快消总管™、EC 营客通™、店小三™、逸创云客服™</p>
</li>
<li><p>国外</p>
<p>Salesforce™、Sales cloud™、Zendesk™、Zoho™、IBM Lotus Live™</p>
</li>
</ul>
<h4 id="BaaS"><a href="#BaaS" class="headerlink" title="BaaS"></a>BaaS</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>　<strong><a href="https://en.wikipedia.org/wiki/Mobile_backend_as_a_service">BaaS</a></strong>，全称 <strong>B</strong>ackend <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice，表示<strong>后端即服务</strong>。为客户（开发者）提供整合云后端的服务，例如提供文件存储、数据存储、推送服务、身份验证服务等功能，以帮助开发者快速开发应用</p>
<h4 id="FaaS"><a href="#FaaS" class="headerlink" title="FaaS"></a>FaaS</h4><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>　<strong><a href="https://en.wikipedia.org/wiki/Function_as_a_service">FaaS</a></strong>，全称 <strong>F</strong>unction <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice，表示<strong>函数即服务</strong>。服务商提供一个平台，允许客户开发、运行和管理应用程序功能，而无需构建和维护基础架构。按照此模型构建应用程序是实现“无服务器”体系结构的一种方式，通常在构建微服务应用程序时使用</p>
<h2 id="社区发展"><a href="#社区发展" class="headerlink" title="社区发展"></a>社区发展</h2><h3 id="Star-趋势"><a href="#Star-趋势" class="headerlink" title="Star 趋势"></a>Star 趋势</h3><p><img data-src="/picture/serverless/serverless_star_history.png" alt="Serverless Star History"></p>
<center>（图片来源：<a href="https://star-history.t9t.io/#openfaas/faas&amp;apache/openwhisk&amp;knative/serving" target="_blank">star-history.t9t.io</a>™ 官网）</center>








<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h3><ul>
<li><a href="https://en.wikipedia.org/wiki/AWS_Lambda">AWS Lambda</a></li>
</ul>
<h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-releases.html">AWS Lambda releases</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf">A Berkeley View on Serverless Computing</a></li>
<li><a href="https://arxiv.org/pdf/1812.03651.pdf">Serverless Computing: One Step Forward, Two Steps Back</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/apache/openwhisk">Apache OpenWhisk is an open source serverless cloud platform</a></li>
<li><a href="https://github.com/openfaas/faas">OpenFaaS - Serverless Functions Made Simple</a></li>
<li><a href="https://github.com/kubeless/kubeless">Kubeless is a Kubernetes-native serverless framework</a></li>
<li><a href="https://github.com/fission/fission">Fission is a fast serverless framework for Kubernetes</a></li>
<li><a href="https://github.com/Miserlou/Zappa">Zappa makes it super easy to build and deploy server-less, event-driven Python applications on AWS Lambda + API Gateway</a></li>
<li><a href="https://github.com/serverless/serverless">Serverless Framework – Build web, mobile and IoT applications with serverless architectures using AWS Lambda, Azure Functions, Google CloudFunctions &amp; more!</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://readwrite.com/2012/10/15/why-the-future-of-software-and-apps-is-serverless/">Why The Future Of Software And Apps Is Serverless</a></li>
<li><a href="https://www.linkedin.com/pulse/serverless-architecture-its-challenges-veselin-pizurica/">Serverless architecture and its challenges</a></li>
<li><a href="https://yq.aliyun.com/roundtable/66569">除了最新的区块链，AI，你知道 Serverless 吗？</a></li>
<li><a href="https://blog.hyprcubd.com/top-7-predictions-for-serverless-databases/">Top 7 Predictions for Serverless Databases</a></li>
</ul>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><ul>
<li><a href="https://www.youtube.com/watch?v=U8ODkSCJpJU">AWS re:Invent 2015 | (ARC308) The Serverless Company Using AWS Lambda</a></li>
</ul>
<h3 id="Conf"><a href="#Conf" class="headerlink" title="Conf"></a>Conf</h3><ul>
<li><a href="https://serverlessconf.io/">ServerlessConf</a></li>
</ul>
<h3 id="DataBase"><a href="#DataBase" class="headerlink" title="DataBase"></a>DataBase</h3><ul>
<li><a href="https://aws.amazon.com/timestream/">Amazon Timestream: Fast, scalable, serverless time series database</a></li>
<li><a href="https://www.hyprcubd.com/">Hyprcubd: The first serverless time series database designed to dramatically increase your productivity</a></li>
<li><a href="https://serverless.kx.com/">Serverless kdb+</a></li>
<li><a href="https://www.influxdata.com/blog/extending-influxdb-with-serverless-functions/">Extending InfluxDB with Serverless Functions</a></li>
<li><a href="https://kubeless.io/">Prometheus monitoring of functions calls and function latency by default</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Serverless</category>
      </categories>
      <tags>
        <tag>Apache OpenWhisk</tag>
        <tag>Serverless</tag>
        <tag>FaaS</tag>
        <tag>IDC</tag>
        <tag>IaaS</tag>
        <tag>PaaS</tag>
        <tag>SaaS</tag>
        <tag>BaaS</tag>
      </tags>
  </entry>
  <entry>
    <title>Session</title>
    <url>/posts/48905/</url>
    <content><![CDATA[<h2 id="Session-是什么？"><a href="#Session-是什么？" class="headerlink" title="Session 是什么？"></a>Session 是什么？</h2><p>　代表服务器与浏览器之间的一次会话过程，这个过程可以是连续的，也可以是时断时续的。而在 Web 开发语境下，则指一类用来在客户端与服务器之间保持状态的解决方案</p>
<h2 id="多样的存在形式"><a href="#多样的存在形式" class="headerlink" title="多样的存在形式"></a>多样的存在形式</h2><ul>
<li><a href="https://yuzhouwan.com/posts/190413/">Java</a></li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">javax.servlet.http.HttpSession</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><a href="https://yuzhouwan.com/posts/43687/">Python</a></li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">s = requests.session()</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>PHP</li>
</ul>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$_session</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Hibernate</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.hibernate <span class="class"><span class="keyword">interface</span> <span class="title">Session</span></span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>WebLogic</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Weblogic Server session</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>JSP</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">HttpSession</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h2 id="为什么要有-Session"><a href="#为什么要有-Session" class="headerlink" title="为什么要有 Session ?"></a>为什么要有 Session ?</h2><p>　HTTP 本身是无状态的，这与 HTTP 协议本身的目的是相符的<br>　当客户每次访问 Web 页面，服务器重新打开新的会话时，为了维护其上下文信息（记住同一个用户）<br>　由于此类种种场景，需要让 HTTP 协议成为有状态的</p>
<h2 id="Session-工作原理"><a href="#Session-工作原理" class="headerlink" title="Session 工作原理"></a>Session 工作原理</h2><p>　Session 机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息</p>
<p><img data-src="/picture/session/session.png" alt="Session"></p>
<center>（利用 <a href="https://www.wps.com/mac/" target="_blank">WPS</a>™ 绘制而成）</center>



<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="Session-的创建"><a href="#Session-的创建" class="headerlink" title="Session 的创建"></a>Session 的创建</h3><p>　不是在客户端访问 Server 的时候就创建，而是在服务器的某个构建 Session 的语句被调用时</p>
<ul>
<li>PHP</li>
</ul>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">session_start()</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>JSP</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">内置对象 Session</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">HttpServletRequest.getSession(<span class="keyword">true</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Hibernate</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Configuration.configure(<span class="string">"hibernate.cfg.xml"</span>).buildSessionFactory().openSesssion()</span><br></pre></td></tr></tbody></table></figure>
<h3 id="SSO（Single-Sign-on）"><a href="#SSO（Single-Sign-on）" class="headerlink" title="SSO（Single Sign-on）"></a><a href="https://yuzhouwan.com/posts/5517/">SSO</a>（<strong>S</strong>ingle <strong>S</strong>ign-<strong>o</strong>n）</h3><p>　按照 Servlet 规范，Session 的作用域应该仅仅限于当前应用程序下，不同的应用程序之间是不能够相互访问对方的 Session 的<br>　各个应用服务器从实际效果上都遵守了这一规范，但是实现的细节却可能各有不同，因此解决跨应用程序 Session 共享的方法也不尽相同<br>　可以借助于第三方的力量，比如使用文件、数据库、JMS 或者客户端 cookie，URL 参数或者隐藏字段等手段<br>　还有一种较为方便的做法，就是把一个应用程序的 Session 放到 ServletContext 中取得前一个应用程序的引用</p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>Stephen William Hawking</title>
    <url>/posts/54868/</url>
    <content><![CDATA[<p><img data-src="/picture/people/stephen_william_hawking.jpg" alt="Stephen William Hawking"></p>
<p>2018.3.14 他摆脱了躯壳的束缚，终自由地遨游于星辰之间</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>人物</category>
      </categories>
      <tags>
        <tag>人物</tag>
      </tags>
  </entry>
  <entry>
    <title>一幅持续扩展的物联网思维导图</title>
    <url>/posts/201220/</url>
    <content><![CDATA[<h2 id="一幅持续扩展的物联网思维导图"><a href="#一幅持续扩展的物联网思维导图" class="headerlink" title="一幅持续扩展的物联网思维导图"></a>一幅持续扩展的物联网思维导图</h2><p><img data-src="/picture/iot/iot_mind_map.png" alt="一幅持续扩展的物联网思维导图"></p>
<center>（利用 MindNode™ 绘制而成）</center>

<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">日期</th>
<th style="text-align:center">更新</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2020-12-20</td>
<td style="text-align:center">初次发布，包含定义、行业、传感器、数据分析、安全、协议、机构、历史等内容</td>
</tr>
<tr>
<td style="text-align:center">2020-12-21</td>
<td style="text-align:center">扩充了 1982 年 ~ 2016 年之间关于物联网的大事件</td>
</tr>
<tr>
<td style="text-align:center">2020-12-22</td>
<td style="text-align:center">增加 eSIM 的应用场景</td>
</tr>
<tr>
<td style="text-align:center">2020-12-25</td>
<td style="text-align:center">增加边缘计算平台和物联网操作系统</td>
</tr>
<tr>
<td style="text-align:center">2020-12-26</td>
<td style="text-align:center">增加物联网设备数量统计信息</td>
</tr>
<tr>
<td style="text-align:center">2020-12-28</td>
<td style="text-align:center">增加全球移动通讯系统协会</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<h2 id="完整的文本格式"><a href="#完整的文本格式" class="headerlink" title="完整的文本格式"></a>完整的文本格式</h2><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">物联网</span><br><span class="line"><span class="code">	理论</span></span><br><span class="line"><span class="code">		定义</span></span><br><span class="line"><span class="code">			Thing</span></span><br><span class="line"><span class="code">				物</span></span><br><span class="line"><span class="code">					一切可以联网的设备</span></span><br><span class="line"><span class="code">			Internet of Things</span></span><br><span class="line"><span class="code">				IoT</span></span><br><span class="line"><span class="code">					物联网</span></span><br><span class="line"><span class="code">						物与物之间通讯，并共享信息，无需人为管理便可以自主运作</span></span><br><span class="line"><span class="code">		组成</span></span><br><span class="line"><span class="code">			服务应用</span></span><br><span class="line"><span class="code">			分析处理</span></span><br><span class="line"><span class="code">			平台</span></span><br><span class="line"><span class="code">			网络</span></span><br><span class="line"><span class="code">			设备</span></span><br><span class="line"><span class="code">		分类</span></span><br><span class="line"><span class="code">			Private IoT</span></span><br><span class="line"><span class="code">				私有物联网</span></span><br><span class="line"><span class="code">					单一机构内部</span></span><br><span class="line"><span class="code">			Public IoT</span></span><br><span class="line"><span class="code">				公有物联网</span></span><br><span class="line"><span class="code">					面向公众或大型用户群体</span></span><br><span class="line"><span class="code">			Community IoT</span></span><br><span class="line"><span class="code">				社区物联网</span></span><br><span class="line"><span class="code">					关联社区或机构群体</span></span><br><span class="line"><span class="code">						交通局</span></span><br><span class="line"><span class="code">						环保局</span></span><br><span class="line"><span class="code">						公安局</span></span><br><span class="line"><span class="code">			Hybrid IoT</span></span><br><span class="line"><span class="code">				混合物联网</span></span><br><span class="line"><span class="code">					两种以上类型物联网的组合</span></span><br><span class="line"><span class="code">		作用</span></span><br><span class="line"><span class="code">			提升制造业、供应链等场景的效率</span></span><br><span class="line"><span class="code">			降低运营成本</span></span><br><span class="line"><span class="code">			保障生产安全</span></span><br><span class="line"><span class="code">				配合工人的可穿戴设备</span></span><br><span class="line"><span class="code">	行业</span></span><br><span class="line"><span class="code">		建筑</span></span><br><span class="line"><span class="code">		智能家居</span></span><br><span class="line"><span class="code">			作用</span></span><br><span class="line"><span class="code">				减少碳排放</span></span><br><span class="line"><span class="code">			案例</span></span><br><span class="line"><span class="code">				智能灯泡</span></span><br><span class="line"><span class="code">		医疗保健</span></span><br><span class="line"><span class="code">			医疗资源管理</span></span><br><span class="line"><span class="code">		制造业</span></span><br><span class="line"><span class="code">		自动驾驶</span></span><br><span class="line"><span class="code">		运输</span></span><br><span class="line"><span class="code">		供应链</span></span><br><span class="line"><span class="code">			RFID</span></span><br><span class="line"><span class="code">				Radio Frequency Identification</span></span><br><span class="line"><span class="code">					射频识别</span></span><br><span class="line"><span class="code">						通过无线电波不接触快速信息交换与存储技术</span></span><br><span class="line"><span class="code">		石油天然气</span></span><br><span class="line"><span class="code">		农业</span></span><br><span class="line"><span class="code">			作用</span></span><br><span class="line"><span class="code">				防止作物歉收</span></span><br><span class="line"><span class="code">			测点</span></span><br><span class="line"><span class="code">				气候</span></span><br><span class="line"><span class="code">				植物</span></span><br><span class="line"><span class="code">				土壤</span></span><br><span class="line"><span class="code">		机器人</span></span><br><span class="line"><span class="code">		可穿戴设备</span></span><br><span class="line"><span class="code">	传感器</span></span><br><span class="line"><span class="code">		定义</span></span><br><span class="line"><span class="code">			将物理现象用电信号的形式输出</span></span><br><span class="line"><span class="code">		种类</span></span><br><span class="line"><span class="code">			图像传感器</span></span><br><span class="line"><span class="code">			光学传感器</span></span><br><span class="line"><span class="code">			温度传感器</span></span><br><span class="line"><span class="code">			湿度传感器</span></span><br><span class="line"><span class="code">			风速传感器</span></span><br><span class="line"><span class="code">			加速度传感器</span></span><br><span class="line"><span class="code">			磁场传感器</span></span><br><span class="line"><span class="code">	数据分析</span></span><br><span class="line"><span class="code">		数据库</span></span><br><span class="line"><span class="code">			Apache IoTDB</span></span><br><span class="line"><span class="code">		可视化</span></span><br><span class="line"><span class="code">			Grafana</span></span><br><span class="line"><span class="code">		告警系统</span></span><br><span class="line"><span class="code">		反控系统</span></span><br><span class="line"><span class="code">		操作系统</span></span><br><span class="line"><span class="code">			AliOS Things</span></span><br><span class="line"><span class="code">				阿里</span></span><br><span class="line"><span class="code">			TencentOS-tiny</span></span><br><span class="line"><span class="code">				腾讯</span></span><br><span class="line"><span class="code">			OpenEdge</span></span><br><span class="line"><span class="code">				百度</span></span><br><span class="line"><span class="code">			KubeEdge</span></span><br><span class="line"><span class="code">				华为</span></span><br><span class="line"><span class="code">		人工智能</span></span><br><span class="line"><span class="code">			信息分析</span></span><br><span class="line"><span class="code">				态势分析</span></span><br><span class="line"><span class="code">			时序预测</span></span><br><span class="line"><span class="code">				车辆预测性维护</span></span><br><span class="line"><span class="code">	安全</span></span><br><span class="line"><span class="code">		终端设备</span></span><br><span class="line"><span class="code">			路由器</span></span><br><span class="line"><span class="code">			交换机</span></span><br><span class="line"><span class="code">			视频监控设备</span></span><br><span class="line"><span class="code">			打印机</span></span><br><span class="line"><span class="code">			eSIM</span></span><br><span class="line"><span class="code">				共享单车电子锁</span></span><br><span class="line"><span class="code">				智能手表</span></span><br><span class="line"><span class="code">				智能手环</span></span><br><span class="line"><span class="code">				车载 T-Box</span></span><br><span class="line"><span class="code">				无人机</span></span><br><span class="line"><span class="code">		传输通讯</span></span><br><span class="line"><span class="code">		数据存储</span></span><br><span class="line"><span class="code">		用户隐私</span></span><br><span class="line"><span class="code">	协议</span></span><br><span class="line"><span class="code">		MQTT</span></span><br><span class="line"><span class="code">			Message Queuing Telemetry Transport</span></span><br><span class="line"><span class="code">				消息队列遥测传输</span></span><br><span class="line"><span class="code">		OPC-UA</span></span><br><span class="line"><span class="code">			Object Linking and Embedding for Process Control Unified Architecture</span></span><br><span class="line"><span class="code">				OPC 同一架构</span></span><br><span class="line"><span class="code">	机构</span></span><br><span class="line"><span class="code">		CAICT</span></span><br><span class="line"><span class="code">			China Academy of Information and Communications Technology</span></span><br><span class="line"><span class="code">				中国信通院</span></span><br><span class="line"><span class="code">		IETE</span></span><br><span class="line"><span class="code">			The Institution of Electronics and Telecommunication Engineers</span></span><br><span class="line"><span class="code">				电子与电信工程师协会</span></span><br><span class="line"><span class="code">		3GPP</span></span><br><span class="line"><span class="code">			Thrid Generation Partnership Project</span></span><br><span class="line"><span class="code">				第三方合作伙伴计划</span></span><br><span class="line"><span class="code">		ISO</span></span><br><span class="line"><span class="code">			International Organization for Standardization</span></span><br><span class="line"><span class="code">				国际标准化组织</span></span><br><span class="line"><span class="code">		ITU</span></span><br><span class="line"><span class="code">			International Telecommunication Union</span></span><br><span class="line"><span class="code">				国际电信联盟</span></span><br><span class="line"><span class="code">		GSMA</span></span><br><span class="line"><span class="code">			Global System for Mobile Communication Assembly</span></span><br><span class="line"><span class="code">				全球移动通信系统协会</span></span><br><span class="line"><span class="code">	历史</span></span><br><span class="line"><span class="code">		1982</span></span><br><span class="line"><span class="code">			卡耐基梅隆大学的自动售货机首次实现物联网设备</span></span><br><span class="line"><span class="code">				检测饮料库存与温度</span></span><br><span class="line"><span class="code">		1993</span></span><br><span class="line"><span class="code">			剑桥大学的咖啡机照相系统首次实现网络摄像头</span></span><br><span class="line"><span class="code">				拍摄咖啡照片以便浏览器查看制作进度</span></span><br><span class="line"><span class="code">		1999</span></span><br><span class="line"><span class="code">			麻省理工学院自动识别实验室首次提出 IoT 概念</span></span><br><span class="line"><span class="code">		2005</span></span><br><span class="line"><span class="code">			国际电信联盟正式提出 IoT 概念</span></span><br><span class="line"><span class="code">		2007</span></span><br><span class="line"><span class="code">			第一部 iPhone 问世开启了移动互联时代</span></span><br><span class="line"><span class="code">		2008</span></span><br><span class="line"><span class="code">			第一届国际物联网大会举行</span></span><br><span class="line"><span class="code">			物联网设备首次超地球人口数量</span></span><br><span class="line"><span class="code">		2013</span></span><br><span class="line"><span class="code">			Google Glass</span></span><br><span class="line"><span class="code">		2014</span></span><br><span class="line"><span class="code">			Amazon Echo</span></span><br><span class="line"><span class="code">		2016</span></span><br><span class="line"><span class="code">			Mirai 僵尸网络控制物联网设备并用于发起 DDoS 攻击</span></span><br><span class="line"><span class="code">			Google Home</span></span><br><span class="line"><span class="code">			物联网设备达到 47 亿台</span></span><br><span class="line"><span class="code">		2017</span></span><br><span class="line"><span class="code">			Apple HomePod</span></span><br><span class="line"><span class="code">		2020</span></span><br><span class="line"><span class="code">			物联网设备达到 116 亿台</span></span><br><span class="line"><span class="code">		2025</span></span><br><span class="line"><span class="code">			预计物联网设备达到 210 亿台</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>物联网</category>
      </categories>
      <tags>
        <tag>IoT</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>一门让你觉得离散数据没白学的语言：TLA+</title>
    <url>/posts/200725/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="88b1ca9036f8aa134c0ea2d4d2cc5c87cb03915de8247082be7db842edba54fb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>离散数学</tag>
        <tag>TLA+</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么 JavaScript 对服务端开发很重要?</title>
    <url>/posts/19989/</url>
    <content><![CDATA[<h2 id="开发人员用一种语言就能编写整个-Web-应用"><a href="#开发人员用一种语言就能编写整个-Web-应用" class="headerlink" title="开发人员用一种语言就能编写整个 Web 应用"></a>开发人员用一种语言就能编写整个 Web 应用</h2><p>　可以减少开发客户端和服务端时所需的语言切换（Clojure, <a href="https://github.com/clojure/clojurescript/">ClojureScript</a> 一样的道理）<br>　代码可以再客户端和服务端中共享（表单校验或游戏逻辑中使用同样的代码）</p>
<h2 id="JSON-是目前非常流行的数据交换格式"><a href="#JSON-是目前非常流行的数据交换格式" class="headerlink" title="JSON 是目前非常流行的数据交换格式"></a>JSON 是目前非常流行的数据交换格式</h2><p>　<a href="https://www.json.org/json-zh.html">JSON</a> 还是 JavaScript 原生的</p>
<h2 id="有些-NoSQL-数据库中用的就是-JavaScript-语言"><a href="#有些-NoSQL-数据库中用的就是-JavaScript-语言" class="headerlink" title="有些 NoSQL 数据库中用的就是 JavaScript 语言"></a>有些 NoSQL 数据库中用的就是 JavaScript 语言</h2><p>　MongoDB 的管理和查询语言都是 JavaScript<br>　CouchDB 的 Map/reduce 也是 JavaScript</p>
<h2 id="JavaScript-是一门编译目标语言"><a href="#JavaScript-是一门编译目标语言" class="headerlink" title="JavaScript 是一门编译目标语言"></a>JavaScript 是一门编译目标语言</h2><p>　<a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS/">List of languages that compile to JS</a></p>
<h2 id="Node-用的虚拟机（V8）会紧跟-ECMAScirpt-标准"><a href="#Node-用的虚拟机（V8）会紧跟-ECMAScirpt-标准" class="headerlink" title="Node 用的虚拟机（V8）会紧跟 ECMAScirpt 标准"></a>Node 用的虚拟机（V8）会紧跟 ECMAScirpt 标准</h2><p>　在 Node 中如果想用新的 JavaScript 语言特性，不用等到所有浏览器都支持</p>
<span id="more"></span>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据生态圈里的一致性算法</title>
    <url>/posts/54206/</url>
    <content><![CDATA[<h2 id="大数据生态圈中，保证一致性的方式举不胜举"><a href="#大数据生态圈中，保证一致性的方式举不胜举" class="headerlink" title="大数据生态圈中，保证一致性的方式举不胜举"></a>大数据生态圈中，保证一致性的方式举不胜举</h2><ul>
<li><a href="https://yuzhouwan.com/posts/60504/">Hadoop</a> 用 <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a>（Zab，即支持事务顺序的 Paxos）</li>
<li><a href="https://yuzhouwan.com/posts/22654/">ElasticSearch</a> 用 <a href="https://yuzhouwan.com/posts/31130/">Hash</a> 路由算法（而非一致性 Hash）</li>
<li><a href="https://yuzhouwan.com/posts/20644/#ElasticSearch-Connector">Cassandra</a> 用 Gossip 闲话算法</li>
<li><a href="https://yuzhouwan.com/posts/2129/">Redis</a> 用 <a href="https://yuzhouwan.com/posts/31915/#Raft">Raft</a> 选举算法</li>
</ul>
<p>他们各有什么区别，为什么会如此选型？</p>
<h3 id="Paxos-选举算法"><a href="#Paxos-选举算法" class="headerlink" title="Paxos 选举算法"></a>Paxos 选举算法</h3><p>　<strong>Paxos</strong> 是最先解决<strong>拜占庭将军问题</strong>的算法，利用<strong>过半选举</strong>的机制，保证了集群数据副本的一致性（微服务中<a href="https://yuzhouwan.com/posts/31915/#其他技术比对">服务注册与发现</a>的场景，其实已经不再适用了）</p>
<h3 id="Raft-选举算法"><a href="#Raft-选举算法" class="headerlink" title="Raft 选举算法"></a>Raft 选举算法</h3><p>　Redis 使用 <strong>Raft</strong> 实现了自己的分布式一致性。Raft 本身和 Paxos 并没有场景上的区别。更多的是，协议上的简化、Term 概念的强化、Log 只会从 Leader 到 Follower 单向同步，使得实现起来会很方便</p>
<h3 id="Zab-原子广播协议"><a href="#Zab-原子广播协议" class="headerlink" title="Zab 原子广播协议"></a>Zab 原子广播协议</h3><p>　Hadoop 偏向于离线的海量数据处理，利用 <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a> 来保证<a href="https://yuzhouwan.com/posts/31915/#Paxos-的强一致性">数据副本的一致性</a>，是最为合适的</p>
<h3 id="Hash-路由算法"><a href="#Hash-路由算法" class="headerlink" title="Hash 路由算法"></a>Hash 路由算法</h3><p>　<a href="https://yuzhouwan.com/posts/22654/">ElasticSearch</a> 集群接收到为文档创建索引的请求时，需要选择在哪一个 shard（完整且独立的 Lucene 索引实例）上对文档进行索引。ElasticSearch 采用的是 <a href="http://www.cse.yorku.ca/~oz/hash.html">djb2</a> 哈希算法（俗称 <a href="https://azrael.digipen.edu/~mmead/www/Courses/CS280/HashFunctions-1.html">times33</a>），对要索引文档默认或指定的 key 进行哈希 <code>hash(key)</code>，然后再对 ElasticSearch 集群中 shard 的数量 n 进行取模，即 $hash(key) \, mod \, n$</p>
<h3 id="一致性-Hash"><a href="#一致性-Hash" class="headerlink" title="一致性 Hash"></a>一致性 Hash</h3><p>　用于对数据存储进行<strong>负载均衡</strong>的算法。最新的进展，是在去年 Google 发表的一篇 <a href="https://arxiv.org/abs/1608.01350">有界负载的一致性 Hash 算法</a>的论文。该算法保证了负载均衡<strong>一致性</strong>和<strong>稳定性</strong>的同时，在<strong>均匀性</strong>方面做出了实质性地改进。同时，Consistent Hashing with Bounded Loads 算法 也在 <a href="http://www.haproxy.org/">HaProxy</a> 开源项目中得以<a href="https://github.com/haproxy/haproxy/blob/master/src/lb_chash.c#L244">应用</a>，有效减少了其 8 倍的缓存带宽</p>
<h3 id="Gossip-闲话算法"><a href="#Gossip-闲话算法" class="headerlink" title="Gossip 闲话算法"></a>Gossip 闲话算法</h3><p>　<strong>Gossip</strong> 主要被 Cassandra 用于实现其分布式一致性。因为 Cassandra 框架，更看重 <strong>去中心化</strong> 和 <strong>容错</strong> 的特性，在不违背 CAP 定理的情况下，能够接受 最终一致性</p>
<span id="more"></span>
<h2 id="实战一致性算法"><a href="#实战一致性算法" class="headerlink" title="实战一致性算法"></a>实战一致性算法</h2><h3 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h3><h4 id="Key-value-Store"><a href="#Key-value-Store" class="headerlink" title="Key-value Store"></a>Key-value Store</h4><h5 id="架构思考"><a href="#架构思考" class="headerlink" title="架构思考"></a>架构思考</h5><h6 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h6><p>　HashMap 的数据是存在内存里的，一旦进程重启，会有丢数据的风险。同时，数据流一旦到了 TB / PB 级别，会存在硬件方面的瓶颈。另外，需要考虑 Key 相同的情况下，需要处理覆盖的问题</p>
<h6 id="Berkeley-DB"><a href="#Berkeley-DB" class="headerlink" title="Berkeley DB"></a>Berkeley DB</h6><p>　实际上是一个增强版的 HashMap，从一个简单的键值对存储，进化到可以管理并行访问、支持事务、数据同步等</p>
<h6 id="Kyoto-Cabinet"><a href="#Kyoto-Cabinet" class="headerlink" title="Kyoto Cabinet"></a>Kyoto Cabinet</h6><p>　HashTable 和 B+ Tree 的结合，不过在到达一定数量级，性能下降比较厉害</p>
<h6 id="LevelDB-HBase"><a href="#LevelDB-HBase" class="headerlink" title="LevelDB / HBase"></a>LevelDB / HBase</h6><p>　利用 LSM Tree 实现了读写分离、顺序写入等功能</p>
<h2 id="知识树"><a href="#知识树" class="headerlink" title="知识树"></a>知识树</h2><p><img data-src="/picture/algorithm/distribution.png" alt="分布式系统"></p>
<center>（利用 <a href="https://www.xmind.net/" target="_blank">XMind</a>™ 绘制而成）</center>




<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://www.amazon.cn/%E4%B8%96%E7%95%8C%E8%91%97%E5%90%8D%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E6%9D%90%E7%B2%BE%E9%80%89%E2%80%A2%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E8%8C%83%E5%9E%8B-%E7%89%B9%E5%B0%BC%E5%8D%9A%E5%A7%86/dp/B001B1PT9Y">《分布式系统：原理与范型（第2版）》</a></li>
<li><a href="https://www.amazon.cn/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E5%BA%93%E9%B2%81%E9%87%8C%E6%96%AF/dp/B00BS58XAK">《分布式系统：概念与设计（原书 第5版）》</a></li>
<li><a href="https://www.amazon.cn/%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98-%E6%9D%A8%E4%BC%A0%E8%BE%89/dp/B00H6X6BE8">《大规模分布式存储系统：原理解析与架构实战》</a></li>
<li><a href="https://book.douban.com/subject/26852650/">《分布式数据库：管理系统实践》</a></li>
<li><a href="https://www.amazon.cn/%E4%B8%96%E7%95%8C%E8%91%97%E5%90%8D%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E6%9D%90%E7%B2%BE%E9%80%89-%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86-%E5%8E%84%E5%85%B9%E5%8F%99/dp/B00JW45XYI">《分布式数据库系统原理（第3版）》</a></li>
<li><a href="http://book.mixu.net/distsys/single-page.html">《Distributed systems for fun and profit》</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="http://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/">Implementing a Key-Value Store</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf">Dynamo: Amazon’s Highly Available Key-value Store</a></li>
</ul>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><ul>
<li><a href="https://cs162.eecs.berkeley.edu/"><strong>CS162</strong>: Operating Systems and Systems Programming</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Hadoop</tag>
        <tag>Algorithm</tag>
        <tag>Apache Cassandra</tag>
        <tag>Apache ZooKeeper</tag>
        <tag>ElasticSearch</tag>
        <tag>Redis</tag>
        <tag>一致性 Hash</tag>
        <tag>CAP</tag>
        <tag>Paxos</tag>
        <tag>Raft</tag>
        <tag>Gossip</tag>
      </tags>
  </entry>
  <entry>
    <title>容器引擎 Docker</title>
    <url>/posts/200314/</url>
    <content><![CDATA[<h2 id="什么是-Docker？"><a href="#什么是-Docker？" class="headerlink" title="什么是 Docker？"></a>什么是 Docker？</h2><blockquote>
<p><a href="https://docs.docker.com/">Docker</a>™ provides a way to run applications securely isolated in a container, packaged with all its dependencies and libraries.</p>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew cask install docker</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>　从 Toolbox 的 Archive <a href="https://get.daocloud.io/toolbox/">页面</a>找到 <a href="https://dn-dao-github-mirror.daocloud.io/docker/toolbox/releases/download/v19.03.1/DockerToolbox-19.03.1.exe">DockerToolbox-19.03.1.exe</a> 并下载</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://docs.docker.com/toolbox/overview/">安装</a></h4><p>　注意安装组件的时候，选择 <code>Full installation</code>，其他的均使用默认的选项，即可</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a><a href="https://docs.docker.com/network/proxy/#configure-the-docker-client">代理</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.docker/config.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"proxies"</span>: {</span><br><span class="line">    <span class="attr">"default"</span>: {</span><br><span class="line">      <span class="attr">"httpProxy"</span>: <span class="string">"socks5://127.0.0.1:1080"</span>,</span><br><span class="line">      <span class="attr">"httpsProxy"</span>: <span class="string">"socks5://127.0.0.1:1080"</span>,</span><br><span class="line">      <span class="attr">"noProxy"</span>: <span class="string">"*.yuzhouwan.com"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h5 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">https://docker.mirrors.ustc.edu.cn</span><br><span class="line">https://hub-mirror.c.163.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外，登陆阿里云账号后，可以通过该地址获取到专属的阿里云镜像</span></span><br><span class="line"><span class="comment"># https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.docker/config.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置守护程序"><a href="#配置守护程序" class="headerlink" title="配置守护程序"></a><a href="https://cloud.google.com/container-registry/docs/pulling-cached-images">配置守护程序</a></h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加如下配置项</span></span><br><span class="line">$ vim /etc/docker/daemon.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 重启 Docker 服务使其生效</span></span><br><span class="line">$ sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验是否生效</span></span><br><span class="line">$ docker system info</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com</span><br><span class="line"><span class="comment"># ..</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="命令行指定"><a href="#命令行指定" class="headerlink" title="命令行指定"></a>命令行指定</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-machine create --engine-registry-mirror=http://hub-mirror.c.163.com -d virtualbox kafka-connect</span><br></pre></td></tr></tbody></table></figure>
<h6 id="Desktop-设置"><a href="#Desktop-设置" class="headerlink" title="Desktop 设置"></a>Desktop 设置</h6><p><img data-src="/picture/docker/docker_mirror.png" alt=""></p>
<center>（对 <a href="https://www.docker.com/" target="_blank">Docker</a>™ 的截图）</center>

<h4 id="Boot-2-Docker"><a href="#Boot-2-Docker" class="headerlink" title="Boot 2 Docker"></a><a href="https://github.com/boot2docker/boot2docker/">Boot 2 Docker</a></h4><ul>
<li>打开 cmd 命令行</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cmd</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>查看帮助文档</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-machine -h</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>创建名为 kafka-connect 的镜像</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-machine create --driver virtualbox kafka-connect</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>进入 kafka-connect 镜像</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-machine env kafka-connect</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">SET DOCKER_TLS_VERIFY=1</span><br><span class="line">SET DOCKER_HOST=tcp://127.0.0.1:2376</span><br><span class="line">SET DOCKER_CERT_PATH=C:\Users\BenedictJin\.docker\machine\machines\kafka-connect</span><br><span class="line">SET DOCKER_MACHINE_NAME=kafka-connect</span><br><span class="line">SET COMPOSE_CONVERT_WINDOWS_PATHS=<span class="literal">true</span></span><br><span class="line">REM Run this <span class="built_in">command</span> to configure your shell:</span><br><span class="line">REM     @FOR /f <span class="string">"tokens=*"</span> %i IN (<span class="string">'docker-machine env kafka-connect'</span>) DO @%i</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>拷贝上面输出的最后一行，去掉 REM 注释，并运行</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ @FOR /f <span class="string">"tokens=*"</span> %i IN (<span class="string">'docker-machine env kafka-connect'</span>) DO @%i</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>此时，就可以执行 docker 相关的命令了</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>移除 kafka-connect 镜像</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-machine rm kafka-connect</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a><a href="https://docs.docker.com/engine/reference/commandline/version/">version</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.5</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.12</span><br><span class="line"> Git commit:        633a0ea</span><br><span class="line"> Built:             Wed Nov 13 07:22:34 2019</span><br><span class="line"> OS/Arch:           darwin/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.5</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.12</span><br><span class="line">  Git commit:       633a0ea</span><br><span class="line">  Built:            Wed Nov 13 07:29:19 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          v1.2.10</span><br><span class="line">  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8+dev</span><br><span class="line">  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></tbody></table></figure>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ service docker status</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Redirecting to /bin/systemctl status  docker.service</span><br><span class="line">● docker.service - LSB: start and stop docker</span><br><span class="line">   Loaded: loaded (/etc/docker/docker; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue 2018-09-18 09:54:31 CST; 29min ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 14743 ExecStart=/etc/docker/docker start (code=exited, status=0/SUCCESS)</span><br><span class="line">   CGroup: /docker.slice/docker.service</span><br><span class="line">           ├─14907 /opt/ali-iaas/docker/plugins/alinet 127.0.0.1</span><br><span class="line">           ├─14919 /opt/ali-iaas/docker/plugins/tmpfs 127.0.0.1</span><br><span class="line">           └─14933 /opt/ali-iaas/docker/plugins/alilocal 127.0.0.1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a><a href="https://docs.docker.com/engine/reference/commandline/logs/">logs</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker logs -f &lt;容器名 or 容器ID&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="login"><a href="#login" class="headerlink" title="login"></a><a href="https://docs.docker.com/engine/reference/commandline/login/">login</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker login reg.docker.yuzhouwan.com</span><br></pre></td></tr></tbody></table></figure>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><a href="https://docs.docker.com/engine/reference/commandline/cp/">cp</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 从容器中将文件拷贝出来</span></span><br><span class="line">$ docker cp &lt;容器名 or 容器ID&gt;:/home/benedict_jin/a.txt /opt/</span><br><span class="line"><span class="comment"># 从将文件拷贝到容器里面</span></span><br><span class="line">$ docker cp /opt/ &lt;容器名 or 容器ID&gt;:/home/benedict_jin/a.txt</span><br></pre></td></tr></tbody></table></figure>
<h3 id="run"><a href="#run" class="headerlink" title="run"></a><a href="https://docs.docker.com/engine/reference/run/">run</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a><a href="https://docs.docker.com/engine/reference/commandline/container_restart/">restart</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker restart &lt;容器名 or 容器ID&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a><a href="https://docs.docker.com/engine/reference/commandline/rmi/">rmi</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># usage</span></span><br><span class="line">$ docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">$ docker rmi k8s.gcr.io/coredns:1.3.1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><a href="https://docs.docker.com/engine/reference/commandline/rm/">rm</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker rm &lt;容器名 or 容器ID&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="Engine-API"><a href="#Engine-API" class="headerlink" title="Engine API"></a><a href="https://docs.docker.com/engine/api/v1.40/">Engine API</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取到 unhealthy 状态的容器</span></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock <span class="string">"http://localhost/containers/json?filters=\{\"health\":\[\"unhealthy\"\]\}"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到容器启动的时间戳</span></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock <span class="string">"http://localhost/containers/&lt;容器 ID&gt;/json"</span> | jq <span class="string">'.State.StartedAt'</span> | date +%s</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h2><h3 id="No-default-Boot2Docker-ISO-found-locally"><a href="#No-default-Boot2Docker-ISO-found-locally" class="headerlink" title="No default Boot2Docker ISO found locally"></a>No default Boot2Docker ISO found locally</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-machine create --driver virtualbox kafka-connect</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Running pre-create checks...</span><br><span class="line">(dataagg) No default Boot2Docker ISO found locally, downloading the latest release...</span><br><span class="line">Error with pre-create check: <span class="string">"Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp 127.0.0.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond."</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>　到 boot2docker 的 <a href="https://github.com/boot2docker/boot2docker/releases">release</a> 页面下载最新的 <a href="https://github.com/boot2docker/boot2docker/releases/download/v17.12.1-ce/boot2docker.iso">boot2docker.iso</a>（当前最新版本为 v17.12.1-ce），并放到 <code>C:\Users\BenedictJin\.docker\machine\cache</code> 目录下，再次运行 <code>docker-machine create xxx</code> 命令即可</p>
<h3 id="Docker-raw-单文件达到-64G"><a href="#Docker-raw-单文件达到-64G" class="headerlink" title="Docker.raw 单文件达到 64G"></a>Docker.raw 单文件达到 64G</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ll -h /Users/benedictjin/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-rw-r--r--  1 benedictjin  staff    64G  3 23 22:18 /Users/benedictjin/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>　进入 <code>Preferences</code> 配置页面，选择  <code>Disk</code> 配置页，调整预分配磁盘大小，点击 <code>Apply</code> 按钮以应用修改</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://docs.docker.com/install/">Install Docker</a></li>
<li><a href="https://www.xmind.net/m/RHSz/">Docker Ecosystem</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/moby/moby">Moby Project - a collaborative project for the container ecosystem to assemble container-based systems</a></li>
</ul>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><ul>
<li><a href="https://hub.docker.com/">Docker Hub</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>开源时序数据库 InfluxDB</title>
    <url>/posts/200315/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p><strong><a href="https://docs.influxdata.com/">InfluxDB</a></strong>™ is a time series database designed to handle high write and query loads. It is an integral component of the TICK stack. InfluxDB is meant to be used as a backing store for any use case involving large amounts of timestamped data, including DevOps monitoring, application metrics, IoT sensor data, and real-time analytics.</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="DataBase"><a href="#DataBase" class="headerlink" title="DataBase"></a>DataBase</h3><p>　类似于传统数据库中的 DataBase 概念</p>
<h3 id="Measurement"><a href="#Measurement" class="headerlink" title="Measurement"></a>Measurement</h3><p>　和 OLAP 中广义上的度量概念一致，部分 OLAP 数据库中又称为 Metric</p>
<h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>　和 OLAP 中广义上的维度概念一致，部分 OLAP 数据库中又称为 TagKV</p>
<h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><p>　数值</p>
<h3 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h3><p>　时间戳</p>
<h3 id="Points"><a href="#Points" class="headerlink" title="Points"></a>Points</h3><p>　数据点</p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>　数据点组成的序列</p>
<h3 id="Retention-Policy"><a href="#Retention-Policy" class="headerlink" title="Retention Policy"></a>Retention Policy</h3><p>　数据过期策略，即 TTL</p>
<span id="more"></span>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>无任何额外的依赖（例如 <a href="https://yuzhouwan.com/tags/Apache-ZooKeeper/">ZooKeeper</a>、<a href="https://yuzhouwan.com/tags/HDFS/">HDFS</a> 等）</li>
<li>支持类 SQL 查询（<a href="https://yuzhouwan.com/posts/200315/#InfluxQL">InfluxQL</a>）</li>
<li>支持多租户和简单的鉴权功能</li>
<li>开源社区活跃，且常年霸榜 <a href="https://db-engines.com/en/ranking/time+series+dbms">DB-Engines</a> 时序数据库的第一名</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>未开源集群版本</li>
<li>不支持懒加载（启动需要扫描所有 TSM 文件，会导致节点故障恢复慢，而 <a href="https://yuzhouwan.com/posts/5845/#Segment-%E5%8A%A0%E8%BD%BD">Apache Druid</a> 是支持的）</li>
<li>无法跨 Measurement 进行 Join 操作</li>
<li>无法存储相同的数据点，会发生覆盖写</li>
<li>不支持冷热数据的分层存储</li>
</ul>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><div class="note info">鉴于目前 InfluxDB 2.x 还没有稳定版本发布，所以这里我们使用的 InfluxDB 版本是 1.x</div>



<h3 id="源码版"><a href="#源码版" class="headerlink" title="源码版"></a>源码版</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ go get github.com/influxdata/influxdb</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/influxdata/influxdb</span><br><span class="line">$ go clean ./...</span><br><span class="line">$ go get -t -v ./...</span><br><span class="line">$ go install -ldflags=<span class="string">"-X main.version=1.8.2"</span> ./...</span><br><span class="line">$ ll <span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="variable">$GOPATH</span>/bin/influxd</span><br></pre></td></tr></tbody></table></figure>
<h3 id="容器版"><a href="#容器版" class="headerlink" title="容器版"></a>容器版</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">$ docker pull influxdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ docker run -idt --name influxdb -p 8086:8086 -v ~/influxdb:/var/lib/influxdb influxdb</span><br></pre></td></tr></tbody></table></figure>
<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">5cf826d18054        influxdb            <span class="string">"/entrypoint.sh infl…"</span>   50 seconds ago      Up 49 seconds       0.0.0.0:8086-&gt;8086/tcp   influxdb</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it influxdb bash</span><br></pre></td></tr></tbody></table></figure>
<h5 id="连接-InfluxDB-实例"><a href="#连接-InfluxDB-实例" class="headerlink" title="连接 InfluxDB 实例"></a>连接 InfluxDB 实例</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ influx</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Connected to http://localhost:8086 version 1.8.2</span><br><span class="line">InfluxDB shell version: 1.8.2</span><br></pre></td></tr></tbody></table></figure>
<h5 id="InfluxQL"><a href="#InfluxQL" class="headerlink" title="InfluxQL"></a>InfluxQL</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">&gt; CREATE DATABASE yuzhouwan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数据库</span></span><br><span class="line">&gt; USE yuzhouwan</span><br><span class="line">Using database yuzhouwan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示数据库</span></span><br><span class="line">&gt; SHOW DATABASES</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">yuzhouwan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">&gt; CREATE USER asdf2014 WITH PASSWORD <span class="string">'yuzhouwan.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示用户</span></span><br><span class="line">&gt; SHOW USERS</span><br><span class="line">user     admin</span><br><span class="line">----     -----</span><br><span class="line">asdf2014 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋权</span></span><br><span class="line">&gt; GRANT ALL PRIVILEGES ON yuzhouwan TO asdf2014</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Helm-云原生"><a href="#Helm-云原生" class="headerlink" title="Helm 云原生"></a><a href="https://hub.helm.sh/charts/influxdata/influxdb">Helm 云原生</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ helm repo add influxdata https://helm.influxdata.com/</span><br><span class="line">$ helm install influxdata/influxdb --version 4.8.2 --generate-name</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">NAME</span>: <span class="string">influxdb-1598258562</span></span><br><span class="line"><span class="attr">LAST</span> <span class="string">DEPLOYED: Mon Aug 24 16:42:47 2020</span></span><br><span class="line"><span class="attr">NAMESPACE</span>: <span class="string">default</span></span><br><span class="line"><span class="attr">STATUS</span>: <span class="string">deployed</span></span><br><span class="line"><span class="attr">REVISION</span>: <span class="string">1</span></span><br><span class="line"><span class="attr">TEST</span> <span class="string">SUITE: None</span></span><br><span class="line"><span class="attr">NOTES</span>:<span class="string"></span></span><br><span class="line"><span class="attr">InfluxDB</span> <span class="string">can be accessed via port 8086 on the following DNS name from within your cluster:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">http</span>:<span class="string">//influxdb-1598258562.default:8086</span></span><br><span class="line"></span><br><span class="line"><span class="attr">You</span> <span class="string">can connect to the remote instance with the influx CLI. To forward the API port to localhost:8086, run the following:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kubectl</span> <span class="string">port-forward --namespace default $(kubectl get pods --namespace default -l app=influxdb-1598258562 -o jsonpath='{ .items[0].metadata.name }') 8086:8086</span></span><br><span class="line"></span><br><span class="line"><span class="attr">You</span> <span class="string">can also connect to the influx CLI from inside the container. To open a shell session in the InfluxDB pod, run the following:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kubectl</span> <span class="string">exec -i -t --namespace default $(kubectl get pods --namespace default -l app=influxdb-1598258562 -o jsonpath='{.items[0].metadata.name}') /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">To</span> <span class="string">view the logs for the InfluxDB pod, run the following:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kubectl</span> <span class="string">logs -f --namespace default $(kubectl get pods --namespace default -l app=influxdb-1598258562 -o jsonpath='{ .items[0].metadata.name }')</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a><a href="https://grafana.com/docs/installation/debian/">Grafana</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ wget https://dl.grafana.com/oss/release/grafana-6.0.0-beta2.x86_64.rpm</span><br><span class="line">$ sudo yum localinstall grafana-6.0.0-beta2.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl start grafana-server</span><br><span class="line">$ systemctl status grafana-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自启动</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> grafana-server.service</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Telegraf"><a href="#Telegraf" class="headerlink" title="Telegraf"></a><a href="https://github.com/influxdata/telegraf">Telegraf</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://dl.influxdata.com/telegraf/releases/telegraf-1.12.3-1.x86_64.rpm</span><br><span class="line">$ sudo yum localinstall telegraf-1.12.3-1.x86_64.rpm</span><br><span class="line">$ telegraf config &gt; telegraf.conf</span><br><span class="line">$ telegraf --config telegraf.conf</span><br></pre></td></tr></tbody></table></figure>
<h2 id="TICK"><a href="#TICK" class="headerlink" title="TICK"></a>TICK</h2><blockquote>
<p>Collectively, Telegraf, InfluxDB, Chronograf and Kapacitor are known as the TICK Stack.</p>
<p>The TICK Stack is a loosely coupled yet tightly integrated set of open source projects designed to handle massive amounts of time-stamped information to support your metrics analysis needs.</p>
</blockquote>
<p><img data-src="/picture/influxdb/influxdb_tick.png" alt="InfluxDB TICK Stack"></p>
<center>（图片来源：<a href="https://www.influxdata.com/time-series-platform/telegraf/" target="_blank">InfluxDB</a>™ 官网）</center>







<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -sL -I localhost:8086/ping | grep -i version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">X-Influxdb-Version</span>: <span class="string">v1.8.2</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 输入如下命令，即可进入到 InfluxDB 命令交互的控制台</span></span><br><span class="line">$ influx -host <span class="string">'localhost'</span> -port <span class="string">'8086'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&gt; show databases;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># CREATE DATABASE &lt;database_name&gt; [WITH [DURATION &lt;duration&gt;] [REPLICATION &lt;n&gt;] [SHARD DURATION &lt;duration&gt;] [NAME &lt;retention-policy-name&gt;]]</span></span><br><span class="line">&gt; create database <span class="string">"yuzhouwan"</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&gt; show databases;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&gt; use yuzhouwan;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Using database yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&gt; insert blog,protocol=https,name=yuzhouwan value=666</span><br></pre></td></tr></tbody></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="明细查询"><a href="#明细查询" class="headerlink" title="明细查询"></a>明细查询</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">name: blog</span><br><span class="line">time                name      protocol value</span><br><span class="line">----                ----      -------- -----</span><br><span class="line">1556438552229094000 yuzhouwan https    666</span><br></pre></td></tr></tbody></table></figure>
<h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">select</span> mean(<span class="keyword">value</span>) <span class="keyword">from</span> blog</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">name: blog</span><br><span class="line">time mean</span><br><span class="line">---- ----</span><br><span class="line">0    666</span><br></pre></td></tr></tbody></table></figure>
<h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&gt; select * from blog WHERE time &gt; <span class="string">'2019-04-01T00:00:00Z'</span> OR time &lt; <span class="string">'2019-05-01T00:00:00Z'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">name: blog</span><br><span class="line">time                name      protocol value</span><br><span class="line">----                ----      -------- -----</span><br><span class="line">1556438552229094000 yuzhouwan https    666</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">优缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">通过 HTTP 接口直接查询</td>
<td style="text-align:center">简单易用</td>
</tr>
<tr>
<td style="text-align:center">influx_tools 命令行工具里的 exporter 功能</td>
<td style="text-align:center">并不能导出原始数据点，只能操作 shard</td>
</tr>
<tr>
<td style="text-align:center">influx_inspect 命令行工具里的 export 功能</td>
<td style="text-align:center">支持导出原始数据点，直接操作底层 TSM、WAL 文件</td>
</tr>
</tbody>
</table>
</div>
<h4 id="query-接口"><a href="#query-接口" class="headerlink" title="query 接口"></a>query 接口</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -G <span class="string">'http://localhost:8086/query?pretty=true'</span> --data-urlencode <span class="string">"db=yuzhouwan"</span> --data-urlencode <span class="string">'q=select * from blog'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"results"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"series"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"columns"</span>: [</span><br><span class="line">            <span class="string">"time"</span>,</span><br><span class="line">            <span class="string">"name"</span>,</span><br><span class="line">            <span class="string">"protocol"</span>,</span><br><span class="line">            <span class="string">"value"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"blog"</span>,</span><br><span class="line">          <span class="attr">"values"</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"2019-04-28T08:02:32.229094Z"</span>,</span><br><span class="line">              <span class="string">"yuzhouwan"</span>,</span><br><span class="line">              <span class="string">"https"</span>,</span><br><span class="line">              <span class="number">666</span></span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"statement_id"</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="influx-inspect-命令"><a href="#influx-inspect-命令" class="headerlink" title="influx_inspect 命令"></a>influx_inspect 命令</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ influx_inspect <span class="built_in">export</span> -database yuzhouwan -start 2019-01-01T00:00:00+00:00 -end 2019-12-01T00:00:00+00:00 -out yuzhouwan.out</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">writing out tsm file data <span class="keyword">for</span> yuzhouwan/autogen...complete.</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat yuzhouwan.out</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># INFLUXDB EXPORT: 2019-01-01T08:00:00+08:00 - 2019-12-01T08:00:00+08:00</span></span><br><span class="line"><span class="comment"># DDL</span></span><br><span class="line">CREATE DATABASE yuzhouwan WITH NAME autogen</span><br><span class="line"><span class="comment"># DML</span></span><br><span class="line"><span class="comment"># CONTEXT-DATABASE:yuzhouwan</span></span><br><span class="line"><span class="comment"># CONTEXT-RETENTION-POLICY:autogen</span></span><br><span class="line"><span class="comment"># writing tsm data</span></span><br><span class="line">blog,name=yuzhouwan,protocol=https value=666 1556438552229094000</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li>Data Management - <a href="https://docs.influxdata.com/influxdb/v1.7/query_language/database_management/#create-database">CREATE DATABASE</a></li>
<li>Line Protocol Syntax - <a href="https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_reference/#data-types">Data Types</a></li>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/tools/shell/#write-data-to-influxdb-with-insert">Write data to InfluxDB with insert</a></li>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/tools/influx_inspect/">Influx Inspect disk utility</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li>Influxdata / <a href="https://github.com/influxdata/influxdb-java">Influxdb-java</a></li>
<li>Influxdata / <a href="https://github.com/influxdata/telegraf">Telegraf</a></li>
<li>Influxdata / <a href="https://github.com/influxdata/chronograf">Chronograf</a></li>
<li>Influxdata / <a href="https://github.com/influxdata/kapacitor">Kapacitor</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Helm</tag>
        <tag>InfluxDB</tag>
        <tag>InfluxQL</tag>
        <tag>Telegraf</tag>
        <tag>Grafana</tag>
        <tag>Golang</tag>
        <tag>TSDB</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表</title>
    <url>/posts/31130/</url>
    <content><![CDATA[<h2 id="什么是-散列表"><a href="#什么是-散列表" class="headerlink" title="什么是 散列表?"></a>什么是 散列表?</h2><p>　散列表（Hash Table，即哈希表）是根据键值（Key）而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表</p>
<h2 id="为什么要有-散列表"><a href="#为什么要有-散列表" class="headerlink" title="为什么要有 散列表?"></a>为什么要有 散列表?</h2><h3 id="可以提供快速的插入操作和查找操作"><a href="#可以提供快速的插入操作和查找操作" class="headerlink" title="可以提供快速的插入操作和查找操作"></a>可以提供快速的插入操作和查找操作</h3><p>　不论哈希表中有多少数据，插入和删除（有时包括侧除）只需要接近常量的时间即 <code>O(1)</code> 的时间级<br>　实际上，这只需要几条机器指令<br>　哈希表运算得非常快，在计算机程序中，如果需要在一秒种内查找上千条记录通常使用哈希表（例如拼写检查器），而树的操作通常需要 <code>O(N)</code> 的时间级</p>
<h3 id="编程实现相对容易"><a href="#编程实现相对容易" class="headerlink" title="编程实现相对容易"></a>编程实现相对容易</h3><h2 id="散列表工作机制"><a href="#散列表工作机制" class="headerlink" title="散列表工作机制"></a>散列表工作机制</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>　使用一个数组实现的无序符号表<br>　意味着，数组创建后，难于扩展（某些哈希表被基本填满时，性能下降得非常严重）<br>　要么预设足够的空间，要么定期将数据迁移到更大的哈希表</p>
<span id="more"></span>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>　首先，用散列函数将被查找的键转化为数组的一个索引<br>　其次，处理碰撞冲突</p>
<ul>
<li>拉链法<br> 使用原始的链表数据类型来扩展 SequentialSerchT<br> 为 M 个元素分别构建符号表来保存散列到这里的键</li>
<li>线性探测法<br> 用大小为 M 的数组保存 N 个键值对（M &gt; N, 依靠数组中空位解决碰撞冲突，此策略的所有方法统称为开放地址散列表） </li>
</ul>
<h2 id="散列表在-Java-中的相关实现：HashMap"><a href="#散列表在-Java-中的相关实现：HashMap" class="headerlink" title="散列表在 Java 中的相关实现：HashMap"></a>散列表在 Java 中的相关实现：HashMap</h2><h3 id="java-lang-Object-的规范"><a href="#java-lang-Object-的规范" class="headerlink" title="java.lang.Object 的规范"></a>java.lang.Object 的规范</h3><ul>
<li>如果一个对象的 <code>equals</code> 方法做比较所用到的信息没有被修改的话，那么，对该对象调用 <code>hashCode</code> 方法多次，必须始终如一地返回同一个整数</li>
<li>如果两个对象根据 <code>equals(Object)</code> 方法是相等，那么调用这两个对象中任意一个对象的 <code>hashCode</code> 方法必须产生同样的整数结果</li>
<li>对于不相等的对象产生截然不同的整数结果，有可能提高散列表的性能</li>
</ul>
<h3 id="HashMap-失效的情况"><a href="#HashMap-失效的情况" class="headerlink" title="HashMap 失效的情况"></a>HashMap 失效的情况</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuzhouwan.hashCode2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> areaCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> exchange;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> extension;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(<span class="keyword">int</span> areaCode, <span class="keyword">int</span> exchange, <span class="keyword">int</span> extension)</span> </span>{</span><br><span class="line">        rangeCheck(areaCode, <span class="number">999</span>, <span class="string">"area code"</span>);</span><br><span class="line">        rangeCheck(exchange, <span class="number">999</span>, <span class="string">"exchange"</span>);</span><br><span class="line">        rangeCheck(extension, <span class="number">9999</span>, <span class="string">"extension"</span>);</span><br><span class="line">        <span class="keyword">this</span>.areaCode = (<span class="keyword">short</span>) areaCode;</span><br><span class="line">        <span class="keyword">this</span>.exchange = (<span class="keyword">short</span>) exchange;</span><br><span class="line">        <span class="keyword">this</span>.extension = (<span class="keyword">short</span>) extension;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">int</span> max, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (arg &lt; <span class="number">0</span> || arg &gt; max)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(name + <span class="string">": "</span> + arg);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = prime * result + areaCode;</span><br><span class="line">        result = prime * result + exchange;</span><br><span class="line">        result = prime * result + extension;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If u put the param that is not Object and forget use the annotation that name is 'Override',</span></span><br><span class="line"><span class="comment">     * the equals method loses efficacy and u will find the reason hardly.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> PhoneNumber)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        PhoneNumber pn = (PhoneNumber) o;</span><br><span class="line">        <span class="keyword">return</span> pn.extension == extension &amp;&amp;</span><br><span class="line">                pn.exchange == exchange &amp;&amp;</span><br><span class="line">                pn.areaCode == areaCode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals2</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        PhoneNumber other = (PhoneNumber) obj;</span><br><span class="line">        <span class="keyword">if</span> (areaCode != other.areaCode) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (exchange != other.exchange) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (extension != other.extension) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * if u do not rewrite the hashCode method,</span></span><br><span class="line"><span class="comment">     * u will get the different hashCode when u init the same object, then the hashMap will work unusually.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>{</span><br><span class="line">        Map&lt;PhoneNumber, String&gt; m = <span class="keyword">new</span> HashMap&lt;PhoneNumber, String&gt;();</span><br><span class="line"></span><br><span class="line">        PhoneNumber pn = <span class="keyword">new</span> PhoneNumber(<span class="number">408</span>, <span class="number">867</span>, <span class="number">5309</span>);</span><br><span class="line">        m.put(pn, <span class="string">"Jenny"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"pn\' hashCode: "</span> + pn.hashCode() + <span class="string">" - "</span></span><br><span class="line">                + m.get(pn));</span><br><span class="line"></span><br><span class="line">        pn = <span class="keyword">new</span> PhoneNumber(<span class="number">408</span>, <span class="number">867</span>, <span class="number">5309</span>);</span><br><span class="line">        System.out.println(<span class="string">"pn\' hashCode: "</span> + pn.hashCode() + <span class="string">" - "</span></span><br><span class="line">                + m.get(pn));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　如果没有 hashCode 的结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pn hashCode: <span class="number">909751202</span> - Jenny</span><br><span class="line">pn hashCode: <span class="number">104885374</span> - <span class="keyword">null</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="处方"><a href="#处方" class="headerlink" title="处方"></a>处方</h3><p>　1. 把某个非零长数值，比如说 17，保存在一个叫 result 的 int 类型变量中<br>　2. 对于对象中每一个关键域 f（指 equals 方法中考虑的每个域），完成以下步骤：<br>　　a. 为该域计算 int 类型的散列码 c：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">i. 如果该域是 <span class="keyword">boolean</span> 类型，则计算 (f?<span class="number">0</span>:<span class="number">1</span>) </span><br><span class="line">ii. 如果该域是 <span class="keyword">byte</span>、<span class="keyword">char</span>、<span class="keyword">short</span> 或者 <span class="keyword">int</span> 类型，则计算  (<span class="keyword">int</span>) f</span><br><span class="line">iii. 如果该域是 <span class="keyword">long</span> 类型，则计算 (<span class="keyword">int</span>) (f ^ (f &gt;&gt;&gt; <span class="number">32</span>)) </span><br><span class="line">iv. 如果该域是 <span class="keyword">float</span> 类型，则计算 Float.floatToIntBits(f) </span><br><span class="line">v. 如果该域是 <span class="keyword">double</span> 类型，则计算 Double.doubleToLongBits(f) 得到一个 <span class="keyword">long</span> 类型的值，然后按照步骤 <span class="number">2.</span>a.iii，对该 <span class="keyword">long</span> 型值计算散列值</span><br><span class="line">vi. 如果该域是一个对象引用，并且该类的 equals 方法通过递归调用 equals 的方式来比较这个域，则同样对这个域递归调用 hashCode</span><br><span class="line">　如果要求一个更为复杂的比较，则为这个域计算一个 <span class="string">"规范表示（canonical representation）"</span>，然后针对这个范式表示调用 hashCode</span><br><span class="line">　如果这个域的值为 <span class="keyword">null</span>，则返回 <span class="number">0</span>（也可以设置为其他某个常数，但习惯上使用 <span class="number">0</span>）</span><br><span class="line">vii. 如果该域是一个数组，则把每一个元素当做单独的域来处理</span><br><span class="line">　也就是说，递归地应用上述规则，对每个重要的元素计算一个散列码，然后根据步骤 <span class="number">2.</span>b 中的做法把这些散列值组合起来</span><br></pre></td></tr></tbody></table></figure>
<p>　　b. 按照下面的公式，把步骤 a 中计算得到的散列码 c 组合到 result 中：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">result = <span class="number">37</span> * result + c;</span><br></pre></td></tr></tbody></table></figure>
<p>　3. 返回 result<br>　4. 写完了 hashCode 方法之后，问自己 “是否相等的实例具有相等的散列码”。如果不是的话，找出原因，并修改错误</p>
<h3 id="冗余域（redundant-field）"><a href="#冗余域（redundant-field）" class="headerlink" title="冗余域（redundant field）"></a>冗余域（redundant field）</h3><p>　如果一个域的值可以根据参与计算的其他域值计算出来，则把这样的域排除在外是可以接受的</p>
<h2 id="ConcurrentHashMap-如何实现线程安全"><a href="#ConcurrentHashMap-如何实现线程安全" class="headerlink" title="ConcurrentHashMap 如何实现线程安全"></a>ConcurrentHashMap 如何实现线程安全</h2><p>　ConcurrentHashMap 中加了 lock 的方法（<strong>scanAndLockForPut、scanAndLock、lock 用来添加锁，并使用 try-finally 释放锁，以及使用 sun.misc.Unsafe 提供 volatile 变量</strong>）<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">+ java.util.concurrent.ConcurrentHashMap.Segment&lt;K, V&gt;</span><br><span class="line">    - scanAndLockForPut  +  unclock</span><br><span class="line">        put</span><br><span class="line">    - scanAndLock        +  unclock</span><br><span class="line">        remove、replace</span><br><span class="line">    - lock               +  unclock</span><br><span class="line">        clear</span><br><span class="line">    - java.util.concurrent.locks.ReentrantLock.lock()  +  unlock()</span><br><span class="line">        size、containsValue</span><br><span class="line"></span><br><span class="line">+ java.util.concurrent.locks.ReentrantLock.lock() -&gt; java.util.concurrent.locks.ReentrantLock.Sync.lock()</span><br><span class="line">+ java.util.concurrent.locks.ReentrantLock.unlock() -&gt; java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int)</span><br><span class="line">        writeObject(Serialization Support)</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>sun.misc.Unsafe.getObjectVolatile(Object, long)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">get            <span class="comment">// manually integrate access methods to reduce overhead</span></span><br><span class="line">containsKey    <span class="comment">// same as get() except no need for volatile value read</span></span><br></pre></td></tr></tbody></table></figure>
<p>readObject 中读取流中所有的 Object</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Read the keys and values, and put the mappings in the table</span></span><br><span class="line"><span class="keyword">for</span> (;;) {                          <span class="comment">// = while(true)</span></span><br><span class="line">    K key = (K) s.readObject();     <span class="comment">// java.io.ObjectInputStream</span></span><br><span class="line">    V value = (V) s.readObject();</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">break</span>;                      <span class="comment">// 只有达到这个条件，才可以退出这个死循环</span></span><br><span class="line">    put(key, value);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hash</tag>
        <tag>HashMap</tag>
        <tag>ConcurrentHashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的数学</title>
    <url>/posts/4534/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="46cc8b35c97ba8656abea25822e47f2e333c690e03a0552a753b9b0c1fcbdb16"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>架构方法论大合集</title>
    <url>/posts/210313/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bc7e6cb605a92f64165513b207c637f5785703770790156bd7fa2a16a91900ba">19b47c2e63483c71ab5ffd3d7c9ad9ec9999930add07a963dc119a683c834794bbe55f82d1095f696809832497b31b3e958692bb4fd81ac22cc4119cc1b053d958732e38fcc01d6fba4940377f30fcff45099be44f5296f3938293821635e9f30c29310e77a8e741135b421b802bc341bf66730b485ade95b04292d52dad5c60430ad5fc1f938dee75963a49fa9d4155e4354ac40e499ece30b8468f9ea1f71366e4e629a9eb5ae22e74e3a6450a55bc77a843dc91b4de4db773cccf5d2c84b44c8e56c9eae0e46c3a0f3c0c6c4068e3fa7dc6a22bfc78b22ebfecdb9b8b210f429c1b5a2dd45cedc8611b01bedcd803aaad7be78261a5ff45caaa9b9adb4acd4902c2797eede35e4657e0d30b62ca8293009da4da6cc360819004135c0bb400c7f737c7ef75b8e44a7e968cd67fac5eb0b97a82d26b853ec4519abf97ae274df1619a1e545040d0347f0ae7333d2d7a5e85d9abe5ebfcc4425aed5be7b90381632dbcb8ceef8add4b98440db6fbbd12d0be3e02148e01433f7f75ca82581e9ba10e32fae6a048d925055b7c1b8998edd8691ffd2529623f5220c1cd0cae85ed8f726c95f0b23d5881022c541b7f161025c18a42bede0938e7a92e96c78f5316abde40432c2e6904fa4eb5a968e51cf119234b407db8bd31571c5585f533cd0ed13944bd32d773d5261cc2850efc2ce3327513ae88f94e57bdce284fc2f34b6ae83fdcdd89222c5c934af2923b4b08f54005e3f141db208f179e964942895ec7d3d7c28441901961ed0aeb65fc9d18b15a12a0b1507d5befa8c6db1e27a17d1cf30356d7e8750c2bca91e49d6f334624cf4d0ad4b07c6e3dd73f5274366568e142b37db70f6418e105b9c107cb1dd27fb0852c12f94a9762307bb4468b0a798be8eee17fbd8b02c3c6964c943ed9abae2af765ac3cbd6f3e1db8e7dcff71691e39bc9fc2fca0865c76212cbe0bcfbaede40ed982224e3c03cc2495dd2e0d40374ba69adcf85ddccc769bdebb432da9e18a4adb211b954a95150235981771282b5e5ae899b68c19dc5dde8b7ef9488c763a0202adf347b26bcbe9d62c433e2c23742a0de1cf668707e1c035f823a415e81576341ea9f435d903da92c68c0abfe03739cb6d0033a0be8feb6910b349fd35ba208939a751dcdf2b499be06761ac1be27b9f26522bb2aa184c391491a42542f2f56f1c823581eec5757b90a9693bc5550eb9b9b28d45e0701a83684daa2da79eed8bef97db765ad48963145c466c534ca41ef9f2793b7c3b7c0f294d448253fb1ccf44a5c08e90450c77ce64f4ca95b510163a41fca1242be62f8c2083747b5b594ff1e9b72dfb0a2f3bc2b97f621d4264973c0310c64aa2b8217a27a1baef9f91d8445b4cca38c89ce0fff58103363df4f10e8dbd7b82d84968693433d090fe59d8a1af65d2987c3298104615516b0401990fe2733f43c31ec29bfc7ce9cb7e0b6c69f5ca9d719ce859c04785311864fc83e02781a1ca6da2b51ab436f6eafb6a35362b4bda7477f42a54409f8a06985dede65f071808c5e7765fe740584a78bfecfa014a47950094d2deef987e751de21518f16959d9a39d5929326c8ddd097a272850ecdd531435f2bf75faa1c8bff4bef82a2601ecbb60f07f8f6b693158bc2a7620b46bb90b42c812a83e1fb95f604a4064a38a09837e0c70bb3e3aef1dbe42a64cc9198863982dce70ec80bebc2c857d31e718a7ea2d68b0555f85328cc8f8d0e6cf3c520128a8c46b6f17061135bb9f5519a2bc445f4a7382a3c147c01eb3c84c9418f213691f424dfb4c1dff3827bff0fa8a28eec523f8fd8b117eac2153f1f89868da75168495b02d343c57ea40e8ffb6ce9d4c5406a37ce8224a7a58b9a2dfa02ec130c03e0b6992ba973c497920e15a86ac64da7e674c956ccee1fcfde48c235b8ea5a419d807670cf07bc34598314720eab788ee9bba5da57b6e08ce91501432266b33a6548fec243ae5f27ea93c782d8372192d74898761b60cd6568b9b1c0c5dc6f3d51e8106db2432dadfb04c60253cc4b18080195e9fbbb25a833508df8ce74585a04dae316ffa878175a2b1720ce3f531fddb424daf11fd07193e58b1062b0eacba98de8f2e75c737471bc3f980724c206b40574160ddd08a84d465445fb41e3e19f7170aa8248d114a14e0850ffcc1f544f774ce7e55bf984611d06934ac5fc530de4a8da47bbf2f93968b80987cd348abc19e6b2b55d6870c50cf522a5248d3e1ad1657edde095511310d1181177147f512de3794c7deaf66231a99ff6eed2476a6cd877328055864395d50dd79c509d90029116297ef4b9ea72fbcbc1c337322aa7289c70f017c5b53d78dba0bf5535c0adaf3762e9f8254e63b33e5992325f9ad5287dc6c5c008680f9bb8443d4ab97fd5400ceca94bb2eb797a96cbe34af89bb9cfee69efeaf3ded4f2aca7c616c22296a92884827062cfb55f19b43b86128bd5f183ba2351a20804d3eb950fe27e6c9a2a1f5c8a0ce4aafc1861e2d6101cc8caefa3b9459daa68fe1624d13def2fe37e4754b8b813f9c467fd84424b8930b709bc60c4c95fbf6cd7fb54644ddb26a236c63b356f68b2dd18d15dc111c6159e7ea20f697369d951c50a2c064f8dca3c086010adbc6421e420bab18fb92b9e3f9ec1795ceeefa14f7f1ed416da8096c04a143c787cebe5d2b6fcde517c38a97cb1108bd9255bcce4230014fce6e7ba8417d1d72b6457db3ea81048773441a8a7a4f545d5e7641e526b99c68bb1a8971d0028182705ed08ff9b58b4b67269e2a90b9cdabd1e5c6e1fa430844cdf494ff7a17e431203f0b8bbb0d45aaad3e1eb1e97bab702db6ae8320b8ddbff2ffe32f715f1bbf8d7389bb5cabf9768294691944a90efd4e80d123ee93a8438dee510eed4bfb782dbbdfb90e4d80eddc6409534c357777c459fe5b2b44c7713c9cf3064501d6d25f718c7018328cae15bb012a8d9a160263bfb604a4590a43f9cd282dde404407d53009976416d011d3d16123171602c388bb3075b95316527d86cb5939267c9587cd00dca4f3047328326fc5974fc7d851d8e09b08aa14298f88bee9c33692c0ddb6a8002b2f4723809bacd27c3aee296217cfcf9aa10ee492b5f2654e18fb24a5967e5afcc695e7713a253914c5a3301cc9933d8e4aa1d9d53306063bd80a290b6ac8e9dfaa854b4dc5cfb11af9fd5b390516b62638fc7323b7c62d4599a513fb4b7dab4aa5491a1b490a1db06d23b889870e18cd409c8ce896e6d38e09ef4f39e7f1750406295c7d16afa58f2d50055e6c63b1462af33943e7ae4a17b1340f70d29056456318cace49e7f45cc5a350757a573a7064691dcc6aae6e74bdebfdad09cefe288ea4b628e055a93bb351cfe20e65702d9a756006ea81948e159502ddd25319181b439defed77ba9339ae86fc3548bab50176472b2c86691f5b020a1b587f2c954a96167107ea0f97a7a215c6b299a4d04f7da7cb26620365de6f31508609f25253c1c06fc4ded2572d3b3f2a71418d3e60773d64755d5920577284b30083c14d0f068c165897892b6417f0327e07313459871903c68e963e140bfbe1ced085efec7eae7ffbe23fc96149095497f6187d28e4585b96fc019bcb196e10f4ac6eb9b1be8e483cea35f6b6344b49eef9444681151b1da6213a0f5c7f718d3c6e76d2fe6afa01c47954244e20ac3d78959ac6c76f2302eb475d442df57f4bf4cde11f37c9ef6dccd4dcc01565468940f6cc5a67b85cf84ca7a54a5d9b084f760e4150f9f0c3cd664b47fb58b9979f6d30d575718f852ce1eb997f1d26689bc5e998246d1696069a6f6644144ff53bd42ba7e2d4c80e44086c500f98cb12aff15c319612778e4c6d407411c10725818ff0f82861fb1976751487a1d22a8efca386dcc2e33615ce0dbceb2b86733395519f352de0a449922677ba59dae17f00ad8e056583e9b5ba37b4d0ced9dc3723eef9a5baa9c33675e488a9c0afe273a2726981a0fb9741a475f8fe239183591bd7c4a95aabe826bcb88f434acc90ae092428a85b31d352b6348f319d91ee975f1fdb0b652341caa227742e4273dfd5703de566619cd23d4a9689b7aae84c22eb81354f5a7674e815f931c7a81e0608b73d3cfa96de4f9279ddd38c58cfe9d5efb5748acc5a6de2ab7e8a609726a6d8417f9301a3861d814f5112c931a2fbe810be4e8e85dd6adfa54e3b3bcc58f5f35feda798f2f6b72f7fae46ff35585344d23b120b18cd381387590d7c855cbd5b6e3e46fc9d2fce15e17f20a974f483ac632ea62209d981fbe87ba720e5077d82761315678c01c0a84b4c8b6f4fc8ebbfbfce889156e10aa0542080c061c928cc37e204e5c39e85b901b72cf30d77db71bcbdb1770f6652222b4067c764739e8da0442fb43abb4210733b2f804c83c07748b44e7af93562786637bfb051f2a550e76ea0992772be7c31298ff14856420721d1e394227c68e2abf774a67c083ed240bca8fd3919f470ef1d70919e592685e1636928e267ce93cd44194ea8e5db36971d32526fa867d9ef4936d003bd7d2c7931b07cc9c683edef808a61d7dfd5eacdd2a3024d092475c84a68fe10002bc5ea84e1da01107fddaa2f3789a20c98ebde6fb0a6b64ef5900fb20b10fbdf05b8e31af4bab30886be03c8fb509b93985d89a68292cb902444b69161a449c83fcad37a2009a7ca116ee07225c3343cf48a4942ceb3b82f0753f6e1115f6678367073d0f774c4adda0b249ea3942c935cb555f928a969c79e1de0f92506c0b465258656164b5a1fa77d2640237d88c098aa3dd6019d74a840654959f5d8aa68391cf4c0dd92a1fb54a8e89d1133374993798bbe12f33841b8e3372ba1942cad467b0935fc54c5dad8403530ff858ca73cd103d5126e8d4d1bb17babcfaa8595df5d3c26e16301f2b5f264a9808f0b0ca353af76b745a6e5f90b014e84b56cefeba9e5a23532229ae754f9f5bc14385429af9d0d2a038bf9e8971a6ca58669be8502e78ffedec2e3991a07ad0acc93d749ff5f5f8dcc4d1e4299a36e8820a5e242b148303fbeecac051203737c6764ac4c090dbbcb8e21289f531c646ed68e4565f602132f6b715305f84cd7246ffc111ce0623c0abdfcd141ac2c379741e74b9fb42a8d69e695b348023327d1071693fc785d6329bcb0b1de7997e64d78c862613f3564f95fea4b134935fc8a6336e5d6da2d5f412b0f4d81fe80f4627f027879fbc22d56d7194f37c7ae8ad307aa1fd18fcb5c81ef7aeef663696f73d4ca2838cd4b8bb8e0328eee5d6d2d6169da3f895d86b5a1e373b943a8ab820d71f9a143445cda67a3266ff263974c2722505642731a289e2a6d549e4ef0536289e9e1f00d22cbd2c1278bfbb6e8b009875690b0b6d18697de87a8d94818f892067b7b8b90088d66c1272d772630615170909a884ccd4619964f148f74d7320fe1cf59d3de0288310804ddad70245d7e45bc5cd63dd38bdbe4076a17eef92272d1e568189c687429b39081c3501d9545f752735192cd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>分布式</tag>
        <tag>高性能</tag>
        <tag>可扩展</tag>
        <tag>微服务</tag>
        <tag>微内核</tag>
        <tag>架构重构</tag>
        <tag>架构演进</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学拾遗</title>
    <url>/posts/200307/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bbdbb5e68f05b80fd3895b15bf3bca576660227ce59e838aad6f6b580443a35d">19b47c2e63483c71ab5ffd3d7c9ad9ec9999930add07a963dc119a683c8347946e4294b669cf3e6fd18fe5b56a122337e98ff6cdcb5ee152e18e8730e868e6958b5fd6eb332a18c4277640b5b82a02248892b4459ae1febb86ff2bc8b7b9849e0bdcf91530941da76294e4623d761b6cd3c5a1374dd669c2a70e5e6c1a1a1a6bfb6af972f375dcc7ca5e45e4409022e6437216f452479ef42c3250abc49612094826082852104d8f3b5713bc383b2821f581e5e1260711b523fa18449929ef6b8fed8570132044e461362f3b93216f06a470cfd46df9d02a76d380fa24b810f201fb09278be78c1d9332e1aa1500e6788d19a8e6bc035af04778e3559f281570443a9e4907fe1847d0193ed88a6b08b147840dd59aec12982ba2d47a30c73a2543abb6e5e81bc7fd496b9ea3a64ffee412cfd62dc94376ce0de115229e379ba3cc60b3926296ce3b9d48bb5569a6e73a7e3d04b0094d4ac88ae86779c5594c0d3d681612f7bc501b59f76598fbb9ca4126ec2816cf1af2a40d266d4b896694ff6229a3a1c15f9eabba9f9470453268dd4ca4b09d8f9a63c9c9b19f016b1c887601f0ab0bdef5f1d91323b7f0e575dfe87d782631ee4579a7be2ee5248676302a5561e7cc1f12459eaa3dd35bdeb3e152b57364bad0f89897ccff9b443324b5df17136521b9f1e2c9c838c244563bdec488d73e4609cfd3507bd233cc80542fd459437641e6be218e9719b582b9f7516b1797957ddcc0610aa7eb9e64c11d1f36d9e806fbe368453eb929afd6bba020868a145742cc1a55e51536499b64e2d391197d0ecc10172d792aa06d10f0bb9e05059bf24462adc974bb5b960c91c88918858f736e7ac9d043e97fc76bca3e6cdc93346b3de7081ace0269c2d41d546afeead3365921e21607bde7b8e5720850cb609597d8afd2718d997eb0acb6c92557c960d53db2bd54d85851921f0e7109e98fab9fd94c43669c57bd8dbc15e73557642cbf085b77ef68885db892c6632d115c60068e80237befbfdf49ed4dee289c8648935408900946362ed9364b3620020abaf37096f76a98413802cc2feb9326d33700dca6c824248eb9bb0ddf75e09cf77c8bf9e366d312631ab1fa6723903a9d3971c4d9aecd52b4fcd2701d2f9bf154be38190dfb55fae03588f5016177254d996f8f6363572041a0da01a2376af25a00911f42a112cfa204dd01e944fe5da8aca5c4761dd04bcc2f2078c80dd469ab1264c8b873d60bfcbc619b3bf6259efd08f8e9b97ab4fd53e2f1130707a70013277351d0948750aab12d86731d4f7d574830b133ce7dd464409478171719e1d74da3dc56cca5778a3abad52462671c6ffabf57f1b25babb02e89da50dc98dd50d784830bbc98bf24620cf2c2bff4d6ffa783094ba271a1df127536cdfe3702229b03b98a864b75ff4b3baee5f49b050cab7c467c5dfeba12cd255f8bf3a9f2edf44e336f4f9457701baa27f41d6a04e4d63c14ac700d4920cceb579b91c2a2838e3035ce3d8e9aa6b0842a8a21f60e3dcb996e6c8d0e6ca2fb0d80375f9e21c269736bdb280576bffb22233714e9d595c05fd1013918f934a31bfe994c7186dd3e308947deaefa7620342e8dc75de8ebbefc4f646e2ad529649560f0bbfda5d0cea44fe48a93b863e742669b57bcd57df40d46b1fc3cfc9acaf4fa5b5b55521068e2ed68f0fb7a7c4e3ba66230a40eb097064ed3e18b57bda825c8c1d0a24788f01b0b945de0611201a6f687083f2b375fc5ba280a8d057254229e5a5ddb3fb1feec170bf83bc603b8587454969cd97fc548eb6080c4659f98c59c60834dcff1fe4bea6236b514e1153cc0fcebd5c3902c501793b4d8802d4400d2d651c860bd094316593bbff571a3836aed51f355f7d685ff1e36440bfd2e04b3e7bd4283e64587dbe586bdf9833a72dc90d0c67cf5b8fc06f5040100343145c7caed8e070f5b9ed1c53f53a94e5dd558277c809c2fe371154a8dae7f0440e9633c1761ea8627c786981ef4a5dc814ea7180ad38f420693422c297f5e19a7c48be462715dc0feaf6fa054a82c21591e4c02d64cda872126a670f25535bb049ea5b601f6de75d91189969f8bdb352e65f23888d1176aff2e2d83c15cb9f546729429e43487820423036737ed3ac6d44c6851c4dde2c450f290368510bc213fb48304a62ddaf88d361386b6156ba644378c0395fa9c4d457d0499a9e73e996179d59336907a148b3ebaf0e5cf2cbe85f7fc9cd0fb0218f3772de0ec6e91efc2461c4c35bf0c4e598caaa9356d3b58a88f0e2cf9923e4d93f840a175cbb6738f7ee42e0f70fce5ace8ace51be292fda37b347e58859b719d379a90e43aeaba647a29e9fc824b24645bfe501532dbe9450e417fee08bc811c05b87e09bca6262295b6f7f49b231d0f6ee6e9fb00cc19751b182f59fe180af3ebba51ae278a6dc00e75ef27eefeb561e09c25e07598184d55fdf3b42a2a2a258b114eac665370c0df904407b70e0a20e8dd0fd3521348fe4a2e50b1516dd93fbdd7f6d1010bc8f5235f3628cb16d78f6b267be1aad5bf1d2d368237d923ffa0fef52907e49af5a22aaf24ba15992727dd8ee6a532341002959161d300d17f588977a84ce792fe719e7974fea998c4b74559adb24cace47f029001166270328aa5e30af4ddfc35a9d1dacf7887f4404db367c5e4e7c66b758cb7aad670dd57cc0637c49d62808e90b93900e0d0418bf6d9768010f7d488b0d2dc652c7d3967b440204f37013e359c84c790f35a79e0ec5f609fd53aea3096cd112d590463ad4959a89c385cf257f08c6942db6a45ba62206836f96f4510af714f4ea4358ec613fabd1f4b48b94a3c506c65ddd3b1c1c4dd9316e2593dcb9a0f07cb337ac771f939e50c98aef3c32ab5e8e75ede963e871ca515402e0bfd5a91704a914efe6f29a54eab1ce2d2132624d588a56ef8ef4ec8bfb1c1472879b40fc6b6f2f889ff6c74c74d492ac4d3dbd6b7ace536558e6822654349d8d08d6bbeed3f1a399b9164f19dc9fdf951e01c699ed714b70e20bb62d9aa8a890eafdf6bcc10eb73dbed227417c5be84ac94407a7219c830ee7196243911a47c3fa967dfdda99e1482b6b45dda47c958220127ebc5f5114528c8f53fe5f99f0638c082dd67005f57b6005f653c70ca0abe2bf846c873ec6525142e2b0d20fad25c467317e4c002b523d02b55f050611596ce73130ab030e66efae1a264b3302c7103e6c3ac8748fba8d366c64d729bb3f17e8fcd35b1eee3af980f1ca7f30f38c9048f5ee243d2274940e426d7ecef1ae9a3bcfa993bb95a053c94c4a237a2a71e573c40dc5151b47345d7642f8723b656b5d8b09e50cea52ed0ad7b102e408d885f1c1e0d3d3ead86abda0ef19d1342d96dec264664d65350eddafbdea9ef30f51056a048ac28682d6f558344f85c18696be1955de34a938419f797d0989fb2e58db2ac2a6c5fbf14eb0c3e050f30fbe81d83edb087fad594980755b7ea49bccb7b9c7744ef2ce2a33c51d32478b82dc39f50f835b180b3793fabef504baec9e07944ce844622b5075d1fb68ea4692da1f0fa61513e0195295998d2d98f0547747ef43b8a5b85bde2955bac4f7dd2a2e3945ba9823da02440bf5114710d23c7d36dfb3db24967ebbe2b3ee30153e8f91572bfa66ae632c16f7c109a708ab60bb8a50b6317f15769fa4aac3f340f7bb9513410a926ab197ccfd4b7fd44bc45b33156c54c5e188d13d84fed5fb593e04b4958693f94b02126d436bfa63d04f6e0444c7f1d107db647d33b81c6d2f1b5c8f64283aa5eb22e72b7be172b23fda6ffeb731f55a6eb9116bda543be60a2b5eceae14cf155cca9cde88793725c9ccedd333b4dc706ea1c85cd09bc55a768f3e8400a63808546fca520aed7efc2acc7dfed6cc75f37eb4c1309ad62812cd413a96d37fb3c9ceb81ac5a1c0ed69b3c1185f507e40d5760b208d781778b77c363670f56e216c32f5f35ac1f02d66df88ad55a36179f451f09b8d5acf7c673dd25bcd45e12afbdd39f6f36f7dccac58cdaf5077de899b2ccebab0a57f356fc9d60af6d2edebf9e261bcace178018f8a24456589eff9d0bc4773c6b91f7561d05aff224e9735a7764c47d828813aed6f8592e8fa27179b45ccd5a85ce9065177a6243b6c09d3b48963bf474009c432110ce1d58a0da01cc128e552f6faddc63e466dc4e3736ef88a49d9268186d5451861f1705aa6f858fa0e786587a59c3a9fe379823ddbe8788bd599de280c21e25a4d5c9c4267a54df5349da892b0e1cfd6071835a55a71f6448fb5e85941141e449c67cc5a3c53443a91acddbf64434407137d2eacf2558f0ac5cc62632e3fc355f6e6b66a45a7ba6849e5995ca559f94c2b6b472ae4227a50626b32037666d14c0aac30a39ba99b197125cee518e252ed6c3a3cdc8bded9505d50a97bec6e465fd9d1f3a9fdbe03cd3f3ad9f602bfedb759e06649c2c66be755053df4cf50d3f8f8ece2603bc5fe457f5d20fedcceed9d6bf05aa186335bd5b9c2ac90f2c122454113cc5e80d753f7f59fb128dde204e6516a392d6a4a3c40ada4fea5d246dfa5583be120f87f65588dd83c068a7f724bfeeba3cfbb6ea58156db534cfa99f34e65aca4dbb0603a871ff56ad18a4feb27cd0105590d58a7452bff30cc2d4bebd757d8d5b6c3f3ad20aa4665504a10f96d3882c0fd2dc4d71b09772adba596eb75591e9623910c7fa8166e5ff358e14e94a4ff3e7b8f7c1d4924e6c524011a6ba2f0f86e06969de3d92d53aacf073cc5a73cc8b2b2dc7ed4255e6d4455c836f191f6985b9796fc856fb8153bb9904e5e824780a46a565ced8b875a81704003eeefba6dac58427d8f8099a4c1ae89921c3ef961a923fa9615edec7f790e5388a48fbc76823ced38e13a649813564b100e7d108d1ed0502dfa1949cf2d33f7f0c93eec9591337e35402ce7720829966533ff8ce7e45202a7bce2e254e4bcf0bcc2bef99168d19324e48cb0d171840b336a4aa4145709fe8e1220ecba1e97c3e98d4c3834b8b2e0256f049c3508613fc7327e5b4bc48cc1607aa71f4155a5c7d45a61351ee97d796d650f5f5e05ffb24b87460d84e2a761a30e0da21f188690d20df80c4ce571a74a28c13a52d4e0e22fe17b3ab98cccecca28d75ff376bf4e313951fd115afe5e4a58823dd1c39060a68db3ea9e48d376feea996319aefccc50c552e9b33e0e10640586265aacf5c60be980f2babb410b5c4cd788c24d88003688a8ef32d14e9f24a6fdab84e0f6d8207b2db3cb9425d326e236e4231f88d092b7d5df359de94613c67ef94b2876ba35a20455b2b7cf994e2597c70eb9e7e42a62d00c7f412350b2933f0cdf9f930c98712e1a382c944cd254bdaf80735025954370995d0adc8660e21c0e210e9f8e2bbed5c03d86979eb569544d198b7e260a1299c0410480cd2f36c5f6c52ce16ec0574da13da625134a0d94931863379ee79718385421e43486cf1964289889182c81f3688930ac73b29bdaba0fbd2a74d1f390679f11df5e13c62c4b71e9cf1942b35b6efcf187411e03784efdcbf4dcea8bd8ba1a24721ddc9079e5579bcccdd3858f69e3f19ba9b3083dea34556fec2d8ca690fea7c40b660a4fe9610d0004c2e32292c7a352f8accf2ea7b2472f0c3ba63a24f855f5dd1c11d359514fc7d12b112566f52158a4d651da9f89f72698bcfe561799c0a536bf12348a816e3f9ea55415f250aec762328560eabfc75900c2fef1cf18cc6fe710572d886436fccdea290e3844f476c5f4b46b69852a1091052987c473522761f85f49c0dd36fa41f10795197615afa7c16b40fed472a01c95013a224ed6e1c3c7c9f44a7c19f5aac13529b71b37ce632b8abdd05f04ca559158f7bad8d3e171a160830ae248137e6fff0c9047c846155dfcb936af78f270214687dc1fae33312651a97c7b282dfd460c809db13ea9de4c8bff425de8dce36aa9f6d1b453e6d36f77a7ff3b6f2285d7c8ade09b62615bc9ff2e6b982a0300ce88a88b83904be53311b9af7665d644de7798a706e94aa0ab843cc8a91358fc599ea25a99ba48839d672eec48c0d529501e96e0dea62acc27ae9f6fc15757ab0f158a5a1f05bafdf81b6bc45d08dbd0aba7e7426daf1bb486aa80fd2e4d2cfd3637b647aa191360af386c3f024d551431d3852723a2c867967fb18c8a20671c8b81ae77b0f19daef3d6a86d024af49eb462477283815b2cc2b6d12f70af8b80c6b8489ba07f5570ff548777203ffdafb793c6963a89c0723154c00e757f2a34b7dd8ec64e9bed113daf2300d6019b4feba0640721b6e4b299a239ae2e4c223cfd105ea6a33bfeb2fc15fe67cf942fb76abc54bc1f21835fb1c32c52e35f1a369ceb9ffc7ce5ecee6f4e76ec60fde22b6963c6109e301922c1cf34f3e245c717539b274ee17595ca6bf780dc3a953a29be6e20afb494733fcfea9abcd031d64fc887395ba5ad5f442df10527baab19af56ec63da8c8c29e71c30d1ec39c78b4acedb50e5c5d2f7d75beb0e16d4d32bf6b69a94264859d54ca1e92befa3f2cf95a0a57467c2558d062d88a9cdf649b83c4c398ceb5348ec70dfab6cb2cae167b8952a332817519e9618d8b5a0ac4afa9bc7f7a4c82b34279fdf8b1639a93c79fd76d508e4871ad2f8310cd6089cc6673c33c1dcb1d87bfc7f1534806ecf9e0648f77c17b2e4196b77eae1ed4447f016880acdb3bdafef720f46c23c4f708a0b57148349c4d04f559a914c0e950b30bd8625d2f80f94b95077cd1f313fe6cb2623f3856ca631881c6edacf89eba64c23f66416a4c6d4581ef38ccb4ba118bcaf16c5dfc512e7f384f5153b354af16b7647cb47f850ec44c43c170ade492910be7383c4cab227db19401e9a9967a55f047f077cd024b94262c0f7d5ba0e4530041938ca732224afb33b9bb191ae8f3462229a8ae324a4511978e9f065d894fc43c83ff005ba13d26b7a1e432071bfb4728f3c6134d31b2fbb0455eab217200e7242ddcad44530334f5142fc7890e20a5ad7056a9fbc63accc9b849a1fca3f8d221af847e466474c704ca502203566a59af7fefd9bdf3f9bc94acbae697b2225f1f69ccd813ebe262d08055f38e6f7503d1eb3556f03b4512a65687fd4cfce42e396016e16fb06ea08c8cec050a9034fa2b0c49fb86f6fb45ced6a3781b21f112caf0390ea1fd89d48d983fc5410e879a520f2678a234ab823b8e90fd0b8caed66febffaa4845c6f7e02ca136b328516975a00b7e7ef71789c09b1de7a1d81c5454e1dae89963d0e3be4e24f9df9ecadfffcbebb6f45f59576fc3d96155cf7af7b3d737eb725906749fd7610a67ca5683f536bfd07ed70b71c2311a36f66aa2dab746cec69ec0724468f70055d0a8acd70bf8322984a6ae623b2604306d2bd37a80fff3f4e2cc0bb51bc76af91e8d912d0ac4033fa2fdc04f3a0edbbd1a5d478cf8812cc454736f61c108556c0565724262ba2bc38468e0e1cc9c5bf6b9a4a9d2f8f2c912611326757a14b1dbde8a877614b4487f8d16a894c62907eaf879f6f1d62f6d1045ba99b13efa5c62d37d916e58a9492f40f86b20f3e7dd3b0d0ade0761823e2a3352372056befd564a1517d2d68e7f2799154d2c968fc98441847e758e21c33d165e31a5b2083e6d4fc968c653050ccbb903b63dc42b4d7dbaf901f4f742b1888d32419b450549bba94bc1b13fa7885b57d056afde8b8be5bdce3601f5594409a56bd346ae9ea994b0d55bfbb692586845cb21e07001d18712947750b6084fb01af0f5ea176cce0c17a054a0b7f9ed1c2123968c21242a2bfcac9d99feae8bf948ba52936edcdad71ecb153ba093528cc12b0b35097c41564c87e8572f5e7bfe2c4236e88754a7ffb88d1eeef407387db55a472d9845fbf0d4ae025a0b3c2a213c189b81970c6d58b6e1a6d0ecce176679572b19aca9d9ec6f5c30655136194388353ccd9bd84a1c6acdec485fc60da4d72d622e1735b42c5289b6024863aa6f6f469f79bd881d7d4b766bf511f0c836fa37f832eb43413ef42c38546bb347f066e6f26583ff3784f15a4f933e8ab0104c5f8abd5b5cc981dde70e1c6e00858ad885f972cab79b024c9d7b3d5c80f421ac06e404f9cc9cc5dc90aead179e28cf15ed37fb03fcb91fb43bb172e911dc81278b09f7df295c24e403fb965b6e55ccb7702a80f0098f83ba50e376cb9611ad2076bd57ab76d6dd1c2eecbd8d5ccc2de087829f6f15ac3242669e36abebe00658233d37f721e08e720a3fc7ac493c0695921008d8f957a15939a1604d634a96421d27ccec136d30d5fd5a4f9949c1dbc8cba11134ac7a0b097039f9d5d30ce1eaff34e7ca6250dd784c56e507b456cf56e17fbc562cb08796c783a5995d6ff03ed7dad9f3a332e57715712249f923b7bdf092e031558ad8868e08a4c2a3298e16d33706fbbe6d5b235b56cb6dd29156cdcffaa458aed2765d003fda98dde67941f26d3dd30e5dac047152771de1703ccfd038b1f1a89308710a40c36a72aac4efdc29e68f64b499eabc6e6be047a644ca37bc41d5a5217579cbc1e2694af818b1fb93ce0ab93e7fb19362aafee4e3fc421d8d5e00026460e8ab17386811cfb3c4a93b39e506ea10f809495e69adcfbf13fe29bba01ae56897337b1f99b25f490aa5c30a61e9a9339ea8a51dfb3d15fafae0ec7f858f03bfe8a627874c6b6987e45ea4ece11027607c500534b8b015a47975481c541db2ce0ed2f284555bcb5a82016cb9682632a3e01230649f7f2db31283635c3078a9804a73cf92e48c98d050ab844f0630fce846332bb4db120383c6a4f372053b673d7604381345fa3d5658c2676302a0b64e65fe0db74dc550976c416b4939db43dfdba475fbddf0c3658b37aade6be70ec563b4b680e13e3b16bc6547e9563057ce286daa92502b8905d969cca2e0ebee91e07e88e25126a733ad723f3a737de5fcd40da1dac9adbb89fb65ed9e45c674b851f6a578fa9d20687f1f3183ff365c2116ff2e22a0139cdaf407d7e0eeb6d4efb7d50e3c98a9794c9f70d3885861d1df31740c4e9155d25f569ed8dd965743e945eee5328d06523313b86f4d4dac2a36110d52e45fa16ff85d69b8ec9474325d0b1392e2773f22864e4ddb8642301116bd16fde166150e455d8cfcfb7c45a911ae9206dbe4111dd5b3327bc1108d15619f176b798c076364ed36200677b18fb738cf79ecfdadcac908e7246c7d235624e2ee4dd33ed4d9a280c6b1598c5d6a1e76c75470d2162563b0d96d246bffbdf1bf48628b57408dd02defbf390cd1c0e54f9bf9eb1ea2dbfb9949a4dee2a81268ca3a764b9b20848f7e610eda45bceb199de4bad45d7b94d17e41a27a5f40d806d129780fccf1f09f67b558d13bf3fac4511b76e690fb53b51434f069fc6afb78d2e916ed80f0b24d4a972d36220c6e9ed0d2cd35dd2168d39981c44eb4dbd225cc096578baa23f365bda44c9af2529fa1bd253809a04a03c5fb3f3d00605ad3a63ca7e244f580ae06b69f39e79b682d940b79b600f63fdfcef89e86539a414080a5d3ebd8b1fd8094efa6ac7f03d9245ab14edbba5ffdf5f30cc7b20981dce4ad85f8c82cd55b55a4ce6657eb651ba9dd43e591c99bec3a527ae32bbd0e35cc22c8be2b0a087d26a956dff423fefd4100824698f29e1505a4804ee51132f1f2612b7fa7f73b5b35f10ed5eb0f10b132bfbfaf35aa4f196f59777e21002a76448c32b86c2ee5b0fd3803fdef8b1e3fa6d4918801361e2891de8d59e283a8803ee92f8796edefaac35d71702c3206292b2ae3e3419004a7e8a765cc2344f7320407b7c29417a0445a9a14411e41bd41eee4789a9aa979c9ec7782cf0d0208cc385d4e2a6d7540edbfa7a3c338ae5cd3815f43873b159bdd61242f5e7228137b143237550cc5558f06d24ee01ce0b9a892b9c41b878688ca5ca90a91fd96034b33a2a57303b7dcb486702f7ecb66ea360bb05ec8116f2e03475d3e328676a35049061917c374cd0fdf67df153ade948317fcf1d9b37360a24424a7e14dfccbfaec54b0a6d81594005b76d2f34487c86440ecb66d36fe8307f36ee53f4303dea810a3a0f70a77968751c1ab142dc5ec2edf2ebc03d71658766401c098a30b55b4e868c827cbb642322b55c669e963ef9f2b1d1e1504c661a31d80d5de054c5fdb8de5577fdea5096d9ef4a9782e5eb8c96702a6d036e79d7f0e66164082412966fc0bcb7cf09e488fce0e22fa41ff91360b642a1f129174becdc67f0f0dc9451eb64d9a492cdbfe3be3e8ea1a87860d89cf7677280316601c1affbcbb602d1e8b942c3f9b84fa918de62a3593428f88394cbe997b4d22219ff0181412a796eb2256649608e92eb40fe35709e7be2f69f09658eda3997c2c29c3d8a723e26f66310c8df4d5b156e3fa5480a36d3bcb26ab4198714cc757d15b503ba4be5742df0137e6905e94dee05a7a03844f104e28bc63aef0d8a0e048009bba034581a3c10aceeb9cec922c4f2ddb399077c4f14f261c8e7905f14f8dc83d1f3cd2a6ede663d566f5f3b596c6481708aa77422e1b9e32f1832490c05c862ee0ddd7ae6a2971fabb33b294cc9a44fa9f8da7bae1a5bf902a24e610bc2d8d79ddeeae5079e53d39d956dcc901f403c9bc5267c08beb47591aa094d788f2b6a8835c06b0cad76df6c9562faf3917e90a5ab6b20893abd843b843284e0e9cb50c001dae5891010169edaac4fb20b2baa0cfbf9ba698d624eeac339ec038bd12b64b584b7a37bab7c9b4a273e6e6f81fb36fb06346ca1a9614c09fb62561cd2980cf15f15c6c6995d53999eb73ee5c251beb80ed59e164c0545a3a1ec17189214bd38c626345a47470d34b61edd9593650cf89fd3ecd449700928b5b6116e0cb8f471c553a1f1684ace5818c633b57938b1244a02a1beac135df674e2898acd03afb3055e55e2a1061a8172561ec3fca4b85c95a1dacf7defece4c98b41775a3e1a8041476bb1ecf22ba8d7c21483d7feaf95df2274aca45112279b6df9b0846d0d5821c700b2182860ec2a62bd6d537d453a436eac5495896222803b0c3e2ac414b70b350127ba471ba2736d8ee57477b29a6b900314f37c28e0162e8371fdaa4a4c33e93134fc6302eb4c22ed517f2766e5704499e1d2f82aefee5547956aea39fa378a92cebdb72793669c4cf02822bc2aaa4c8e04230fd89a4ff56b1f1f779ee07facad7cb316299215f300ac3af12c05ffda96b7ba899cc8ee35279b92f29c17eb51be983f4a1bb62f9ad67cac2dfd7ba43dee06eb68ecbf024702bffdd99b98abdc62cac22dd92009b2383c5ea48d35280e062d16086b8233f6929904c43be1b16f5852eb39e1c9db7ab2847dfc0a648cf3f5141b356c0d0de75c20c948d62e9b64d7edfbebaa30cb557e1880d28af10a727ddc987a5734fbeace13a746ef91ed9a049ad3e14c842830039ebda61df1ecd62fa79d9d8ff3f53ae23883bde683a775cd237d23a3368ad44dccdce0042b1904918cfb8c70903fb9fbe0726b650e40029fd7339aeef1ef39c71eb1c86f257058f787dbd7b2912ffad8c7cfd1545d26b7833194ebf4c529cc6091ac531a7e6cd7ebe9b9a09d8539e7ef54d2a3b72eee49cd352a878a76160a66dabaf9ed4061860b72906ab2514baff4a8060c4c5323ea0365323af6df31b45bf7b74450391b387e0485a6b31e8092e9a8fbb631c5b591a1248ac6c28a4abe5f7bb0217609d1ac235de74a40bb643246eeb27c675d9677d674b8edcde97de69ad423a5a834f85d37dd4592de619217918b5593bd4a283a605479ff54a08f4869237078d9431e11ec8d5eabe431b57d1e8439c8103f02f48e0083f4d8cfb8473804e4abadace13f8cf726d6fd3ad1085361b0c806d25d650dd2386fd9414e35ac40bf04bd309c5e188d5508138ff257ba70be9ca1d0148dd1b2aa70cf89c5c86cff68be3bafd3abfa7d5d0996620f3146ddb9bbe296999c155c68acde115f9844eae4058d5a4a5e46e73e9e353aa62e562edc5bc83d57da2b90ce44751f932d409be9a00c8c1f8e85fa4cc42288e07dfcbd47566c3d817e657caedfe8eefbf61eb2c32203e0166e2cec0112c2a96a55aafa4aae4d48049ad2bde8b81b64bb53cc6798c8d6ae2c45e668b93f217977f9265a7d91a69e809547e689d7aadab7682a0105048ef179905dabb23ba6f75d3b2da8b4ec7d0e3ec39832e646bd6d80ee4a21712f13f9af87ab31c15f4ea8a12e6db8fe23ff663feafcb290fbb870a7f24a706a1377048c63c6ede28cc82eb4cbaa18605ea390d7b5638af1fdd3191c6368a455764ced381a6f41b3833059f1a72dc9cec10e4eb94060bb1b325a2f44bf81a64b123c231a2b9a59b4d94ae0d90d0929f2ddfd0a296a726c7e597869a3bb086cbb255a0ded3cd5bdd653bea9987c7911473b04563a28d0b62a47a45c7d6219347c0962a1f47624ce04fefca4fe0ce58dd948b349302f98c5175820676d80186c11c7b19f98c29a72eee5b28485e8ed1b43aa84b6a61790c0d6518fab8de27b26af8af6df59d65b66ad63e8f3e1ce4ca2f1d7bd27132401e36c2fdf608d11d5107acf56b73791d69d25508431a7ae9ba6d842b8748db4000d444f56da48f0ddf00707c5b4a44bd0eb9ba559a78bf7734410e3e30fa10c40ec1097cc50b624dc01173a17e29244b896202353cdeb23fecbf6f29f4851cc3beb7ec69d456315f0737e61804c06d974f11be38fce22265d58836bb3a76a090aed92ff5a9704bd12dd3f4c948ca260be54855af652e75ba2a90a8ec0b7bf5d09d1a5f9b10f443ecdb6e8e0035d543b0cc389f9ebf4ab556cb2d0feec4fb3cb5b518868ae9a29eb47e531b4eaa8601bf0f3be86553bc99adeef9c0a1fa353127c9a32febd410474e9ac4f85719dc201b65ecdab766e4368e8fab9519133d1b7b0e5b7ab4be86073e45c9c01d5a0d44d418e575af6a3d0759a1f145bda543f4e1303b18ee775f90d764ba5c455fe69a686b7a03670f27802a473a26e253ee2928d1910ff643b64be02a2b9c6c22999ee3cc32d92512e80c8bde179b4494e66fee830ae255be6b0fe908d7e3410b04458fb9463ce6bcf2e978f69862d7ae65ac39139abb1447c4edb63d3c144ffebb8b2d01a2f3159539ff7146f7de297494077c1e3260a09193e5f3a2e0c2cdc843b8213095b6243ff7a281dc6d4293970add0cc8dd7a00fb8035d7c23466330bfd1cac6236f10ccdb8b451b65c7ab46986117b8b79f9ee11fa6d4ea75d0b238a22f5f92eeefeba4bdb4be77a404c47ce202385732a019c80eb248f79c4c123e5798ad903ca2766c763427213a58da7e4f38898f2f807bbff8c31e22b48d5dbe8169f1631cbf07075611bd22f669712fcaee9cee802446def9b0a964f2bcff86f76c6df830683e8d5375f7879b0a1b7c843f8727b6a62039f4688b214f42a60ee36eb8280c16e56db34654887dcde4bc9bbd420ba8396d99fd292cd040c5545fe64a6233eda30d275c21a2ce4607e80d3cb9682ea379f789e04f54beb75efc06833b2eef219fcd6274452311891a7f55dfc8bf71a5e1c4bc8ad0783b8e2e6a6382bfaa316c8841633144a66ffde97ade781964142b739ea676eb8e8a95c7dcf9dae02376a97957402b4884b5ee5a7da12b922a5381ac24b2ca4f8f01f2da2d7edf472e98ffba2f5f8c94bbaac3746f99e67687106108ccd9920d07a3edb6f6b00b5af8ad78d8c1e593b2950985e4a2185933155ab5e6023437141b4125703b373d1c99339f249a6f73ccc73b837f7e8f8e4bb3b9298b9497b131598c181806ee2ad0e44fc39d470e459dd2eabbb190405c641bb871e5e84e926ba3b7368f6de50ecf2fd72bd924f6426fcf1fcaf17e9c4bcff9af884419692ea60823535dd8d217edce47deef18d87a0c0bf9ad4bba64b361fb267a94a9fd3bdf21690deb43c7570910bf100f917bc8529fc459b6fd80ec097154b41f9fdde55fc52ea6dad9e58794e4ef49a8e7bf113dccb4d538a4c09551d0a3f202b69cf97704e97f1e2f9b9a13f9df83d3a905269591d5db42646966d312ad4be94605afd34c081b0deccc94135380ede7bd6c3a5f4043c039fe5ba5bbb2d0b652187e34cdfa3fc538093d73e63cb4af29d5ff8fc5fcbe652d31f0dabbb2893e388d96574bc8fdd39de1b8ec18c307a6da5bb7820405667adb20353cd968ad3456bd24465a227e7052d4b2d26967aa107293d0154b77c175c5974628e0723d35f323d8e642a03de404747f342fa9b98f85f998d5c1913fb18ecd2ca51e6d8c89570fbff9a57d7b7c4f683de5a957fb45f0c53ab938a14306583a3a0ce05ea0f6692a36bc6225641406a30769591ddec91f4019dc395e2ce4aafa758de553e57b73c105c6bc54e620b415541426580d09a9edc4edebbb02656c810f0c512fb00af341df52131d722f84956e1eeb84edbda4af84818f48f10508970df9772a48a71178062844c19ff8ae1385a5a02c8fa9d6d401d5569ac7b6f2c2f8880e16fb09c3c5fe6d7f5d1272aeeab76ea9e5c0029d41655e93a6a717b30dd3bd3639795dd57d71fa204ebaca278389c28c22417a956770a3f3ead5f38ab0a826a4865def73fd700c43bcbfcb4d46550095868c5747f8874fc0078d6fc5cd58e35b039792931639668f3339c14909f4ff878319664c789593df71b254ca74a8c00c51ad0ac415fb0e4a49b1e964ddd67c57d326e56e4314998967084bf7a74b96aa9c01e340ad1938d0cb7a48d9ac0c84723180994998f29eeb387191e83de22952accfbb553218ced4ee20bcdf7b9a01389d98e873cf796d0ee5e8be69e42405f1e8b90e32bd6407343ee1d71a2786f6a09ab99d846329e8109cbc9d74deaa3e6a6450e42088acc1a8489ef3cfa9145a84d7a9a1379200f769f7d953a8ec0a4447e0ce617b023a649177152e350cea69f6f9aa3a537704205e89426fed5af8cda69d5d0e0885e1441d6fcaac0ef2ad4446c1f6e00a82f11330393b0a697fadda5e5f84361e1f6799464b097db0575cff1e812ac66661d255334d6ef6362ad495aa359cedb663e33a54f8515e2e96f7a9cb568c5a90f2f39b468b006580a2fcb098ac7ce925f8e025f0a322f0dfad50309e41e7b5831f4d3291bad07a3fee96e5562fee4d1bfab4e67c1f1208a3e2078541251ea92ad18b3ee388f2f15a38396529a62a3a5ab3ef2c2e5c31056d2ccc9c4c8cf5821b472c731a271908a528a3ce7e22fc4b5ca9fab7f11860fe280f444242545d029e1de3258ed1992e488a5cfc543db797f28df7ef0c1ea28a4ac80d70d6cdecbbb2bfa30c3bd6061def73bd43d2d4eb9a52364ce9850bba62bd7735c41b6c06813d37a5f85b2e36bfdc46dbff7fdabcf79dd0dbad7d61c1cc45a71c7b2d58c178832e5d6ee5d23d1b58b546b9034866264da95799873ae494acb9592c36dd978b49decef65ffa0bb3e75a36c99f48467999b7bc8b93b959a476a3f460a48c010c632a4c2931af4ad1ed5ebcaaf39d821ff01536c99c24f0965f242cbb33efd8e3c3bb921f7b5b545c039467c71894c7afec7e8d49fac2d05555c277429fd4bb59e5428f61261c7ca644b7560986b2acd2a9b2af7bc1668bdcbcf84c4017d078cac240fda940073d10172b53f2cc457f26344f7465c6e8474be84bd6a555dfc7ffeb309c13eacf63bdb1fc01e9be2362b0e1dc74e1a3b3c2075648c91ef95e3b65cc540fa5f6ab81e749b2bfb4599a0cf7c2a43b50804220f3c5cafebdf0b36361b7bd5df4a1d0612f44f7f708be16062262929089ab26fdee9b60845a2f6730ecdf6d0b9bbd58e2da9234270d20c49a351746c69cc3b02877fb516039bd50b85b726eadbc680880424eb4547f5c2e5c973c44f5e195cf011a72bcaba5238bdea4eb33ed04eee0f64bc1a89e3ab457bd5111757619d14a1efc300a6ff048c4f9e5096d39df73af7d9808f31bef14dd4323a0398340c79ffa607ebe6c0fc79e145c9e307f4f0258756065bcf5b6c2320f447131cd0ce098e658b47ad761aceaf0fcbc86541bd685c37e74debe22ea716820304df8e51ff8309398688ff99bd89e7d6a7b15dd425fb55c0ef660ecb0f606da61addf5bb15dc491f98b5863ec482ad27dc91e1baa4312c3759f000f250ec5fcc3b442eb6b03fbd5587569ed73541bdcdeb8f2500c70866e201d9d4915d27ef35d7a4f8875d63963d2f276f3be86baf401d9e8e75123e0ccda0a94ecc9214beffba1b447ec191de3cca7348ec967af9f3ed17d4912d7e1c0d1f857558485c88e8a4cfd147f559865ab89e03306138ddbdea39a60c32be709cc5acc8a9d2279b44dbc015cfe7f5bea1476d64d7b0cc8fd65cdc146a0f1a94a96029c8338c809f60582ffd5c807197d1ea005219842c5de2358562bbe8934a2d5d231989f3ecc73d863cf78ca7253794b4a4bda7aabd13118ad6fba91f39b266bfe6d68b8ea9cdcd0dd0de902f3567302093c68f7ad62acfb3510f178ba71f6d19fcdad65a61dbeac4304ca8f1b6c4293b8f98612a4bf25d9b0e110da29460ac807d850778244425fd74a3181db1ce4d91418a14ec5eeac1309ee0172da6ddbb46d757008014aed20f21525e1a9eebb849145950e6e8d12ddb1f2ee26f6b4589d5e4b1129d0e1b767faa7bbbefdd14ee9105b34a2c11ae97155f270e898594f599d5714020f55c3c1c29f7aae90bb4ae0ff951d80a3ffa7c08a2e030dda55645f433a0779744aaa0f05582c7cfb1448c7e88f91988a5d9c1eccf86ab34fc62da70ce761d0c327c54574d381ddecb35c354d565f113529b1cec0057684e2eb1caa768663093ba96e3df43d9b877e7531b1485d88a075fb02d3d01d4e282be1bbd27d5022a387f973c50f6373805e7e6fe355dacf2eeb19ce9230002ac668b5338bdca9992bea3ca233912a2ac96883b191489f3aaa6cfe720aae77d6c0f4129ed3714c6a03a1025e3c7baa3af99d386455566f9e4056e1407745aae04985bea1e4965a7f7711557e8fccf6813f009645f84fae66d0aaa6390d5f172a55574eecf28803c80c9049cd1f6dd7e367dfb1742dcc3508a914d911a84b40604258d26fa1f59eddc9a6970b6381099821cedd9755d65b1702117e1faaa9c9b504858f6ca11c463332f97211c2d318e99e4ae29d2aabb098fb40dce195a87983b4ee55dfde687c3c2b30802890c946f29b686b5186ba68fc1a31cc246f07338e23bfc37a9615335da683d80c8519317cd08f609f0793029d5cccca745186d1db03170897401809a6c403c90b47f1a9b1cf03284b052ae169bd61911bc6bd3cf2694cc6182eb3efa5b9eded8e12106f62bd2959b0f047316f7bdfe7332a8467181ba0c4157a9692b7d020916b2a53a7f44c42bfbc4017614337fa71027ac0e7437fac351c4917c4de7bc851c30cef8bcb066f8c76e90eac1e5bfc8fbc4169ed04480650f22476a1bf181ee4c38db523331b3ec14ce078acdeb64472f1ca9b5927843533c2996394aa5acaccd3c4ebbac411afe3ce149dafe3a086700b44bd69f70a4142c09042e8b760af24c8976f35f18d1fd95f42dbe8d3250fa7c5d8bd520b51ad1bd34baa94d63b64636d472ad60aa66dcc8503a900b45bf266308bc21b3f168abd9529565d9a4fe6f4493d8f823c1d71028b9ccfe5f090077416fc4522bd18d2a3fa95f2b9918b6d4c751b9fab8a84833ba52eba3b0df34824e5af0c1ca53739ee333fea3cbc23c62b209d44c89611392b4912a57b13448b1a55d2bfb67724e90c5fa4808f7eab86e0ac84bb50b6ba4ef8503c5f52b812865aa6c174d165a2639630186037d65b0be8c8b738c1b0ceeb2bac9589f82f29196b2f9309ad5aa14dd608ccf509365e608ed637e4a8364dcc2f50338c8cef7eaf0dff7e4bbcc9bf0833d89453a7717bec3bf5dca3f1e76b50a00b4c1e80c22bae2797859a5dae50d1a8d30b316a3871e96ff9b9dcdb0c2f4ba7852b5633c7ba3995eb102ad430e542a0e465090956f93e5eaa9991b85222fcc47f7c1a17d1c903fe22d2bb6aa3ea87eba84fd2f9b10843422e7913292e3957db77dce6c4cd7ce7766e636abfa55d2a348724dd1b91d6c8fd5901f9f8531cd16dac1d646c28f4daab3d3fae7130aa52e667006bb45849ea55697549c65c7fb6ba3e87093faabcd34443e8d1ec80ff0a1b50432eb0ce84209de7d001989bf0bb18828d8a14c246148ec8ea5c10a925faddf0fd3459a338079bd0946c8146ed396e7510f943b28732d340a1eca84656c9edff3f2b3e395fe2a78f72e190b3d27812df68e5ad00d27e84af3c329239437b02775f5510bcfcbc929be6295cc06505e9cbcd76c35b96282ce514d8be2bfe7727ae65c704f00a43b2645b76993c0196938effedb435bdbb42ffe353331d6c7684ccbea6ca6f8859df4ae1037acc9d87f84d7eb9700d8fb2f77fed041d8c0815515e6f8b0c72f0092c58febad8732e28f7170a4614969d187a1311156e15ebc72c7ea33f0d07ebe3bba2630fd3ae172489b7ac5d2a06ff243adc2f052026527b42573e0bc0899d06bbbc5f91494f0942c2406516b8046c0522465b933d0ede946eb3035cfcfc64477cf93df2754d446cd310c59f7bf053f4e1e8e783d63373f2475adf4ffcc24f62c12350ee1522469b38142d956a92e29c1a7dfd8a82aa538cf794ce03cc00706a9d16c88a2168b276c32d4c973b76f71a09f0265aaf4480d6b5e754bbdfdc674bc52c9c3f1913241bd523a539f3af5db216231d4711f92ac9933a93ea5d1da1768fa9f99e52207e2671417c8667d62690d1e13037dfcee368d097dee0406c192d5ff5f385dffffa1b8ece07ceb659a73f4d5e533563f7c81eca71ad2b61acb7bb20b3c2807ff06cb33ad67f4c827f0e3912384bfdb754c96c2354c0852161152e8aac602f7e12bcb19bd8e722f034c0a758a7272e6acf5cd16bacda07ef623c6d065b0a99ad844e3c77584a5684102ac0c89d4906b3cabf3a80520b81ee08fac1fef71ec7c5aa8d498395ec6e3fcced2f48444a75f018fdef50564b892fccd79f34060034cb085b85d1ecfb753e99dab6107cc40ca350dbf342ead5dadf0c5c1efbf54a1b521535446e6c7aa26dfe3ecbb0a9fa2e4b7155c9eb3461a1153901f5c057e69f6feb4055e000e3d679f2b45b5d4730a680a54bd80bdce8180a99b84acb7cc32929384cc2668ae2966ad06346a84e0023e3626743965f51e1a469c654d79f3f84b2495f3801cc1a56900d5d1d4deacf6c947d48cf9343ad72cbeea2c3fe5282223afaf0f30f52e5d4379c260f062115de3bdc88cd938ff5da70228a75e2d2b91c36a503c06f4bba36b8c901c22f11ca3965643620fc1d861c168e70ab8e1e79dc98704aaaa324b75a25aeba935806517876507f601209d13ed57fe22efbb6e06fbab28820624ba932f28004ca1a2635e8f648799d0b1eab51991d2447b606608a516cc76db9185c8929de97a82d33bc4f594c8e8cba6dcc5b09f11652a7d08d534fb40ccca410c0ddd9dedc6724edc9a35ce211da2e0296706a7c796bcfe5e2775ae73b022d4fc0078ea8d41b002659119f50f8e5fd10fba06f3c62ac9681c27f76e4aba5918dc4035fc709c46e8e30867fb59c81efd6f8d383a890ad1e067e685a7e4f7fd8abe527b68a0146453510209bc857a3fb93e21454c592f38e7a2fd5590b18ccda8e7b7c975846627dfccb1624ce1741bef4e3f4660a1864f3bf3941adaf82422b84142fbf37d5d7ca9636425586d64081b148a8a5d801d4040948bd9daa85399aa249b16af2e014712d5af15ba2775877449248548be73525fee071ef45bc11db954e360d2abf43f94e25d1da2d70f9a130fbba9519e5f2469c610fa494c1f41ab4ed770069a4848e59e4b36b38ba41e6cda2cc314c44a74920783e985326f2f8619ab26367e12ebbd48f1cd3d650d0663e0e8017b656d3cf7b0ca3bb6135919f2cea85cc6eafa13d9aa8b056c12418cc51e89dd0ebfe7ae84abf0506d5b9757e61387f19645c009557be1cc7250b5aabc182c7db89541da5227b14e8a17060ea4aafe636445e67f8ca558407f73bcc37e6cb0dd01dacb368e6993f7b854d1dc628c6b8e5a4b7d59cd95ea8eb5abd67fe9a8dcd3cd56cac05be915e699f4346fb7f12288170b48d1cb6f3269bc5623110f8bc7a179f7714c9cf8e898fa2b1a3613a854cf8ebe1e3bdc33dfe91cb65194477e862187dd1a267273b5de30052550caba929fca1d83ea81f9f7b9bbd6188bccb1782f0f6e09bd32adb07b71f452b0a767365a2f7ff9887b09057a41552fe21f06a0eb576d44f7d521522d7b16f86d52ca68446dbe3a6e3b15af7ed3a1fc2330b1a61efe3abbcec4191e45768b82e9a2a9e2404ce2c7c3193ebe509ce3773492c4f0a97997ae57a1e0501de4b39518dfb54dfcc95ef45d24d530aa4bd3af41fa2e594d9485a4a56621d99e0abf4ff62b4c7eef664f385a9de13a249e189713a24ede18e2ac71f6bd60c1709d51dd439fc1ed3a222ed1cb8c13f488e47460c48cd1a1e46e998a0cd726ece44457fc948a74648af4952c92c84db6b09e15f2025cf0c886d86615512132c60ba52794f73ddcca631f3e145920495bd3324a2eb79483bafbb580716599c2a221549dc27a16ec8f581c5114e98f7ccef3b61f532bb438e85bac4754b2825be5926ea00dd444ef45bba07a05732df6620eb56f109dfebde71132b5bba8a4074a6441e840f0d7a1113bcbb8accfed50bd95bc57e14813d959e2695cf7295627f6c5c5dd07737ed19f6a4326682250875c9fdb1028be8da70f344c2c1ca74b48f2a89ff967b9bdc22f0b3a39376ef365dfd86678d8f7f42c20b9bc395632de3462a1f42e6ef181d7bc012326f76674fc6573af9d79e0dc8d3d8a2ecffdc80f74e7b71abca4f278005ee272b4d8299df1847c7cbf7a83a3c1f13d3c0516b278507ea1c7915e7077e5ca457ada6b83d5fe9a33f43661774e8a11f75e55e65b7e2ca49bd15dd80710a59c73ea2d74b3006eaea02c7799faf1849ce8b59be32f29e8c6cce52ad590a217ce0b03466946ff3050410e924da48743971c8cf8400fe3b8e7e89291331b8eb9f9a864a291e47cba746f56624c9753f8917e16491adaf39e26139713d59cc0249bf3e1739431453a244ef0c941b781e6f7b5b5a9227e0d131d42daf5d0a5c897a6c6185662c751c8c8c5a57496a45379cfc957c10238ad3c977759c165f0b2e9a3eb3dba0c0f4d75ba4d9d229f9fc0086493afc23855322e2f79207f6a2a953d5dfffc7681fb8381b8aa77bb1c4a6c93b4319278608836f99f9299c801fbc6c3367109d54c0a2b27c464b1445882756e886dd347b6f5724fe0eea41594d862746f99988db85146db60188a4f13cd4e3d1fe6961cb82eac786e223e855bffeda71b7995e23c430397590e93b68b9a5155b33a6082da79161c9ed5416f046fb18503466d11b2816f303660ba21db2922f6a743a00df697e38cb193178fe3c68f22f6256e3d93bbdc397909303970e6232adb617f7b3cd999e7ae4f597eae9aead43423eb38b99c556571d13f9bff072a481f7d7e7bb85819c853bf9848b41c7430df5349e13fb8a6d079d24a38e9933b3a6a4faa4c9f5dffc851cc2542e0b45d6a8949d1550f59bfe2aa0cbf680b14e8dcb90231536db0cdf9c726af30f2368fd10ca56dea5f2ed1b322a25b9fe9b35982cf5dccbcbf59f268483705a07dd3680ed73ebaa2e4fdf966911bfe532df1c0e4dd669d59b26eb4fb89667149f1f92042e7f8079745a895daed60fa0beeee9196c9f6252bef23a4ea74d02f29e6b410fbd164a9bc843317819db1f6d1badb6ba465f0464998634248d0c1ba4488f5c4395e70e83d35e1753f19540dd634a0df37151c05b3ec17c4ca18370e7adee1d5dec88b08fac7f745f96c1954a66d73411179116296954900cae034656785c5e26ca697acbf64676b1284e6c98888a1362ed7d818ad0cf898b706d295c1f07de09c2408fcf2bd6cc84458e4fd1ba1f2e948210ec00ffb0837e395f4bdf6f2975841819b2251c0f8cd05bf95f50de8f6f38fdce5aa1fb4ee3f132b53a35d32c87302635c3526674ede4a4ab53c06c345c7922d605d220e4b74a6956174e304f7259ea7233eedab31f1b5f18e9bdce8bf252931e848438bb07653e406fc7851a3287649af1aa26f005d6ab52daa118a6828822f1c1652fa1b5a3ce2b2d04871ffcdd63374d15ca5c6843dbfbb597033b3d8b2152a3ecbb35f4c33f10feb07245da1242ce0c2607b86deac96e0723209789312914ab01569151ffde6c80993554cc3024abee3d55d45694e1974a5d85a3b446bf3ef9d5cdfa92dd107ca4cb7eaf1bab066ba219dd652192af02660bb6eb721816ebdbf98fa3a1a3a57836aed1333a4355455906812f8d3694618ed93c2257fe7825f0acd2ab540f65d4df947eb7f83690a151d342c02c631548e9d5752e4786c80c1f3e331d1e993f582ac394f792aedb7991c5b9bb21776625101e710f9faa0e08248c3dfe7fcaae8d951804997c4cc033314f6c48d0818f7ae232eb5e3dfcb44e3ee73015eda51c3dbd79f0673a6b6fcbad34d8499551b6f88bdfeb9fb395e72a264a98c4d9a646d6699d64b6d6a5c9b3965eaf2e0163367dd8a0b1609f6bc4d36aa78e5b5623d44cc8c417e38a73eb0e815a9b3d2bd484d58d2c49923c7a1abbd31e7bc516993092dd014d2399ee4cbe4c74f28cbf75b8aa2cade840f2eb14e3bd33ed6f2748e7dde2c327d10f42e9c273141342c91b27def99b89cd01cead5fb8d70ca03d730ab3c4834a9a0761c87cf647f4caec55c5d61e953897a518f6c46bcc87aa600199eff058ef2a3c4f2adde8fe2dbc8d602712f11e9c31d1d6fe61dac3899d54532fa43b9a7ecc815be4b2a2b568b6b10eb83d578d40fd953a338f47af45a7d5d4366964f0b506bdbbeff188fcb62f166a140cee5c541d5b31604e697bee8a4329ad8a9d445b8240c891610bcf22f6485f33f3cc00c51127f4222cdfa8977f2f13c70eedc770232360da8e16eac2cbd98a133ed980b4679629531a435cd6c78562db0b1266735f6908c2d2995afef78af18843058960dcea4d4fff2277aad97ef4f6d299b8c8298dda584750eccdae259a7a284193c43aeb4c2e0da7cad1357e7b7930013fa5737f221d4fbb785ec1a490ddf54ebb7c4be35ab6afb70c79d621a37b68105ee28dad1d52ae8e63fb4d362b09725adfa3e0b90d153a6ecda5f151ce4375f37c04442a6e17f39e5b75309dddaf556c583ba64f6d74338e8e86a19a51ccbba5148f41513da49b9f36ec3d48ae69d57b7065c19267a055ed18f4ddd7659bdd948242a11b7bfbf6d506480e10e7d7a39bf53b2a344a587a3f63efb162549f7e7475c7a453a1521afcd895b4ca044baac6a3b0e0c9dcc531631b86020cdfb9fd8c991304fcb211c91dafe61ec64c6b0a5688d1f6d360fbceaccd2b52e8c641250c6c3c256f1bea9ef2e8fd35e5e06005eb41496875dbc1db709e448fb1c39818bc2cc1cc928b1820b7151b493e6a2ef1b157f88071126179f0588e59169a6cd7efc9fbacdec2e52b73601240f1c611664c9bbb525dd546b8d83f54d37ffe238dd27da98bb5ddbf4a8645e3aeaf34e33677dcf39a5b6bd8dc5dbe3dae815fe9040fd3857266bebaf94ff734dbc95f3ce3fedadbc0fcf12a8bb1a06e2eda54b4f992ecf4be069b5f0e18b04d81be9636884b3f44544f17b288d5502ac08374da998eae7b13630278342812342770ae61a41fcc6fdb9cee98e7b28a9aff66f38e2bdeadf750f5c7888837b447c31567ec02f3195ee19750921127fac89521a8c789b8441e482a36f940ae374708a29d0f5c2b07b9c7899986920eeab8167723835ac36b3718e4f2089c10f1ce159c323e65d2f0f8e2f4ac09d3dca98323358911cb7d70145581bce2d317befbce3e3541fea93bb5686faec7a387dc668234861c1ca186091f174d6dc9493009dbd7bcfdb3a3629efaa90aac91ca7ec0ca966f4b606c74d0134c85dd533d7b7a84202d015e99d0aaf12b36dfb1f25e321b0c623eb9d04052bef519d0eb1caef9446de2f5448e45f837e66c06b89bb9bfc4ff5b17f826148c3276dd57a4935318bd6297144600de520c41ff66266969c19dfecfa5a3ebec9ff51ade57099dfea2879a50b13ef89853f76edc20b97302a15bbb70e8a8d87c36d354d57ef345d58f9532299854aa299081940d16ddf3cfdc7ed10d52433bb85246835c4cc640de1143dab9e92ce6c2bdec15d54086dc845df2b986b567557e2ecb5b835356d5e1ae7ad2891dec88c85a0741d414c13c2405cff92bbc603631bbb3e2a29d1a28d7249af776b0838b650fd721bdc61a72a05f5527c376785b3f198dde58b83751e93c0a96c5edb6967a7e3e51cc4cd3620689a1c7844a50c0b63896195189fdff1233de73425b0465047135557697ab316e17e74eeef558b869f702bbc020fd92a43f2ef9853e9364483b9bdc71c303876cb022c4b29cac8a1f13dae98dacf7b8fdc728f80766d87b7d9c0001c0f8e83b2ce35b5cc699ec46105e42f834d84e58c009f8deeb3eaa9fd4f2d57807ef80faa7be8e91e1626ca379f882abfa4e4ea155d22315c22d72a9242ea8cd7fbddf494ea7946cba7b1715d4735c4de0bd362049e54baad708678093ec000fdee398e310827dcd68aeaecd6c7c223d964e4a95525c43c9b074003fdb20560b4f71c2477dd1d36bb403d632b0dfbf49de792508ce4d7e3a115010d22cf379ae8ff17bbb1bdf4e68d9b1d386d22e32cd37f6fb42b1730e12b6a8debe865f32eb47e7257a5aaceda0e008867a9e29a1c17df18bf6e2150d524219223dae70df8e5cf6f6124ca782fe2f75a2d15cb63fb05489c652c819b55a1bdafdc5404edb1d48853d3c35af5663333c8a7e2181ce688141dea64bf502cc2c401adc007584623309c18941fd6a3740221509ce48f5815b566edfb7553850b4be47e2c414dc147d18128ab08645958dde9d7f4c73af0701d5bd986f5cfae3e0f47566181624df7e09f7f1665cd29b05cdb47c86ae27721dcecd010a4815452747d35ab6ca08aabf5d10da1fd4e5398269115f6b4b90d41adedbccdd672be0573fd447df677072d4c0bd932aee03ba2b4d2b5b8a2c84f75f7c9ed490f67e4a09b73f01a2c33b3ac33d9596a337919f636bfb99681611f2209bc49bd29c7ffeb53bc9d5f86090b05f1bd8046884118ee1247f6e5c1b78f9c5f4e9e03f2c9b62e5af33ea80daa7a95d58de79f26214b8f89a2408b27e2e1478fb98c09e598a253e7af6a22e3fa9f91c585a347621d967b5b3c3aa7db9d308dc2c307c9dc47bea622b43e345d57f58d300bec04419966a1df0deedeb3bff5a3b793b3cf1305004001d0f513f2c36b0ea54492156d165c3778189f1152d9cac9a36c847b64d1412dffde682d0abb33fe6be13e37c8a7b5d01a858e1e3a8e194246ad6a9fefb09ba15edcdd2bbaa10725224eb818fc419b6e5fcc8397b343a6175df0e023be610c6a6ff495a7ae693df8767cea1765d44d9dbd45708215ace9fe48fa7f6371df0647176e11ce0764a52062270d22461f9c5be46e1c3f0dea16a79e463c14609182bdc03f7f478f9cdcc07c4c3c45029bb24a28f5ea1d1ef14e3d9acfe3e2687edde96f94315266c69985c19da68efbe4a31a93bb0122e49efa3912cda6f2bbd5d97513544d458c938c3dd0fb3ecfa71e03be4f1f56bd70e14b6bc677de399f8a513a490fcb8673d01ce80f6e8b43f97c235581cdb67244d607a01740dd5688a372081e6be2a6de4bab39b72b1a7d02d20cbf8d74de1458d12548071cab3190327f472fd2a876e52e4f85ee59e0ee56cc1b0d48baa72b70a9d1d8c46cb696f48ed616fc247b6f88407b1a45ba180bc584b9879dec636f2b1ac99cddf9d032a926a81fdf6ab4488c872c3e3c6e20977cf5c5d40925b430947f7b89edaaf28d7e93d418f45abc68915529ce6fe383bbde2d768cf0a194c4e6184bfe9d74d485c693aa379fd9ba7c6c65aa22161e64c65cd7441f108bc0a26c35670f49cc87dc516abd628e8a05c951fcc54965ac7ee55ca2d28d0b467766e3a85bedda8377d4db6aba43a5ca746e4b4a63ad6a78dfe96527339c97db80c50091917468945bcea84b62875212f7d15e0302de45b376d28c70ce3c2033955123c84f33ad57b580b53925f847e7619d53dbefd8d177554e95e500dab4f901fc6f05be4472c32d3c5092059ddd1cef7201f83d4230ab41b2dd01238ecdb0b5479f8c347007b682120a7234aeb10c99b75ec6ac85c9a8ebcc42fd002abf6a37913bcd94c68f20bd009b75d695979b1df6a61afbe0595ec2312d93d123b900a1414a98cc257a1660846c7ce0cdf36d333e039011d24268cd3a4df3f95c52701df6b5ce2f69619f660931693d9e0945519d4c13264753260e147430cbef6a2a5ac387895c782f3d90233cd82dd5f67b02e718be045affa0a72835bdeae89aebeef81b83418baf0d94d5ce971747e6989471c3a3940135b0faac50ab612772c9c46ac26f58d73faf7b43cfc342c513b8cea0c7ad45b4f2e176d4cff3c511ceb8014d4e8116239e0c1d9c6cbdc2a7d84bd2cb74e03819a9e23f1ce934bdad004c58757ee2761fa985c9429fcf22b95481c71bf0089fee6f8ff484f9ea9beb0283046d33d8811c4f820c4c39101744a62c55e2d10700ea965992f2242091e892967f3c967bb66e4abe185d60ef7d015a501421b1b01a7fb88fbd4f9db86f0790eeaca401943754885203a63f8109b558f8055908b6476e7673d74dd775532e286355d9a35ab0dffb580c36db1e12e784eab5e1aeac4bb0d01bd92b7c2df4d3ef532eb98aa461abb2b225e567bc2fe30a19ed468d2965eb42f925bd0433cae86337af4e84d651c32d66bba7b6bc3497ee7c605ecbd67258019ef210581e4f10e398a23219030a7e940c28536f5a3e71b006fd4d6514ab86dc79a5bfae6c5fe5363e0b30caee0c87826231a48c9d195e16d3a1c545aab3ebe00df4ddec8fa76c77576f23badf970e7d3f2d24ee2df31f03918e2f45251e2848517d837985f0e1566ced54035327bacfe4198f99d88902832c80251502a822fe12c94d0ba8497f10578d9b0835529aae6da26012c4caf26a32663b82e05cc48bba9f94204503e169b58dc56339091d36ed51114fb5b098922780b281542da6f6e5430bf972a6248a4a93172fdc74e4e8f4268d615607879ea4eb476e6405fcff947bfd66fd3ca94348850e7e9d2dc4e04eaed435e1f20c87837d77ed4cd56656adf104353ca71eaf07acbd1dbe1bcccc1f2732a20226a86d074dc01743bba0e844b3a5ec7b7fc62d8f649c78ed4a2dad0b11941f5d0843ba19cca4796067433d77df50694f32f7311f29893778cb4826c2a0e54e437135152692aee354a67d5535a82f00469937e50bfb403eca56187617c2506a0cf6de5ad335304573c83750cea9cfc6552cda7bb172ce916cb4e367e6ad11b921b41c08698123b3f459a1341cfe45042a312a6c5041240484658091ffac0c887d72e21ff3af5c44a779abe91d1a07f7d3e07061de9ad1cbdc5150c1993c295b7d145eb15b7b8a574c8dbc8fc9686f12d16cb41db05beb3f707b628cbd9f7087c285f0afaecd891271c56ddb373b82dde9d9957687811c4b6120985a9cf0fcbb404b31938c49a29d3d3c92017bff5a4ee65b9a81499a1a3b7ba239328c1a295a50f8f946d7cdf0839395aa1ff164c24ced5c5c86f5c81bde562670b343185e010b63ab9e4e5717fed70e0be29f194a052ae18d1bcd43f397aa587ae4f9220c1d4a19d886ecbf05934eb886909cf2830b68d56b712e80ee28df9513ff7307324748710273e3a1e8eb577a03392b4c69b71cde008581aa4a9efba4d92ea85b53cf80f641831187f73123f38eef36912c576775a702bd98495baa9fd2bd6dbabc05a5eeb8e26890534ff0c880936d10b767c4d24f2597ffce61e3a28e47e5fa226af9c90f08e8b795825d265b4fcdb4ef14f5f51652619452cd1c973814046cdc7a77c9bfe338502e51e77aa2c7f2367853bad40de66bb61549e91b7b2f291067f5cda069b8706fc46722a94225f96d7561fd239d1910aefc8d9f63d0af4b1048c5f860d6bee49ed74f00c59dbb3094816093a73b633f95917cdc11bbed3b3a4ded8c2e6c89956d12042b654f19a87838198325d3b5ac5df3dd67cbf7138b4747e43cf284b81251586ad8ece20b6e68f254ceb9ce6f7046454cad7b6b438b4dae86af96ec2620fa8d3ca01f1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>离散数学</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾 Golang</title>
    <url>/posts/191026/</url>
    <content><![CDATA[<h2 id="什么是-Golang？"><a href="#什么是-Golang？" class="headerlink" title="什么是 Golang？"></a>什么是 Golang？</h2><blockquote>
<p><strong><a href="https://golang.org/">Go</a></strong>™ is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
</blockquote>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><ul>
<li>静态语言</li>
<li>编译型语言</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>语言层面支持并发</li>
<li>无依赖，直译机器码</li>
<li>内置 <code>runtime</code>，支持 GC</li>
<li>可跨平台编译</li>
<li>支持内嵌 C</li>
<li>丰富的标准库</li>
<li>学习曲线低</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>接口是枚举类型</li>
<li><code>import</code> 包不支持版本</li>
<li><code>goroutine</code> 一旦启动，切换将不受程序控制</li>
</ul>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　根据操作系统，在 <a href="https://golang.org/dl/">Download</a> 页面下载对应的安装包，进行安装</p>
<h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装完成后，iTerm 中看到可以执行 go 命令了</span></span><br><span class="line">$ <span class="built_in">which</span> go</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/bin/go</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz</span><br><span class="line">$ sudo tar -C /usr/<span class="built_in">local</span>/ -xzvf go1.14.4.linux-amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="comment"># bin: 存放可执行文件</span></span><br><span class="line"><span class="comment"># pkg: 存放编译好的库文件</span></span><br><span class="line"><span class="comment"># src: 存放 go 的源文件</span></span><br><span class="line">$ mkdir -p ~/code/gopath</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line">  <span class="built_in">export</span> GOPATH=~/code/gopath</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建项目目录</span></span><br><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/<span class="built_in">test</span>/hello</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/<span class="built_in">test</span>/hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写 go 源文件</span></span><br><span class="line">$ vim hello.go</span><br><span class="line">  package main</span><br><span class="line">  import <span class="string">"fmt"</span></span><br><span class="line">  func <span class="function"><span class="title">main</span></span>() {</span><br><span class="line">      fmt.Println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">$ go run hello.go</span><br><span class="line">  Hello, world!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ ll</span><br><span class="line">  total 4.0K</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 75  1 15 11:20 hello.go</span><br><span class="line">$ go build</span><br><span class="line">$ ll</span><br><span class="line">  total 2.0M</span><br><span class="line">  -rwxr-xr-x 1 benedictjin staff 2.0M  1 15 11:20 hello*</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel   75  1 15 11:20 hello.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行可执行文件</span></span><br><span class="line">$ ./hello</span><br><span class="line">  Hello, world!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理编译的中间文件</span></span><br><span class="line">$ go clean</span><br><span class="line">$ ll</span><br><span class="line">total 4.0K</span><br><span class="line">  -rw-r--r-- 1 benedictjin wheel 75  1 15 11:20 hello.go</span><br></pre></td></tr></tbody></table></figure>
<h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line">$ GOPATH=~/code/gopath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个依赖</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/go/bin/go get -t -v github.com/golang/snappy/...</span><br><span class="line"><span class="comment"># 所有依赖</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/go/bin/go get -t -v ./...</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">init</td>
<td style="text-align:center">在当前目录初始化新的 mod 模块</td>
</tr>
<tr>
<td style="text-align:center">graph</td>
<td style="text-align:center">打印模块依赖图</td>
</tr>
<tr>
<td style="text-align:center">download</td>
<td style="text-align:center">下载并缓存依赖包</td>
</tr>
<tr>
<td style="text-align:center">vendor</td>
<td style="text-align:center">将依赖复制到 vendor 下</td>
</tr>
<tr>
<td style="text-align:center">edit</td>
<td style="text-align:center">编辑 go.mod 文件</td>
</tr>
<tr>
<td style="text-align:center">verify</td>
<td style="text-align:center">验证依赖是否正确</td>
</tr>
<tr>
<td style="text-align:center">why</td>
<td style="text-align:center">解释为什么需要依赖</td>
</tr>
<tr>
<td style="text-align:center">tidy</td>
<td style="text-align:center">拉取缺少的模块，移除不用的模块</td>
</tr>
</tbody>
</table>
</div>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">const &lt;常量名&gt; &lt;常量类型&gt; = &lt;常量值&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> NODES <span class="keyword">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    NODES        <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line">    SHARDS       <span class="keyword">int</span> = <span class="number">64</span></span><br><span class="line">    REPLICATIONS <span class="keyword">int</span> = <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>　Golang 并不支持三元表达式，只能用 <code>if-else</code> 来表达对应的含义</p>
<h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expr {</span><br><span class="line">    n = trueYuzhouwan</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    n = falseYuzhouwan</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">var &lt;变量名&gt; [SIZE] &lt;元素类型&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 声明数组变量</span></span><br><span class="line"><span class="keyword">var</span> yuzhouwan [<span class="number">10</span>] <span class="keyword">float32</span></span><br><span class="line"><span class="comment">// 初始化数组</span></span><br><span class="line"><span class="keyword">var</span> yuzhouwan = [<span class="number">3</span>]<span class="keyword">float32</span>{<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.30000000000000004</span>}</span><br><span class="line"><span class="comment">// 不指定数组长度，Golang 会根据数组内的元素，来设置数组的大小</span></span><br><span class="line"><span class="keyword">var</span> yuzhouwan = [...]<span class="keyword">float32</span>{<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.30000000000000004</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ {</span><br><span class="line">  arr[i] = i</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ {</span><br><span class="line">  fmt.Printf(<span class="string">"%d = %d\n"</span>, j, arr[j])</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有元素</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加新元素</span></span><br><span class="line"><span class="keyword">var</span> yuzhouwan [] <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="number">3</span>; n++ {</span><br><span class="line">  yuzhouwan = <span class="built_in">append</span>(yuzhouwan, n)</span><br><span class="line">}</span><br><span class="line">fmt.Printf(<span class="string">"%v"</span>, yuzhouwan)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">l := list.New()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ {</span><br><span class="line">  l.PushBack(i)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> e := l.Front(); e != <span class="literal">nil</span>; e = e.Next() {</span><br><span class="line">  fmt.Println(e.Value)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">site := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>{</span><br><span class="line">  <span class="string">"yuzhouwan"</span>:   <span class="number">0</span>,</span><br><span class="line">  <span class="string">"blog"</span>: <span class="number">1</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加新元素</span></span><br><span class="line">site := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">site[<span class="string">"yuzhouwan"</span>] = <span class="number">0</span></span><br><span class="line">site[<span class="string">"blog"</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断指定 key 是否存在于 map 中</span></span><br><span class="line"><span class="keyword">if</span> value, exists := site[<span class="string">"yuzhouwan"</span>]; exists {</span><br><span class="line">  fmt.Println(<span class="string">"value: "</span>, value)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  fmt.Println(<span class="string">"key not found"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>{<span class="string">"yuzhouwan"</span>: <span class="number">1</span>, <span class="string">"blog"</span>: <span class="number">2</span>,}</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m {</span><br><span class="line">  fmt.Printf(<span class="string">"%s=%d\n"</span>, k, v)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照 Key 排序后遍历</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">1</span>] = <span class="string">"a"</span></span><br><span class="line">m[<span class="number">2</span>] = <span class="string">"c"</span></span><br><span class="line">m[<span class="number">0</span>] = <span class="string">"b"</span></span><br><span class="line"><span class="keyword">var</span> keys []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m {</span><br><span class="line">  keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">}</span><br><span class="line">sort.Ints(keys)</span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> keys {</span><br><span class="line">  fmt.Printf(<span class="string">"%v : %v\n"</span>, k, m[k])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> &lt;接口名&gt; interface {</span><br><span class="line">    &lt;方法名称&gt;() &lt;方法返回值&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span> {</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">    Set(<span class="keyword">string</span>) error</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="自定义数据类型"><a href="#自定义数据类型" class="headerlink" title="自定义数据类型"></a>自定义数据类型</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> &lt;自定义类型&gt; &lt;原始类型&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrorHandling <span class="keyword">int</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="给自定义数据类型扩展方法"><a href="#给自定义数据类型扩展方法" class="headerlink" title="给自定义数据类型扩展方法"></a>给自定义数据类型扩展方法</h3><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><p>　可以使得自定义数据类型作为某一个 interface 的实现类，只需要扩展 interface 中申明的方法即可</p>
<h4 id="举例-7"><a href="#举例-7" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span> {</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">    Set(<span class="keyword">string</span>) error</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringsFlag []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *StringsFlag)</span> <span class="title">Set</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">error</span></span> {</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    *v, err = str.SplitQuotedFields(s)</span><br><span class="line">    <span class="keyword">if</span> *v == <span class="literal">nil</span> {</span><br><span class="line">        *v = []<span class="keyword">string</span>{}</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *StringsFlag)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;StringsFlag&gt;"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="初始化空的结构体"><a href="#初始化空的结构体" class="headerlink" title="初始化空的结构体"></a>初始化空的结构体</h3><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><p>　<code>struct{}</code> 表示一个空的结构体，不包含任何的属性和方法，相当于 Java 中的 <code>Object</code>。而 <code>struct{}{}</code> 表示对空的结构体进行初始化，相当于 Java 中的 <code>new Object()</code></p>
<h4 id="举例-8"><a href="#举例-8" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>{}{}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="defer-异步"><a href="#defer-异步" class="headerlink" title="defer 异步"></a>defer 异步</h3><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><p>　被 defer 关键字修饰的函数调用可以异步地执行。多次 defer 异步调用之间会以逆序的顺序执行，类似于压栈出栈的过程。并且，defer 修饰的函数会在外层函数返回之前进行调用（准确来说，是在外层函数设置返回值之后，在即将返回之前）。因此，defer 常用于资源的释放</p>
<h4 id="举例-9"><a href="#举例-9" class="headerlink" title="举例"></a>举例</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ {</span><br><span class="line">        <span class="comment">// noinspection GoDeferInLoop</span></span><br><span class="line">        <span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">        fmt.Println(fmt.Sprintf(<span class="string">"for %d looping..."</span>, i))</span><br><span class="line">    }</span><br><span class="line">    fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 1 looping...</span><br><span class="line"><span class="keyword">for</span> 2 looping...</span><br><span class="line"><span class="keyword">for</span> 3 looping...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ go env -w GO111MODULE=on</span><br><span class="line"></span><br><span class="line"><span class="comment"># Golang 官方</span></span><br><span class="line">$ go env -w GOPROXY=https://goproxy.io</span><br><span class="line"><span class="comment"># 阿里云镜像</span></span><br><span class="line">$ go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有库不走代理</span></span><br><span class="line">$ go env -w GOPRIVATE=yuzhouwan.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否生效</span></span><br><span class="line">$ go env</span><br></pre></td></tr></tbody></table></figure>
<h3 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line">$ GOPATH=/Users/benedictjin/gopath</span><br><span class="line">$ /usr/<span class="built_in">local</span>/go/bin/go build -o /Users/benedictjin/output /Users/benedictjin/yuzhouwan/main.go /Users/benedictjin/yuzhouwan/sub_process.go</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h2><h3 id="influxdb-comparisons"><a href="#influxdb-comparisons" class="headerlink" title="influxdb-comparisons"></a><a href="https://github.com/influxdata/influxdb-comparisons">influxdb-comparisons</a></h3><h4 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz</span><br><span class="line">$ tar -C /usr/<span class="built_in">local</span> -xzf go1.14.4.linux-amd64.tar.gz</span><br><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=~/code/gopath/</span><br><span class="line"><span class="built_in">export</span> GO_HOME=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GO_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ go version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">go version go1.14.4 linux/amd64</span><br></pre></td></tr></tbody></table></figure>
<h4 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir -p ~/code/gopath/src/github.com/influxdata/influxdb-comparisons</span><br><span class="line">$ <span class="built_in">cd</span> ~/code/gopath/src/github.com/influxdata/influxdb-comparisons</span><br><span class="line">$ yum install git -y</span><br><span class="line">$ git init</span><br><span class="line">$ git remote add upstream git@github.com:influxdata/influxdb-comparisons.git</span><br><span class="line">$ git pull upstream master:master</span><br><span class="line">$ go get -t -v github.com/influxdata/influxdb-comparisons/...</span><br></pre></td></tr></tbody></table></figure>
<h4 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/code/gopath/src/github.com/influxdata/influxdb-comparisons/cmd/bulk_data_gen</span><br><span class="line">$ go build github.com/influxdata/influxdb-comparisons/cmd/bulk_data_gen</span><br><span class="line">$ ./bulk_data_gen --scale-var=10 --format=opentsdb --timestamp-start=2020-01-01T00:00:00Z --timestamp-end=2020-01-01T00:01:00Z &gt; /data/opentsdb_scale10_data.json</span><br></pre></td></tr></tbody></table></figure>
<h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/code/gopath/src/github.com/influxdata/influxdb-comparisons/cmd/bulk_load_opentsdb</span><br><span class="line">$ go build github.com/influxdata/influxdb-comparisons/cmd/bulk_load_opentsdb</span><br><span class="line">$ cat /data/opentsdb_scale10_data.json | ./bulk_load_opentsdb --urls=http://yuzhouwan.com:4242 -workers=64</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h2><h3 id="version-go1-11-9-does-not-match-go-tool-version-go1-11-5"><a href="#version-go1-11-9-does-not-match-go-tool-version-go1-11-5" class="headerlink" title="version go1.11.9 does not match go tool version go1.11.5"></a>version go1.11.9 does not match go tool version go1.11.5</h3><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew uninstall --ignore-dependencies go</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Uninstalling /usr/<span class="built_in">local</span>/Cellar/go/1.11.5... (9,298 files, 404.3MB)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="now-Sub-last-Milliseconds-undefined-type-time-Duration-has-no-field-or-method-Milliseconds"><a href="#now-Sub-last-Milliseconds-undefined-type-time-Duration-has-no-field-or-method-Milliseconds" class="headerlink" title="now.Sub(last).Milliseconds undefined (type time.Duration has no field or method Milliseconds)"></a>now.Sub(last).Milliseconds undefined (type time.Duration has no field or method Milliseconds)</h3><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a><a href="https://golang.org/dl/">解决</a></h4><p>　将升级 Golang 到 1.13 以上即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -o golang.pkg https://dl.google.com/go/go1.13.3.darwin-amd64.pkg</span><br><span class="line">$ sudo open golang.pkg</span><br><span class="line">$ go version</span><br></pre></td></tr></tbody></table></figure>
<h3 id="command-line-arguments-undefined"><a href="#command-line-arguments-undefined" class="headerlink" title="command-line-arguments undefined"></a>command-line-arguments undefined</h3><h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><p>　不要直接右击 <code>main.go</code> 运行，需要同时选中相关的几个 go 程序，再右击运行</p>
<h3 id="working-directory-is-not-part-of-a-module"><a href="#working-directory-is-not-part-of-a-module" class="headerlink" title="working directory is not part of a module"></a>working directory is not part of a module</h3><h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><p>　这里以 influxdb-comparisons 项目为例，关键步骤是 <code>go mod init main</code>，完整命令如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/code/gopath/src/github.com/influxdata/influxdb-comparisons/</span><br><span class="line">$ go mod init main</span><br><span class="line">$ go build github.com/influxdata/influxdb-comparisons/cmd/bulk_load_opentsdb</span><br><span class="line">$ ./bulk_load_opentsdb</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">daemon URLs: [http://localhost:8086]</span><br><span class="line">SysInfo:</span><br><span class="line">  Current GOMAXPROCS: 64</span><br><span class="line">  Num CPUs: 64</span><br><span class="line">Trend statistics using 30 samples</span><br><span class="line">Started load with 1 workers</span><br></pre></td></tr></tbody></table></figure>
<h3 id="verifying-module-checksum-mismatch"><a href="#verifying-module-checksum-mismatch" class="headerlink" title="verifying module: checksum mismatch"></a>verifying module: checksum mismatch</h3><h4 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是升级导致的，可以清理旧 mod</span></span><br><span class="line">$ go clean -modcache</span><br><span class="line"><span class="comment"># 如果是私有代码库导致的，可以直接关闭 checksum 功能</span></span><br><span class="line">$ go env -w GOSUMDB=off</span><br></pre></td></tr></tbody></table></figure>
<h3 id="can’t-load-package"><a href="#can’t-load-package" class="headerlink" title="can’t load package"></a>can’t load package</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">go: finding module <span class="keyword">for</span> package github.com/influxdata/influxdb-comparisons/cmd/bulk_load_yuzhouwan</span><br><span class="line">can<span class="string">'t load package: package github.com/influxdata/influxdb-comparisons/cmd/bulk_load_yuzhouwan: module github.com/influxdata/influxdb-comparisons@latest found (v0.0.0-20200224230202-a75268060881), but does not contain package github.com/influxdata/influxdb-comparisons/cmd/bulk_load_yuzhouwan</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ go env -w GO111MODULE=off</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ul>
<li>auto<br>默认判断是否启用 module 功能<ul>
<li>当前目录在 <code>GOPATH/src</code> 之外且该目录包含 go.mod 文件</li>
<li>当前文件在包含 go.mod 文件的目录下面</li>
</ul>
</li>
<li>off<br>关闭 module 功能，寻找依赖包的方式将会沿用旧版本那种通过 <code>vendor</code> 目录或者 <code>GOPATH</code> 模式来查找</li>
<li>on<br>开启 module 功能，完全不去 GOPATH 目录下查找</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://blog.csdn.net/huwh_/column/info/24158">Golang 系列学习</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/53284649">大规模 Go 项目几乎必踏的几个坑</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/avelino/awesome-go#awesome-go">Awesome Go</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>InfluxDB</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Flink</title>
    <url>/posts/20644/</url>
    <content><![CDATA[<h2 id="什么是-Flink？"><a href="#什么是-Flink？" class="headerlink" title="什么是 Flink？"></a>什么是 Flink？</h2><blockquote>
<p><strong><a href="https://flink.apache.org/">Apache Flink</a></strong>™ is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale.</p>
</blockquote>
<h2 id="Flink-架构"><a href="#Flink-架构" class="headerlink" title="Flink 架构"></a>Flink 架构</h2><h3 id="核心组件布局"><a href="#核心组件布局" class="headerlink" title="核心组件布局"></a>核心组件布局</h3><p><img data-src="/picture/flink/flink_stack.png" alt="Apache Flink Stack"></p>
<center>（图片来源：<a href="https://flink.apache.org/" target="_blank">Apache Flink</a>™ 官网）</center>

<span id="more"></span>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h5 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加用户，并赋予其密码</span></span><br><span class="line">$ adduser flink</span><br><span class="line">$ passwd flink            <span class="comment"># ur password for flink user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予用户可以 sudo 的权限</span></span><br><span class="line">$ chmod u+w /etc/sudoers</span><br><span class="line">$ vim /etc/sudoers</span><br><span class="line">  <span class="comment"># 找到 `root ALL=(ALL) ALL` 这行，并在下面添加 flink 用户</span></span><br><span class="line">  flink    ALL=(ALL)    ALL</span><br><span class="line">$ chmod u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 flink 用户</span></span><br><span class="line">$ su - flink</span><br></pre></td></tr></tbody></table></figure>
<h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/flink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放软件目录 &amp; 安装目录 &amp; 日志目录 &amp; 临时目录</span></span><br><span class="line">$ mkdir install &amp;&amp; mkdir software &amp;&amp; mkdir logs &amp;&amp; mkdir data</span><br></pre></td></tr></tbody></table></figure>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p>　Download from <a href="http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz">jdk-8u131-linux-x64.tar.gz</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install</span><br><span class="line">$ tar zxvf jdk-8u131-linux-x64.tar.gz -C ~/software/</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s jdk-8u131-linux-x64 java</span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line">  JAVA_HOME=/home/flink/software/java</span><br><span class="line">  FLINK_HOME=/home/flink/software/flink</span><br><span class="line">  CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">  PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$FLINK_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME CLASSPATH PATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure>
<p>　如果需要清除之前的低版本 JDK，或者重装，可以参照（没有这个需求，可跳过）:<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ rpm -qa | grep -iE <span class="string">'jdk|java'</span></span><br><span class="line">  jdk-1.7.0_80-fcs.x86_64</span><br><span class="line"></span><br><span class="line">$ sudo rpm -e --nodeps jdk-1.7.0_80-fcs.x86_64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="Local-Cluster"><a href="#Local-Cluster" class="headerlink" title="Local Cluster"></a>Local Cluster</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/flink/install</span><br><span class="line">$ wget http://archive.apache.org/dist/flink/flink-1.3.1/flink-1.3.1-bin-hadoop2-scala_2.11.tgz</span><br><span class="line">$ wget http://archive.apache.org/dist/flink/flink-1.3.1/flink-1.3.1-bin-hadoop2-scala_2.11.tgz.md5</span><br><span class="line">$ head -n 6 flink-1.3.1-bin-hadoop2-scala_2.11.tgz.md5</span><br><span class="line">  161e51c0b78d1fdf196f1c53c112a37f  flink-1.3.1-bin-hadoop2-scala_2.11.tgz</span><br><span class="line">$ md5sum flink-1.3.1-bin-hadoop2-scala_2.11.tgz | tr <span class="string">"a-z"</span> <span class="string">"A-Z"</span></span><br><span class="line">  161E51C0B78D1FDF196F1C53C112A37F  FLINK-1.3.1-BIN-HADOOP2-SCALA_2.11.TGZ</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 MD5 码一致后进行解压安装</span></span><br><span class="line">$ tar zxvf flink-1.3.1-bin-hadoop2-scala_2.11.tgz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/ &amp;&amp; ln -s flink-1.3.1/ flink</span><br><span class="line">$ <span class="built_in">cd</span> flink/</span><br><span class="line">$ bin/flink -v</span><br><span class="line">  Version: 1.3.1, Commit ID: 1ca6e5b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Local Cluster</span></span><br><span class="line">$ bin/start-local.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># WEB UI</span></span><br><span class="line">$ http://localhost:8081</span><br></pre></td></tr></tbody></table></figure>
<h3 id="分布式集群"><a href="#分布式集群" class="headerlink" title="分布式集群"></a>分布式集群</h3><h4 id="节点分发"><a href="#节点分发" class="headerlink" title="节点分发"></a>节点分发</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh flink@yuzhouwan00</span><br><span class="line">$ rsync -avuz -e ssh /home/flink/ flink@yuzhouwan01:/home/flink</span><br><span class="line">$ rsync -avuz -e ssh /home/flink/ flink@yuzhouwan02:/home/flink</span><br><span class="line">$ rsync -avuz -e ssh /home/flink/ flink@yuzhouwan03:/home/flink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在各个节点上，激活环境变量</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">$ java -version</span><br><span class="line">  java version <span class="string">"1.8.0_121"</span></span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br><span class="line"></span><br><span class="line">$ flink -v</span><br><span class="line">  Version: 1.3.1, Commit ID: 1ca6e5b</span><br></pre></td></tr></tbody></table></figure>
<h4 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 因为 Flink 集群中会用到 `sshd` 命令来管理和操作远程组件</span></span><br><span class="line">$ ssh flink@yuzhouwan01</span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh               <span class="comment"># 如果没有改目录，则需要先执行 `ssh localhost`</span></span><br><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">$ cat ./id_rsa.pub &gt;&gt; ./authorized_keys</span><br><span class="line">$ scp ~/.ssh/id_rsa.pub flink@yuzhouwan02:/home/flink</span><br><span class="line">$ scp ~/.ssh/id_rsa.pub flink@yuzhouwan03:/home/flink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Slave 节点上依次执行以下命令</span></span><br><span class="line">$ ssh flink@yuzhouwan02</span><br><span class="line">$ mkdir ~/.ssh</span><br><span class="line">$ cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">$ rm ~/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$FLINK_HOME</span></span><br><span class="line">$ vim conf/flink-conf.yaml</span><br><span class="line">  jobmanager.rpc.address: yuzhouwan01</span><br><span class="line">  jobmanager.heap.mb: 2048</span><br><span class="line">  taskmanager.heap.mb: 2048</span><br><span class="line">  taskmanager.numberOfTaskSlots: 4</span><br><span class="line">  parallelism.default: 12</span><br><span class="line">  taskmanager.tmp.dirs: /home/flink/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 slave 列表</span></span><br><span class="line">$ vim conf/slaves</span><br><span class="line">  yuzhouwan02</span><br><span class="line">  yuzhouwan03</span><br><span class="line"></span><br><span class="line">$ scp -r /home/flink/software/flink-1.3.1/conf/ flink@yuzhouwan02:/home/flink/software/flink/conf/</span><br><span class="line">$ scp -r /home/flink/software/flink-1.3.1/conf/ flink@yuzhouwan03:/home/flink/software/flink/conf/</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ start-cluster.sh </span><br><span class="line">  Starting cluster.</span><br><span class="line">  Starting jobmanager daemon on host yuzhouwan01.</span><br><span class="line">  Starting taskmanager daemon on host yuzhouwan02.</span><br><span class="line">  Starting taskmanager daemon on host yuzhouwan03.</span><br><span class="line"></span><br><span class="line"><span class="comment"># WEB UI</span></span><br><span class="line">$ http://yuzhouwan01:8081</span><br></pre></td></tr></tbody></table></figure>
<h3 id="发布应用"><a href="#发布应用" class="headerlink" title="发布应用"></a>发布应用</h3><h4 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h4><p>　使用 <code>ExecutionEnvironment.createLocalEnvironment(parallelism)</code> 获取程序执行环境，本地执行 main 函数即可完成发布</p>
<h4 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h4><p>　可将本机为 Client，提交任务到远程集群执行，对应获取程序执行环境的代码如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ExecutionEnvironment.createRemoteEnvironment(<span class="string">"localhost"</span>, <span class="number">6123</span>, <span class="string">"target/yuzhouwan.jar"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h4><p>　还有一种方法，可以将程序提交至远程集群上，通过 <code>ExecutionEnvironment.getExecutionEnvironment()</code> 方法 获取执行环境，并通过 <code>maven-assembly-plugin</code> 插件，将程序打包成单个可执行的 jar 包，并在 WEB UI 上找到 <code>Submit new Job</code> 模块，完成上传、展示执行和最终提交任务至集群</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.yuzhouwan.process.ServerLogProcess<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info">在 log/flink-flink-jobmanager-0-federation01.log 中可以查看任务失败的详情</div>



<h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="Flink-CEP"><a href="#Flink-CEP" class="headerlink" title="Flink-CEP"></a>Flink-CEP</h3><p>　当前 Flink v1.3.1 的 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/libs/cep.html">CEP</a>（Complex event processing for Flink）功能相比 <a href="http://www.espertech.com/esper/">Esper</a> / <a href="https://github.com/wso2/siddhi">Siddhi</a> 之类的成熟 CEP框架，可能还是无法满足某些应用场景（如，groupby、aggregation 等聚合操作）。先前，有 <a href="https://github.com/haoch">@haoch</a> 开发的一套 <a href="https://github.com/haoch/flink-siddhi"><strong>flink-siddhi</strong></a> 将 Siddhi整合到 Flink里面，不过 <a href="https://github.com/apache/flink/pull/2487">PR</a> 因为 <a href="https://github.com/apache/bahir">Apache Bahir</a>的一位 <a href="https://github.com/rmetzger">Commitor</a> 提议将这个功能放到 <a href="https://github.com/apache/bahir-flink">Bahir-Flink</a> 里，导致 flink-siddhi 功能提交进度推迟了。好在，Flink目前正在参考 <a href="https://docs.oracle.com/database/121/DWHSG/pattern.htm#DWHSG8956">Oracle’s SQL for pattern matching</a>，设计 <a href="https://docs.google.com/document/d/1HaaO5eYI1VZjyhtVPZOi3jVzikU7iK15H0YbniTnN30/edit#heading=h.vw4618mrw6mw"><strong>CEP on  SQL</strong></a> 的方案，目前看来，还是很值得期待的</p>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="事件流（Event-stream）"><a href="#事件流（Event-stream）" class="headerlink" title="事件流（Event stream）"></a>事件流（Event stream）</h5><h5 id="模式定义（Pattern-definition）"><a href="#模式定义（Pattern-definition）" class="headerlink" title="模式定义（Pattern definition）"></a>模式定义（Pattern definition）</h5><h6 id="单独模式"><a href="#单独模式" class="headerlink" title="单独模式"></a>单独模式</h6><ul>
<li>Begin</li>
<li>Filter</li>
<li>Subtype</li>
<li>OR</li>
<li>Continuity</li>
<li>Within</li>
</ul>
<h5 id="模式检测（Pattern-detection）"><a href="#模式检测（Pattern-detection）" class="headerlink" title="模式检测（Pattern detection）"></a>模式检测（Pattern detection）</h5><h5 id="告警生成（Alert-generation）"><a href="#告警生成（Alert-generation）" class="headerlink" title="告警生成（Alert generation）"></a>告警生成（Alert generation）</h5><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h3 id="G1GC"><a href="#G1GC" class="headerlink" title="G1GC"></a>G1GC</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/flink-conf.yaml</span><br><span class="line">  env.java.opts: -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:MaxGCPauseMillis=200 -XX:InitiatingHeapOccupancyPercent=45 -XX:ParallelGCThreads=8</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="ElasticSearch-Connector"><a href="#ElasticSearch-Connector" class="headerlink" title="ElasticSearch Connector"></a><a href="https://yuzhouwan.com/posts/22654/">ElasticSearch</a> Connector</h3><h4 id="Failed-to-collect-dependencies-at-org-apache-flink-flink-connector-elasticsearch5-2-11-jar-1-3-1"><a href="#Failed-to-collect-dependencies-at-org-apache-flink-flink-connector-elasticsearch5-2-11-jar-1-3-1" class="headerlink" title="Failed to collect dependencies at org.apache.flink:flink-connector-elasticsearch5_2.11:jar:1.3.1"></a>Failed to collect dependencies at org.apache.flink:flink-connector-elasticsearch5_2.11:jar:1.3.1</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git fetch --tags</span><br><span class="line">$ git checkout tags/release-1.3.1</span><br><span class="line"></span><br><span class="line">$ D:\apps\Java\jdk1.8.0_111\bin\java -Dmaven.multiModuleProjectDirectory=E:\Github\Flink\asdf2014\flink-connectors\flink-connector-elasticsearch5 -Dmaven.home=D:\apps\maven\apache-maven-3.3.9 -Dclassworlds.conf=D:\apps\maven\apache-maven-3.3.9\bin\m2.conf -Didea.launcher.port=7538 <span class="string">"-Didea.launcher.bin.path=D:\apps\JetBrains\IntelliJ IDEA 2016.2.5\bin"</span> -Dfile.encoding=UTF-8 -classpath <span class="string">"D:\apps\maven\apache-maven-3.3.9\boot\plexus-classworlds-2.5.2.jar;D:\apps\JetBrains\IntelliJ IDEA 2016.2.5\lib\idea_rt.jar"</span> com.intellij.rt.execution.application.AppMain org.codehaus.classworlds.Launcher -Didea.version=2016.2.5 -T 1C -DskipTests=<span class="literal">true</span> install -P scala-2.11,!scala-2.10,!include-yarn-tests</span><br><span class="line"></span><br><span class="line"><span class="comment"># -Dscala-2.11 指定 profile 失效，是因为 v1.3.1 里面的问题，已经将 scala version 写死了，需要修改 pom 文件，参考 1.4.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"># 此时，应该能在 $MAVEN_HOME/repository 中找到 flink-connector-elasticsearch5_2.11-1.3.1.jar 了，在 maven 中使用就不再报错了；如果没能成功，就需要 install:install-file 的方式进行导入了</span></span><br><span class="line">$ mvn install:install-file -Dfile=D:\apps\maven\repository\org\apache\flink\flink-connector-elasticsearch5_2.11\1.3.1\flink-connector-elasticsearch5_2.11-1.3.1.jar -DgroupId=org.apache.flink -DartifactId=flink-connector-elasticsearch5_2.11 -Dversion=1.3.1 -Dpackaging=jar -DgeneratePom=<span class="literal">true</span> -DpomFile=C:\yuzhouwan\Maven\pom.xml</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">同样的问题，在 Cassandra Connector 也存在，已提交 PR#4087 完成修复</div>



<h3 id="Either-无法被序列化"><a href="#Either-无法被序列化" class="headerlink" title="Either 无法被序列化"></a>Either 无法被序列化</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><h5 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">DataStream&lt;Either&lt;HBaseServerLog, HBaseServerLog&gt;&gt; eventsWarn = cepWarn(events);</span><br><span class="line"></span><br><span class="line">AlertEvent alertPoliceEvent = AlertEvent.getInstance();</span><br><span class="line">eventsWarn.map(log -&gt; {</span><br><span class="line">    alertPoliceEvent.alert(log);</span><br><span class="line">    <span class="keyword">return</span> log;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h5 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> org.apache.flink.api.common.functions.InvalidTypesException: The <span class="keyword">return</span> type of function <span class="string">'main(ServerLogProcess.java:46)'</span> could not be determined automatically, due to type erasure. <span class="function">You can give type information hints by using the <span class="title">returns</span><span class="params">(...)</span> method on the result of the transformation call, or by letting your function implement the 'ResultTypeQueryable' interface.</span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.transformations.StreamTransformation.<span class="title">getOutputType</span><span class="params">(StreamTransformation.java:<span class="number">374</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.graph.StreamGraphGenerator.<span class="title">transform</span><span class="params">(StreamGraphGenerator.java:<span class="number">159</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.graph.StreamGraphGenerator.<span class="title">generateInternal</span><span class="params">(StreamGraphGenerator.java:<span class="number">129</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.graph.StreamGraphGenerator.<span class="title">generate</span><span class="params">(StreamGraphGenerator.java:<span class="number">121</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.<span class="title">getStreamGraph</span><span class="params">(StreamExecutionEnvironment.java:<span class="number">1526</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.environment.LocalStreamEnvironment.<span class="title">execute</span><span class="params">(LocalStreamEnvironment.java:<span class="number">87</span>)</span></span></span><br><span class="line"><span class="function">  at com.yuzhouwan.hbase.monitor.server.log.process.ServerLogProcess.<span class="title">main</span><span class="params">(ServerLogProcess.java:<span class="number">58</span>)</span></span></span><br><span class="line"><span class="function">  at sun.reflect.NativeMethodAccessorImpl.<span class="title">invoke0</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function">  at sun.reflect.NativeMethodAccessorImpl.<span class="title">invoke</span><span class="params">(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span></span></span><br><span class="line"><span class="function">  at sun.reflect.DelegatingMethodAccessorImpl.<span class="title">invoke</span><span class="params">(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span></span></span><br><span class="line"><span class="function">  at java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Method.java:<span class="number">498</span>)</span></span></span><br><span class="line"><span class="function">  at com.intellij.rt.execution.application.AppMain.<span class="title">main</span><span class="params">(AppMain.java:<span class="number">147</span>)</span></span></span><br><span class="line"><span class="function">Caused by: org.apache.flink.api.common.functions.InvalidTypesException: The generic type parameters of 'Either' are missing. </span></span><br><span class="line"><span class="function">It seems that your compiler has not stored them into the .class file. </span></span><br><span class="line"><span class="function">Currently, only the Eclipse JDT compiler preserves the type information necessary to use the lambdas feature type-safely. </span></span><br><span class="line"><span class="function">See the documentation <span class="keyword">for</span> more information about how to compile jobs containing lambda expressions.</span></span><br><span class="line"><span class="function">  at org.apache.flink.api.java.typeutils.TypeExtractor.<span class="title">validateLambdaGenericParameter</span><span class="params">(TypeExtractor.java:<span class="number">1503</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.api.java.typeutils.TypeExtractor.<span class="title">validateLambdaGenericParameters</span><span class="params">(TypeExtractor.java:<span class="number">1489</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.api.java.typeutils.TypeExtractor.<span class="title">getUnaryOperatorReturnType</span><span class="params">(TypeExtractor.java:<span class="number">426</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.api.java.typeutils.TypeExtractor.<span class="title">getUnaryOperatorReturnType</span><span class="params">(TypeExtractor.java:<span class="number">379</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.api.java.typeutils.TypeExtractor.<span class="title">getMapReturnTypes</span><span class="params">(TypeExtractor.java:<span class="number">164</span>)</span></span></span><br><span class="line"><span class="function">  at org.apache.flink.streaming.api.datastream.DataStream.<span class="title">map</span><span class="params">(DataStream.java:<span class="number">527</span>)</span></span></span><br><span class="line"><span class="function">  at com.yuzhouwan.hbase.monitor.server.log.process.ServerLogProcess.<span class="title">main</span><span class="params">(ServerLogProcess.java:<span class="number">46</span>)</span></span></span><br><span class="line"><span class="function">  ... 5 more</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>　不使用 <code>map</code> 方法去处理告警，将告警逻辑放到 <code>PatternFlatTimeoutFunction</code> 和 <code>PatternFlatSelectFunction</code> 里面</p>
<h3 id="Cannot-retrieve-Left-value-on-a-Right"><a href="#Cannot-retrieve-Left-value-on-a-Right" class="headerlink" title="Cannot retrieve Left value on a Right"></a>Cannot retrieve Left value on a Right</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><h5 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">(ElasticsearchSinkFunction&lt;Either&lt;HBaseServerLog, HBaseServerLog&gt;&gt;) (element, ctx, indexer) -&gt; {</span><br><span class="line">            <span class="keyword">if</span> (IS_DEBUG &amp;&amp; IS_DEEP_DEBUG) _log.debug(<span class="string">"Message: {} in ES Sink"</span>, element);</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            HBaseServerLog left = element.left();</span><br><span class="line">            <span class="keyword">if</span> (left != <span class="keyword">null</span>)</span><br><span class="line">                indexer.add(indexRequest()</span><br><span class="line">                        .index(HBASE_SERVER_LOG_INDEX_NAME)</span><br><span class="line">                        .type(HBASE_SERVER_LOG_TYPE_NAME)</span><br><span class="line">                        .source(left.toJSON()));</span><br><span class="line">            HBaseServerLog right = element.right();</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="keyword">null</span>)</span><br><span class="line">                indexer.add(indexRequest()</span><br><span class="line">                        .index(HBASE_SERVER_LOG_INDEX_NAME)</span><br><span class="line">                        .type(HBASE_SERVER_LOG_TYPE_NAME)</span><br><span class="line">                        .source(right.toJSON()));</span><br><span class="line">        };</span><br></pre></td></tr></tbody></table></figure>
<h5 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: Cannot retrieve Left value on a Right</span><br><span class="line">  at org.apache.flink.types.Either$Right.left(Either.java:<span class="number">172</span>) ~[flink-core-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.store.StoreData2ES.lambda$createEsSinkFunction$8bb6efc1$<span class="number">1</span>(StoreData2ES.java:<span class="number">102</span>) ~[classes/:na]</span><br><span class="line">  at org.apache.flink.streaming.connectors.elasticsearch.ElasticsearchSinkBase.invoke(ElasticsearchSinkBase.java:<span class="number">282</span>) ~[flink-connector-elasticsearch-base_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.api.operators.StreamSink.processElement(StreamSink.java:<span class="number">41</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain$CopyingChainingOutput.pushToOperator(OperatorChain.java:<span class="number">528</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain$CopyingChainingOutput.collect(OperatorChain.java:<span class="number">503</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain$CopyingChainingOutput.collect(OperatorChain.java:<span class="number">483</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.api.operators.AbstractStreamOperator$CountingOutput.collect(AbstractStreamOperator.java:<span class="number">891</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.api.operators.AbstractStreamOperator$CountingOutput.collect(AbstractStreamOperator.java:<span class="number">869</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.api.operators.TimestampedCollector.collect(TimestampedCollector.java:<span class="number">51</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.cep.PatternStream$PatternFlatSelectTimeoutWrapper$RightCollector.collect(PatternStream.java:<span class="number">374</span>) ~[flink-cep_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.analyse.func.select.SelectFunctionWarn.lambda$flatSelect$<span class="number">0</span>(SelectFunctionWarn.java:<span class="number">39</span>) ~[classes/:na]</span><br><span class="line">  at java.util.ArrayList.forEach(ArrayList.java:<span class="number">1249</span>) ~[na:<span class="number">1.8</span><span class="number">.0_111</span>]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.analyse.func.select.SelectFunctionWarn.flatSelect(SelectFunctionWarn.java:<span class="number">37</span>) ~[classes/:na]</span><br><span class="line">  at org.apache.flink.cep.PatternStream$PatternFlatSelectTimeoutWrapper.flatMap(PatternStream.java:<span class="number">341</span>) ~[flink-cep_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.cep.PatternStream$PatternFlatSelectTimeoutWrapper.flatMap(PatternStream.java:<span class="number">320</span>) ~[flink-cep_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.api.operators.StreamFlatMap.processElement(StreamFlatMap.java:<span class="number">50</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.runtime.io.StreamInputProcessor.processInput(StreamInputProcessor.java:<span class="number">206</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OneInputStreamTask.run(OneInputStreamTask.java:<span class="number">69</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:<span class="number">262</span>) ~[flink-streaming-java_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at org.apache.flink.runtime.taskmanager.Task.run(Task.java:<span class="number">702</span>) ~[flink-runtime_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.1</span>.jar:<span class="number">1.3</span><span class="number">.1</span>]</span><br><span class="line">  at java.lang.Thread.run(Thread.java:<span class="number">745</span>) [na:<span class="number">1.8</span><span class="number">.0_111</span>]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 先使用 `isLeft | isRight` 方法，做一下判断，然后再做处理</span></span><br><span class="line">HBaseServerLog log = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (element.isLeft()) log = element.left();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (element.isRight()) log = element.right();</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ElasticsearchSinkFunction-is-not-serializable"><a href="#ElasticsearchSinkFunction-is-not-serializable" class="headerlink" title="ElasticsearchSinkFunction is not serializable"></a>ElasticsearchSinkFunction is not serializable</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: The implementation of the provided ElasticsearchSinkFunction is not serializable. The object probably contains or references non-serializable fields.</span><br><span class="line">  at org.apache.flink.util.Preconditions.checkArgument(Preconditions.java:<span class="number">139</span>) ~[flink-core-<span class="number">1.3</span><span class="number">.0</span>.jar:<span class="number">1.3</span><span class="number">.0</span>]</span><br><span class="line">  at org.apache.flink.streaming.connectors.elasticsearch.ElasticsearchSinkBase.&lt;init&gt;(ElasticsearchSinkBase.java:<span class="number">195</span>) ~[flink-connector-elasticsearch-base_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.0</span>.jar:<span class="number">1.3</span><span class="number">.0</span>]</span><br><span class="line">  at org.apache.flink.streaming.connectors.elasticsearch5.ElasticsearchSink.&lt;init&gt;(ElasticsearchSink.java:<span class="number">95</span>) ~[flink-connector-elasticsearch5_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.0</span>.jar:<span class="number">1.3</span><span class="number">.0</span>]</span><br><span class="line">  at org.apache.flink.streaming.connectors.elasticsearch5.ElasticsearchSink.&lt;init&gt;(ElasticsearchSink.java:<span class="number">78</span>) ~[flink-connector-elasticsearch5_2<span class="number">.11</span>-<span class="number">1.3</span><span class="number">.0</span>.jar:<span class="number">1.3</span><span class="number">.0</span>]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.store.StoreData2ES.initEsSink(StoreData2ES.java:<span class="number">89</span>) ~[classes/:na]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.store.StoreData2ES.init(StoreData2ES.java:<span class="number">85</span>) ~[classes/:na]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.store.StoreData2ES.&lt;init&gt;(StoreData2ES.java:<span class="number">50</span>) ~[classes/:na]</span><br><span class="line">  at com.yuzhouwan.hbase.monitor.server.log.process.ServerLogProcess.main(ServerLogProcess.java:<span class="number">52</span>) ~[classes/:na]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><p>　原因是，从外部传入两个关于 <a href="https://yuzhouwan.com/posts/22654/">ES</a> 的参数，导致 <code>ElasticSearchSinkFunction</code> 类无法被序列化。解决方法，就是实现 <code>ElasticsearchSinkFunction&lt;T&gt;</code> 接口，并标记 <code>Serializable</code>，再将外部参数，通过 <code>ElasticSearchSinkFunction</code> 子类的构造函数传入（这里还需要注意避免使用 <code>static</code> 属性）。类似的，还有 <code>PatternFlatSelectFunction&lt;IN, OUT&gt;</code> 和<code>IterativeCondition&lt;T&gt;</code>，对于外部传入的实例，如果因为序列化，也可能会出现 <code>NullPointerException</code> 异常。这时候，就算通过实现<code>Cloneable</code> 接口，对外部实例进行 <code>clone</code>，也会无法避免。因此，需要在 <code>PatternFlatSelectFunction&lt;IN, OUT&gt;</code> 或<code>IterativeCondition&lt;T&gt;</code> 内部，重新初始化实例，才能解决该问题</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchSinkFunctionWithConf</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ElasticsearchSinkFunction</span>&lt;<span class="title">T</span>&gt;, <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hbaseServerLogIndexName;</span><br><span class="line">    <span class="keyword">private</span> String hbaseServerLogTypeName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElasticsearchSinkFunctionWithConf</span><span class="params">(String hbaseServerLogIndexName, String hbaseServerLogTypeName)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.hbaseServerLogIndexName = hbaseServerLogIndexName;</span><br><span class="line">        <span class="keyword">this</span>.hbaseServerLogTypeName = hbaseServerLogTypeName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(T element, RuntimeContext ctx, RequestIndexer indexer)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> HBaseServerLog)) <span class="keyword">return</span>;</span><br><span class="line">        indexer.add(indexRequest()</span><br><span class="line">                .index(hbaseServerLogIndexName)</span><br><span class="line">                .type(hbaseServerLogTypeName)</span><br><span class="line">                .source(((HBaseServerLog) element).toJSON()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="The-implementation-of-the-IterativeCondition-is-not-serializable"><a href="#The-implementation-of-the-IterativeCondition-is-not-serializable" class="headerlink" title="The implementation of the IterativeCondition is not serializable"></a>The implementation of the IterativeCondition is not serializable</h3><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>　因为 <a href="https://yuzhouwan.com/posts/20644/">Flink</a> 和 <a href="https://yuzhouwan.com/posts/4735/">Spark</a> 一样，无法在集群范围内，共享一个全局变量（即便是 Spark 的 <a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#broadcast-variables">Accumulators</a> 也只能做到全局的累加器），所以对于中间结果，一般地需要用类似 <a href="https://yuzhouwan.com/posts/2129/">Redis</a> / Memcached / MongoDB（三者的比对，详见我的另一篇<a href="https://yuzhouwan.com/posts/2129/#技术内幕">博文</a>）的第三方存储来保存中间结果</p>
<p>　然而，JedisCluster 却无法做到序列化，因此报错 not serializable</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.apache.flink.api.common.InvalidProgramException: The implementation of the IterativeCondition is not serializable. The object probably contains or references non serializable fields.</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 因为，无法序列化 JedisCluster，所以不能作为 IterativeCondition 的变量保存下来</span></span><br><span class="line"><span class="comment">// 但是，又不可能在每次 event 处理的时候，都重新构建 Redis Cluster 的连接池</span></span><br><span class="line"><span class="comment">// 所以，考虑就算无法通过序列化分发到各个 task 中，但是也要做到每个 task 中，只初始化一次</span></span><br><span class="line"><span class="comment">// 因此，我们用 `Object redis` 作为一个变量，但是并不做任何赋值，作为存留第一次初始化 Reids 连接池的对象引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object redis;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">RedisMiddleStatusStore redis;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.redis == <span class="keyword">null</span>) {</span><br><span class="line">    redis = <span class="keyword">new</span> RedisMiddleStatusStore(DP);</span><br><span class="line">    <span class="keyword">this</span>.redis = redis;</span><br><span class="line">} <span class="keyword">else</span> redis = (RedisMiddleStatusStore) <span class="keyword">this</span>.redis;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="org-apache-flink-types-NullKeyFieldException-Unable-to-access-field-xxx-on-object-null"><a href="#org-apache-flink-types-NullKeyFieldException-Unable-to-access-field-xxx-on-object-null" class="headerlink" title="org.apache.flink.types.NullKeyFieldException: Unable to access field xxx on object null"></a>org.apache.flink.types.NullKeyFieldException: Unable to access field xxx on object null</h3><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: Could not extract key from null</span><br><span class="line">  at org.apache.flink.streaming.runtime.io.RecordWriterOutput.pushToRecordWriter(RecordWriterOutput.java:104)</span><br><span class="line">  at org.apache.flink.streaming.runtime.io.RecordWriterOutput.collect(RecordWriterOutput.java:83)</span><br><span class="line">  at org.apache.flink.streaming.runtime.io.RecordWriterOutput.collect(RecordWriterOutput.java:41)</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain<span class="variable">$BroadcastingOutputCollector</span>.collect(OperatorChain.java:575)</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain<span class="variable">$BroadcastingOutputCollector</span>.collect(OperatorChain.java:536)</span><br><span class="line">  at org.apache.flink.streaming.api.operators.AbstractStreamOperator<span class="variable">$CountingOutput</span>.collect(AbstractStreamOperator.java:891)</span><br><span class="line">  at org.apache.flink.streaming.api.operators.AbstractStreamOperator<span class="variable">$CountingOutput</span>.collect(AbstractStreamOperator.java:869)</span><br><span class="line">  at org.apache.flink.streaming.api.operators.StreamMap.processElement(StreamMap.java:41)</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain<span class="variable">$CopyingChainingOutput</span>.pushToOperator(OperatorChain.java:528)</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain<span class="variable">$CopyingChainingOutput</span>.collect(OperatorChain.java:503)</span><br><span class="line">  at org.apache.flink.streaming.runtime.tasks.OperatorChain<span class="variable">$CopyingChainingOutput</span>.collect(OperatorChain.java:483)</span><br><span class="line">  at org.apache.flink.streaming.api.operators.AbstractStreamOperator<span class="variable">$CountingOutput</span>.collect(AbstractStreamOperator.java:891)</span><br><span class="line">  at org.apache.flink.streaming.api.operators.AbstractStreamOperator<span class="variable">$CountingOutput</span>.collect(AbstractStreamOperator.java:869)</span><br><span class="line">  at org.apache.flink.streaming.api.operators.StreamSourceContexts<span class="variable">$NonTimestampContext</span>.collect(StreamSourceContexts.java:103)</span><br><span class="line">  at org.apache.flink.streaming.connectors.kafka.internals.AbstractFetcher.emitRecord(AbstractFetcher.java:228)</span><br><span class="line">  at org.apache.flink.streaming.connectors.kafka.internals.SimpleConsumerThread.run(SimpleConsumerThread.java:385)</span><br><span class="line">Caused by: java.lang.RuntimeException: Could not extract key from null</span><br><span class="line">  at org.apache.flink.streaming.runtime.partitioner.KeyGroupStreamPartitioner.selectChannels(KeyGroupStreamPartitioner.java:61)</span><br><span class="line">  at org.apache.flink.streaming.runtime.partitioner.KeyGroupStreamPartitioner.selectChannels(KeyGroupStreamPartitioner.java:32)</span><br><span class="line">  at org.apache.flink.runtime.io.network.api.writer.RecordWriter.emit(RecordWriter.java:88)</span><br><span class="line">  at org.apache.flink.streaming.runtime.io.StreamRecordWriter.emit(StreamRecordWriter.java:85)</span><br><span class="line">  at org.apache.flink.streaming.runtime.io.RecordWriterOutput.pushToRecordWriter(RecordWriterOutput.java:101)</span><br><span class="line">  ... 15 more</span><br><span class="line">Caused by: org.apache.flink.types.NullKeyFieldException: Unable to access field java.lang.Integer com.yuzhouwan.hbase.monitor.server.log.data.model.HBaseServerLog.flumeId on object null</span><br><span class="line">  at org.apache.flink.api.java.typeutils.runtime.PojoComparator.accessField(PojoComparator.java:181)</span><br><span class="line">  at org.apache.flink.api.java.typeutils.runtime.PojoComparator.extractKeys(PojoComparator.java:329)</span><br><span class="line">  at org.apache.flink.streaming.util.keys.KeySelectorUtil<span class="variable">$ComparableKeySelector</span>.getKey(KeySelectorUtil.java:185)</span><br><span class="line">  at org.apache.flink.streaming.util.keys.KeySelectorUtil<span class="variable">$ComparableKeySelector</span>.getKey(KeySelectorUtil.java:162)</span><br><span class="line">  at org.apache.flink.streaming.runtime.partitioner.KeyGroupStreamPartitioner.selectChannels(KeyGroupStreamPartitioner.java:59)</span><br><span class="line">  ... 19 more</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/process_function.html">解决</a></h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用默认的 Tuple，而是自己构建 KeySelector</span></span><br><span class="line"><span class="comment">// KeyedStream&lt;HBaseServerLog, Tuple&gt; keyed = events.keyBy("flumeId");</span></span><br><span class="line">KeyedStream&lt;HBaseServerLog, Integer&gt; keyed = events.keyBy((KeySelector&lt;HBaseServerLog, Integer&gt;) log -&gt; {</span><br><span class="line">    <span class="keyword">if</span> (log == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Integer flumeId;</span><br><span class="line">    <span class="keyword">if</span> ((flumeId = log.getFlumeId()) == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> flumeId;</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Task-xxx-did-not-react-to-cancelling-signal-in-the-last-30-seconds-but-is-stuck-in-method"><a href="#Task-xxx-did-not-react-to-cancelling-signal-in-the-last-30-seconds-but-is-stuck-in-method" class="headerlink" title="Task xxx did not react to cancelling signal in the last 30 seconds, but is stuck in method"></a>Task xxx did not react to cancelling signal in the last 30 seconds, but is stuck in method</h3><h4 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">A fatal error occurred, forcing the TaskManager to shut down: Task <span class="string">'KeyedCEPPatternOperator -&gt; Flat Map -&gt; Sink: MULTI_EVENT (2/8)'</span> did not react to cancelling signal <span class="keyword">in</span> the last 30 seconds, but is stuck <span class="keyword">in</span> method:</span><br><span class="line">   java.util.regex.Pattern<span class="variable">$GroupTail</span>.match(Pattern.java:4717)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match0(Pattern.java:4272)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match(Pattern.java:4234)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupHead</span>.match(Pattern.java:4658)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupHead</span>.match(Pattern.java:4658)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match0(Pattern.java:4279)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match(Pattern.java:4234)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupTail</span>.match(Pattern.java:4717)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupTail</span>.match(Pattern.java:4717)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match0(Pattern.java:4272)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match(Pattern.java:4234)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupHead</span>.match(Pattern.java:4658)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupHead</span>.match(Pattern.java:4658)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match0(Pattern.java:4279)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match(Pattern.java:4234)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupTail</span>.match(Pattern.java:4717)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupTail</span>.match(Pattern.java:4717)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match0(Pattern.java:4272)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match(Pattern.java:4234)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$BmpCharProperty</span>.match(Pattern.java:3798)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match0(Pattern.java:4272)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Curly</span>.match(Pattern.java:4234)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupHead</span>.match(Pattern.java:4658)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$GroupHead</span>.match(Pattern.java:4658)</span><br><span class="line">  java.util.regex.Pattern<span class="variable">$Start</span>.match(Pattern.java:3461)</span><br><span class="line">  java.util.regex.Matcher.search(Matcher.java:1248)</span><br><span class="line">  java.util.regex.Matcher.find(Matcher.java:637)</span><br><span class="line">  com.yuzhouwan.hbase.monitor.server.log.analyse.condition.IterativeConditionMultiWithDP.matchAndStore(IterativeConditionMultiWithDP.java:95)</span><br><span class="line">  com.yuzhouwan.hbase.monitor.server.log.analyse.condition.IterativeConditionMultiWithDP.filter(IterativeConditionMultiWithDP.java:79)</span><br><span class="line">  org.apache.flink.cep.nfa.NFA.checkFilterCondition(NFA.java:633)</span><br><span class="line">  org.apache.flink.cep.nfa.NFA.createDecisionGraph(NFA.java:610)</span><br><span class="line">  org.apache.flink.cep.nfa.NFA.computeNextStates(NFA.java:421)</span><br><span class="line">  org.apache.flink.cep.nfa.NFA.process(NFA.java:241)</span><br><span class="line">  org.apache.flink.cep.operator.KeyedCEPPatternOperator.processEvent(KeyedCEPPatternOperator.java:56)</span><br><span class="line">  org.apache.flink.cep.operator.AbstractKeyedCEPPatternOperator.processElement(AbstractKeyedCEPPatternOperator.java:170)</span><br><span class="line">  org.apache.flink.streaming.runtime.io.StreamInputProcessor.processInput(StreamInputProcessor.java:206)</span><br><span class="line">  org.apache.flink.streaming.runtime.tasks.OneInputStreamTask.run(OneInputStreamTask.java:69)</span><br><span class="line">  org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:263)</span><br><span class="line">  org.apache.flink.runtime.taskmanager.Task.run(Task.java:702)</span><br><span class="line">  java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h4><p>　分析日志，得知 Task 被阻塞在某一个方法里面了<br>　因为程序已经运行了一周，一直未出现这种情况，所以考虑到可能是某一条异常数据导致的<br>　因此，增加数据清理逻辑，避免过长的字符串；另外，根据当前的场景，使用 <code>Matcher.matches()</code> 替换了 <code>Matcher.find()</code> 方法，使得正则匹配的性能提高了无数倍（我们的场景下，压测结论是 5000 倍的性能提升）</p>
<h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><h5 id="Matcher-常用的三种查找方法"><a href="#Matcher-常用的三种查找方法" class="headerlink" title="Matcher 常用的三种查找方法"></a>Matcher 常用的三种查找方法</h5><ul>
<li><p><code>Matcher.matches()</code></p>
<p>对整个字符串进行匹配，只有整个字符串都匹配成功了，才返回 <code>true</code></p>
</li>
<li><p><code>Matcher.lookingAt()</code></p>
<p>从字符串的起始部分进行匹配，只有字符串的前缀满足模式，才返回 <code>true</code></p>
</li>
<li><p><code>Matcher.find()</code></p>
<p>对局部字符串进行匹配，匹配到的字符串可以在任何位置（因此，性能会有下降很多，除非特定场景，否则尽量避免使用）</p>
</li>
</ul>
<h2 id="社区跟进"><a href="#社区跟进" class="headerlink" title="社区跟进"></a>社区跟进</h2><h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/flink/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aasdf2014%20">Pull Request</a></h3><h3 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a><a href="https://issues.apache.org/jira/browse/FLINK-6868?jql=project%20%3D%20FLINK%20AND%20reporter%20in%20(%22benedict%20jin%22)">Issues</a></h3><p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="http://flink.apache.org/downloads.html#all-releases">Apache Flink Documentation</a></li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/libs/cep.html">FlinkCEP - Complex event processing for Flink</a></li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/connectors/kafka.html">Apache Kafka Connector</a></li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/connectors/elasticsearch.html">Elasticsearch Connector</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://enjoyment.cool/archives/Flink/">Apache Flink 说道系列</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>Apache Cassandra</tag>
        <tag>ElasticSearch</tag>
        <tag>Apache Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Real-time ML with Spark</title>
    <url>/posts/4735/</url>
    <content><![CDATA[<h2 id="什么是-Spark"><a href="#什么是-Spark" class="headerlink" title="什么是 Spark?"></a>什么是 Spark?</h2><p>　<strong>Apache Spark</strong>™ is a unified analytics engine for large-scale data processing.</p>
<h2 id="为什么要有-Spark"><a href="#为什么要有-Spark" class="headerlink" title="为什么要有 Spark?"></a>为什么要有 Spark?</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>　具备经济、快速、可靠、易扩充、数据共享、设备共享、通讯方便、灵活等分布式所具备的特性</p>
<h3 id="高层次抽象"><a href="#高层次抽象" class="headerlink" title="高层次抽象"></a>高层次抽象</h3><p>　<strong>RDD</strong>（<strong>R</strong>esilient <strong>D</strong>istributed <strong>D</strong>atasets）提供 一个可以被并行计算的 不变、分区的数据集 抽象</p>
<h3 id="快速计算能力"><a href="#快速计算能力" class="headerlink" title="快速计算能力"></a>快速计算能力</h3><p>　内存计算 基于内存的迭代计算框架，能够避免计算结果落地，磁盘 <code>I/O</code> 所带来的瓶颈<br>　Machine Learning、Data Mining 等都需要递归地计算，因此非常适合实现这些算法</p>
<h3 id="高效性能"><a href="#高效性能" class="headerlink" title="高效性能"></a>高效性能</h3><p>　<strong>DAG</strong>（<strong>D</strong>irected <strong>A</strong>cyclic <strong>G</strong>rap）利用有向无环图，构建优化任务中 父 RDD 和 子 RDD 的依赖关系</p>
<p><img data-src="/picture/spark/spark_dag_process.png" alt="Spark DAG"></p>
<p>　其中，依赖分为两种，一个为<strong>窄依赖</strong>（Narrow Dependencies），如 <code>map</code> / <code>filter</code> / <code>union</code> 等；另一种为<strong>宽依赖</strong>（Wide Dependencies），如 <code>groupByKey</code> 等</p>
<p>　在划分依赖时，<code>join</code> 需要额外考虑 <code>co-partitione</code>：</p>
<ul>
<li>如果 RDD 和 <code>cogroup</code> 有相同的 数据结构，将会确定一个 <code>OneToOneDependency</code></li>
<li><p>反之，则说明 <code>join</code> 的时候，需要 <code>shuffle</code>（<code>ShuffleDependency</code>）</p>
<p>因为，宽依赖只有等到所有 父 partiton 计算完，并传递结束，才能继续进行下一步运算，所以应该尽量减少宽依赖，避免失败后 recompute 的成本</p>
</li>
</ul>
<p><img data-src="/picture/spark/spark_narrow_dependencies_and_wide_dependencies.png" alt="Narrow Dependencies and Wide Dependencies"></p>
<center>（图片来源：<a href="https://spark.apache.org/" target="_blank">Spark</a>™ 官网）</center>


<h3 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h3><p>　Lineage 血统，能在计算失败的时候，将会找寻 最小重新计算损耗的 结点，避免全部重新计算</p>
<span id="more"></span>
<h2 id="Spark-核心组件"><a href="#Spark-核心组件" class="headerlink" title="Spark 核心组件"></a>Spark 核心组件</h2><h3 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h3><h4 id="物理层面"><a href="#物理层面" class="headerlink" title="物理层面"></a>物理层面</h4><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><p>　Master 负责分配资源</p>
<h5 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h5><p>　Worker 负责监控自己节点的内存和 CPU 等状况</p>
<h5 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h5><p>　在集群启动时，Driver 向 Master 申请资源</p>
<p>　运行时 Driver 能获得 Executor 的具体运行资源，Driver 与 Executor 之间直接进行通信，Driver 把 Job 划为 Task 传送给 Executor，Task 就是 Spark 程序的业务逻辑代码</p>
<h5 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h5><p>　Executor 接收任务，进行反序列化，得到数据的输入和输出，在分布式集群的相同数据分片上，数据的业务逻辑一样，只是数据不一样罢了。然后由 Executor 进程中的线程池负责执行，执行的结果汇报再返回汇报给 Driver 进程</p>
<h5 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h5><p>　Task 就是 Spark 程序的业务逻辑代码</p>
<h4 id="逻辑层面"><a href="#逻辑层面" class="headerlink" title="逻辑层面"></a>逻辑层面</h4><h5 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h5><p>　<strong>Row</strong> 表示关系运算中一行输出，本质上来说就是一个数组</p>
<h5 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h5><p>　<strong>DataSet</strong> 和 RDD、DataFrame 一样，都是分布式数据结构的概念。区别在于 DataSet 可以面向特定类型，也就是其无需将输入数据类型限制为 Row（还可以使用 Seq、Array、Product、Int 等类型）</p>
<h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><p>　<strong>DataFrame</strong> 相当于是 Dataset[Row] 的别名</p>
<h5 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h5><p>　<strong>Encoder</strong> 是 Dataset 中的关键组件，用来将外部类型转化为 Dataset 的内部类型 InternalRow</p>
<h3 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h3><p>　同时支持 <code>HiveQL</code> / <code>UDFs</code> / <code>SerDes</code> 等多样性的数据源，并采用 <code>JDBC</code> / <code>ODBC</code> 等标准化连接驱动，保证其通用性（整个流程的入口是 <code>org.apache.spark.sql.SparkSession#sql</code> 方法）</p>
<h3 id="Spark-GraphX"><a href="#Spark-GraphX" class="headerlink" title="Spark GraphX"></a>Spark GraphX</h3><p>　支持在 <code>graph</code> 或 <code>collection</code> 中查看数据，并提供丰富的 图形处理 API</p>
<h3 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h3><p>　将数据流 按 时间间隔 Duration 划分为一组连续的 RDD，再将这些 RDD 抽象为 DStream<br>　随后，通过对 DStream 这个 high-level 抽象的操作，实现对底层 标记了<code>时间间隙</code>的 RDD 组的操控</p>
<h3 id="Spark-MLbase"><a href="#Spark-MLbase" class="headerlink" title="Spark MLbase"></a>Spark MLbase</h3><p>　提供了对 Machine Learning 的易用、高效的实现<br>　总体的结构，基于 Spark，自底向上分别是，<code>MLlib</code> / <code>MLI</code> / <code>ML Optimizer</code></p>
<ul>
<li>MLlib 这一层，设计了 本地 / 分布式 的矩阵，对稀疏数据的支持，多模型的训练，提供了 计算模型 和 逻辑的 API</li>
<li>MLI 主要任务则是 提供 表针采集器 和 逻辑规则，并进一步对 高层次 ML 编程抽象成接口</li>
<li>ML Optimizer 则是通过自动构建 ML 的 pipe 管道路径实现 ML 优化器的作用。同时，该优化器还解决了一个在 <code>MLI</code> 和 <code>MLlib</code> 中 表征采集器 和 ML 逻辑规则的搜索问题</li>
</ul>
<h2 id="Spark-实时机器学习"><a href="#Spark-实时机器学习" class="headerlink" title="Spark 实时机器学习"></a>Spark 实时机器学习</h2><h3 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是<a href="https://en.wikipedia.org/wiki/Machine_learning">机器学习</a>？</h3><p>　Wikipedia 给出的定义是，一个计算机科学的子领域，由 模式识别 和 人工智能 中的计算机学习理论 演变而来<br>　探索 结构化的、可学习的规则引擎，如何用来对数据 进行训练 和 预测</p>
<h3 id="什么又是-Real-time-机器学习呢？"><a href="#什么又是-Real-time-机器学习呢？" class="headerlink" title="什么又是 Real-time 机器学习呢？"></a>什么又是 Real-time 机器学习呢？</h3><p>　一般性的 机器学习 的对象 是一堆 offline 的训练集，通过对这些数据的学习，来确立模型<br>　如果数据是快速变化的，这时就需要将 新数据 分配好权重，加入到目标训练集中；之后，将预测出来的结果，再次反馈到 数据模型中去</p>
<h3 id="Real-time-和-No-Real-time-的本质区别在哪儿？"><a href="#Real-time-和-No-Real-time-的本质区别在哪儿？" class="headerlink" title="Real-time 和 No Real-time 的本质区别在哪儿？"></a>Real-time 和 No Real-time 的本质区别在哪儿？</h3><p>　因为 实时模型 是动态更新的，实现算法上，比 非实时的 ML 需要考虑，如何避免依赖 将 新数据 和 旧数据 整合在一块再计算所带来的性能问题<br>　更多时候，长期积累的数据，是很难再做到全量计算（比如，多项式贝叶斯 Multinomial naive bayes，用于处理 dataset 过大，而内存不足的情况）</p>
<h2 id="利用-Spark-实现-Real-time-ML"><a href="#利用-Spark-实现-Real-time-ML" class="headerlink" title="利用 Spark 实现 Real-time ML"></a>利用 Spark 实现 Real-time ML</h2><h3 id="源数据流"><a href="#源数据流" class="headerlink" title="源数据流"></a>源数据流</h3><ul>
<li>利用 <code>java.util.Random</code> 产生满足高斯分布的随机数据，再通过 <a href="http://www.scalanlp.org/">breeze</a> 放入到 <code>vector</code> 中，作为<strong>特征值</strong></li>
<li>在 <code>generateNoisyData</code> 中，将这个 <code>vector</code> 做 <code>inner product</code>, 并加入一点噪声数据，作为 <strong>label 标签</strong></li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="type">MaxEvents</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">val</span> <span class="type">NumFeatures</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">val</span> random = <span class="keyword">new</span> <span class="type">Random</span>()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateRandomArray</span></span>(n: <span class="type">Int</span>) = <span class="type">Array</span>.tabulate(n)(_ =&gt; random.nextGaussian())</span><br><span class="line"><span class="keyword">val</span> w = <span class="keyword">new</span> <span class="type">DenseVector</span>(generateRandomArray(<span class="type">NumFeatures</span>))</span><br><span class="line"><span class="keyword">val</span> intercept = random.nextGaussian() * <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateNoisyData</span></span>(n: <span class="type">Int</span>) = {</span><br><span class="line">  (<span class="number">1</span> to n).map { i =&gt;</span><br><span class="line">    <span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">DenseVector</span>(generateRandomArray(<span class="type">NumFeatures</span>))</span><br><span class="line">    <span class="comment">// inner product</span></span><br><span class="line">    <span class="keyword">val</span> y: <span class="type">Double</span> = w.dot(x)</span><br><span class="line">    <span class="keyword">val</span> noisy = y + intercept</span><br><span class="line">    (noisy, x)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>通过 <code>socket</code> 将数据 发送到指定端口</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length != <span class="number">2</span>) {</span><br><span class="line">  <span class="type">System</span>.err.println(<span class="string">"Usage: &lt;port&gt; &lt;millisecond&gt;"</span>)</span><br><span class="line">  <span class="type">System</span>.exit(<span class="number">1</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> listener = <span class="keyword">new</span> <span class="type">ServerSocket</span>(args(<span class="number">0</span>).toInt)</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">  <span class="keyword">val</span> socket = listener.accept()</span><br><span class="line">  <span class="keyword">new</span> <span class="type">Thread</span>() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span> </span>= {</span><br><span class="line">      println(<span class="string">"Got client connected from: "</span> + socket.getInetAddress)</span><br><span class="line">      <span class="keyword">val</span> out = <span class="keyword">new</span> <span class="type">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        <span class="type">Thread</span>.sleep(args(<span class="number">1</span>).toLong)</span><br><span class="line">        <span class="keyword">val</span> num = random.nextInt(<span class="type">MaxEvents</span>)</span><br><span class="line">        <span class="keyword">val</span> data = generateNoisyData(num)</span><br><span class="line">        data.foreach { <span class="keyword">case</span> (y, x) =&gt;</span><br><span class="line">          <span class="keyword">val</span> xStr = x.data.mkString(<span class="string">","</span>)</span><br><span class="line">          <span class="keyword">val</span> content = <span class="string">s"<span class="subst">$y</span>\t<span class="subst">$xStr</span>"</span></span><br><span class="line">          println(content)</span><br><span class="line">          out.write(content)</span><br><span class="line">          out.write(<span class="string">"\n"</span>)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      socket.close()</span><br><span class="line">    }</span><br><span class="line">  }.start()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="实时-Machine-Learning-模型"><a href="#实时-Machine-Learning-模型" class="headerlink" title="实时 Machine Learning 模型"></a>实时 Machine Learning 模型</h3><ul>
<li>指定 <code>spark-master</code> / <code>interval</code> 等参数，创建 StreamingContext（此处可以利用 local[n] 快速开发）</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length &lt; <span class="number">4</span>) {</span><br><span class="line">  <span class="type">System</span>.err.println(<span class="string">"Usage: WindowCounter &lt;master&gt; &lt;hostname&gt; &lt;port&gt; &lt;interval&gt; \n"</span> +</span><br><span class="line">    <span class="string">"In local mode, &lt;master&gt; should be 'local[n]' with n &gt; 1"</span>)</span><br><span class="line">  <span class="type">System</span>.exit(<span class="number">1</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(args(<span class="number">0</span>), <span class="string">"ML Analysis"</span>, <span class="type">Seconds</span>(args(<span class="number">3</span>).toInt))</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>获取到发送过来的 源数据</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> stream = ssc.socketTextStream(args(<span class="number">1</span>), args(<span class="number">2</span>).toInt, <span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY_SER</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>利用 <code>DenseVector.zeros[Double]</code> 创建全零的初始矩阵</p>
</li>
<li><p>使用 <code>StreamingLinearRegressionWithSGD</code> 创建 流式随机递归下降的线性回归 模型</p>
<p>目前 MLlib 只支持 Streaming（<code>KMeans</code> / <code>LinearRegression</code> / <code>LinearRegressionWithSGD</code>）in <a href="https://github.com/apache/spark/">Spark 1.4.1</a><br>Streaming MLlib 和普通的 MLlib 没有本质上的区别，只是输入的训练集是 DStream，需要使用 <code>foreachRDD</code> / <code>map</code> 进行 <strong>训练</strong> / <strong>预测</strong></p>
</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="type">NumFeatures</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">val</span> zeroVector = <span class="type">DenseVector</span>.zeros[<span class="type">Double</span>](<span class="type">NumFeatures</span>)</span><br><span class="line"><span class="keyword">val</span> model = <span class="keyword">new</span> <span class="type">StreamingLinearRegressionWithSGD</span>()</span><br><span class="line">  .setInitialWeights(<span class="type">Vectors</span>.dense(zeroVector.data))</span><br><span class="line">  .setNumIterations(<span class="number">1</span>)</span><br><span class="line">  .setStepSize(<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">val</span> labeledStream = stream.map { event =&gt;</span><br><span class="line">  <span class="keyword">val</span> split = event.split(<span class="string">"\t"</span>)</span><br><span class="line">  <span class="keyword">val</span> y = split(<span class="number">0</span>).toDouble</span><br><span class="line">  <span class="keyword">val</span> features = split(<span class="number">1</span>).split(<span class="string">","</span>).map(_.toDouble)</span><br><span class="line">  <span class="type">LabeledPoint</span>(label = y, features = <span class="type">Vectors</span>.dense(features))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>利用 模型 进行 <code>train</code> / <code>predict</code></li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">model.trainOn(labeledStream)</span><br><span class="line"><span class="keyword">val</span> predictAndTrue = labeledStream.transform { rdd =&gt;</span><br><span class="line">  <span class="keyword">val</span> latest = model.latestModel()</span><br><span class="line">  rdd.map { point =&gt;</span><br><span class="line">    <span class="keyword">val</span> predict = latest.predict(point.features)</span><br><span class="line">    (predict - point.label)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>通过 <strong>MSE</strong>（<strong>M</strong>ean <strong>S</strong>quared <strong>E</strong>rror）均方差 和 <strong>RMSE</strong>（<strong>R</strong>oot <strong>M</strong>ean <strong>S</strong>quared <strong>E</strong>rror）均方根误差 对模型的性能进行评估（这里也可以使用 RegressionMetrics 来实现）</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">predictAndTrue.foreachRDD { (rdd, time) =&gt;</span><br><span class="line">  <span class="keyword">val</span> mse = rdd.map { <span class="keyword">case</span> (err) =&gt; err * err }.mean()</span><br><span class="line">  <span class="keyword">val</span> rmse = math.sqrt(mse)</span><br><span class="line">  println( <span class="string">s""</span><span class="string">"</span></span><br><span class="line"><span class="string">              |-------------------------------------------</span></span><br><span class="line"><span class="string">              |Time: $time</span></span><br><span class="line"><span class="string">              |-------------------------------------------</span></span><br><span class="line"><span class="string">                  "</span><span class="string">""</span>.stripMargin)</span><br><span class="line">  println(<span class="string">s"MSE current batch: Model : <span class="subst">$mse</span>"</span>)</span><br><span class="line">  println(<span class="string">s"RMSE current batch: Model : <span class="subst">$rmse</span>"</span>)</span><br><span class="line">  println(<span class="string">"...\n"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>启动 Spark 上下文</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">ssc.start()</span><br><span class="line">ssc.awaitTermination()</span><br></pre></td></tr></tbody></table></figure>
<h2 id="一劳永逸了？Not-at-all"><a href="#一劳永逸了？Not-at-all" class="headerlink" title="一劳永逸了？Not at all!"></a>一劳永逸了？Not at all!</h2><p>　一个优秀的 Machine Learning 模型，是要结合具体业务，从对数据流入的清洗，特征值维度的考量，模型类型的选择，到最终的性能的评估、监控、持续优化，都需要仔细地考究，最终才能打造出高效、稳定、精准的数据模型</p>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>　对目标数据集进行处理之前，首先就是对数据的类型进行归类，是数值型、类别型、文本型，还是其他一些多媒体、地理信息等<br>　针对不同的数据，分别采取不同的处理手段，对于类别型常用 <code>1-of-k encoding</code> 对每个类别进行编码<br>　对于文本型，则会采用 分词、移除 <code>stop words</code>（的、这、地；<code>the</code>/<code>and</code>/<code>but</code> …）、向量化、标准化（避免度量单位的影响）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">x = np.random.randn(<span class="number">10</span>)</span><br><span class="line">norm_x_2 = np.linalg.norm(x)</span><br><span class="line">normalized_x = x / norm_x_2</span><br><span class="line"><span class="built_in">print</span> <span class="string">"x:\n%s"</span> % x</span><br><span class="line"><span class="built_in">print</span> <span class="string">"2-Norm of x: %2.4f"</span> % norm_x_2</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Normalized x:\n%s"</span> % normalized_x</span><br><span class="line"><span class="built_in">print</span> <span class="string">"2-Norm of normalized_x: %2.4f"</span> % np.linalg.norm(normalized_x)</span><br></pre></td></tr></tbody></table></figure>
<p>　还有还多常用的数据处理方式，如 平均值、中位数、总和、方差、差值、最大值、最小值<br>　针对时间的处理，还可以加上 “时间戳” 字段</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assign_tod</span>(<span class="params">hr</span>):</span></span><br><span class="line">    times_of_day = {</span><br><span class="line">        <span class="string">'morning'</span> : <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">12</span>),</span><br><span class="line">        <span class="string">'lunch'</span> : <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="string">'afternoon'</span> : <span class="built_in">range</span>(<span class="number">14</span>, <span class="number">18</span>),</span><br><span class="line">        <span class="string">'evening'</span> : <span class="built_in">range</span>(<span class="number">18</span>, <span class="number">23</span>),</span><br><span class="line">        <span class="string">'night'</span> : <span class="built_in">range</span>(<span class="number">23</span>, <span class="number">7</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> times_of_day.iteritems():</span><br><span class="line">    <span class="keyword">if</span> hr <span class="keyword">in</span> v:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">time_of_day = hour_of_day.<span class="built_in">map</span>(<span class="keyword">lambda</span> hr: assign_tod(hr))</span><br></pre></td></tr></tbody></table></figure>
<h3 id="特征维度"><a href="#特征维度" class="headerlink" title="特征维度"></a>特征维度</h3><p>　常见的一个影响模型的因素，便是没有对特征 进行标准化</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">(element-wise - the preceding mean vector from the feature vector) / the vector of feature standard deviations</span><br></pre></td></tr></tbody></table></figure>
<p>　利用 StandarScaler 完成标准化工作</p>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.mllib.feature.<span class="type">StandardScaler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> scaler = <span class="keyword">new</span> <span class="type">StandardScaler</span>(withMean = <span class="literal">true</span>, withStd = <span class="literal">true</span>).fit(vectors)</span><br><span class="line"><span class="keyword">val</span> scaledData = data.map(lp =&gt; <span class="type">LabeledPoint</span>(lp.label, scaler.transform(lp.features)))</span><br></pre></td></tr></tbody></table></figure>
<h3 id="调整模型"><a href="#调整模型" class="headerlink" title="调整模型"></a>调整模型</h3><p>　首先需要在众多的模型 和 对应的算法 中找到最为适用的选择<br>　模型的类别主要有，<strong>推荐引擎</strong>、<strong>分类模型</strong>、<strong>回归模型</strong>、<strong>聚类模型</strong> 等<br>　相应的实现算法，又有（线性 / 逻辑 / 多元）<strong>回归</strong>、（随机森林）<strong>决策树</strong>、（朴素 / 高斯 / 多项式 / 伯努利 / 信念网络）<strong>贝叶斯</strong> 等<br>　在选择的时候，更多会考虑 特征值是否<strong>多维</strong>（可以尝试降维），目标类别是 <strong>multiclass</strong>，<strong>binary</strong>，还是 <strong>probability</strong>（连续值）</p>
<ul>
<li>根据 数据集的 稀疏程度 对正则化（Regularizer）进行调整</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">zero: 没有任何正规化操作</span><br><span class="line"><span class="type">L1</span>:   <span class="type">SGD</span>（<span class="type">Stochastic</span> gradient descent，随机梯度下降）</span><br><span class="line"><span class="type">L2</span>:   <span class="type">LBFGS</span>（<span class="type">Limited</span>-memory <span class="type">BFGS</span>，受限的 <span class="type">BFGS</span>）</span><br><span class="line"></span><br><span class="line"><span class="type">L2</span> 相比 <span class="type">L1</span> 更为平滑（同样，<span class="type">L1</span> 可以让 稀疏的数据集 得到更 直观的模型）</span><br><span class="line">还有其它 求最优解 的方法，如 求全局最优解的 <span class="type">BGD</span>（<span class="type">Batch</span> gradient descent，批量梯度下降）</span><br><span class="line">但是，由于每次迭代都需要依据训练集中所有的数据，所以速度很慢；</span><br><span class="line">以及 <span class="type">CG</span>（<span class="type">Conjugate</span> gradient，共轭梯度法），但还没有被 <span class="type">Spark</span> <span class="type">MLlib</span> 所支持，可以在 <span class="type">Breeze</span> 中找到它</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>可以通过 <code>setUpdater</code> 将模型的 规则化算法 设置为 <code>L1</code>（默认为 <code>L2</code>）</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.mllib.optimization.<span class="type">L1Updater</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> svmAlg = <span class="keyword">new</span> <span class="type">SVMWithSGD</span>()</span><br><span class="line">svmAlg.optimizer</span><br><span class="line">  .setNumIterations(<span class="number">200</span>)</span><br><span class="line">  .setRegParam(<span class="number">0.1</span>)</span><br><span class="line">  .setUpdater(<span class="keyword">new</span> <span class="type">L1Updater</span>)</span><br><span class="line"><span class="keyword">val</span> modelL1 = svmAlg.run(training)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>当然，还有举不胜举的优化方式，详见文章最后的 <a href="https://yuzhouwan.com/posts/4735/#整体知识树">Spark 思维导图</a> :-)</li>
</ul>
<h3 id="性能评估指标"><a href="#性能评估指标" class="headerlink" title="性能评估指标"></a>性能评估指标</h3><ul>
<li>针对不同的业务，对性能评测的手段，也需要相应取舍，毕竟有些 “宁可错杀一千” 的变态 防护系统，就需要对 <code>recall</code> 有较高的要求，而 <code>precision</code> 则相对宽松些<ul>
<li>这时便可采用 <strong>ROC</strong>（<strong>R</strong>eceiver <strong>O</strong>perating <strong>C</strong>haracteristic）curve 评测引擎：</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// binary classification</span></span><br><span class="line"><span class="keyword">val</span> metrics = <span class="type">Seq</span>(lrModel, svmModel).map { model =&gt;</span><br><span class="line">  <span class="keyword">val</span> scoreAndLabels = data.map { point =&gt;</span><br><span class="line">    (model.predict(point.features), point.label)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">val</span> metrics = <span class="keyword">new</span> <span class="type">BinaryClassificationMetrics</span>(scoreAndLabels)</span><br><span class="line">  (model.getClass.getSimpleName, metrics.areaUnderPR, metrics.areaUnderROC)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>如果是 <strong>贝叶斯</strong> / <strong>决策树</strong> 的数据模型，则可以用 <code>0.5</code> 对其进行划分，转换为 <code>binary</code> 分类问题</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// naive bayes</span></span><br><span class="line"><span class="keyword">val</span> nbMetrics = <span class="type">Seq</span>(nbModel).map { model =&gt;</span><br><span class="line">  <span class="keyword">val</span> scoreAndLabels = nbData.map { point =&gt;</span><br><span class="line">    <span class="keyword">val</span> score = model.predict(point.features)</span><br><span class="line">    (<span class="keyword">if</span> (score &gt; <span class="number">0.5</span>) <span class="number">1.0</span> <span class="keyword">else</span> <span class="number">0.0</span>, point.label)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">val</span> metrics = <span class="keyword">new</span> <span class="type">BinaryClassificationMetrics</span>(scoreAndLabels)</span><br><span class="line">  (model.getClass.getSimpleName, metrics.areaUnderPR, metrics.areaUnderROC)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// decision tree</span></span><br><span class="line"><span class="keyword">val</span> dtMetrics = <span class="type">Seq</span>(dtModel).map { model =&gt;</span><br><span class="line">  <span class="keyword">val</span> scoreAndLabels = data.map { point =&gt;</span><br><span class="line">    <span class="keyword">val</span> score = model.predict(point.features)</span><br><span class="line">    (<span class="keyword">if</span> (score &gt; <span class="number">0.5</span>) <span class="number">1.0</span> <span class="keyword">else</span> <span class="number">0.0</span>, point.label)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">val</span> metrics = <span class="keyword">new</span> <span class="type">BinaryClassificationMetrics</span>(scoreAndLabels)</span><br><span class="line">  (model.getClass.getSimpleName, metrics.areaUnderPR, metrics.areaUnderROC)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> allMetrics = metrics ++ nbMetrics ++ dtMetrics</span><br><span class="line">allMetrics.foreach { <span class="keyword">case</span> (m, pr, roc) =&gt;</span><br><span class="line">  println(<span class="string">f"<span class="subst">$m</span>, Area under PR: <span class="subst">${pr * 100.0}</span>%2.4f%%, Area under ROC: <span class="subst">${roc * 100.0}</span>%2.4f%%"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>然而，如果是一些推荐系统，更多的希望能够了解到 大体的预测精度，则可以采用 <strong>MAP</strong>（<strong>M</strong>ean <strong>A</strong>verage <strong>P</strong>recision）平均精度均值 进行评估</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">MAP 同时还解决了 precision，recall，F-measure 中存在的单点值局限性问题</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="spark-任务使用-UGI-之后，实际-task-在生成中间文件的时候，没有感知到外层设置的-UGI-信息"><a href="#spark-任务使用-UGI-之后，实际-task-在生成中间文件的时候，没有感知到外层设置的-UGI-信息" class="headerlink" title="spark 任务使用 UGI 之后，实际 task 在生成中间文件的时候，没有感知到外层设置的 UGI 信息"></a>spark 任务使用 UGI 之后，实际 task 在生成中间文件的时候，没有感知到外层设置的 UGI 信息</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hdfs dfs -ls /user | grep yuzhouwan</span><br><span class="line">  drwxrwxrwx   - yuzhouwan yuzhouwan          0 2018-04-24 14:27 /user/yuzhouwan</span><br><span class="line">$ hdfs dfs -ls /user/yuzhouwan</span><br><span class="line">  drwxrwxrwx   - user_A user_A                0 2018-04-24 14:27 /user/yuzhouwan/user_A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码中，需要将数据，写入到 /user/yuzhouwan/user_A 中，但是报错权限不足</span></span><br><span class="line">UGICache.doAs(<span class="string">"user_A"</span>, () =&gt; {</span><br><span class="line">  sparkContext.parallelize(Seq(1 to 10), 1).saveAsTextFile(<span class="string">"/user/yuzhouwan/user_A/seq"</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">org.apache.hadoop.security.AccessControlException: Permission denied: user=user_A, access=WRITE, inode=<span class="string">"/user/yuzhouwan/user_A/seq"</span>:yuzhouwan:user_A:drwxr-xr-x</span><br></pre></td></tr></tbody></table></figure>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HADOOP_HOME</span>/logs</span><br><span class="line">$ grep <span class="string">"/user/yuzhouwan/user_A/"</span> hdfs-audit.log | grep -v <span class="string">"getfileinfo"</span></span><br><span class="line">  2018-04-23 19:04:34,764 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit: allowed=<span class="literal">true</span>	ugi=user_A (auth:SIMPLE)	ip=/10.10.10.1	cmd=mkdirs	src=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0	dst=null	perm=user_A:yuzhouwan:rwxr-xr-x	proto=rpc</span><br><span class="line">  2018-04-23 19:04:35,353 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit: allowed=<span class="literal">true</span>	ugi=yuzhouwan (auth:SIMPLE)	ip=/10.10.10.1	cmd=create	src=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0/_temporary/attempt_20180423190434_0723_m_000000_737/part-00000.deflate	dst=null	perm=yuzhouwan:yuzhouwan:rw-r--r--	proto=rpc</span><br><span class="line">  2018-04-23 19:04:36,017 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit: allowed=<span class="literal">true</span>	ugi=yuzhouwan (auth:SIMPLE)	ip=/10.10.10.1	cmd=rename	src=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0/_temporary/attempt_20180423190434_0723_m_000000_737	dst=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0/task_20180423190434_0723_m_000000	perm=yuzhouwan:yuzhouwan:rwxr-xr-x	proto=rpc</span><br><span class="line">  2018-04-23 19:04:36,040 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit: allowed=<span class="literal">true</span>	ugi=user_A (auth:SIMPLE)	ip=/10.10.10.1	cmd=listStatus	src=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0	dst=null	perm=null	proto=rpc</span><br><span class="line">  2018-04-23 19:04:36,060 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit: allowed=<span class="literal">true</span>	ugi=user_A (auth:SIMPLE)	ip=/10.10.10.1	cmd=listStatus	src=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0/task_20180423190434_0723_m_000000	dst=null	perm=null	proto=rpc</span><br><span class="line">  2018-04-23 19:04:36,083 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit: allowed=<span class="literal">false</span>	ugi=user_A (auth:SIMPLE)	ip=/10.10.10.1	cmd=rename	src=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/_temporary/0/task_20180423190434_0723_m_000000/part-00000.deflate	dst=/user/yuzhouwan/user_A/2018-04-23/940_2018-04-23_user_A_68673976_0/part-00000.deflate	perm=null	proto=rpc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过查看 HDFS 的 audit 审计日志，可以看到创建 deflate 中间文件的时候，使用的 UGI 是 yuzhouwan，而不是 user_A，导致到最后一步，使用 user_A 用户 rename 的时候，报错权限不足</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>　首先，需要保证用户 user_A 不需要写入的数据，只能由它自己才能查看。一方面，如果权限控制不在 spark 任务中，而是交给上层应用来控制，则完全可以使用 yuzhouwan 用户权限写入到 HDFS 中；另一方面，也可以先使用 yuzhouwan 用户权限写入，然后再通过 chown 赋权到 user_A 用户下</p>
<h3 id="saveAsTextFile-不传入压缩类型，也对输出文件进行了压缩"><a href="#saveAsTextFile-不传入压缩类型，也对输出文件进行了压缩" class="headerlink" title="saveAsTextFile 不传入压缩类型，也对输出文件进行了压缩"></a>saveAsTextFile 不传入压缩类型，也对输出文件进行了压缩</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ spark-shell --master <span class="built_in">local</span></span><br><span class="line">  scala&gt; sc.parallelize(Seq(1 to 10), 1).collect.foreach(<span class="built_in">print</span>(_))</span><br><span class="line">    Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class="line"></span><br><span class="line">  scala&gt; sc.parallelize(Seq(1 to 10), 1).saveAsTextFile(<span class="string">"/user/yuzhouwan"</span>)</span><br><span class="line">    18/04/24 11:22:01 WARN DefaultCodec: DefaultCodec.createOutputStream() may leak memory. Create a compressor first.</span><br><span class="line"></span><br><span class="line">$ hdfs dfs -ls /user/yuzhouwan</span><br><span class="line">  Found 2 items</span><br><span class="line">  -rw-r--r--   3 bigdata yuzhouwan          0 2018-04-24 11:22 /user/yuzhouwan/_SUCCESS</span><br><span class="line">  -rw-r--r--   3 bigdata yuzhouwan         45 2018-04-24 11:22 /user/yuzhouwan/part-00000.deflate</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 发现依赖的 Hadoop 配置文件中，已经开启了压缩</span></span><br><span class="line">$ vim <span class="variable">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapred.compress.map.output&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要设置 spark.hadoop.mapreduce.output.fileoutputformat.compress=false</span></span><br><span class="line"><span class="comment"># 或者 spark.hadoop.mapred.output.compress=false</span></span><br><span class="line"><span class="comment"># 前者，是负责往 hadoop 和 hive 里面写的时候，会设置压缩；后者，是负责往 json / txt / csv 里面写的时候，设置压缩</span></span><br><span class="line"><span class="comment"># 一个是面向 目标系统类型，另一个是面向 目标文件类型</span></span><br><span class="line">$ spark-shell --master <span class="built_in">local</span> --conf spark.hadoop.mapreduce.output.fileoutputformat.compress=<span class="literal">false</span></span><br><span class="line">  scala&gt; sc.parallelize(Seq(1 to 10), 1).saveAsTextFile(<span class="string">"/user/yuzhouwan0"</span>)</span><br><span class="line"></span><br><span class="line">$ hdfs dfs -ls /user/yuzhouwan0</span><br><span class="line">  Found 2 items</span><br><span class="line">  -rw-r--r--   3 bigdata yuzhouwan          0 2018-04-24 11:41 /user/yuzhouwan0/_SUCCESS</span><br><span class="line">  -rw-r--r--   3 bigdata yuzhouwan         37 2018-04-24 11:41 /user/yuzhouwan0/part-00000</span><br><span class="line"></span><br><span class="line">$ hdfs dfs -cat /user/yuzhouwan0/part-00000</span><br><span class="line">  Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// saveAsTextFile 方法的第二个参数可以指定压缩类型，可以覆盖全局配置中，已经存在的压缩配置</span></span><br><span class="line"><span class="comment">// 需要注意的是，压缩算法只支持 CompressionCodec 接口的实现子类，包括 DefaultCodec、BZip2Codec、GzipCodec、HadoopSnappyCodec、Lz4Codec、SnappyCodec etc.</span></span><br><span class="line">sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span> to <span class="number">10</span>), <span class="number">1</span>).coalesce(<span class="number">1</span>, shuffle = <span class="literal">true</span>).saveAsTextFile(<span class="string">"/user/yuzhouwan1"</span>, classOf[org.apache.hadoop.io.compress.<span class="type">GzipCodec</span>])</span><br></pre></td></tr></tbody></table></figure>
<h3 id="无法判断-spark-session-中临时函数是否存在"><a href="#无法判断-spark-session-中临时函数是否存在" class="headerlink" title="无法判断 spark session 中临时函数是否存在"></a>无法判断 spark session 中临时函数是否存在</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 session state 中判断临时函数 FunctionIdentifier 是否存在，但是仍然不行</span></span><br><span class="line"><span class="keyword">if</span> (!sparkSession.sessionState.catalog.functionExists(yuzhouwanIdentifier)) {</span><br><span class="line">  sparkSession.sql(<span class="string">"CREATE TEMPORARY FUNCTION yuzhouwan as 'org.apache.spark.sql.hive.udf.YuZhouWan'"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!sparkSession.catalog.functionExists(<span class="string">"yuzhouwan"</span>)) {</span><br><span class="line">  sparkSession.sql(<span class="string">"CREATE TEMPORARY FUNCTION yuzhouwan as 'org.apache.spark.sql.hive.udf.YuZhouWan'"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h4><p>　目前，Spark SQL 中 <code>IF NOT EXISTS</code> 的语法只支持创建 DATABASE、TABLE（包括 临时表 和 外部表）、VIEW（不包括 临时视图）、SCHEMA 的时候使用，尚<a href="https://issues.apache.org/jira/browse/SPARK-24077">不支持</a>临时函数</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ spark-shell --master <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">scala&gt; org.apache.spark.sql.SparkSession.builder().enableHiveSupport.getOrCreate.sql(<span class="string">"CREATE TEMPORARY FUNCTION IF NOT EXISTS yuzhouwan as 'org.apache.spark.sql.hive.udf.YuZhouWan'"</span>)</span><br><span class="line"></span><br><span class="line">  org.apache.spark.sql.catalyst.parser.ParseException: mismatched input <span class="string">'NOT'</span> expecting {<span class="string">'.'</span>, <span class="string">'AS'</span>}(line 1, pos 29)</span><br><span class="line"></span><br><span class="line">  == SQL ==</span><br><span class="line">  CREATE TEMPORARY FUNCTION IF NOT EXISTS yuzhouwan as <span class="string">'org.apache.spark.sql.hive.udf.YuZhouWan'</span></span><br><span class="line">  -----------------------------^^^</span><br><span class="line">    at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)</span><br><span class="line">    at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)</span><br><span class="line">    at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)</span><br><span class="line">    at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)</span><br><span class="line">    at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)</span><br><span class="line">    ... 48 elided</span><br></pre></td></tr></tbody></table></figure>
<h3 id="控制-spark-结果文件数量，并返回唯一的文件路径"><a href="#控制-spark-结果文件数量，并返回唯一的文件路径" class="headerlink" title="控制 spark 结果文件数量，并返回唯一的文件路径"></a>控制 spark 结果文件数量，并返回唯一的文件路径</h3><h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.<span class="type">URI</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.<span class="type">Configuration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.{<span class="type">FileSystem</span>, <span class="type">Path</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数据写入到某一个文件下，会产生两个文件 _SUCCESS 和 part-00000-126ddb4d-22a8-4c3d-88cb-52a59da4c66a.json</span></span><br><span class="line"><span class="keyword">val</span> exportDir = <span class="string">"/user/yuzhouwan/export"</span></span><br><span class="line">sparkSession.sql(subTaskSql).limit(<span class="number">1000</span>).coalesce(<span class="number">1</span>).write.json(exportDir)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除掉 _SUCCESS 文件，拿到 json 文件的全路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSingleExportFile</span></span>(exportDir: <span class="type">String</span>): <span class="type">String</span> = {</span><br><span class="line">  <span class="keyword">val</span> sourceFS = <span class="type">FileSystem</span>.get(<span class="keyword">new</span> <span class="type">URI</span>(exportDir), <span class="keyword">new</span> <span class="type">Configuration</span>())</span><br><span class="line">  <span class="keyword">if</span> (sourceFS == <span class="literal">null</span> || !sourceFS.exists(<span class="keyword">new</span> <span class="type">Path</span>(exportDir))) <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">  <span class="keyword">val</span> filesStatus = sourceFS.listStatus(<span class="keyword">new</span> <span class="type">Path</span>(exportDir))</span><br><span class="line">  <span class="keyword">if</span> (filesStatus == <span class="literal">null</span> || filesStatus.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">  <span class="keyword">for</span> (fileStatus &lt;- filesStatus) {</span><br><span class="line">    <span class="keyword">if</span> (fileStatus.isFile) {</span><br><span class="line">      <span class="keyword">val</span> path = fileStatus.getPath.getName</span><br><span class="line">      <span class="keyword">if</span> (!path.contains(<span class="string">"SUCCESS"</span>)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (exportDir.endsWith(<span class="string">"/"</span>)) exportDir.concat(path) <span class="keyword">else</span> exportDir.concat(<span class="string">"/"</span>).concat(path)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="string">""</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> singleFilePath = getSingleExportFile(exportDir)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="KafkaUtils-createDirectStream-报错-OffsetOutOfRangeException"><a href="#KafkaUtils-createDirectStream-报错-OffsetOutOfRangeException" class="headerlink" title="KafkaUtils.createDirectStream 报错 OffsetOutOfRangeException"></a>KafkaUtils.createDirectStream 报错 OffsetOutOfRangeException</h3><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line">&lt;scala.short.version&gt;<span class="number">2.11</span>&lt;/scala.short.version&gt;</span><br><span class="line">&lt;scala.version&gt;${scala.short.version}<span class="number">.8</span>&lt;/scala.version&gt;</span><br><span class="line">&lt;spark.version&gt;<span class="number">2.1</span><span class="number">.0</span><span class="number">.5</span>&lt;/spark.version&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spark-core_${scala.short.version}&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;${spark.version}&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> kafkaParams = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>](<span class="string">"metadata.broker.list"</span> -&gt; brokers)</span><br><span class="line"><span class="keyword">val</span> messageHandler = (mam: <span class="type">MessageAndMetadata</span>[<span class="type">Array</span>[<span class="type">Byte</span>], <span class="type">Array</span>[<span class="type">Byte</span>]]) =&gt; (mam.key, mam.message)</span><br><span class="line"><span class="type">KafkaUtils</span>.createDirectStream[<span class="type">Array</span>[<span class="type">Byte</span>], <span class="type">Array</span>[<span class="type">Byte</span>], <span class="type">DefaultDecoder</span>, <span class="type">DefaultDecoder</span>, (<span class="type">Array</span>[<span class="type">Byte</span>], <span class="type">Array</span>[<span class="type">Byte</span>])](ssc, kafkaParams, fromOffsets, messageHandler)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Caused by: kafka.common.OffsetOutOfRangeException</span><br><span class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)</span><br><span class="line">    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</span><br><span class="line">    at java.lang.Class.newInstance(Class.java:374)</span><br><span class="line">    at kafka.common.ErrorMapping$.exceptionFor(ErrorMapping.scala:86)</span><br><span class="line">    at org.apache.spark.streaming.kafka.KafkaRDD<span class="variable">$KafkaRDDIterator</span>.handleFetchErr(KafkaRDD.scala:184)</span><br><span class="line">    at org.apache.spark.streaming.kafka.KafkaRDD<span class="variable">$KafkaRDDIterator</span>.fetchBatch(KafkaRDD.scala:193)</span><br><span class="line">    at org.apache.spark.streaming.kafka.KafkaRDD<span class="variable">$KafkaRDDIterator</span>.getNext(KafkaRDD.scala:208)</span><br><span class="line">    at org.apache.spark.util.NextIterator.hasNext(NextIterator.scala:73)</span><br><span class="line">    at org.apache.spark.storage.memory.MemoryStore.putIteratorAsValues(MemoryStore.scala:215)</span><br><span class="line">    at org.apache.spark.storage.BlockManager$$anonfun$doPutIterator<span class="variable">$1</span>.apply(BlockManager.scala:957)</span><br><span class="line">    at org.apache.spark.storage.BlockManager$$anonfun$doPutIterator<span class="variable">$1</span>.apply(BlockManager.scala:948)</span><br><span class="line">    at org.apache.spark.storage.BlockManager.doPut(BlockManager.scala:888)</span><br><span class="line">    at org.apache.spark.storage.BlockManager.doPutIterator(BlockManager.scala:948)</span><br><span class="line">    at org.apache.spark.storage.BlockManager.getOrElseUpdate(BlockManager.scala:694)</span><br><span class="line">    at org.apache.spark.rdd.RDD.getOrCompute(RDD.scala:334)</span><br><span class="line">    at org.apache.spark.rdd.RDD.iterator(RDD.scala:285)</span><br><span class="line">    at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)</span><br><span class="line">    at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)</span><br><span class="line">    at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)</span><br><span class="line">    at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>　该问题是因为 Kafka 的 topic 中，数据因为长时间未消费，超出了 <code>log.retention.[hours|minutes|ms]</code> 时间（默认 <a href="https://kafka.apache.org/documentation/#brokerconfigs">168</a> 小时，也就是一周）。此时，broker 会将这部分数据清除掉，并更新 offset 信息（offset 变小了）。但是，程序中仍然用的是之前的 offset 信息，所以就会报错超出了现有 offset 的范围</p>
<h4 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 使用不指定 offset 的 createDirectStream 重载方法，并重启 spark streaming 程序</span></span><br><span class="line"><span class="type">KafkaUtils</span>.createDirectStream[<span class="type">Array</span>[<span class="type">Byte</span>], <span class="type">Array</span>[<span class="type">Byte</span>], <span class="type">DefaultDecoder</span>, <span class="type">DefaultDecoder</span>](ssc, kafkaParams, topicSet)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="整体知识树"><a href="#整体知识树" class="headerlink" title="整体知识树"></a>整体知识树</h2><p><strong>至此，相信你已经对 Spark 这个生态圈有了大致了解了，下面就是一步一步地 在 实践 和 深入学习中，体验大数据的乐趣啦 O(∩_∩)O~~</strong></p>
<p><img data-src="/picture/spark/spark_ecosystem.png" alt="Spark EcoSystem"></p>
<center>（利用 <a href="https://www.xmind.net/" target="_blank">XMind</a>™ 绘制而成）</center>



<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://github.com/summerDG/spark-code-analysis">Spark 源码分析</a></li>
<li><a href="https://blog.csdn.net/oopsoom/article/details/38257749">Spark SQL 源码分析系列文章</a></li>
<li><a href="https://databricks.com/blog/2015/04/13/deep-dive-into-spark-sqls-catalyst-optimizer.html">Deep Dive into Spark SQL’s Catalyst Optimizer</a></li>
<li><a href="http://hbasefly.com/2017/04/10/bigdata-join-2/">SparkSQL – 从 0 到 1 认识 Catalyst</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://www.amazon.com/PySpark-Recipes-Problem-Solution-Approach-PySpark2/dp/1484231406">PySpark Recipes</a></li>
<li><a href="https://www.amazon.com/Advanced-Analytics-Spark-Patterns-Learning/dp/1491972955">Advanced Analytics with Spark</a></li>
<li><a href="https://www.amazon.com/High-Performance-Spark-Practices-Optimizing/dp/1491943203">High Performance Spark</a></li>
<li><a href="https://www.amazon.com/Fast-Data-Processing-Spark-Third/dp/1785889273">Fast Data Processing with Spark 2, 3rd Edition</a></li>
<li><a href="https://www.amazon.com/Apache-Spark-Beginners-Rajanarayanan-Thottuvaikkatumana/dp/1785885006">Apache Spark 2 for Beginners</a></li>
<li><a href="https://www.amazon.com/Spark-Data-Science-Srinivas-Duvvuri/dp/1785885650">Spark for Data Science</a></li>
<li><a href="https://www.amazon.com/Spark-GraphX-Action-Michael-Malak/dp/1617292524">Spark GraphX in Action</a></li>
<li><a href="https://www.amazon.com/Pro-Spark-Streaming-Real-Time-Analytics/dp/1484214803">Pro Spark Streaming</a></li>
<li><a href="https://www.amazon.com/Machine-Learning-Spark-Rajdeep-Dua/dp/1785889931">Machine Learning with Spark, 2nd Edition</a></li>
<li><a href="https://www.amazon.com/Apache-Spark-2-x-Cookbook-Cloud-ready/dp/1787127265">Apache Spark 2.x Cookbook</a></li>
<li><a href="https://www.amazon.com/Learning-Spark-Lightning-Fast-Data-Analysis/dp/1449358624">Learning Spark</a></li>
<li><a href="https://www.amazon.com/Big-Data-Analytics-Spark-Practitioners/dp/1484209656">Big Data Analytics with Spark</a></li>
<li><a href="https://www.amazon.com/Spark-Python-Developers-Amit-Nandi/dp/1784399698">Spark for Python Developers</a></li>
<li><a href="https://www.amazon.com/Mastering-Apache-Spark-2-x-DeepLearning4j/dp/1786462745">Mastering Apache Spark 2.x, 2nd Edition</a></li>
<li><a href="https://www.amazon.com/Apache-Spark-Processing-Rindra-Ramamonjison/dp/1784391808">Apache Spark Graph Processing</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/zhuyiche/awesome-anomaly-detection">Awesome Anomaly Detection</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Scala</tag>
        <tag>机器学习</tag>
        <tag>Apache Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 实战</title>
    <url>/posts/2129/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加用户，并赋予其密码</span></span><br><span class="line">$ adduser redis</span><br><span class="line">$ passwd redis            <span class="comment"># ur password for redis user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予用户可以 sudo 的权限</span></span><br><span class="line">$ chmod u+w /etc/sudoers</span><br><span class="line">$ vim /etc/sudoers</span><br><span class="line">  <span class="comment"># 找到 `root ALL=(ALL) ALL` 这行，并在下面添加 redis 用户</span></span><br><span class="line">  redis    ALL=(ALL)    ALL</span><br><span class="line">$ chmod u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 redis 用户</span></span><br><span class="line">$ su - redis</span><br></pre></td></tr></tbody></table></figure>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放软件目录 &amp; 安装目录 &amp; 日志目录 &amp; 持久化数据存放目录</span></span><br><span class="line">$ mkdir install &amp;&amp; mkdir software &amp;&amp; mkdir logs &amp;&amp; mkdir data</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="分布式集群"><a href="#分布式集群" class="headerlink" title="分布式集群"></a>分布式集群</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install</span><br><span class="line">$ wget http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解压分发"><a href="#解压分发" class="headerlink" title="解压分发"></a>解压分发</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tar zxvf redis-3.2.9.tar.gz -C ~/software</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/</span><br><span class="line">$ scp -r redis-3.2.9/ redis@yuzhouwan02:/home/redis/software/</span><br><span class="line">$ scp -r redis-3.2.9/ redis@yuzhouwan03:/home/redis/software/</span><br><span class="line">$ ln -s redis-3.2.9/ redis</span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/redis</span><br><span class="line">$ make -j8</span><br><span class="line">  <span class="comment"># 输出如下信息，表示 make 成功</span></span><br><span class="line">  Hint: It<span class="string">'s a good idea to run '</span>make <span class="built_in">test</span><span class="string">' ;)</span></span><br><span class="line"><span class="string">  make[1]: Leaving directory `/home/redis/software/redis-3.2.9/src'</span></span><br><span class="line"></span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line">  REDIS_HOME=~/software/redis</span><br><span class="line">  PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$REDIS_HOME</span>/src</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mv redis.conf redis.conf.bak</span><br><span class="line">$ vim redis.conf</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">  port 6379</span><br><span class="line">  <span class="comment"># 启动 Redis 服务时，存储进程 pid 的位置</span></span><br><span class="line">  pidfile /home/redis/software/redis/redis.pid</span><br><span class="line">  logfile <span class="string">"/home/redis/logs/redis.log"</span></span><br><span class="line">  <span class="comment"># 持久化文件存储目录</span></span><br><span class="line">  dir /home/redis/data</span><br><span class="line">  <span class="comment"># 开启集群模式</span></span><br><span class="line">  cluster-enabled yes</span><br><span class="line">  <span class="comment"># 集群模式下的节点配置信息</span></span><br><span class="line">  cluster-config-file nodes.conf</span><br><span class="line">  <span class="comment"># 集群中各节点间连接超时时间</span></span><br><span class="line">  cluster-node-timeout 5000</span><br><span class="line">  <span class="comment"># 允许数据持久化追加</span></span><br><span class="line">  appendonly yes</span><br><span class="line"></span><br><span class="line">$ scp -r ~/software/redis/redis.conf redis@yuzhouwan02:/home/redis/software/redis/</span><br><span class="line">$ scp -r ~/software/redis/redis.conf redis@yuzhouwan03:/home/redis/software/redis/</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ nohup redis-server redis.conf 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">$ ps -ef | grep redis</span><br><span class="line">  redis    12781  9204  0 10:15 pts/0    00:00:00 redis-server 127.0.0.1:6379 [cluster]</span><br><span class="line"></span><br><span class="line">$ redis-cli -c -p 6379</span><br><span class="line">  127.0.0.1:6379&gt; cluster info</span><br><span class="line">  cluster_state:fail</span><br><span class="line">  cluster_slots_assigned:0</span><br><span class="line">  cluster_slots_ok:0</span><br><span class="line">  cluster_slots_pfail:0</span><br><span class="line">  cluster_slots_fail:0</span><br><span class="line">  cluster_known_nodes:1</span><br><span class="line">  cluster_size:0</span><br><span class="line">  cluster_current_epoch:0</span><br><span class="line">  cluster_my_epoch:0</span><br><span class="line">  cluster_stats_messages_sent:0</span><br><span class="line">  cluster_stats_messages_received:0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 redis 集群至少需要 6 个节点，所以如果只想部署在 3 台机器上的话，可以考虑在每一台上，启动两个 redis 进程，对应端口、日志路径、存储目录，则需要依次更改</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/software &amp;&amp; mkdir redis2 &amp;&amp; cp redis/redis.conf redis2/</span><br><span class="line">$ mkdir /home/redis/data2</span><br><span class="line">$ vim redis2/redis.conf</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">  port 6380</span><br><span class="line">  <span class="comment"># 启动 Redis 服务时，存储进程 pid 的位置</span></span><br><span class="line">  pidfile /home/redis/software/redis2/redis.pid</span><br><span class="line">  logfile <span class="string">"/home/redis/logs/redis2.log"</span></span><br><span class="line">  <span class="comment"># 持久化文件存储目录</span></span><br><span class="line">  dir /home/redis/data2</span><br><span class="line">  <span class="comment"># 开启集群模式</span></span><br><span class="line">  cluster-enabled yes</span><br><span class="line">  <span class="comment"># 集群模式下的节点配置信息</span></span><br><span class="line">  cluster-config-file nodes2.conf</span><br><span class="line">  <span class="comment"># 集群中各节点间连接超时时间</span></span><br><span class="line">  cluster-node-timeout 5000</span><br><span class="line">  <span class="comment"># 允许数据持久化追加</span></span><br><span class="line">  appendonly yes</span><br><span class="line"></span><br><span class="line">$ scp -r ~/software/redis2/redis.conf redis@yuzhouwan02:/home/redis/software/redis2/</span><br><span class="line">$ scp -r ~/software/redis2/redis.conf redis@yuzhouwan03:/home/redis/software/redis2/</span><br><span class="line"></span><br><span class="line">$ nohup redis-server redis2/redis.conf 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 如果启动不了，但是没有任何日志，需检查 redis2/redis.conf 是否和 redis/redis.conf 有路径、端口的冲突</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><h5 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Debian / Ubuntu</span></span><br><span class="line">$ apt-get install ruby</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS / Fedora / RHEL</span></span><br><span class="line">$ sudo yum install ruby</span><br><span class="line"></span><br><span class="line"><span class="comment"># Offline</span></span><br><span class="line"><span class="comment"># 下载 https://www.ruby-lang.org/en/downloads/</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/install</span><br><span class="line">$ wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.1.tar.gz</span><br><span class="line">$ tar zxvf ruby-2.4.1.tar.gz -C ~/software</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/ruby-2.4.1 &amp;&amp; mkdir ../ruby</span><br><span class="line">$ ./configure prefix=/home/redis/software/ruby</span><br><span class="line">$ make -j8 &amp;&amp; make -j8 install</span><br><span class="line"></span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line">  REDIS_HOME=~/software/redis</span><br><span class="line">  RUBY_HOME=~/software/ruby</span><br><span class="line">  PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$REDIS_HOME</span>/src:<span class="variable">$RUBY_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">$ ruby -v</span><br><span class="line">  ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="安装-Redis-插件"><a href="#安装-Redis-插件" class="headerlink" title="安装 Redis 插件"></a>安装 Redis 插件</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Online</span></span><br><span class="line">$ gem update --system</span><br><span class="line">$ gem install redis</span><br><span class="line"><span class="comment"># 如果下载速度过慢，可考虑使用国内的 ruby 源</span></span><br><span class="line">$ gem sources remove http://rubygems.org/</span><br><span class="line">$ gem sources -a https://ruby.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Offline</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/install</span><br><span class="line">$ wget https://rubygems.org/downloads/redis-3.2.2.gem</span><br></pre></td></tr></tbody></table></figure>
<h5 id="redis-trib-创建分布式集群"><a href="#redis-trib-创建分布式集群" class="headerlink" title="redis-trib 创建分布式集群"></a>redis-trib 创建分布式集群</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ redis-trib.rb create --replicas 1 192.168.1.101:6379 192.168.1.102:6379 192.168.1.103:6379 192.168.1.101:6380 192.168.1.102:6380 192.168.1.103:6380</span><br><span class="line">  &gt;&gt;&gt; Creating cluster</span><br><span class="line">  &gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">  Using 3 masters:</span><br><span class="line">  192.168.1.101:6379</span><br><span class="line">  192.168.1.102:6379</span><br><span class="line">  192.168.1.103:6379</span><br><span class="line">  Adding replica 192.168.1.102:6380 to 192.168.1.101:6379</span><br><span class="line">  Adding replica 192.168.1.101:6380 to 192.168.1.102:6379</span><br><span class="line">  Adding replica 192.168.1.103:6380 to 192.168.1.103:6379</span><br><span class="line">  M: 4c0fb081525a5f1893479225576b75f03cca065d 192.168.1.101:6379</span><br><span class="line">     slots:0-5460 (5461 slots) master</span><br><span class="line">  M: 4f9fc4536f6e4e30666264738d632b1bb54799f0 192.168.1.102:6379</span><br><span class="line">     slots:5461-10922 (5462 slots) master</span><br><span class="line">  M: 4dde95537b69d2b23f2f9a4cd2a357a1e4af756e 192.168.1.103:6379</span><br><span class="line">     slots:10923-16383 (5461 slots) master</span><br><span class="line">  S: 6ffea478b1e5d1187b85adc5b0bd11b6601dd556 192.168.1.101:6380</span><br><span class="line">     replicates 4f9fc4536f6e4e30666264738d632b1bb54799f0</span><br><span class="line">  S: 1213855d2c0d1b35020895af45dcd734da50ef2c 192.168.1.102:6380</span><br><span class="line">     replicates 4c0fb081525a5f1893479225576b75f03cca065d</span><br><span class="line">  S: 94478f8642d5a0cef1a989a620f132221e35fc8a 192.168.1.103:6380</span><br><span class="line">     replicates 4dde95537b69d2b23f2f9a4cd2a357a1e4af756e</span><br><span class="line">  Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">'yes'</span> to accept): yes</span><br><span class="line">  &gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">  &gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">  &gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">  Waiting <span class="keyword">for</span> the cluster to join...</span><br><span class="line">  &gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.101:6379)</span><br><span class="line">  M: 4c0fb081525a5f1893479225576b75f03cca065d 192.168.1.101:6379</span><br><span class="line">     slots:0-5460 (5461 slots) master</span><br><span class="line">     1 additional replica(s)</span><br><span class="line">  S: 6ffea478b1e5d1187b85adc5b0bd11b6601dd556 192.168.1.101:6380</span><br><span class="line">     slots: (0 slots) slave</span><br><span class="line">     replicates 4f9fc4536f6e4e30666264738d632b1bb54799f0</span><br><span class="line">  M: 4dde95537b69d2b23f2f9a4cd2a357a1e4af756e 192.168.1.103:6379</span><br><span class="line">     slots:10923-16383 (5461 slots) master</span><br><span class="line">     1 additional replica(s)</span><br><span class="line">  S: 1213855d2c0d1b35020895af45dcd734da50ef2c 192.168.1.102:6380</span><br><span class="line">     slots: (0 slots) slave</span><br><span class="line">     replicates 4c0fb081525a5f1893479225576b75f03cca065d</span><br><span class="line">  S: 94478f8642d5a0cef1a989a620f132221e35fc8a 192.168.1.103:6380</span><br><span class="line">     slots: (0 slots) slave</span><br><span class="line">     replicates 4dde95537b69d2b23f2f9a4cd2a357a1e4af756e</span><br><span class="line">  M: 4f9fc4536f6e4e30666264738d632b1bb54799f0 192.168.1.102:6379</span><br><span class="line">     slots:5461-10922 (5462 slots) master</span><br><span class="line">     1 additional replica(s)</span><br><span class="line">  [OK] All nodes agree about slots configuration.</span><br><span class="line">  &gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">  &gt;&gt;&gt; Check slots coverage...</span><br><span class="line">  [OK] All 16384 slots covered.</span><br></pre></td></tr></tbody></table></figure>
<h5 id="redis-cli-集群状态检查"><a href="#redis-cli-集群状态检查" class="headerlink" title="redis-cli 集群状态检查"></a>redis-cli 集群状态检查</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 至此，大功告成~</span></span><br><span class="line">$ redis-cli -c -p 6379</span><br><span class="line">  127.0.0.1:6379&gt; cluster info</span><br><span class="line">  cluster_state:ok</span><br><span class="line">  cluster_slots_assigned:16384</span><br><span class="line">  cluster_slots_ok:16384</span><br><span class="line">  cluster_slots_pfail:0</span><br><span class="line">  cluster_slots_fail:0</span><br><span class="line">  cluster_known_nodes:6</span><br><span class="line">  cluster_size:3</span><br><span class="line">  cluster_current_epoch:6</span><br><span class="line">  cluster_my_epoch:1</span><br><span class="line">  cluster_stats_messages_sent:376</span><br><span class="line">  cluster_stats_messages_received:376</span><br></pre></td></tr></tbody></table></figure>
<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pkill redis</span><br></pre></td></tr></tbody></table></figure>
<h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="cannot-load-such-file-—-zlib"><a href="#cannot-load-such-file-—-zlib" class="headerlink" title="cannot load such file — zlib"></a>cannot load such file — zlib</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gem install -l redis-3.2.2.gem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现如下报错，则应该先安装 zlib-devel</span></span><br><span class="line">  ERROR:  Loading <span class="built_in">command</span>: install (LoadError)</span><br><span class="line">      cannot load such file -- zlib</span><br><span class="line">  ERROR:  While executing gem ... (NoMethodError)</span><br><span class="line">      undefined method `invoke_with_build_args<span class="string">' for nil:NilClass</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum install zlib-devel</span><br><span class="line"><span class="comment"># 离线环境下，推荐先在有网环境中，使用 --downloadonly 的方式，把依赖包直接下载下来（也可在 https://www.rpmfind.net 里面找，但比较低效）</span></span><br><span class="line">$ yum reinstall --downloadonly --downloaddir=/opt/software/zlib zlib-devel zlib libc.so.6 glibc-common glibc libfreebl3.so zlib-1.2.3-27.el6 -y</span><br><span class="line">$ ll /opt/software/zlib</span><br><span class="line">  -rw-r--r-- 1 root root  4558520 Feb 18  2016 glibc-2.12-1.166.el6_7.7.i686.rpm</span><br><span class="line">  -rw-r--r-- 1 root root 14887196 Feb 18  2016 glibc-common-2.12-1.166.el6_7.7.x86_64.rpm</span><br><span class="line">  -rw-r--r-- 1 root root   118976 Nov  9  2011 nss-softokn-freebl-3.12.9-11.el6.i686.rpm</span><br><span class="line">  -rw-r--r-- 1 root root    73604 Sep 26  2011 zlib-1.2.3-27.el6.i686.rpm</span><br><span class="line">  -rw-r--r-- 1 root root    73864 Sep 26  2011 zlib-1.2.3-27.el6.x86_64.rpm</span><br><span class="line">  -rw-r--r-- 1 root root    44728 Sep 26  2011 zlib-devel-1.2.3-27.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能存在 "循环依赖" 和 "依赖冲突"</span></span><br><span class="line"><span class="comment"># 前者，可以通过 force 强制安装好，其中一个</span></span><br><span class="line">$ rpm -ivh glibc-2.12-1.166.el6_7.7.i686 --nodeps --force</span><br><span class="line"><span class="comment"># 后者，可以通过 nodeps 不删除被依赖包，进行卸载</span></span><br><span class="line"><span class="comment"># 【注意】/lib64/libz* 需要提前备份好，否则卸载掉 zlib 之后，会因为缺少 libz.so.1，导致 yum/rpm/ssh 等命令均失效！</span></span><br><span class="line">$ rpm -e --nodeps zlib-1.2.3-29.el6.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成之后，将 Ruby 重新编译安装一遍，即可</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="ERR-Slot-0-is-already-busy"><a href="#ERR-Slot-0-is-already-busy" class="headerlink" title="ERR Slot 0 is already busy"></a>ERR Slot 0 is already busy</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行 redis-trib.rb 遇到</span></span><br><span class="line">ERR Slot 0 is already busy (Redis::CommandError)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 cluster reset soft 命令解决</span></span><br><span class="line">$ redis-cli -h 127.0.0.1 -p 6379 cluster reset soft &amp;&amp; redis-cli -h 127.0.0.1 -p 6380 cluster reset soft</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<h4 id="ERR-Invalid-node-address-specified"><a href="#ERR-Invalid-node-address-specified" class="headerlink" title="ERR Invalid node address specified"></a>ERR Invalid node address specified</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行创建 Redis 集群</span></span><br><span class="line">$ redis-trib.rb create --replicas 1 yuzhouwan01:6379 yuzhouwan02:6379 yuzhouwan03:6379 yuzhouwan01:6380 yuzhouwan02:6380 yuzhouwan03:6380</span><br><span class="line"><span class="comment"># 报错 ERR Invalid node address specified</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 目前为止，只支持 IP，不支持 Hostname，因此将主机名替换为 IP 即可（PR#2323 中准备解决该问题）</span></span><br><span class="line">$ redis-trib.rb create --replicas 1 192.168.1.101:6379 192.168.1.102:6379 192.168.1.103:6379 192.168.1.101:6380 192.168.1.102:6380 192.168.1.103:6380</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Jedis-客户端"><a href="#Jedis-客户端" class="headerlink" title="Jedis 客户端"></a><a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-redis/src/main/java/com/yuzhouwan/bigdata/redis/conn/RedisClusterConnPool.java">Jedis 客户端</a></h2><h3 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(DynamicPropUtils DP)</span> </span>{</span><br><span class="line">    Object clusterListObj = DP.get(PROJECT_NAME, <span class="string">"redis.cluster.list"</span>);</span><br><span class="line">    String clusterList;</span><br><span class="line">    <span class="keyword">if</span> (clusterListObj == <span class="keyword">null</span> || StrUtils.isEmpty(clusterList = clusterListObj.toString())) {</span><br><span class="line">        String error = String.format(<span class="string">"Cannot get [%s-redis.cluster.list] from Dynamic PropUtils!"</span>, PROJECT_NAME);</span><br><span class="line">        _log.error(error);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(error);</span><br><span class="line">    }</span><br><span class="line">    String[] hostAndPort;</span><br><span class="line">    Set&lt;HostAndPort&gt; jedisClusterNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String clusters : clusterList.split(<span class="string">","</span>)) {</span><br><span class="line">        hostAndPort = clusters.split(<span class="string">":"</span>);</span><br><span class="line">        jedisClusterNodes.add(<span class="keyword">new</span> HostAndPort(hostAndPort[<span class="number">0</span>], Integer.valueOf(hostAndPort[<span class="number">1</span>])));</span><br><span class="line">    }</span><br><span class="line">    JedisPoolConfig conf = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    conf.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">    conf.setMinIdle(<span class="number">50</span>);</span><br><span class="line">    conf.setMaxIdle(<span class="number">100</span>);</span><br><span class="line">    conf.setMaxWaitMillis(<span class="number">6</span> * <span class="number">1000</span>);</span><br><span class="line">    conf.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">    pool = <span class="keyword">new</span> JedisCluster(jedisClusterNodes, conf);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">putSet</span><span class="params">(String key, String... values)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> pool.sadd(key, values);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSet</span><span class="params">(String key)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> pool.smembers(key);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a>资源释放</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> throw IOException </span>{</span><br><span class="line">  <span class="keyword">if</span> (pool != <span class="keyword">null</span>) pool.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="过期事件回调"><a href="#过期事件回调" class="headerlink" title="过期事件回调"></a><a href="https://redis.io/topics/notifications">过期事件</a>回调</h3><h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a><a href="https://raw.githubusercontent.com/antirez/redis/2.8/redis.conf">配置</a>集群</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 redis-cli 进行动态配置</span></span><br><span class="line">$ redis-cli -h localhost -p 6380</span><br><span class="line">  CONFIG SET notify-keyspace-events AKE     <span class="comment"># AKE: 意味着通知所有事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 redis.conf，并重启集群使其生效</span></span><br><span class="line">$ vim redis.conf</span><br><span class="line">  notify-keyspace-events AKE</span><br></pre></td></tr></tbody></table></figure>
<h4 id="服务端验证"><a href="#服务端验证" class="headerlink" title="服务端验证"></a>服务端验证</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">  127.0.0.1:6379&gt; <span class="built_in">set</span> yuzhouwan01 blog</span><br><span class="line">    OK</span><br><span class="line">  127.0.0.1:6379&gt; expire yuzhouwan01 3</span><br><span class="line">    (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; ttl yuzhouwan01</span><br><span class="line">    (<span class="built_in">integer</span>) 0</span><br><span class="line">  127.0.0.1:6379&gt; ttl yuzhouwan01</span><br><span class="line">    (<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br><span class="line">$ redis-cli -h localhost -p 6379 --csv psubscribe <span class="string">'*'</span></span><br><span class="line">  <span class="string">"pmessage"</span>,<span class="string">"*"</span>,<span class="string">"__keyspace@0__:yuzhouwan01"</span>,<span class="string">"set"</span></span><br><span class="line">  <span class="string">"pmessage"</span>,<span class="string">"*"</span>,<span class="string">"__keyevent@0__:set"</span>,<span class="string">"yuzhouwan01"</span></span><br><span class="line">  <span class="string">"pmessage"</span>,<span class="string">"*"</span>,<span class="string">"__keyspace@0__:yuzhouwan01"</span>,<span class="string">"expire"</span></span><br><span class="line">  <span class="string">"pmessage"</span>,<span class="string">"*"</span>,<span class="string">"__keyevent@0__:expire"</span>,<span class="string">"yuzhouwan01"</span></span><br><span class="line">  <span class="string">"pmessage"</span>,<span class="string">"*"</span>,<span class="string">"__keyspace@0__:yuzhouwan01"</span>,<span class="string">"expired"</span></span><br><span class="line">  <span class="string">"pmessage"</span>,<span class="string">"*"</span>,<span class="string">"__keyevent@0__:expired"</span>,<span class="string">"yuzhouwan01"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="连接集群-1"><a href="#连接集群-1" class="headerlink" title="连接集群"></a><a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-redis/src/main/java/com/yuzhouwan/bigdata/redis/conn/RedisClusterConnPool.java">连接</a>集群</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getClusterList</span><span class="params">(DynamicPropUtils DP)</span> </span>{</span><br><span class="line">    Object clusterListObj = DP.get(PROJECT_NAME, <span class="string">"redis.cluster.list"</span>);</span><br><span class="line">    String clusterList;</span><br><span class="line">    <span class="keyword">if</span> (clusterListObj == <span class="keyword">null</span> || StrUtils.isEmpty(clusterList = clusterListObj.toString())) {</span><br><span class="line">        String error = String.format(<span class="string">"Cannot get [%s-redis.cluster.list] from Dynamic PropUtils!"</span>, PROJECT_NAME);</span><br><span class="line">        _log.error(error);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(error);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> clusterList;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> JedisPoolConfig <span class="title">buildConf</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// org.apache.commons.pool2.impl.BaseObjectPoolConfig</span></span><br><span class="line">    JedisPoolConfig conf = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    conf.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">    conf.setMinIdle(<span class="number">50</span>);</span><br><span class="line">    conf.setMaxIdle(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// conf.setMaxWaitMillis(6 * 1000);</span></span><br><span class="line">    conf.setTestOnCreate(<span class="keyword">true</span>);</span><br><span class="line">    conf.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">    conf.setTestOnReturn(<span class="keyword">true</span>);</span><br><span class="line">    conf.setTestWhileIdle(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// conf.setTimeBetweenEvictionRunsMillis(1);</span></span><br><span class="line">    conf.setNumTestsPerEvictionRun(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> conf;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 这里不要使用 JedisCluster，因为 cluster 模式下，jedis 只会连接一个节点，会导致监听不到其他节点上的事件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPools</span><span class="params">(DynamicPropUtils DP)</span> </span>{</span><br><span class="line">    String clusterList = getClusterList(DP);</span><br><span class="line">    pools = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    String[] hostAndPort;</span><br><span class="line">    <span class="keyword">for</span> (String clusters : clusterList.split(<span class="string">","</span>)) {</span><br><span class="line">        hostAndPort = clusters.split(<span class="string">":"</span>);</span><br><span class="line">        pools.add(<span class="keyword">new</span> JedisPool(buildConf(), hostAndPort[<span class="number">0</span>], Integer.valueOf(hostAndPort[<span class="number">1</span>])));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="回调监听器"><a href="#回调监听器" class="headerlink" title="回调监听器"></a>回调<a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-redis/src/main/java/com/yuzhouwan/bigdata/redis/notification/RedisNotification.java">监听器</a></h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (RedisClusterConnPool pool = <span class="keyword">new</span> RedisClusterConnPool(dp, <span class="keyword">true</span>)) {</span><br><span class="line">    List&lt;JedisPool&gt; jedis = pool.getPools();</span><br><span class="line">    JedisPubSub jedisPubSub = <span class="keyword">new</span> JedisPubSub() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPSubscribe</span><span class="params">(String pattern, <span class="keyword">int</span> subscribedChannels)</span> </span>{</span><br><span class="line">            _log.info(<span class="string">"onPSubscribe {} {}"</span>, pattern, subscribedChannels);</span><br><span class="line">        }</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPMessage</span><span class="params">(String pattern, String channel, String message)</span> </span>{</span><br><span class="line">            _log.info(<span class="string">"onPMessage: {}, Channel: {}, Message: {}"</span>, pattern, channel, message);</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span> (JedisPool j : jedis)</span><br><span class="line">        j.getResource().psubscribe(jedisPubSub, <span class="string">"__keyevent@*__:expired"</span> <span class="comment">/*"__key*__:*"*/</span> <span class="comment">/*"*"*/</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-redis/src/test/java/com/yuzhouwan/bigdata/redis/notification/RedisNotificationTest.java#L22">测试</a></h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pool.put(<span class="string">"yuzhouwan01"</span>, <span class="string">"blog01"</span>);</span><br><span class="line">pool.expire(<span class="string">"yuzhouwan01"</span>, <span class="number">2</span>);</span><br><span class="line">Thread.sleep(<span class="number">2100</span>);</span><br><span class="line">assertEquals(<span class="keyword">null</span>, pool.get(<span class="string">"yuzhouwan01"</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">2017</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">56.045</span> | INFO | onPMessage Pattern: *, Channel: __keyevent@0__:set, Message: yuzhouwan01 | com.yuzhouwan.bigdata.redis.notification.RedisNotification.onPMessage | RedisNotification.java:<span class="number">61</span> </span><br><span class="line"><span class="number">2017</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">56.045</span> | INFO | onPMessage Pattern: *, Channel: __keyevent@0__:expire, Message: yuzhouwan01 | com.yuzhouwan.bigdata.redis.notification.RedisNotification.onPMessage | RedisNotification.java:<span class="number">61</span> </span><br><span class="line"><span class="number">2017</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">57.064</span> | INFO | onPMessage Pattern: *, Channel: __keyevent@0__:expired, Message: yuzhouwan01 | com.yuzhouwan.bigdata.redis.notification.RedisNotification.onPMessage | RedisNotification.java:<span class="number">61</span> </span><br></pre></td></tr></tbody></table></figure>
<h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="匹配删除"><a href="#匹配删除" class="headerlink" title="匹配删除"></a>匹配删除</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ redis-cli flushdb</span><br><span class="line">$ redis-cli --raw -n 1 keys <span class="string">"yuzhouwan*"</span> | xargs -L1 -I{} redis-cli move {} 0</span><br><span class="line">$ redis-cli</span><br><span class="line">  127.0.0.1:6379&gt; keys yuzhouwan*</span><br><span class="line">  (empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以安装使用 redis-utils-cli（https://www.npmjs.com/package/redis-utils-cli）</span></span><br><span class="line">$ redis-utils del 127.0.0.1 yuzhouwan*</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数据容灾"><a href="#数据容灾" class="headerlink" title="数据容灾"></a>数据容灾</h3><p>　主从热备 + 二级缓存 + 从库 AOF（主从切换）</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://segmentfault.com/a/1190000002906345">Redis 持久化</a></li>
<li><a href="http://www.cnblogs.com/chenmh/p/5578376.html">Redis 哨兵模式实现主从故障互切换</a></li>
<li>《Redis in Action》 第 4 章</li>
</ul>
<h3 id="全局流控"><a href="#全局流控" class="headerlink" title="全局流控"></a>全局流控</h3><h4 id="流控方案"><a href="#流控方案" class="headerlink" title="流控方案"></a>流控方案</h4><h5 id="Leaky-bucket-漏桶算法"><a href="#Leaky-bucket-漏桶算法" class="headerlink" title="Leaky bucket 漏桶算法"></a>Leaky bucket 漏桶算法</h5><p>　桶内水溢出时，可以把消息放到队列中等待</p>
<h5 id="Token-bucket-令牌桶算法"><a href="#Token-bucket-令牌桶算法" class="headerlink" title="Token bucket 令牌桶算法"></a>Token bucket 令牌桶算法</h5><p>　桶内令牌不足时，可以把消息放到队列中等待</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="Guava-RateLimiter"><a href="#Guava-RateLimiter" class="headerlink" title="Guava RateLimiter"></a>Guava RateLimiter</h5><p>　Guava 无法做到全局流控</p>
<h5 id="Redis-Expire-机制"><a href="#Redis-Expire-机制" class="headerlink" title="Redis Expire 机制"></a>Redis Expire 机制</h5><p>　如果设置的超时时间过长，可能对内存有一定的损耗</p>
<h5 id="Hystrix-限流"><a href="#Hystrix-限流" class="headerlink" title="Hystrix 限流"></a>Hystrix 限流</h5><p>　支持 自动降级、熔断与恢复、依赖隔离、异常记录、流量控制、实时监控，不过会存在一定的 代码侵入 和 性能损耗 的问题（1%~5%）</p>
<p><img data-src="/picture/redis/redis_hystrix_hystrix_dashboard.png" alt="Hystrix"></p>
<center>（图片来源：<a href="https://github.com/Netflix/Hystrix/wiki" target="_blank">Hystrix</a>™ 官网）</center>

<h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><ul>
<li>单机版<ul>
<li><a href="https://www.cnblogs.com/moonandstar08/p/5440555.html">高并发场景下的流控管理</a></li>
<li><a href="http://ifeve.com/guava-ratelimiter/">Guava 官方文档 - RateLimiter 类</a></li>
</ul>
</li>
<li>分布式<ul>
<li><a href="https://www.zybuluo.com/kay2/note/949160">基于 Redis 的限流系统的设计</a></li>
<li><a href="https://redis.io/commands/INCR#pattern-rate-limiter">Redis Doc: Pattern: Rate limiter</a></li>
<li><a href="https://github.com/nereuschen/blog/issues/37">限流技术 #37</a></li>
</ul>
</li>
<li>Hystrix<ul>
<li><a href="https://github.com/Netflix/Hystrix">Hystrix: Latency and Fault Tolerance for Distributed Systems</a></li>
<li><a href="http://www.jianshu.com/p/d72b96a7ca31">Hystrix 入门研究</a></li>
<li><a href="http://www.iocoder.cn/categories/Hystrix/">Hystrix 源码解析</a></li>
</ul>
</li>
<li>理论基础<ul>
<li><a href="https://en.wikipedia.org/wiki/Little's_law">排队理论</a></li>
<li><a href="https://en.wikipedia.org/wiki/Leaky_bucket">Leaky bucket 漏桶算法</a></li>
<li><a href="https://en.wikipedia.org/wiki/Token_bucket">Token bucket 令牌桶算法</a></li>
</ul>
</li>
</ul>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-redis/src/test/java/com/yuzhouwan/bigdata/redis/rate/limit/GuavaRateLimiterTest.java">here</a>.</p>
<h2 id="技术内幕"><a href="#技术内幕" class="headerlink" title="技术内幕"></a>技术内幕</h2><h3 id="缓存穿透-vs-缓存雪崩-vs-缓存失效"><a href="#缓存穿透-vs-缓存雪崩-vs-缓存失效" class="headerlink" title="缓存穿透 vs 缓存雪崩 vs 缓存失效"></a>缓存穿透 vs 缓存雪崩 vs 缓存失效</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><h5 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h5><p>　一般的缓存系统，都是按照 key 去缓存查询，如果不存在对应的 value，就应该去后端系统查找（比如 DB）。如果 key 对应的 value 是一定不存在的，并且对该 key 并发请求量很大，就会对后端系统造成很大的压力，我们称之为<strong>缓存穿透</strong></p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul>
<li>对查询结果为空的情况也进行缓存，缓存过期时间设置短一点（避免消耗太多的缓存空间），或者该 key 对应的数据 insert 了之后清理缓存</li>
<li>对一定不存在的 key 进行过滤。可以把所有的可能存在的 key 放到一个大的 Bitmap 中，查询时通过该 Bitmap 过滤</li>
<li>排查是否是自身程序或者数据的问题，亦或是外部恶意攻击或者爬虫，导致大量访问不存在的 key 值</li>
</ul>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><h5 id="场景描述-1"><a href="#场景描述-1" class="headerlink" title="场景描述"></a>场景描述</h5><p>　<strong>缓存雪崩</strong>，是指当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统（比如 DB）带来很大压力</p>
<h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><ul>
<li>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待</li>
<li>不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀</li>
<li>做二级缓存，A1 为原始缓存，A2 为拷贝缓存。A1 失效时，可以访问 A2。A1 缓存失效时间设置为短期，A2 设置为长期</li>
<li>保证缓存层服务的高可用，后端组件做好限流措施，并提前预演缓存层失效的场景</li>
</ul>
<h4 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h4><h5 id="场景描述-2"><a href="#场景描述-2" class="headerlink" title="场景描述"></a>场景描述</h5><p>　<strong>缓存失效</strong>，是指缓存集中在一段时间内失效，DB 的压力凸显</p>
<h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><p>　这个没有完美解决办法，但可以分析用户行为，尽量让失效时间点均匀分布。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>　当发生大量的<strong>缓存穿透</strong>，例如对某个失效的缓存的大并发访问就造成了<strong>缓存雪崩</strong></p>
<p>　<strong>缓存失效</strong>的同时发生<strong>雪崩效应</strong>，对底层系统的冲击将会非常大。这时候，可以使用双缓存机制，在工作缓存之外另外维护一层灾备缓存</p>
<h3 id="双缓存-vs-二级缓存"><a href="#双缓存-vs-二级缓存" class="headerlink" title="双缓存 vs 二级缓存"></a>双缓存 vs 二级缓存</h3><p>　一般的，用 Keepalived 做双机热备，而用 <a href="https://my.oschina.net/tinyframework/blog/538363">J2Cache</a> 来做二级缓存</p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-bigdata/yuzhouwan-bigdata-redis/src/main/java/com/yuzhouwan/bigdata/redis/multi/cache">here</a>.</p>
<h3 id="为什么-Redis-一致性算法使用-Raft，而不是-Paxos？"><a href="#为什么-Redis-一致性算法使用-Raft，而不是-Paxos？" class="headerlink" title="为什么 Redis 一致性算法使用 Raft，而不是 Paxos？"></a>为什么 Redis 一致性算法使用 <a href="https://yuzhouwan.com/posts/31915/#Raft">Raft</a>，而不是 <a href="https://yuzhouwan.com/posts/31915/#选主机制">Paxos</a>？</h3><p>　没有应用场景上的区别，主要是因为 Raft 算法更为<strong>简单</strong>、<strong>好懂</strong> 和 <strong>易实现</strong></p>
<h4 id="协议上的简化"><a href="#协议上的简化" class="headerlink" title="协议上的简化"></a>协议上的简化</h4><p>　最后主要 RPC 只有两个，其他协议的二阶段、三阶段也都变成 看起来像是一阶段</p>
<h4 id="Term-概念的强化"><a href="#Term-概念的强化" class="headerlink" title="Term 概念的强化"></a>Term 概念的强化</h4><p>　看起来似乎 Paxos 也有重选 Leader 的机制，但是强化概念，并增加一个 Term，包含有一个 Leader、Entry 与 Term 相关的属性等都大大简化了流程</p>
<h4 id="Log-只会从-Leader-到-Follower-单向同步"><a href="#Log-只会从-Leader-到-Follower-单向同步" class="headerlink" title="Log 只会从 Leader 到 Follower 单向同步"></a>Log 只会从 Leader 到 Follower 单向同步</h4><p>　实现一下，会发现减少了很多问题，代码实现的复杂度也下降了很多</p>
<h3 id="Redis-vs-Memcached-vs-MongoDB"><a href="#Redis-vs-Memcached-vs-MongoDB" class="headerlink" title="Redis vs Memcached vs MongoDB"></a><a href="https://db-engines.com/en/system/Redis;Memcached;MongoDB">Redis vs Memcached vs MongoDB</a></h3><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul>
<li>都比较高，性能对我们来说应该都不是瓶颈</li>
<li>从 TPS 的角度来看，Redis 和 Memcached 差不多，要略优于 MongoDB</li>
</ul>
<h4 id="操作的便利性"><a href="#操作的便利性" class="headerlink" title="操作的便利性"></a>操作的便利性</h4><ul>
<li>Redis<br>丰富一些，数据操作方面，Redis 更好一些，较少的网络 I/O 次数</li>
<li>Memcached<br>数据结构单一</li>
<li>MongoDB<br>支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富</li>
</ul>
<h4 id="内存空间的大小和数据量的大小"><a href="#内存空间的大小和数据量的大小" class="headerlink" title="内存空间的大小和数据量的大小"></a>内存空间的大小和数据量的大小</h4><ul>
<li>Redis<br>在 2.0 版本后增加了自己的 VM 特性，突破物理内存的限制；可以对 <code>K-V</code> 设置过期时间（类似 Memcached）</li>
<li>Memcached<br>可以修改最大可用内存，采用 LRU 算法</li>
<li>MongoDB<br>适合大数据量的存储，依赖操作系统 VM 做内存管理，吃内存也比较厉害，服务不要和其他的放在一起</li>
</ul>
<h4 id="可用性（单点问题）"><a href="#可用性（单点问题）" class="headerlink" title="可用性（单点问题）"></a>可用性（单点问题）</h4><ul>
<li>Redis<br>依赖客户端来实现分布式读写；主从复制时，每次从节点重新连接主节点都要依赖整个快照,无增量复制，因性能和效率问题，所以单点问题比较复杂<br>不支持自动 sharding，需要依赖程序设定一致 hash 机制<br>一种替代方案是，不用Redis本身的复制机制，采用自己做主动复制（多份存储），或者改成增量复制的方式（需要自己实现），一致性问题和性能的权衡</li>
<li>Memcached<br>本身没有数据冗余机制，也没必要；对于故障预防，采用依赖成熟的 hash 或者环状的算法，解决单点故障引起的抖动问题。</li>
<li>MongoDB<br>支持 master-slave、replicaset（内部采用 Paxos 选举算法，自动故障恢复）、auto sharding 机制，对客户端屏蔽了故障转移和切分机制。</li>
</ul>
<h4 id="可靠性（持久化）"><a href="#可靠性（持久化）" class="headerlink" title="可靠性（持久化）"></a>可靠性（持久化）</h4><ul>
<li>Redis<br>对于数据持久化和数据恢复，Redis 支持（快照、AOF）：依赖快照进行持久化，AOF 增强了可靠性的同时，对性能有所影响</li>
<li>Memcached<br>不支持，通常用在做缓存，提升性能</li>
<li>MongoDB<br>从 1.8 版本开始采用 binlog 方式支持持久化的可靠性</li>
</ul>
<h4 id="数据一致性（事务支持）"><a href="#数据一致性（事务支持）" class="headerlink" title="数据一致性（事务支持）"></a>数据一致性（事务支持）</h4><ul>
<li>Redis<br>事务支持比较弱，只能保证事务中的每个操作连续执行</li>
<li>Memcached<br>在并发场景下，用 CAS 保证一致性</li>
<li>MongoDB<br>不支持事务</li>
</ul>
<h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><ul>
<li>MongoDB<br>内置了数据分析的功能（MapReduce），其他不支持</li>
</ul>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>Redis<br>数据量较小的更性能操作和运算上</li>
<li>Memcached<br>用于在动态系统中减少数据库负载，提升性能；做缓存，提高性能（适合读多写少，对于数据量比较大，可以采用 sharding）</li>
<li>MongoDB<br>主要解决海量数据的访问效率问题</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Paxos</tag>
        <tag>Raft</tag>
        <tag>Jedis</tag>
        <tag>Guava</tag>
        <tag>Memcached</tag>
        <tag>MongoDB</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>如何成为 Apache 的 PMC</title>
    <url>/posts/19631/</url>
    <content><![CDATA[<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>　本文主要是为了，记录给 <a href="https://yuzhouwan.com/posts/5845/"><code>Apache Druid</code></a> / <a href="https://yuzhouwan.com/posts/39683/"><code>Apache Eagle</code></a> / <a href="https://yuzhouwan.com/posts/20644/"><code>Apache Flink</code></a> / <a href="https://yuzhouwan.com/posts/45888/"><code>Apache HBase</code></a> / <a href="https://yuzhouwan.com/posts/26002/"><code>Apache Kafka</code></a> / <a href="https://yuzhouwan.com/posts/743/"><code>Apache Superset</code></a> / <a href="https://yuzhouwan.com/posts/31915/"><code>Apache ZooKeeper</code></a> &amp; <a href="https://yuzhouwan.com/posts/31915/"><code>Apache Curator</code></a> / <a href="https://yuzhouwan.com/posts/42737/"><code>TensorFlow</code></a> / <a href="https://github.com/alibaba/DataX"><code>Alibaba DataX</code></a> <a href="https://yuzhouwan.com/posts/19631/#其他">等</a>开源项目贡献代码，尽自己一点绵薄之力的过程</p>
<p>　文章最后，总结了一些经验之谈，期冀能帮助到同样<strong>热爱开源</strong>、也想成为 <a href="http://people.apache.org/committer-index.html#asdf2014">PMC</a> 的小伙伴们</p>
<span id="more"></span>
<h2 id="开源贡献纪实"><a href="#开源贡献纪实" class="headerlink" title="开源贡献纪实"></a>开源贡献纪实</h2><h3 id="Apache-Druid"><a href="#Apache-Druid" class="headerlink" title="Apache / Druid"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/5845/">Druid</a></h3><h4 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/druid/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>Some code refactor for better performance of <code>Avro-Extension</code> <a href="https://github.com/apache/druid/pull/4092">#4092</a></td>
<td>Merged</td>
<td>2017-03-22</td>
<td>2017-04-25</td>
</tr>
<tr>
<td>Explain Avro´s unnecessary EOFException (#4098) <a href="https://github.com/apache/druid/pull/4100">#4100</a></td>
<td>Merged</td>
<td>2017-03-23</td>
<td>2017-03-24</td>
</tr>
<tr>
<td>Improve <code>collection</code> related things that reusing a immutable object instead of creating a new object <a href="https://github.com/apache/druid/pull/4135">#4135</a></td>
<td>Merged</td>
<td>2017-03-30</td>
<td>2017-05-17</td>
</tr>
<tr>
<td>Increment the resource of <code>JVM</code> and the number of threads in <code>Travis</code> instead of default <a href="https://github.com/apache/druid/pull/4139">#4139</a></td>
<td>Closed</td>
<td>2017-03-31</td>
<td></td>
</tr>
<tr>
<td>Update outdated RLE paper and improve some code refactoring <a href="https://github.com/apache/druid/pull/4286">#4286</a></td>
<td>Merged</td>
<td>2017-05-17</td>
<td>2017-05-19</td>
</tr>
<tr>
<td>Fix bug in SegmentAnalyzer.analyzeComplexColumn() <a href="https://github.com/apache/druid/issues/5939">#5939</a> <a href="https://github.com/apache/druid/pull/5954">#5954</a></td>
<td>Merged</td>
<td>2018-07-07</td>
<td>2018-07-10</td>
</tr>
<tr>
<td>Remove redundant type parameters and enforce some other style and inspection rules <a href="https://github.com/apache/druid/pull/5980">#5980</a></td>
<td>Merged</td>
<td>2018-07-09</td>
<td>2018-07-28</td>
</tr>
<tr>
<td>Add IRC#druid-dev shields.io into README <a href="https://github.com/apache/druid/pull/6002">#6002</a></td>
<td>Merged</td>
<td>2018-07-13</td>
<td>2018-07-22</td>
</tr>
<tr>
<td>Add the ‘—fail-at-end’ option to maven command for ‘strictly compiled’ part <a href="https://github.com/apache/druid/pull/6078">#6078</a></td>
<td>Merged</td>
<td>2018-07-31</td>
<td>2018-08-01</td>
</tr>
<tr>
<td>Fix missing exception handling as part of <code>io.druid.java.util.http.client.netty.HttpClientPipelineFactory</code> <a href="https://github.com/apache/druid/pull/6090">#6090</a></td>
<td>Merged</td>
<td>2018-08-02</td>
<td>2018-08-11</td>
</tr>
<tr>
<td>Make time-related variables more readable <a href="https://github.com/apache/druid/pull/6158">#6158</a></td>
<td>Merged</td>
<td>2018-08-12</td>
<td>2018-08-22</td>
</tr>
<tr>
<td>Add maven.exec.xxx.skip option for exec-maven-plugin <a href="https://github.com/apache/druid/pull/6162">#6162</a></td>
<td>Merged</td>
<td>2018-08-13</td>
<td>2018-09-25</td>
</tr>
<tr>
<td>Fix assertionError at testCheckpointForInactiveTaskGroup in KafkaSupervisorTest <a href="https://github.com/apache/druid/pull/6192">#6192</a></td>
<td>Merged</td>
<td>2018-08-19</td>
<td>2018-08-22</td>
</tr>
<tr>
<td>Fix wrong counter getFailedSendingTimeCounter method <a href="https://github.com/apache/druid/pull/6793">#6793</a></td>
<td>Merged</td>
<td>2019-01-02</td>
<td>2019-01-02</td>
</tr>
<tr>
<td>In addition to special cases such as avoiding deadlock, make sure that the current thread has got the connectionLock object lock when accessing the statements object <a href="https://github.com/apache/druid/pull/6903">#6903</a></td>
<td>Merged</td>
<td>2019-01-23</td>
<td>2019-01-28</td>
</tr>
<tr>
<td>For performance reasons, use <code>java.util.Base64</code> instead of Base64 in Apache Commons Codec and Guava <a href="https://github.com/apache/druid/pull/6913">#6913</a></td>
<td>Merged</td>
<td>2019-01-25</td>
<td>2019-01-26</td>
</tr>
<tr>
<td>Add “REVERSE” / “REPEAT” / “RIGHT” / “LEFT” functions <a href="https://github.com/apache/druid/pull/7334">#7334</a></td>
<td>Merged</td>
<td>2019-03-23</td>
<td>2019-04-10</td>
</tr>
<tr>
<td>Fix broken links in api-reference.md <a href="https://github.com/apache/druid/pull/7670">#7670</a></td>
<td>Merged</td>
<td>2019-04-16</td>
<td>2019-04-16</td>
</tr>
<tr>
<td>Bump httpcore from 4.4.4 to 4.4.11 <a href="https://github.com/apache/druid/pull/7870">#7870</a></td>
<td>Merged</td>
<td>2019-06-12</td>
<td>2019-08-10</td>
</tr>
<tr>
<td>Optimize images by ImgBot <a href="https://github.com/apache/druid/pull/7873">#7873</a></td>
<td>Merged</td>
<td>2019-06-12</td>
<td>2019-06-25</td>
</tr>
<tr>
<td>Bump jmh from 1.19 to 1.21 <a href="https://github.com/apache/druid/pull/7876">#7876</a></td>
<td>Merged</td>
<td>2019-06-13</td>
<td>2019-06-17</td>
</tr>
<tr>
<td>Bump RoaringBitmap from 0.8.0 to 0.8.6 <a href="https://github.com/apache/druid/pull/7906">#7906</a></td>
<td>Merged</td>
<td>2019-06-17</td>
<td>2019-06-17</td>
</tr>
<tr>
<td>Bump commons-cli from 1.2 to 1.3.1 <a href="https://github.com/apache/druid/pull/7966">#7966</a></td>
<td>Merged</td>
<td>2019-06-26</td>
<td>2019-06-26</td>
</tr>
<tr>
<td>Bump jaxb-api from 2.3.0 to 2.3.1 <a href="https://github.com/apache/druid/pull/7978">#7978</a></td>
<td>Merged</td>
<td>2019-06-27</td>
<td>2019-06-27</td>
</tr>
<tr>
<td>Bump commons-validator from 1.4.0 to 1.5.1 <a href="https://github.com/apache/druid/pull/7987">#7987</a></td>
<td>Merged</td>
<td>2019-06-28</td>
<td>2019-06-28</td>
</tr>
<tr>
<td>Bump commons-codec from 1.7 to 1.12 <a href="https://github.com/apache/druid/pull/7995">#7995</a></td>
<td>Merged</td>
<td>2019-06-29</td>
<td>2019-06-29</td>
</tr>
<tr>
<td>Bump rhino from 1.7R5 to 1.7.11 <a href="https://github.com/apache/druid/pull/8008">#8008</a></td>
<td>Merged</td>
<td>2019-07-02</td>
<td>2019-08-10</td>
</tr>
<tr>
<td>Bump JUnitParams from 1.0.4 to 1.1.1 <a href="https://github.com/apache/druid/pull/8017">#8017</a></td>
<td>Merged</td>
<td>2019-07-03</td>
<td>2019-08-21</td>
</tr>
<tr>
<td>Hide descriptive comments in <code>pull_request_template.md</code> <a href="https://github.com/apache/druid/pull/8313">#8313</a></td>
<td>Merged</td>
<td>2019-08-15</td>
<td>2019-08-16</td>
</tr>
<tr>
<td>Fix missing format argument <a href="https://github.com/apache/druid/pull/8331">#8331</a></td>
<td>Merged</td>
<td>2019-08-19</td>
<td>2019-08-19</td>
</tr>
<tr>
<td>Fix resource leak <a href="https://github.com/apache/druid/pull/8337">#8337</a></td>
<td>Merged</td>
<td>2019-08-19</td>
<td>2019-08-20</td>
</tr>
<tr>
<td>Add grade shield <a href="https://github.com/apache/druid/pull/8344">#8344</a></td>
<td>Merged</td>
<td>2019-08-20</td>
<td>2019-08-21</td>
</tr>
<tr>
<td>Fix unused format argument <a href="https://github.com/apache/druid/pull/8345">#8345</a></td>
<td>Merged</td>
<td>2019-08-20</td>
<td>2019-08-21</td>
</tr>
<tr>
<td>Fix result of division may be truncated <a href="https://github.com/apache/druid/pull/8355">#8355</a></td>
<td>Merged</td>
<td>2019-08-21</td>
<td>2019-09-04</td>
</tr>
<tr>
<td>Reduce the size of images with lossless compression <a href="https://github.com/apache/druid/pull/8358">#8358</a></td>
<td>Merged</td>
<td>2019-08-21</td>
<td>2019-08-22</td>
</tr>
<tr>
<td>Suppress index-out-of-bounds warning from LGTM about loop unrolling <a href="https://github.com/apache/druid/pull/8380">#8380</a></td>
<td>Merged</td>
<td>2019-08-23</td>
<td>2019-09-04</td>
</tr>
<tr>
<td>Fix inconsistent equals and hashCode <a href="https://github.com/apache/druid/pull/8381">#8381</a></td>
<td>Merged</td>
<td>2019-08-23</td>
<td>2019-09-04</td>
</tr>
<tr>
<td>Fix alerts from LGTM about python files <a href="https://github.com/apache/druid/pull/8383">#8383</a></td>
<td>Merged</td>
<td>2019-08-23</td>
<td>2019-09-07</td>
</tr>
<tr>
<td>Add docker shield <a href="https://github.com/apache/druid/pull/8403">#8403</a></td>
<td>Merged</td>
<td>2019-08-26</td>
<td>2019-08-27</td>
</tr>
<tr>
<td>Fix missing space in string literal and spurious Javadoc @param tags from LGTM <a href="https://github.com/apache/druid/pull/8491">#8491</a></td>
<td>Merged</td>
<td>2019-09-09</td>
<td>2019-09-16</td>
</tr>
<tr>
<td>Fix resource leaks and suppress an incorrect LGTM alert <a href="https://github.com/apache/druid/pull/8589">#8589</a></td>
<td>Merged</td>
<td>2019-09-25</td>
<td>2019-10-11</td>
</tr>
<tr>
<td>Fix NPE for subquery with limit <a href="https://github.com/apache/druid/pull/8775">#8775</a></td>
<td>Merged</td>
<td>2019-10-29</td>
<td>2019-12-18</td>
</tr>
<tr>
<td>Exclude .asf.yaml from the configuration of the rat plugin <a href="https://github.com/apache/druid/pull/9088">#9088</a></td>
<td>Merged</td>
<td>2019-12-21</td>
<td>2019-12-24</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a><a href="https://github.com/apache/druid/issues/created_by/asdf2014">Issues</a></h4><p><a href="https://github.com/apache/druid/issues/created_by/asdf2014">All issues in Druid</a><br>Open / Close / Total : 0 / 5 / 5</p>
<hr>
<h3 id="Apache-Eagle"><a href="#Apache-Eagle" class="headerlink" title="Apache / Eagle"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/39683/">Eagle</a></h3><h4 id="Pull-Request-1"><a href="#Pull-Request-1" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/eagle/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aasdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>[<a href="https://issues.apache.org/jira/browse/EAGLE-981">EAGLE-981</a>] GC overhead limit exceeded <a href="https://github.com/apache/eagle/pull/896">#896</a></td>
<td>Merged</td>
<td>2017-03-30</td>
<td>2017-04-18</td>
</tr>
<tr>
<td>[<a href="https://issues.apache.org/jira/browse/EAGLE-982">EAGLE-982</a>] The log length has exceeded the limit of 4 MB in Travis <a href="https://github.com/apache/eagle/pull/897">#897</a></td>
<td>Merged</td>
<td>2017-03-30</td>
<td>2017-04-18</td>
</tr>
<tr>
<td>[<a href="https://issues.apache.org/jira/browse/EAGLE-992">EAGLE-992</a>] HBase Naming that unify <code>Hbase</code> and <code>HBase</code> into <code>HBase</code><a href="https://github.com/apache/eagle/pull/905">#905</a></td>
<td>Merged</td>
<td>2017-04-06</td>
<td>2017-04-18</td>
</tr>
<tr>
<td>[<a href="https://issues.apache.org/jira/browse/EAGLE-1009">EAGLE-1009</a>] Fix <code>return</code> inside <code>finally</code> block may result in losing exception <a href="https://github.com/apache/eagle/pull/920">#920</a></td>
<td>Merged</td>
<td>2017-04-18</td>
<td>2017-04-19</td>
</tr>
<tr>
<td>[MINOR] Fix some project construction problems about <code>test sources</code> <a href="https://github.com/apache/eagle/pull/922">#922</a></td>
<td>Closed</td>
<td>2017-04-19</td>
<td></td>
</tr>
<tr>
<td>[<a href="https://issues.apache.org/jira/browse/EAGLE-1012">EAGLE-1012</a>] Some language level problems <a href="https://github.com/apache/eagle/pull/925">#925</a></td>
<td>Closed</td>
<td>2017-04-19</td>
<td></td>
</tr>
<tr>
<td>[MINOR] Fxi sprk/egle issues in JPM module <a href="https://github.com/apache/eagle/pull/943">#943</a></td>
<td>Closed</td>
<td>2017-06-07</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Issues-1"><a href="#Issues-1" class="headerlink" title="Issues"></a><a href="https://issues.apache.org/jira/browse/EAGLE-981?jql=project%20%3D%20EAGLE%20AND%20reporter%20in%20(%22benedict%20jin%22)">Issues</a></h4><p><a href="https://issues.apache.org/jira/browse/EAGLE-981?jql=project%20%3D%20EAGLE%20AND%20reporter%20in%20(%22benedict%20jin%22)">All issues in Eagle</a><br>Open / Close / Total : 4 / 5 / 9</p>
<hr>
<h3 id="Apache-Flink"><a href="#Apache-Flink" class="headerlink" title="Apache / Flink"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/20644/">Flink</a></h3><h4 id="Pull-Request-2"><a href="#Pull-Request-2" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/flink/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://issues.apache.org/jira/browse/FLINK-6868">FLINK-6868</a>[build] Using <code>scala.binary.version</code> for <code>flink-streaming-scala</code> in <code>Cassandra Connector</code> <a href="https://github.com/apache/flink/pull/4087">#4087</a></td>
<td>Merged</td>
<td>2017-06-08</td>
<td>2017-06-25</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/FLINK-7369">FLINK-7369</a>: Add more information for <code>Key group index out of range of key group range</code> exception <a href="https://github.com/apache/flink/pull/4474">#4474</a></td>
<td>Merged</td>
<td>2017-08-04</td>
<td>2017-08-04</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Issues-2"><a href="#Issues-2" class="headerlink" title="Issues"></a><a href="https://issues.apache.org/jira/browse/FLINK-6868?jql=project%20%3D%20FLINK%20AND%20reporter%20in%20(%22benedict%20jin%22)">Issues</a></h4><p><a href="https://issues.apache.org/jira/browse/FLINK-6868?jql=project%20%3D%20FLINK%20AND%20reporter%20in%20(%22benedict%20jin%22)">All issues in Flink</a><br>Open / Close / Total : 0 / 3 / 3</p>
<p>Tips: <a href="https://flink.apache.org/contributing/how-to-contribute.html">How to Contribute to Flink</a></p>
<hr>
<h3 id="Apache-HBase"><a href="#Apache-HBase" class="headerlink" title="Apache / HBase"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/45888/">HBase</a></h3><h4 id="Pull-Request-3"><a href="#Pull-Request-3" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/hbase/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://issues.apache.org/jira/browse/HBASE-18470">HBASE-18470</a>: Fix a bug in <code>RetriesExhaustedWithDetailsException#getDesc</code> describe<a href="https://github.com/apache/hbase/pull/56">#56</a></td>
<td>Merged</td>
<td>2017-07-28</td>
<td>2017-08-03</td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache / Kafka"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/26002/">Kafka</a></h3><h4 id="Pull-Request-4"><a href="#Pull-Request-4" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/kafka/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>[MINOR] Improve runtime / storage / metrics / config parts <a href="https://github.com/apache/kafka/pull/4525">#4525</a></td>
<td>Merged</td>
<td>2018-02-05</td>
<td>2018-02-14</td>
</tr>
<tr>
<td>MINOR: Catch null pointer exception for empty leader URL when assignment is null <a href="https://github.com/apache/kafka/pull/4798">#4798</a></td>
<td>Merged</td>
<td>2018-03-30</td>
<td>2018-11-17</td>
</tr>
<tr>
<td>MINOR: Remove magic number and extract Pattern instance from method as class field <a href="https://github.com/apache/kafka/pull/4799">#4799</a></td>
<td>Merged</td>
<td>2018-03-30</td>
<td>2018-04-09</td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id="Apache-Superset"><a href="#Apache-Superset" class="headerlink" title="Apache / Superset"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/743/">Superset</a></h3><h4 id="Pull-Request-5"><a href="#Pull-Request-5" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/incubator-superset/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>little code refactor in models.py <a href="https://github.com/apache/incubator-superset/pull/2124">#2124</a></td>
<td>Merged</td>
<td>2017-02-07</td>
<td>2017-02-07</td>
</tr>
<tr>
<td>Fix werkzeug instance was created twice in Debug Mode (#2135) <a href="https://github.com/apache/incubator-superset/pull/2136">#2136</a></td>
<td>Merged</td>
<td>2017-02-08</td>
<td>2017-02-14</td>
</tr>
<tr>
<td>Fix ExtDeprecationWarning (#2137) <a href="https://github.com/apache/incubator-superset/pull/2138">#2138</a></td>
<td>Merged</td>
<td>2017-02-08</td>
<td>2017-02-09</td>
</tr>
<tr>
<td>Some code refactoring <a href="https://github.com/apache/incubator-superset/pull/2139">#2139</a></td>
<td>Merged</td>
<td>2017-02-08</td>
<td>2017-02-09</td>
</tr>
<tr>
<td>Using the time zone with specific name for querying Druid <a href="https://github.com/apache/incubator-superset/pull/2143">#2143</a></td>
<td>Merged</td>
<td>2017-02-09</td>
<td>2017-02-10</td>
</tr>
<tr>
<td>Aggregate data outside of topN into a single category <a href="https://github.com/apache/incubator-superset/pull/2176">#2176</a></td>
<td>Closed</td>
<td>2017-02-15</td>
<td></td>
</tr>
<tr>
<td>Fix UNKNOWN option in setup.py <a href="https://github.com/apache/incubator-superset/pull/2199">#2199</a></td>
<td>Closed</td>
<td>2017-02-17</td>
<td></td>
</tr>
<tr>
<td>fix timezone issues in slices (#2354) <a href="https://github.com/apache/incubator-superset/pull/2370">#2370</a></td>
<td>Closed</td>
<td>2017-03-08</td>
<td></td>
</tr>
<tr>
<td>Fix unicode issues (#2308 #2282) <a href="https://github.com/apache/incubator-superset/pull/2401">#2401</a></td>
<td>Merged</td>
<td>2017-03-14</td>
<td>2017-03-15</td>
</tr>
<tr>
<td>Fix rst grammar problems <a href="https://github.com/apache/incubator-superset/pull/4116">#4116</a></td>
<td>Merged</td>
<td>2017-12-26</td>
<td>2017-12-26</td>
</tr>
<tr>
<td>Fix invaild gitter url <a href="https://github.com/apache/incubator-superset/pull/4125">#4125</a></td>
<td>Merged</td>
<td>2017-12-27</td>
<td>2018-01-05</td>
</tr>
<tr>
<td>Hanization <a href="https://github.com/apache/incubator-superset/pull/4126">#4126</a></td>
<td>Merged</td>
<td>2017-12-27</td>
<td>2018-01-13</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Issues-3"><a href="#Issues-3" class="headerlink" title="Issues"></a><a href="https://github.com/apache/incubator-superset/issues/created_by/asdf2014">Issues</a></h4><p><a href="https://github.com/apache/incubator-superset/issues/created_by/asdf2014">All issues in Superset</a><br>Open / Close / Total : 0 / 21 / 21</p>
<hr>
<h3 id="Apache-ZooKeeper"><a href="#Apache-ZooKeeper" class="headerlink" title="Apache / ZooKeeper"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a></h3><h4 id="Pull-Request-6"><a href="#Pull-Request-6" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/zookeeper/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2784">ZOOKEEPER-2784</a>: Add same <code>sid</code> config problem check <a href="https://github.com/apache/zookeeper/pull/257">#257</a></td>
<td>Closed</td>
<td>2017-05-18</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2789">ZOOKEEPER-2789</a>: Reassign <code>ZXID</code> for solving 32bit overflow problem <a href="https://github.com/apache/zookeeper/pull/262">#262</a></td>
<td>Open</td>
<td>2017-05-23</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2815">ZOOKEEPER-2815</a>: 1. Using try clause to close resource; 2. Others code refactoring for PERSISTENCE module <a href="https://github.com/apache/zookeeper/pull/283">#283</a></td>
<td>Merged</td>
<td>2017-06-16</td>
<td>2017-06-26</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2816">ZOOKEEPER-2816</a>: Code refactoring for <code>ZK_SERVER</code> module <a href="https://github.com/apache/zookeeper/pull/288">#288</a></td>
<td>Merged</td>
<td>2017-06-20</td>
<td>2017-06-26</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2817">ZOOKEEPER-2817</a>: Using <code>Collections.singletonList</code> instead of <code>Arrays.asList(oneElement)</code> <a href="https://github.com/apache/zookeeper/pull/290">#290</a></td>
<td>Closed</td>
<td>2017-06-22</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2821">ZOOKEEPER-2821</a>: 1. Fix spell issues; 2. Remove unnecessary boxing / unboxing; 3. Simplify <code>return</code> clause; 4. … <a href="https://github.com/apache/zookeeper/pull/293">#293</a></td>
<td>Closed</td>
<td>2017-06-27</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2822">ZOOKEEPER-2822</a>: Wrong <code>ObjectName</code> about <code>MBeanServer</code> in JMX module <a href="https://github.com/apache/zookeeper/pull/294">#294</a></td>
<td>Merged</td>
<td>2017-06-27</td>
<td>2018-11-27</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2823">ZOOKEEPER-2823</a>: 1. Fix spell issues; 2. Standardize <code>StringBuilder#append</code> usage; 3. Using <code>try</code> clause for … <a href="https://github.com/apache/zookeeper/pull/295">#295</a></td>
<td>Closed</td>
<td>2017-06-28</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2824">ZOOKEEPER-2824</a>: <code>FileChannel#size</code> info should be added to <code>FileTxnLog#commit</code> to solve the confuse that reason is too large log or too busy disk I/O <a href="https://github.com/apache/zookeeper/pull/296">#296</a></td>
<td>Merged</td>
<td>2017-06-28</td>
<td>2018-02-02</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2825">ZOOKEEPER-2825</a>: 1. Remove unnecessary import; 2. <code>contains</code> instead of <code>indexOf &gt; -1</code> for more readable … <a href="https://github.com/apache/zookeeper/pull/297">#297</a></td>
<td>Merged</td>
<td>2017-06-29</td>
<td>2018-01-31</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2826">ZOOKEEPER-2826</a>: Code refactoring for <code>CLI</code> module <a href="https://github.com/apache/zookeeper/pull/298">#298</a></td>
<td>Merged</td>
<td>2017-06-29</td>
<td>2018-01-31</td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2835">ZOOKEEPER-2835</a>: Run server with <code>-XX:+AlwaysPreTouch</code> jvm flag <a href="https://github.com/apache/zookeeper/pull/301">#301</a></td>
<td>Closed</td>
<td>2017-07-04</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2837">ZOOKEEPER-2837</a>: Add a special START_SERVER_JVMFLAGS option only for <code>start</code> command to distinguish … <a href="https://github.com/apache/zookeeper/pull/302">#302</a></td>
<td>Closed</td>
<td>2017-07-04</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2840">ZOOKEEPER-2840</a>: Should using <code>System.nanoTime() ^ this.hashCode()</code> for StaticHostProvider <a href="https://github.com/apache/zookeeper/pull/303">#303</a></td>
<td>Open</td>
<td>2017-07-05</td>
<td></td>
</tr>
<tr>
<td><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2892">ZOOKEEPER-2892</a>: Improve lazy initialize and close stream for <code>PrepRequestProcessor</code> <a href="https://github.com/apache/zookeeper/pull/361">#361</a></td>
<td>Merged</td>
<td>2017-09-06</td>
<td>2018-02-07</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Issues-4"><a href="#Issues-4" class="headerlink" title="Issues"></a><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2784?jql=project%20%3D%20ZOOKEEPER%20AND%20reporter%20in%20(%22benedict%20jin%22)">Issues</a></h4><p><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2784?jql=project%20%3D%20ZOOKEEPER%20AND%20reporter%20in%20(%22benedict%20jin%22)">All issues in ZooKeeper</a><br>Open / Close / Total : 10 / 8 / 18</p>
<hr>
<h3 id="Apache-Curator"><a href="#Apache-Curator" class="headerlink" title="Apache / Curator"></a><a href="https://github.com/apache">Apache</a> / <a href="https://yuzhouwan.com/posts/31915/">Curator</a></h3><h4 id="Pull-Request-7"><a href="#Pull-Request-7" class="headerlink" title="Pull Request"></a><a href="https://github.com/apache/curator/pulls/asdf2014">Pull Request</a></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Title</th>
<th>Status</th>
<th>Create Date</th>
<th>Merge Date</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://issues.apache.org/jira/browse/CURATOR-523">CURATOR-523</a>: Fix ByteBuffer’s compatibility issues <a href="https://github.com/apache/curator/pull/321">#321</a></td>
<td>Merged</td>
<td>2019-08-01</td>
<td>2019-08-23</td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><a href="https://github.com/alibaba/DataX/pulls/asdf2014">Alibaba DataX</a></li>
<li><a href="https://github.com/aliyun/aliyun-tsdb-java-sdk/pulls/asdf2014">Aliyun TSDB Java SDK</a></li>
<li><a href="https://github.com/apache/atlas/pulls/asdf2014">Apache Atlas</a></li>
<li><a href="https://github.com/apache/iotdb/pulls/asdf2014">Apache IoTDB</a></li>
<li><a href="https://github.com/apache/pinot/pulls/asdf2014">Apache Pinot</a></li>
<li><a href="https://github.com/helm/charts/pulls/asdf2014">Helm Charts</a></li>
<li><a href="https://github.com/crate/crate/pulls/asdf2014">CrateDB</a></li>
<li><a href="https://github.com/elastic/elasticsearch/pulls/asdf2014">ElasticSearch</a></li>
<li><a href="https://github.com/grpc/grpc-java/pulls/asdf2014">Grpc-Java</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next/pulls/asdf2014">Hexo Theme Next</a></li>
<li><a href="https://github.com/httprunner/har2case/pulls/asdf2014">HttpRunner</a></li>
<li><a href="https://github.com/hankcs/ID-CNN-CWS/pulls/asdf2014">ID-CNN-CWS</a></li>
<li><a href="https://github.com/lensesio/kafka-connect-ui/pulls/asdf2014">Kafka Connect UI</a></li>
<li><a href="https://github.com/apache/lucene-solr/pulls/asdf2014">Lucene</a></li>
<li><a href="https://github.com/OpenTSDB/opentsdb/pulls/asdf2014">OpenTSDB</a></li>
<li><a href="https://github.com/xerial/snappy-java/pulls/asdf2014">Snappy-Java</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/pulls/asdf2014">Tensorflow</a></li>
</ul>
<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>　需要提前说明的是，大家不能为了成为 PMC 而去成为 PMC。我们的初衷应该是认可开源，热爱开源，乐于和全球的开发者一起努力，做出来一些有意义的东西。换句话说，如果一行代码都还没贡献，就开始到处找攻略或捷径，则是很不可取的。当然有这个目标是很好的，但是正常情况下，成为 PMC 不是一蹴而就的事情。需要我们付出足够多的心力和汗水之后，才会水到渠成地收到来自 ASF 的邀请函。</p>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>　如果说成为 PMC 这件事完全没有任何技巧，也是不可能的。下面就来说一些大家需要注意的事项，尽量地少走弯路：</p>
<h3 id="选择项目"><a href="#选择项目" class="headerlink" title="选择项目"></a>选择项目</h3><p>　第一步当然是寻找一个合适自己的项目，能和自己的兴趣或工作内容相关的项目，自然是最好不过了。另外，也要从是否有商业公司在背后主导，是否有长期活跃的 PMC，是否具备和其他同类产品的核心竞争力，是否在架构上存在重大缺陷，是否对新代码贡献者很包容 等等角度来判断，这个项目是否值得你去付出大量的精力。</p>
<h3 id="代码贡献"><a href="#代码贡献" class="headerlink" title="代码贡献"></a>代码贡献</h3><p>　按理说，任何的代码提交，都已经先建立 issues 发起一次讨论。一方面，可以让社区里的其他代码贡献者，知道你想要做什么样的事情；另一方面，也可以听取其他人的意见，包括你要做的这件事的必要性，以及是否有其他更好的实现思路。如果刚开始对某一个项目进行代码贡献，则可以从认领一些 issues 来开始。比较好的开源项目，还会在 issues 上打上类似 <code>Contributions Welcome</code> 的标签。</p>
<h3 id="代码评审"><a href="#代码评审" class="headerlink" title="代码评审"></a>代码评审</h3><p>　很多小伙伴会认为只有 Committer 才能对其他人的代码进行 review。其实不然，任何你想到的有价值的意见，都可以提出来。并且，在帮助评审他人代码的同时，还能学习到别人解决问题的方式方法。尤其是在一些有争议的地方，可以看到不同的贡献者，针对同一个问题从不同角度的思考，对自己的思维开拓也是大有裨益的。</p>
<h2 id="代码提交的几个注意点"><a href="#代码提交的几个注意点" class="headerlink" title="代码提交的几个注意点"></a>代码提交的几个注意点</h2><h3 id="通用技巧"><a href="#通用技巧" class="headerlink" title="通用技巧"></a>通用技巧</h3><h4 id="保持-Diff-信息最简"><a href="#保持-Diff-信息最简" class="headerlink" title="保持 Diff 信息最简"></a>保持 Diff 信息最简</h4><p>　PR 中不应该做无关的 Code Format（import / 代码缩进 等）</p>
<h4 id="保持-PR-的相关性"><a href="#保持-PR-的相关性" class="headerlink" title="保持 PR 的相关性"></a>保持 PR 的相关性</h4><p>　不做无关的 代码优化，尤其是对其他不相关的类（可以另起 PR 进行优化）</p>
<h4 id="保持-代码风格一致"><a href="#保持-代码风格一致" class="headerlink" title="保持 代码风格一致"></a>保持 代码风格一致</h4><p>　关闭 IDE 自动优化 import 合并为通配符 <code>*</code> 的功能（如，<code>import java.io.*</code> 等）</p>
<h3 id="因地制宜"><a href="#因地制宜" class="headerlink" title="因地制宜"></a>因地制宜</h3><h4 id="Apache-Druid-1"><a href="#Apache-Druid-1" class="headerlink" title="Apache Druid"></a>Apache Druid</h4><p>　遵照 Apache <a href="https://yuzhouwan.com/posts/5845/">Druid</a> 编码规则，比如 参数列表，需要分行写 等</p>
<h4 id="Apache-Eagle-1"><a href="#Apache-Eagle-1" class="headerlink" title="Apache Eagle"></a>Apache Eagle</h4><p>　Apache <a href="https://yuzhouwan.com/posts/39683/">Eagle</a> 需要 squash PR 中的 commits 等等</p>
<h4 id="Apache-HBase-1"><a href="#Apache-HBase-1" class="headerlink" title="Apache HBase"></a>Apache HBase</h4><p>　Apache <a href="https://yuzhouwan.com/posts/45888/">HBase</a> 是以 Patch + Jira 为主的代码维护模式，Github 里面只是代码镜像，所以提交代码不需要创建 PR</p>
<h4 id="Apache-Superset-1"><a href="#Apache-Superset-1" class="headerlink" title="Apache Superset"></a>Apache Superset</h4><p>　Apache <a href="https://yuzhouwan.com/posts/743/">Superset</a> / <a href="https://yuzhouwan.com/posts/42737/">Tensorflow</a> 之类的 Python 项目，需要注意 <a href="https://www.python.org/dev/peps/pep-0537/">PEP</a> 规范</p>
<h4 id="Apache-ZooKeeper-1"><a href="#Apache-ZooKeeper-1" class="headerlink" title="Apache ZooKeeper"></a>Apache ZooKeeper</h4><p>　参照官方给出的提交代码的文档即可 <a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute">How to Contribute to ZooKeeper</a></p>
<h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><p>　除了遵循 <a href="https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> 文档中提及的内容，还有一些不成文的规定，例如 <a href="https://yuzhouwan.com/posts/22654/">ElasticSearch</a> 的 Committer 对于 <code>varA == false</code> 这类冗余的写法很是赞同，认为可以减少丢失 <code>!</code> 的风险</p>
<h3 id="好的习惯"><a href="#好的习惯" class="headerlink" title="好的习惯"></a>好的习惯</h3><ul>
<li>在提交之前，先更新 master 分支，并通过 <code>git rebase -i master</code> 命令，将自己的提交<strong><a href="https://github.com/apache/druid/pull/4135">置顶</a></strong>（主分支，也可能不叫 master，比如 Kafka 的主分支是 trunk）</li>
<li>保证自己的代码，能够被单元测试覆盖到。如果原本的测试用例，无法覆盖到，则需要自己编写对应的<a href="https://github.com/apache/zookeeper/pull/257">单元测试</a></li>
<li>提交<strong>性能提升型</strong> PR，需要自己写好 benchmark，并贴出<a href="https://github.com/apache/druid/pull/4092">压测结果</a></li>
<li>提交 PR 的时候，在标题的前面增加 <code>[JIRA]</code>（对应的 Jira 号）、<code>[MINOR]</code>（微小的改动）、<code>[WIP]</code>（未完成的修改）和 <code>[Benchmarking]</code>（性能测试中） 之类的标示，可以帮助 Committer 更高效地处理 PR</li>
</ul>
<p>Tips: 关于 Git 的相关操作，详见我的另一篇博客：《<a href="https://yuzhouwan.com/posts/30041/">Git 高级玩法</a>》</p>
<h2 id="那么成为-Apache-PMC-有什么好处？"><a href="#那么成为-Apache-PMC-有什么好处？" class="headerlink" title="那么成为 Apache PMC 有什么好处？"></a>那么成为 Apache PMC 有什么好处？</h2><ul>
<li><p>可以拥有一个 @apache.org 的邮箱</p>
</li>
<li><p>在任何一个 Apache 项目中发言都将标识 Member 徽章</p>
</li>
<li><p>可以免费使用 IDEA 全家桶中的所有产品</p>
<p><img data-src="/picture/pmc/pmc_idea_license.png" alt="JetBrains All Products Pack license for ASF Committers"></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>™ 的截图）</center>








</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>开源社区</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Apache Kafka</tag>
        <tag>Helm</tag>
        <tag>Apache Druid</tag>
        <tag>Apache ZooKeeper</tag>
        <tag>Apache Flink</tag>
        <tag>开源社区</tag>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Apache Eagle</tag>
        <tag>Apache HBase</tag>
        <tag>Apache Superset</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>如何运用 JVM 知识提高编程水平</title>
    <url>/posts/27328/</url>
    <content><![CDATA[<h2 id="什么是-JVM"><a href="#什么是-JVM" class="headerlink" title="什么是 JVM?"></a>什么是 JVM?</h2><p>　A <strong>J</strong>ava <strong>V</strong>irtual <strong>M</strong>achine（JVM）is an abstract computing machine that enables a computer to run a Java program.</p>
<h2 id="为什么要有-JVM"><a href="#为什么要有-JVM" class="headerlink" title="为什么要有 JVM?"></a>为什么要有 JVM?</h2><h3 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h3><p>　JVM 的存在，使得 Java 程序 能够轻易地在多平台上移植，基本上脱离了对硬件的依赖性（这也满足了 <a href="https://en.wikipedia.org/wiki/David_Parnas">David Parnas</a> 的 “<a href="https://en.wikipedia.org/wiki/Information_hiding">信息隐藏</a>” 准则）</p>
<h3 id="多语言性"><a href="#多语言性" class="headerlink" title="多语言性"></a>多语言性</h3><p>　因为底层 JIT 编译优化、高效 GC、JUC 对多线程并发编程的支持，以及社区中海量成熟的库 等优点，使得<a href="https://en.wikipedia.org/wiki/List_of_JVM_languages">很多语言</a>都开发出可运行在 JVM 上的版本</p>
<p>　同时，多语言混合编程成为一种趋势，在需要快速开发、灵活部署 和 针对特定问题的 DSL 等场景下，选择恰当的 JVM-hosted language，可以最大化原有代码的价值</p>
<p>　<strong>那么，在日常的开发过程中，究竟应该如何运用 JVM 的知识，来逐步提高实际编程水平呢？ 上下而求索后，找到了以下几个层面作为出发点</strong></p>
<span id="more"></span>
<h2 id="编码层面"><a href="#编码层面" class="headerlink" title="编码层面"></a>编码层面</h2><h3 id="递归-vs-尾递归"><a href="#递归-vs-尾递归" class="headerlink" title="递归 vs 尾递归"></a>递归 vs 尾递归</h3><h4 id="循环调用"><a href="#循环调用" class="headerlink" title="循环调用"></a>循环调用</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span></span>(i: <span class="type">Int</span>): <span class="type">Int</span> = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># <span class="number">10</span> 亿次 <span class="keyword">for</span> 循环调用</span><br><span class="line"><span class="number">0</span>: aload_0                                                                                 | 从局部变量 <span class="number">0</span> 中装载引用类型值</span><br><span class="line"><span class="number">1</span>: getfield         #<span class="number">29</span>  <span class="comment">// Field i$1:Lscala/runtime/IntRef;                               | 从对象中获取字段</span></span><br><span class="line"><span class="number">4</span>: getstatic        #<span class="number">33</span>  <span class="comment">// Field com/yuzhouwan/jit/Inc$.MODULE$:Lcom/yuzhouwan/jit/Inc$;  | 从类中获取静态字段</span></span><br><span class="line"><span class="number">7</span>: aload_0                                                                                 | 从局部变量 <span class="number">0</span> 中装载引用类型值</span><br><span class="line"><span class="number">8</span>: getfield         #<span class="number">29</span>  <span class="comment">// Field i$1:Lscala/runtime/IntRef;                               | 从对象中获取字段</span></span><br><span class="line"><span class="number">11</span>: getfield        #<span class="number">38</span>  <span class="comment">// Field scala/runtime/IntRef.elem:I                              | 从对象中获取字段</span></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>: invokevirtual   #<span class="number">42</span>  <span class="comment">// Method com/yuzhouwan/jit/Inc$.inc:(I)I                         | 运行时按照对象的类来调用实例方法</span></span><br><span class="line"><span class="number">17</span>: putfield        #<span class="number">38</span>  <span class="comment">// Field scala/runtime/IntRef.elem:I                              | 设置对象中字段的值</span></span><br><span class="line"></span><br><span class="line"><span class="number">20</span>: <span class="keyword">return</span>                                                                                 | 从方法中返回，返回值为 void</span><br><span class="line"></span><br><span class="line"># 被调用的累加方法</span><br><span class="line"><span class="number">0</span>: iload_1                 | 从局部变量 <span class="number">1</span> 中装载 int 类型值入栈</span><br><span class="line"><span class="number">1</span>: iconst_1                | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">2</span>: iadd                    | 将栈顶两 int 类型数相加，结果入栈</span><br><span class="line"><span class="number">3</span>: ireturn                 | 返回 int 类型值</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> 亿次循环，大约 <span class="number">4014</span> ms</span><br></pre></td></tr></tbody></table></figure>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec</span></span>(i: <span class="type">Int</span>): <span class="type">Int</span> = {</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  rec(i - <span class="number">1</span>) + <span class="number">1</span>  <span class="comment">// change 1 to i, then counting...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>: iload_1                                      | 从局部变量 <span class="number">1</span> 中装载 int 类型值</span><br><span class="line"><span class="number">1</span>: iconst_1                                     | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">2</span>: if_icmpne       <span class="number">7</span>                            | 若栈顶两 int 类型值前小于等于后则跳转</span><br><span class="line"><span class="number">5</span>: iconst_1                                     | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">6</span>: ireturn                                      | 返回 int 类型值</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>: aload_0                                      | 从局部变量 <span class="number">0</span> 中装载引用类型值</span><br><span class="line"><span class="number">8</span>: iload_1                                      | 从局部变量 <span class="number">1</span> 中装载 int 类型值</span><br><span class="line"><span class="number">9</span>: iconst_1                                     | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">10</span>: isub                                        | 将栈顶两 int 类型数相减，结果入栈</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>: invokevirtual   #<span class="number">24</span>  <span class="comment">// Method rec:(I)I     | 运行时按照对象的类来调用实例方法</span></span><br><span class="line"><span class="number">14</span>: iconst_1                                    | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">15</span>: iadd                                        | 将栈顶两 int 类型数相加，结果入栈</span><br><span class="line"><span class="number">16</span>: ireturn                                     | 返回 int 类型值</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 万次递归，耗时 <span class="number">1</span> ms，速度低下的同时，超过一定数量（≈<span class="number">14940</span>），还会报错 <span class="type">StackOverflowError</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@tailrec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tailRec</span></span>(i: <span class="type">Int</span>, iterator: <span class="type">Int</span>): <span class="type">Int</span> =</span><br><span class="line">  <span class="keyword">if</span> (iterator &gt; <span class="number">0</span>) tailRec(i + <span class="number">1</span>, iterator - <span class="number">1</span>) <span class="keyword">else</span> i</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>: iload_2                | 从局部变量 <span class="number">2</span> 中装载 int 类型值入栈</span><br><span class="line"><span class="number">1</span>: iconst_0               | <span class="number">0</span>(int) 值入栈</span><br><span class="line"><span class="number">2</span>: if_icmple       <span class="number">16</span>     | 若栈顶两 int 类型值前小于等于后则跳转</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>: iload_1                | 从局部变量 <span class="number">1</span> 中装载 int 类型值入栈</span><br><span class="line"><span class="number">6</span>: iconst_1               | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">7</span>: iadd                   | 将栈顶两 int 类型数相加，结果入栈</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>: iload_2                | 从局部变量 <span class="number">2</span> 中装载 int 类型值入栈</span><br><span class="line"><span class="number">9</span>: iconst_1               | <span class="number">1</span>(int) 值入栈</span><br><span class="line"><span class="number">10</span>: isub                  | 将栈顶两 int 类型数相减，结果入栈</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>: istore_2              | 将栈顶 int 类型值保存到局部变量 <span class="number">2</span> 中</span><br><span class="line"><span class="number">12</span>: istore_1              | 将栈顶 int 类型值保存到局部变量 <span class="number">1</span> 中</span><br><span class="line"><span class="number">13</span>: goto            <span class="number">0</span>     | 无条件跳转到指定位置</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>: iload_1               | 从局部变量 <span class="number">1</span> 中装载 int 类型值入栈</span><br><span class="line"><span class="number">17</span>: ireturn               | 返回 int 类型值</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> 亿次尾递归，大约 <span class="number">1</span> ms</span><br></pre></td></tr></tbody></table></figure>
<p>　通过以上 <a href="https://yuzhouwan.com/posts/18651/">Scala</a> 代码 和 对应的 Bytecode 可以分析得出，<a href="https://en.wikipedia.org/wiki/Tail_call">尾递归</a> 作为递归的一种特殊情况，既保证了 代码的 <strong>简洁性</strong></p>
<p>　也因为，尾递归的调用处于函数的末尾，之前函数累计下的所有信息都可以抹除掉。不需要像递归一样，在每次调用之后，都要存储 寄存器值、返回地址 等信息，从而可以避免 栈空间上的消耗，即同时保证了程序的 <strong>高效性</strong></p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/scala/com/yuzhouwan/hacker/jit">here</a>.</p>
<h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><h4 id="ReentrantReadWriteLock-锁的公平性"><a href="#ReentrantReadWriteLock-锁的公平性" class="headerlink" title="ReentrantReadWriteLock 锁的公平性"></a>ReentrantReadWriteLock 锁的公平性</h4><p>　提到并发编程，里面可以涉及的东西，包括 线程、锁、多线程、互斥同步、并行、并发（模型）、线程安全、内存模型 等等，足以写成好几本书。但是，这里我们只就一点来讨论，ReentrantReadWriteLock 锁的公平性</p>
<p>　首先，我们需要明确 公平锁（Fair）和 非公平锁（Nonfair）两者在锁机制上有什么区别？前者，加锁前检查是否有排队等待的线程，优先执行已经在排队等待的线程，保证先来先得；后者，则是加锁时不考虑队列中等待的线程，直接尝试获取锁，获取不到再加到队尾等待</p>
<p>　因此，重入读写锁默认的 <strong>非公平锁</strong>，可以避免 ReentrantLock 独占锁带来的吞吐量问题</p>
<p>　那么，进一步思考之后，新问题来了：在什么样的场景下，ReentrantReadWriteLock 的公平锁反而会是更佳的选择呢，为什么，又该怎么做？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockFairness</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Lock FAIR_LOCK = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">static</span> Lock UNFAIR_LOCK = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Fairness</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> Lock lock;</span><br><span class="line"></span><br><span class="line">        Fairness(Lock lock) {</span><br><span class="line">            <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    System.out.print(Thread.currentThread().getName());</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公平锁，很少会连续获取到锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 0 0 0 0 0 1 2 4 3 1 2 4 3 1 2 4 3 1 2 4 3 1 2 4 3</span></span><br><span class="line"><span class="comment"> * 0 1 0 1 0 1 0 1 4 0 1 4 4 4 4 2 2 2 2 2 3 3 3 3 3</span></span><br><span class="line"><span class="comment"> * 1 0 2 4 3 1 0 2 4 3 1 0 2 4 3 1 0 2 4 3 1 0 2 4 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fair</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    Thread thread;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">        thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ReentrantLockFairness.Fairness(ReentrantLockFairness.FAIR_LOCK));</span><br><span class="line">        thread.setName(i + <span class="string">" "</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 相比公平锁，非公平锁 能经常性地连续获取到锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 0 0 0 0 0 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 4 4 4 4 4</span></span><br><span class="line"><span class="comment"> * 0 0 2 2 2 2 2 4 4 4 4 4 1 1 1 1 1 0 0 0 3 3 3 3 3</span></span><br><span class="line"><span class="comment"> * 1 1 1 1 1 4 4 4 4 4 0 0 0 0 0 2 2 2 2 2 3 3 3 3 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unfair</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    Thread thread;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">        thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ReentrantLockFairness.Fairness(ReentrantLockFairness.UNFAIR_LOCK));</span><br><span class="line">        thread.setName(i + <span class="string">" "</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　实际在使用的时候，公平锁 只需要在构造参数中设置即可，内部 <strong>AQS</strong>（<strong>A</strong>bstract<strong>Q</strong>ueued<strong>S</strong>ynchronizer）中，利用 相对 ALock 而言空间复杂度更低的 <strong>CLH 队列锁</strong> 来实现公平性</p>
<p>　同时，共享锁 和 独占锁 分别实现了 读写操作，从而读操作之间是没有竞争冲突的，因此 ReentrantReadWriteLock 的最适场景是 <strong>读多于写</strong></p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/algorithms/thread/lock/ReentrantLockFairness.java">here</a> and <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/algorithms/thread/lock/ReentrantLockFairnessTest.java">here</a>.</p>
<h4 id="synchronized-的性能之争"><a href="#synchronized-的性能之争" class="headerlink" title="synchronized 的性能之争"></a>synchronized 的性能之争</h4><p>　在低并发的情况下（$threads \lt 4$），高版本的 JDK 里面 synchronized 实现同步的性能更高。超过 15 个线程之后，则建议使用 <a href="https://yuzhouwan.com/posts/27328/#并发编程">ReentrantLock</a> 可重入锁进行并发控制</p>
<p>　如果可以使用 <a href="https://yuzhouwan.com/posts/31130/#ConcurrentHashMap-如何实现线程安全">ConcurrentHashMap</a> / <a href="https://yuzhouwan.com/posts/31915/#LongAdder">LongAdder</a>（分段锁）实现的应用场景，则尽量避免使用 synchronized 进行实现</p>
<p>　另一方面，synchonrized 方法适用于重复 “释放锁，又获取锁” 的场景。我们可以利用 synchronized 的方法块使得锁，一直被持有，从而提高性能。例如，下面这个 StringBuffer 的场景，增加了 synchronized 块之后，可以使得性能与 StringBuilder 几乎无异</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">synchronized</span> (buffer) {</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999</span>; i++) {</span><br><span class="line">    buffer.append(i);</span><br><span class="line">    buffer.delete(<span class="number">0</span>, buffer.length() - <span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/algorithms/thread/sync/StringBufferTest.java">here</a>.<br>Tips: ConcurrentHashMap：Java 7 基于分段锁，Java 8 基于 CAS</p>
<h2 id="参数调优层面"><a href="#参数调优层面" class="headerlink" title="参数调优层面"></a>参数调优层面</h2><h3 id="TimeSort"><a href="#TimeSort" class="headerlink" title="TimeSort"></a>TimeSort</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>　这里，列举技术群（群号见本文末尾）里讨论过的一个问题：ResourceManager crash because TimSort [<a href="https://issues.apache.org/jira/browse/YARN-4743">YARN-4743</a>]</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>　依据报错信息，可定位出 Yarn 中 MergeSort 存在问题。随后，怀疑是 JDK7 中为了修复 JDK 本身的漏洞：比较器里面比较的两个值时，如果这两个值同时为空的话，则传入的顺序将决定比较的结果，因而破坏了比较器的 “传递性”。从而，使用 TimSort 替换了默认的 MergeSort 增强了 Comparator 的实现约束。更多可参见 Oracle 官网上已修复的 bugs 的归档列表：<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6804124">JDK-6804124</a> : Replace “modified mergesort” in java.util.Arrays.sort with timsort</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>　最快的解决方式，便是屏蔽 JDK7 中新增的 “传递性” 检查（其实是一种倒退）。具体方式为，在 JVM 中配置 <code>java.util.Arrays.useLegacyMergeSort=true</code>，或者，在程序中设置对应的环境变量 <code>System.setProperty("java.util.Arrays.useLegacyMergeSort", "true")</code></p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>　最终，该问题在 Hadoop3.x 中得到解决，官方修复了传递性问题，使其满足 TimSort 的规范</p>
<h3 id="G1GC"><a href="#G1GC" class="headerlink" title="G1GC"></a>G1GC</h3><p>　详见：《<a href="https://yuzhouwan.com/posts/31915/#G1GC">ZooKeeper 原理与优化 - G1GC</a>》</p>
<h3 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h3><p>　详见：《<a href="https://yuzhouwan.com/posts/31915/#LongAdder">ZooKeeper 原理与优化 - LongAdder</a>》</p>
<h3 id="AlwaysPreTouch"><a href="#AlwaysPreTouch" class="headerlink" title="AlwaysPreTouch"></a>AlwaysPreTouch</h3><p>　详见：《<a href="https://yuzhouwan.com/posts/31915/#swappiness">ZooKeeper 原理与优化 - swappiness</a>》</p>
<h2 id="语种层面"><a href="#语种层面" class="headerlink" title="语种层面"></a>语种层面</h2><p>　在不同应用场景下，我们要如何选择出合适的 JVM 语言，来满足各种各样的开发需求呢？</p>
<p>　一方面，我们可能需要 Java、<a href="https://yuzhouwan.com/posts/18651/">Scala</a> 此类静态编译的语言，通过编译时检查，来保证代码的安全性和一致性；而另一方面，则希望能够借助 JPython、Groovy 此类的动态语言，快速开发出我们想要的功能。下面，我们举两个比较常见的场景</p>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><p>　其一，利用 Scala 的表达性来编写 <strong>Scala Tester</strong>，使得单元测试的代码，更具有可读性</p>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DefineA</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) {</span><br><span class="line">    bigMistake()</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DefineAnnotation</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bigMistake</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"bigMistake..."</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitTestStyle</span> <span class="keyword">extends</span> <span class="title">FlatSpec</span></span></span><br><span class="line">  <span class="keyword">with</span> <span class="type">Matchers</span> <span class="keyword">with</span> <span class="type">OptionValues</span> <span class="keyword">with</span> <span class="type">Inside</span> <span class="keyword">with</span> <span class="type">Inspectors</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefineATest</span> <span class="keyword">extends</span> <span class="title">UnitTestStyle</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="string">"DefineA's bigMistake method"</span> should <span class="string">"output a information"</span> in {</span><br><span class="line">    <span class="keyword">new</span> <span class="type">DefineA</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-bigdata/yuzhouwan-bigdata-spark/src/test/scala/com/yuzhouwan/bigdata/spark">here</a>.</p>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><p>　其二，利用 Groovy 的简洁语法、开放类特性等，来完成 <strong>DSL</strong></p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> invokeMethod(String name, args) {</span><br><span class="line">  print <span class="string">"&lt;${name}"</span></span><br><span class="line">  args.each {</span><br><span class="line">    arg -&gt;</span><br><span class="line">      <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Map) {</span><br><span class="line">        arg.each {</span><br><span class="line">          print <span class="string">" ${it.key} ='${it.value}' "</span></span><br><span class="line">        }</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Closure) {</span><br><span class="line">        print <span class="string">'&gt;'</span></span><br><span class="line">        arg.delegate = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">def</span> value = arg.call()</span><br><span class="line">        <span class="keyword">if</span> (value) {</span><br><span class="line">          print <span class="string">"${value}"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  println <span class="string">"&lt;/${name}&gt;"</span></span><br><span class="line">}</span><br><span class="line">html {</span><br><span class="line">  head {</span><br><span class="line">    meta {</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  body {</span><br><span class="line">    table(<span class="attr">style:</span> <span class="string">'margin:2px;'</span>) {</span><br><span class="line">      tr(<span class="string">'class'</span>: <span class="string">'trClass'</span>, <span class="attr">style:</span> <span class="string">'padding:2px;'</span>) {</span><br><span class="line">        td { <span class="string">'http://'</span> }</span><br><span class="line">        td { <span class="string">'yuzhouwan.'</span> }</span><br><span class="line">        td { <span class="string">'com'</span> }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/groovy/com/yuzhouwan/hacker/dsl">here</a>.</p>
<h2 id="内部机制"><a href="#内部机制" class="headerlink" title="内部机制"></a>内部机制</h2><h3 id="实时-GC-的原理"><a href="#实时-GC-的原理" class="headerlink" title="实时 GC 的原理"></a>实时 GC 的原理</h3><p>　首先，需要明确定义什么是实时 GC（RTGC，Real-time Collection），即真正的 RTGC 要求对 GC 中 Mutator 赋值器的中断进行精确的控制</p>
<p>　常见的回收器 和 实时 GC 调度策略，有如下实现：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">回收器 Collector</th>
<th style="text-align:center">工作机制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">万物静止式回收器 Stop-the-world collector</td>
<td style="text-align:center">Mutator 在内存分配，发现内存不足时，发起 GC</td>
</tr>
<tr>
<td style="text-align:left">增量式回收器 Incremental collector</td>
<td style="text-align:center">要求 Mutator 不仅在内存分配时，还需要在 访问堆（<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C">利用 “读写屏障” 的部分有序 来提高性能</a>）的时候检查是否需要发起 GC</td>
</tr>
<tr>
<td style="text-align:left">并发回收器 Concurrent collector</td>
<td style="text-align:center">GC 与 Mutator 的工作 并发执行</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">GC 调度 Scheduling</th>
<th style="text-align:center">调度机制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">基于工作的调度 Work-based scheduling</td>
<td style="text-align:center">按照 Mutator 的每个工作单元分配 GC 任务</td>
</tr>
<tr>
<td style="text-align:left">基于间隙的调度 Slack-based scheduling</td>
<td style="text-align:center">实时任务的调度间隙完成 GC</td>
</tr>
<tr>
<td style="text-align:left">基于时间的调度 Time-based scheduling</td>
<td style="text-align:center">预留出独占式的 GC 时间</td>
</tr>
<tr>
<td style="text-align:left">整合式的调度 <code>税收与开支</code> 策略 Tax-and-Spend</td>
<td style="text-align:center">允许不同的线程可以有着不同的 Mutator 使用率，通过线程分配的弹性，尽可能地减少线程中断</td>
</tr>
</tbody>
</table>
</div>
<p>　实际上，对吞吐量的提高 和 时间窗口、延时的缩小，在 Tax-and-Spend 调度策略 应用到 <a href="http://researcher.ibm.com/researcher/files/us-hindm/Bacon.pdf">Metronome 回收器</a> 之后，得以证实</p>
<h3 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h3><p><img data-src="/picture/jvm/jvm_sandbox.jpg" alt=""></p>
<center>（利用 <a href="https://github.com/staruml" target="_blank">StarUML</a>™ 绘制而成）</center>





<h3 id="ClassLoader-隔离"><a href="#ClassLoader-隔离" class="headerlink" title="ClassLoader 隔离"></a>ClassLoader 隔离</h3><p>　初步了解 JVM 沙箱的原理之后，我们便可以尝试解决一些安全性相关的问题了。下面以大型项目中，经常会遇到的依赖冲突问题为例。介绍一种以 ClassLoader 隔离来解决该问题的方式</p>
<h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>　<a href="https://yuzhouwan.com/posts/5845/">Apache Druid</a> 中 com.sun.jersey（1.19）和 Dataflow 中 org.glassfish.jersey（2.25.1）冲突问题</p>
<p>Tips: Dataflow 是自研的、类似于 <a href="https://yuzhouwan.com/posts/26002/#Kafka-Connect">Kafka Connect</a> 的框架</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>　Apache Druid 中升级 Jersey（但是大面积改动开源社区的代码，不利于后期升级与维护）</p>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>　降级 Dataflow 中的 Jersey（后续再接入其他的组件，Jersey 又不一样了，又该如何协调；降级后，可能部分功能不支持；改造的工作量也不小）</p>
<h5 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h5><p>　使用其他的 RESTful 组件（Dropwizard / Ninja / Play / RestExpress / Restlet / Restx / SpringBoot / RestEasy 等）</p>
<p>　简单调研后，首选 RestEasy，不像 SpringBoot 那么重，比 Jersey 性能更好</p>
<h5 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h5><p>　把 Dataflow 里面的依赖，都用 shade 隐藏起来，可以彻底解决和其他接入组件的依赖冲突的问题，避免后续又发现除了 Jersey 其他的冲突</p>
<p>　同时，因为 glassfish 里面存在类似 <code>public static class Builder implements javax.ws.rs.client.Invocation.Builder</code> 全限定名的写法，是无法被 shade 的，所以只能 shade 去隐藏 <code>com.sun.jersey</code></p>
<p>Tips: Shade 插件的具体使用方法，详见《<a href="https://yuzhouwan.com/posts/2254/#Shade-插件解决-Jar-多版本共存">Maven 高级玩法</a>》</p>
<h5 id="方案五"><a href="#方案五" class="headerlink" title="方案五"></a>方案五</h5><p>　使用 ClassLoader 或者 OSGi 进行隔离（同时，还可以将 Dataflow 里面的 K2H / K2ES / K2D 组件做成 <strong>热部署</strong>）</p>
<p>　另外，前不久刚 release 的 Java 9 中的模块化，也可以完成组件隔离的工作。不过，考虑到需要保证生产级应用的 SLA 要求，暂不采用（截止 2018-6-5 <a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html">JDK 9</a> 最新 release 版本为 v9.0.4）</p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClassLoader</td>
<td>实现简单</td>
<td>复杂功能，实现相对困难</td>
</tr>
<tr>
<td>OSGi</td>
<td>OSGi 规范有很多成熟的框架；<br>轻松实现模块化，插件式加载卸载组件；<br>支持热部署</td>
<td>框架过重，容易引入风险</td>
</tr>
<tr>
<td>Java 9 Module</td>
<td>从 JVM 内核层面对模块化进行支持</td>
<td>目前尚未成熟</td>
</tr>
</tbody>
</table>
</div>
<h4 id="编码实战"><a href="#编码实战" class="headerlink" title="编码实战"></a>编码实战</h4><h5 id="组件拆分"><a href="#组件拆分" class="headerlink" title="组件拆分"></a>组件拆分</h5><p>Tips: 如何利用 assembly 插件对项目进行组件拆分，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/2254/#Assembly-插件">Maven 高级玩法</a>》</p>
<h5 id="判断是否为父子类关系"><a href="#判断是否为父子类关系" class="headerlink" title="判断是否为父子类关系"></a>判断是否为父子类关系</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 如果是由不同的 ClassLoader 加载的，即使是父子类关系，仍然无法做类型转换</span></span><br><span class="line"><span class="comment">// 不过可以通过 序列化 / 反序列化 的方式，绕过这个问题</span></span><br><span class="line">assertEquals(<span class="keyword">true</span>, A.class.isAssignableFrom(B.class));</span><br><span class="line">assertEquals(<span class="keyword">true</span>, B.class.isAssignableFrom(C.class));</span><br><span class="line">assertEquals(<span class="keyword">true</span>, A.class.isAssignableFrom(C.class));</span><br><span class="line">assertEquals(<span class="keyword">true</span>, A.class.getClassLoader().equals(B.class.getClassLoader()));</span><br><span class="line">assertEquals(<span class="keyword">true</span>, B.class.getClassLoader().equals(C.class.getClassLoader()));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>{</span><br><span class="line">}</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>{</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/jvm/ClassTest.java#L18">here</a>.</p>
<h5 id="子类强转为父类"><a href="#子类强转为父类" class="headerlink" title="子类强转为父类"></a>子类强转为父类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> failed = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    B b = (B) C.class.newInstance();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">    failed = <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">assertEquals(<span class="keyword">false</span>, failed);</span><br><span class="line">failed = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    C c = (C) B.class.newInstance();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">    failed = <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">assertEquals(<span class="keyword">true</span>, failed);</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/jvm/ClassTest.java#L35">here</a>.</p>
<h5 id="对不同-ClassLoader-下的类进行类型强转"><a href="#对不同-ClassLoader-下的类进行类型强转" class="headerlink" title="对不同 ClassLoader 下的类进行类型强转"></a>对不同 ClassLoader 下的类进行类型强转</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">currentThread().setContextClassLoader(newClassLoader);</span><br><span class="line"><span class="keyword">try</span> (ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">     ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos)) {</span><br><span class="line">    oos.writeObject(clazz.newInstance());</span><br><span class="line">    <span class="keyword">try</span> (ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">         ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais) {</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) {</span><br><span class="line">                 String name = desc.getName();</span><br><span class="line">                 <span class="keyword">try</span> {</span><br><span class="line">                     <span class="comment">// 这里需要覆写 resolveClass 方法，否则默认会在 readObject 的时候，</span></span><br><span class="line">                     <span class="comment">// 用 sun.misc.VM#latestUserDefinedLoader 对 Class 进行解析判断，</span></span><br><span class="line">                     <span class="comment">// 并报错 “无法进行类型强转”</span></span><br><span class="line">                     <span class="keyword">return</span> Class.forName(name, <span class="keyword">false</span>, newClassLoader);</span><br><span class="line">                 } <span class="keyword">catch</span> (ClassNotFoundException ex) {</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">                 }</span><br><span class="line">             }</span><br><span class="line">         }) {</span><br><span class="line">        <span class="keyword">return</span> newClassLoader.loadClass(DataflowBase.class.getName()).cast(ois.readObject());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="自定义-ClassLoader"><a href="#自定义-ClassLoader" class="headerlink" title="自定义 ClassLoader"></a>自定义 ClassLoader</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginClassLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JAR_POSTFIX = <span class="string">".jar"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_PROTOCOL_FILE = <span class="string">"file"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        ClassLoader.registerAsParallelCapable();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginClassLoader</span><span class="params">(ClassLoader parent, String... jarPaths)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> URL[]{}, parent);</span><br><span class="line">        <span class="keyword">for</span> (String jarPath : jarPaths) loadJar(jarPath);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginClassLoader</span><span class="params">(String... jarPaths)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> URL[]{}, <span class="keyword">null</span>);   <span class="comment">// MUST NOT: set parent classLoader as null!</span></span><br><span class="line">        <span class="keyword">for</span> (String jarPath : jarPaths) loadJar(jarPath);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line"><span class="comment">//        System.out.println(String.format("Loading class: %s...", name));</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br><span class="line">            <span class="keyword">return</span> PluginClassLoader.class.getClassLoader().loadClass(name);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadJar</span><span class="params">(String dirPath)</span> </span>{</span><br><span class="line">        File dir = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists() || !dir.isDirectory()) <span class="keyword">return</span>;</span><br><span class="line">        File[] files;</span><br><span class="line">        <span class="keyword">if</span> ((files = dir.listFiles()) == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (File file : files) {</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span> || !file.isFile() || !file.getName().endsWith(JAR_POSTFIX)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">this</span>.addURL(file);</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line"><span class="comment">//                e.printStackTrace();    // skip failed url.</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addURL</span><span class="params">(File file)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">super</span>.addURL(<span class="keyword">new</span> URL(URL_PROTOCOL_FILE, <span class="keyword">null</span>, file.getCanonicalPath()));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"Cannot add url [%s]!"</span>, file.getAbsolutePath()), e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="主体逻辑"><a href="#主体逻辑" class="headerlink" title="主体逻辑"></a>主体逻辑</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 ClassLoader 的反射进行对象初始化</span></span><br><span class="line"><span class="comment">// 并使用对象流，避免不同 ClassLoader 之间类型转换的问题</span></span><br><span class="line">(String type) -&gt; AccessController.&lt;AbstractBean&gt;doPrivileged(</span><br><span class="line"> (PrivilegedAction) () -&gt; {</span><br><span class="line">     ClassLoader old = currentThread().getContextClassLoader();</span><br><span class="line">     <span class="keyword">try</span> {</span><br><span class="line">         Class&lt;? extends AbstractBean&gt; parse = (Class&lt;? extends AbstractBean&gt;) AbstractBean.parse(type);</span><br><span class="line">         <span class="keyword">final</span> PluginClassLoader plugin = PluginUtils.CLASSLOADERS.get(type);</span><br><span class="line">         currentThread().setContextClassLoader(plugin);</span><br><span class="line">         <span class="keyword">try</span> (ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">              ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos)) {</span><br><span class="line">             oos.writeObject(parse.newInstance());</span><br><span class="line">             <span class="keyword">try</span> (ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">                  ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais) {</span><br><span class="line">                      <span class="meta">@Override</span></span><br><span class="line">                      <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) {</span><br><span class="line">                          String name = desc.getName();</span><br><span class="line">                          <span class="keyword">try</span> {</span><br><span class="line">                              <span class="keyword">return</span> Class.forName(name, <span class="keyword">false</span>, plugin);</span><br><span class="line">                          } <span class="keyword">catch</span> (ClassNotFoundException ex) {</span><br><span class="line">                              <span class="keyword">throw</span> <span class="keyword">new</span> FmException(ex);</span><br><span class="line">                          }</span><br><span class="line">                      }</span><br><span class="line">                  }) {</span><br><span class="line">                 Object readObj = ois.readObject();</span><br><span class="line">                   <span class="keyword">return</span> (AbstractBean) readObj;</span><br><span class="line">                 <span class="keyword">return</span> plugin.loadClass(AbstractBean.class.getName()).cast(readObj);</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">     } <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | IOException | ClassNotFoundException e) {</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">     } <span class="keyword">finally</span> {</span><br><span class="line">         <span class="keyword">if</span> (old != <span class="keyword">null</span>) currentThread().setContextClassLoader(old);</span><br><span class="line">     }</span><br><span class="line"> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断传入的 type 类型是否是合法的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; parse(String type) <span class="keyword">throws</span> FmException {</span><br><span class="line">    Type subType = Type.OTHER;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        subType = Type.valueOf(type.toUpperCase(Locale.ENGLISH));</span><br><span class="line">    } <span class="keyword">catch</span> (IllegalArgumentException ignored) {</span><br><span class="line">    }</span><br><span class="line">    String className = type;</span><br><span class="line">    <span class="keyword">if</span> (!Type.OTHER.equals(subType)) className = subType.getTypeName();</span><br><span class="line">    <span class="keyword">return</span> PluginUtils.parseType(type, className, AbstractBean.class);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依据 type 类型加载指定目录下的依赖包，并加载对应的 class</span></span><br><span class="line"><span class="meta">@SuppressWarnings("unchecked")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Class&lt;?&gt; parseType(String type, String className, Class&lt;T&gt; base) <span class="keyword">throws</span> FmException {</span><br><span class="line">    ClassLoader oldClassLoader = currentThread().getContextClassLoader();</span><br><span class="line">    ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        PluginClassLoader pc;</span><br><span class="line">        <span class="keyword">if</span> (!CLASSLOADERS.containsKey(type))</span><br><span class="line">            pc = <span class="keyword">new</span> PluginClassLoader(<span class="comment">/*oldClassLoader*/</span>systemClassLoader,</span><br><span class="line">                    getPluginPathByTypeName(type), getCommonPath());</span><br><span class="line">        <span class="keyword">else</span> pc = CLASSLOADERS.get(type);</span><br><span class="line">        currentThread().setContextClassLoader(pc);</span><br><span class="line">        Class&lt;?&gt; baseClazz = pc.loadClass(base.getName());</span><br><span class="line">        Class&lt;?&gt; subClazz = pc.loadClass(className);</span><br><span class="line">        <span class="keyword">if</span> (baseClazz.isAssignableFrom(subClazz)) {</span><br><span class="line">            CLASSLOADERS.put(type, pc);</span><br><span class="line">            <span class="keyword">return</span> subClazz;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"Class %s is not a child of %s!"</span>, className, base.getName()));</span><br><span class="line">    } <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to load type: "</span>.concat(className), e);</span><br><span class="line">    }<span class="comment">/* finally {</span></span><br><span class="line"><span class="comment">        currentThread().setContextClassLoader(oldClassLoader);</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/jvm/classloader">here</a>.</p>
<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>　内存模型中，主要的组成分为 <strong>主内存</strong> 和 <strong>工作内存</strong> 两部分（线程访问工作内存，工作内存通过 8 种原子性的操作，来和主内存交互），特性包括 <strong>原子性</strong>、<strong>可见性</strong> 和 <strong>有序性</strong>（其中，有序性 由 volatile / synchronized / happens-before 原则 来保证）</p>
<p><img data-src="/picture/jvm/jvm.png" alt=""></p>
<center>（利用 <a href="https://products.office.com/en-us/visio/visio-online" target="_blank">Visio</a>™ 绘制而成）</center>



<p><br></p>
<p>　相信熟知 JVM 相关知识，对于提升日常编程水平，还有很多方面可以探索。限于本人有限的水平，暂时只能总结出以上几点。希望此文能起到抛砖引玉的作用，期待各位精彩的观点和建议 ^_^</p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Groovy</tag>
        <tag>Scala</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>梳理微积分知识体系</title>
    <url>/posts/200726/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="93b351881f945c4fa43fea9e4d8efb24eb277b55029b05d4ceb138b031baabec"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>LaTeX</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
        <tag>Mathematica</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache HBase 全攻略</title>
    <url>/posts/45888/</url>
    <content><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Coprocessor"><a href="#Coprocessor" class="headerlink" title="Coprocessor"></a>Coprocessor</h3><p>　<code>Coprocessor</code> 其实是一个类似 <code>MapReduce</code> 的分析组件，不过它极大简化了 <code>MapReduce</code> 模型。将请求独立地在各个 <code>Region</code> 中并行地运行，并提供了一套框架让用户灵活地自定义 <code>Coprocessor</code></p>
<h4 id="编程技巧"><a href="#编程技巧" class="headerlink" title="编程技巧"></a>编程技巧</h4><h5 id="充分利用好-CellUtil"><a href="#充分利用好-CellUtil" class="headerlink" title="充分利用好 CellUtil"></a>充分利用好 CellUtil</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 直接使用 byte[] 进行匹配，效率会更高</span></span><br><span class="line"><span class="comment">// Bad: cf.equals(Bytes.toString(CellUtil.cloneFamily(cell)))</span></span><br><span class="line">CellUtil.matchingFamily(cell, cf) &amp;&amp; CellUtil.matchingQualifier(cell, col)</span><br><span class="line"><span class="comment">// 同理，应尽量使用 `Bytes.equals`，来替代 `String#equals`</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="发挥好协处理的并行计算能力"><a href="#发挥好协处理的并行计算能力" class="headerlink" title="发挥好协处理的并行计算能力"></a>发挥好协处理的并行计算能力</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 某些很难使得表数据分布均匀的场景下，可以设置好预分区 [00, 01, 02, ..., 99]，并关闭自动分区（详见：常见命令-分区），则可保证每个 Region 上的只有单个 xx 前缀。这样，导表数据的时候，轮询地在 rowkey 前加上 xx 前缀，则可保证无热点 Region</span></span><br><span class="line"><span class="comment">// 在协处理器的程序中，则可先获取到 xx 前缀，并在构建 Scan 的时候，将前缀加在 startKey/endKey 前面即可</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getStartKeyPrefix</span><span class="params">(HRegion region)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (region == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Region is null!"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] startKey = region.getStartKey();</span><br><span class="line">    <span class="keyword">if</span> (startKey == <span class="keyword">null</span> || startKey.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"00"</span>;</span><br><span class="line">    String startKeyStr = Bytes.toString(startKey);</span><br><span class="line">    <span class="keyword">return</span> isEmpty(startKeyStr) ? <span class="string">"00"</span> : startKeyStr.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="处理好协处理器程序里的异常"><a href="#处理好协处理器程序里的异常" class="headerlink" title="处理好协处理器程序里的异常"></a>处理好协处理器程序里的异常</h5><p>　如果在协处理器里面有异常被抛出，并且 <code>hbase.coprocessor.abortonerror</code> 参数没有开启，那么，该协处理器会直接从被加载的环境中被删除掉。否则，则需要看异常类型，如果是 <code>IOException</code> 类型，则会直接被抛出；如果是 <code>DoNotRetryIOException</code> 类型，则不做重试，抛出异常。否则，默认将会尝试 10 次 （硬编码在 <code>AsyncConnectionImpl#RETRY_TIMER</code> 中了）。因此需要依据自己的业务场景，对异常做好妥善的处理</p>
<h5 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 只能使用 Apache Commons 的 Log 类，否则将无法打印</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CoprocessorImpl.class.getName());</span><br></pre></td></tr></tbody></table></figure>
<h4 id="加载协处理器"><a href="#加载协处理器" class="headerlink" title="加载协处理器"></a>加载协处理器</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 先上传 coprocessor 处理器 jar 包</span></span><br><span class="line">$ hadoop fs -copyFromLocal /home/hbase/script/coprocessor-0.0.1.jar hdfs://yuzhouwan/hbase/coprocessor/</span><br><span class="line">$ hadoop fs -ls hdfs://yuzhouwan/hbase/coprocessor/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载旧的 coprocessor</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, METHOD =&gt; <span class="string">'table_att_unset'</span>, NAME =&gt;<span class="string">'coprocessor$1'</span></span><br><span class="line"><span class="comment"># 指定新的 coprocessor</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, METHOD =&gt; <span class="string">'table_att'</span>, <span class="string">'coprocessor'</span> =&gt; <span class="string">'hdfs://yuzhouwan/hbase/coprocessor/coprocessor-0.0.1.jar|com.yuzhouwan.hbase.coprocessor.Aggregation|111|'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过查看 RegionServer 的日志，可观察协处理器的运行状况</span></span><br><span class="line"><span class="comment"># jar 路径后的 111 指的是 coprocessor 执行的优先级 {@link Coprocessor.Priority}</span></span><br><span class="line"><span class="comment"># 最后一个分隔符后面，可以传参给 coprocessor，多个参数用逗号分隔 (e.g. k=v,k1=v1)</span></span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>　网上相关资料很多，这里就不过多介绍了，可以参考另一篇文章：<a href="https://yuzhouwan.com/posts/39683/#HBase-部署">《Apache Eagle 深度调研 - HBase 部署》</a></p>
<h3 id="连接远程-HBase"><a href="#连接远程-HBase" class="headerlink" title="连接远程 HBase"></a>连接远程 HBase</h3><h4 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line"><span class="comment"># AuthParam 后的值，是通过访问 JDK 的 archive 页面，登录 Oracle 账户后获取到的</span></span><br><span class="line"><span class="comment"># https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html</span></span><br><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-i586.tar.gz?AuthParam=1662888566_e28ea6d8c6365f1157471fa9369ee4e1 -O /opt/jdk-8u191-linux-x64.tar.gz</span><br><span class="line">$ tar zxvf /opt/jdk-8u191-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">$ ln -s jdk-8u191/ java</span><br><span class="line"></span><br><span class="line">$ wget http://archive.apache.org/dist/hbase/1.4.9/hbase-1.4.9-bin.tar.gz</span><br><span class="line">$ tar zxvf hbase-1.4.9-bin.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">$ ln -s hbase-1.4.9/ hbase</span><br><span class="line"></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line">  <span class="built_in">export</span> HBASE_HOME=/usr/<span class="built_in">local</span>/hbase</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ java -version</span><br><span class="line">$ hbase version</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 首先将本机 IP 设置到远程 HBase 访问白名单中，并通过 telnet 命令，检查是否能访问到 zk 的 2181 默认端口</span></span><br><span class="line">$ telnet yuzhouwan_zk_01 2181</span><br><span class="line"></span><br><span class="line">$ vim conf/hbase-site.xml</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;yuzhouwan_zk_01:2181,yuzhouwan_zk_02:2181,yuzhouwan_zk_03:2181&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;zookeeper.znode.parent&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/hbase&lt;/value&gt; </span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">$ hbase shell</span><br></pre></td></tr></tbody></table></figure>
<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><h4 id="lib-ld-linux-so-2-bad-ELF-interpreter-No-such-file-or-directory"><a href="#lib-ld-linux-so-2-bad-ELF-interpreter-No-such-file-or-directory" class="headerlink" title="/lib/ld-linux.so.2: bad ELF interpreter: No such file or directory"></a>/lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>　缺少 ELF 解释器的问题，只有在 64 位系统上才会发生。原因是系统中缺少 32 位库，而有些脚本或程序需要用到它们，所以报错</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># For yum</span></span><br><span class="line">$ yum install glibc.i686</span><br><span class="line"></span><br><span class="line"><span class="comment"># For apt-get</span></span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install ia32-libs</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="集群相关"><a href="#集群相关" class="headerlink" title="集群相关"></a>集群相关</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ su - hbase</span><br><span class="line">$ start-hbase.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMaster    ThriftServer</span></span><br><span class="line">$ jps | grep -v Jps</span><br><span class="line">  32538 ThriftServer</span><br><span class="line">  9383 HMaster</span><br><span class="line">  8423 HRegionServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># BackUp HMaster    ThriftServer</span></span><br><span class="line">$ jps | grep -v Jps</span><br><span class="line">  24450 jar</span><br><span class="line">  21882 HMaster</span><br><span class="line">  2296 HRegionServer</span><br><span class="line">  14598 ThriftServer</span><br><span class="line">  5998 Jstat</span><br><span class="line"></span><br><span class="line"><span class="comment"># BackUp HMaster    ThriftServer</span></span><br><span class="line">$ jps | grep -v Jps</span><br><span class="line">  31119 Bootstrap</span><br><span class="line">  8775 HMaster</span><br><span class="line">  25289 Bootstrap</span><br><span class="line">  14823 Bootstrap</span><br><span class="line">  12671 Jstat</span><br><span class="line">  9052 ThriftServer</span><br><span class="line">  26921 HRegionServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># HRegionServer</span></span><br><span class="line">$ jps | grep -v Jps</span><br><span class="line">  29356 hbase-monitor-process-0.0.3-jar-with-dependencies.jar    <span class="comment"># monitor</span></span><br><span class="line">  11023 Jstat</span><br><span class="line">  26135 HRegionServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">export</span> -p | egrep -i <span class="string">"(hadoop|hbase)"</span></span><br><span class="line">  <span class="built_in">declare</span> -x HADOOP_HOME=<span class="string">"/home/bigdata/software/hadoop"</span></span><br><span class="line">  <span class="built_in">declare</span> -x HBASE_HOME=<span class="string">"/home/bigdata/software/hbase"</span></span><br><span class="line">  <span class="built_in">declare</span> -x PATH=<span class="string">"/usr/local/anaconda/bin:/usr/local/R-3.2.1/bin:/home/bigdata/software/java/bin:/home/bigdata/software/hadoop/bin:/home/bigdata/software/hive/bin:/home/bigdata/software/sqoop/bin:/home/bigdata/software/hbase/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ java -XX:+PrintFlagsFinal -version | grep MaxHeapSize</span><br><span class="line">    uintx MaxHeapSize                              := 32126271488     {product}           <span class="comment"># 29.919921875 GB</span></span><br><span class="line">  java version <span class="string">"1.7.0_60-ea"</span></span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.7.0_60-ea-b15)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ top</span><br><span class="line">  top - 11:37:03 up 545 days, 18:45,  5 users,  load average: 8.74, 10.39, 10.96</span><br><span class="line">  Tasks: 653 total,   1 running, 652 sleeping,   0 stopped,   0 zombie</span><br><span class="line">  Cpu(s): 32.9%us,  0.7%sy,  0.0%ni, 66.3%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st</span><br><span class="line">  Mem:  264484056k total, 260853032k used,  3631024k free,  2235248k buffers</span><br><span class="line">  Swap: 10485756k total, 10485756k used,        0k free, 94307776k cached</span><br><span class="line">  <span class="comment"># Memory: 252 GB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># `hbase classpath` 可以拿到 HBase 相关的所有依赖</span></span><br><span class="line">$ java -classpath ~/opt/hbase/soft/yuzhouwan.jar:`hbase classpath` com.yuzhouwan.hbase.MainApp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage</span></span><br><span class="line">Usage: hbase [&lt;options&gt;] &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line">Options:</span><br><span class="line">  --config DIR    Configuration direction to use. Default: ./conf</span><br><span class="line">  --hosts HOSTS   Override the list <span class="keyword">in</span> <span class="string">'regionservers'</span> file</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">Some commands take arguments. Pass no args or -h <span class="keyword">for</span> usage.</span><br><span class="line">  shell           Run the HBase shell</span><br><span class="line">  hbck            Run the hbase <span class="string">'fsck'</span> tool</span><br><span class="line">  hlog            Write-ahead-log analyzer</span><br><span class="line">  hfile           Store file analyzer</span><br><span class="line">  zkcli           Run the ZooKeeper shell</span><br><span class="line">  upgrade         Upgrade hbase</span><br><span class="line">  master          Run an HBase HMaster node</span><br><span class="line">  regionserver    Run an HBase HRegionServer node</span><br><span class="line">  zookeeper       Run a ZooKeeper server</span><br><span class="line">  rest            Run an HBase REST server</span><br><span class="line">  thrift          Run the HBase Thrift server</span><br><span class="line">  thrift2         Run the HBase Thrift2 server</span><br><span class="line">  clean           Run the HBase clean up script</span><br><span class="line">  classpath       Dump hbase CLASSPATH</span><br><span class="line">  mapredcp        Dump CLASSPATH entries required by mapreduce</span><br><span class="line">  pe              Run PerformanceEvaluation</span><br><span class="line">  ltt             Run LoadTestTool</span><br><span class="line">  version         Print the version</span><br><span class="line">  CLASSNAME       Run the class named CLASSNAME</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hbase版本信息</span></span><br><span class="line">$ hbase version</span><br><span class="line">  2017-01-13 11:05:07,580 INFO  [main] util.VersionInfo: HBase 0.98.8-hadoop2</span><br><span class="line">  2017-01-13 11:05:07,580 INFO  [main] util.VersionInfo: Subversion file:///e/hbase_compile/hbase-0.98.8 -r Unknown</span><br><span class="line">  2017-01-13 11:05:07,581 INFO  [main] util.VersionInfo: Compiled by 14074019 on Mon Dec 26 20:17:32     2016</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ hadoop fs -ls /hbase</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 00:05 /hbase/.hbase-snapshot</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2016-10-26 16:42 /hbase/.hbck</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2016-12-19 13:02 /hbase/.tmp</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-01-22 20:18 /hbase/WALs</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2015-09-18 09:34 /hbase/archive</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2016-10-18 09:44 /hbase/coprocessor</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2015-09-15 17:21 /hbase/corrupt</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-02-20 14:34 /hbase/data</span><br><span class="line">  -rw-r--r--   2 hbase hbase         42 2015-09-14 12:10 /hbase/hbase.id</span><br><span class="line">  -rw-r--r--   2 hbase hbase          7 2015-09-14 12:10 /hbase/hbase.version</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2016-06-28 12:14 /hbase/inputdir</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:40 /hbase/oldWALs</span><br><span class="line">  -rw-r--r--   2 hbase hbase     345610 2015-12-08 16:54 /hbase/test_bulkload.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ hadoop fs -ls /hbase/WALs</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2016-12-27 16:08 /hbase/WALs/yuzhouwan03,60020,1482741120018-splitting</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:36 /hbase/WALs/yuzhouwan03,60020,1483442645857</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:37 /hbase/WALs/yuzhouwan02,60020,1483491016710</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:37 /hbase/WALs/yuzhouwan01,60020,1483443835926</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:36 /hbase/WALs/yuzhouwan03,60020,1483444682422</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:16 /hbase/WALs/yuzhouwan04,60020,1485087488577</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:37 /hbase/WALs/yuzhouwan05,60020,1484790306754</span><br><span class="line">  drwxr-xr-x   - hbase hbase          0 2017-03-01 10:37 /hbase/WALs/yuzhouwan06,60020,1484931966988</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ hadoop fs -ls /hbase/WALs/yuzhouwan01,60020,1483443835926</span><br><span class="line"></span><br><span class="line">  -rw-r--r--   3 hbase hbase  127540109 2017-03-01 09:49 /hbase/WALs/yuzhouwan01,60020,1483443835926/yuzhouwan01%2C60020%2C1483443835926.1488330961720</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  -rw-r--r--   3 hbase hbase         83 2017-03-01 10:37 /hbase/WALs/yuzhouwan01,60020,1483443835926/yuzhouwan01%2C60020%2C1483443835926.1488335822133</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># log</span></span><br><span class="line">$ vim /home/hbase/logs/hbase-hbase-regionserver-yuzhouwan03.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HBase 批处理</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;command&gt;"</span> | hbase shell</span><br><span class="line">$ hbase shell ../script/batch.hbase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HBase 命令行</span></span><br><span class="line">$ hbase shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接远程 HBase 集群，需要把远程 HBase 的 ZooKeeper 地址配置到 hbase-site.xml 中</span></span><br><span class="line">$ vim hbase-site.xml</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;remote-yuzhouwan-01,remote-yuzhouwan-02,remote-yuzhouwan-03:2181&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;zookeeper.znode.parent&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/hbase&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ status</span><br><span class="line">  1 servers, 0 dead, 41.0000 average load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ zk_dump</span><br><span class="line">  HBase is rooted at /hbase</span><br><span class="line">  Active master address: yuzhouwan03,60000,1481009498847</span><br><span class="line">  Backup master addresses:</span><br><span class="line">   yuzhouwan02,60000,1481009591957</span><br><span class="line">   yuzhouwan01,60000,1481009567346</span><br><span class="line">  Region server holding hbase:meta: yuzhouwan03,60020,1483442645857</span><br><span class="line">  Region servers:</span><br><span class="line">   yuzhouwan02,60020,1483491016710</span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">  /hbase/replication: </span><br><span class="line">  /hbase/replication/peers: </span><br><span class="line">  /hbase/replication/peers/1: yuzhouwan03,yuzhouwan02,yuzhouwan01:2016:/hbase</span><br><span class="line">  /hbase/replication/peers/1/peer-state: ENABLED</span><br><span class="line">  /hbase/replication/rs: </span><br><span class="line">  /hbase/replication/rs/yuzhouwan03,60020,1483442645857: </span><br><span class="line">  /hbase/replication/rs/yuzhouwan03,60020,1483442645857/1: </span><br><span class="line">  /hbase/replication/rs/yuzhouwan03,60020,1483442645857/1/yuzhouwan03%2C60020%2C1483442645857.1488334114131: 116838271</span><br><span class="line">  /hbase/replication/rs/1485152902048.SyncUpTool.replication.org,1234,1: </span><br><span class="line">  /hbase/replication/rs/yuzhouwan06,60020,1484931966988: </span><br><span class="line">  /hbase/replication/rs/yuzhouwan06,60020,1484931966988/1: </span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  Quorum Server Statistics:</span><br><span class="line">   yuzhouwan02:2015</span><br><span class="line">    ZooKeeper version: 3.4.6-1569965, built on 02/20/2014 09:09 GMT</span><br><span class="line">    Clients:</span><br><span class="line">     /yuzhouwan:62003[1](queued=0,recved=625845,sent=625845)</span><br><span class="line">     <span class="comment"># ...</span></span><br><span class="line">     /yuzhouwan:11151[1](queued=0,recved=8828,sent=8828)  </span><br><span class="line">    Latency min/avg/max: 0/0/1</span><br><span class="line">    Received: 161</span><br><span class="line">    Sent: 162</span><br><span class="line">    Connections: 168</span><br><span class="line">    Outstanding: 0</span><br><span class="line">    Zxid: 0xc062e91c6</span><br><span class="line">    Mode: follower</span><br><span class="line">    Node count: 25428</span><br><span class="line">   yuzhouwan03:2015</span><br><span class="line">    ZooKeeper version: 3.4.6-1569965, built on 02/20/2014 09:09 GMT</span><br><span class="line">    Clients:</span><br><span class="line">     /yuzhouwan:39582[1](queued=0,recved=399812,sent=399812)</span><br><span class="line">     <span class="comment"># ...</span></span><br><span class="line">     /yuzhouwan:58770[1](queued=0,recved=3234,sent=3234)</span><br><span class="line"></span><br><span class="line">$ stop-hbase.sh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ list</span><br><span class="line">  TABLE</span><br><span class="line">  mytable</span><br><span class="line">  yuzhouwan</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  20 row(s) <span class="keyword">in</span> 1.4080 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ create <span class="string">'yuzhouwan'</span>, {NAME =&gt; <span class="string">'info'</span>, VERSIONS =&gt; 3}, {NAME =&gt; <span class="string">'data'</span>, VERSIONS =&gt; 1}</span><br><span class="line">  0 row(s) <span class="keyword">in</span> 0.2650 seconds</span><br><span class="line">  =&gt; Hbase::Table - yuzhouwan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'info:name'</span>, <span class="string">'Benedict Jin'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'info:gender'</span>, <span class="string">'Man'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'data:pic'</span>, <span class="string">'[picture]'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ get <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, {FILTER =&gt; <span class="string">"ValueFilter(=, 'binary:[picture]')"</span>}</span><br><span class="line">  COLUMN                                              CELL</span><br><span class="line">  data:pic                                           timestamp=1479092170498, value=[picture]</span><br><span class="line">  1 row(s) <span class="keyword">in</span> 0.0200 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ get <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, {FILTER =&gt; <span class="string">"QualifierFilter(=, 'substring:a')"</span>}</span><br><span class="line">  COLUMN                                              CELL</span><br><span class="line">  info:name                                          timestamp=1479092160236, value=Benedict Jin</span><br><span class="line">  1 row(s) <span class="keyword">in</span> 0.0050 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询某一个 CF，并限制只查询 10 行数据</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span>, {COLUMNS =&gt; [<span class="string">'c'</span>], LIMIT =&gt; 10}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询某一个 CQ</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span>, {FILTER =&gt; <span class="string">"QualifierFilter(=, 'substring:a')"</span>}</span><br><span class="line">  ROW                                                 COLUMN+CELL</span><br><span class="line">  rk0001                                             column=info:name, timestamp=1479092160236, value=Benedict Jin</span><br><span class="line">  1 row(s) <span class="keyword">in</span> 0.0140 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序查询</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span>, {COLUMNS =&gt; [<span class="string">'com'</span>], REVERSED =&gt; <span class="literal">true</span>, LIMIT =&gt; 10}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 timestamp 进行查询</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span>, { TIMERANGE =&gt; [0, 1416083300000] }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># [rk0001, rk0003)</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0003'</span>, <span class="string">'info:name'</span>, <span class="string">'asdf2014'</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span>, {COLUMNS =&gt; <span class="string">'info'</span>, STARTROW =&gt; <span class="string">'rk0001'</span>, ENDROW =&gt; <span class="string">'rk0003'</span>}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># row key start with 'rk'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'aha_rk0003'</span>, <span class="string">'info:name'</span>, <span class="string">'Jin'</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span>, {FILTER =&gt; <span class="string">"PrefixFilter('rk')"</span>}</span><br><span class="line">  ROW                                                 COLUMN+CELL</span><br><span class="line">  rk0001                                             column=data:pic, timestamp=1479092170498, value=[picture]</span><br><span class="line">  rk0001                                             column=info:gender, timestamp=1479092166019, value=Man</span><br><span class="line">  rk0001                                             column=info:name, timestamp=1479092160236, value=Benedict Jin</span><br><span class="line">  rk0003                                             column=info:name, timestamp=1479092728688, value=asdf2014</span><br><span class="line">  2 row(s) <span class="keyword">in</span> 0.0150 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ delete <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'info:gender'</span></span><br><span class="line">$ get <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span></span><br><span class="line">  COLUMN                                              CELL</span><br><span class="line">  data:pic                                           timestamp=1479092170498, value=[picture]</span><br><span class="line">  info:name                                          timestamp=1479092160236, value=Benedict Jin</span><br><span class="line">  2 row(s) <span class="keyword">in</span> 0.0100 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">'yuzhouwan'</span></span><br><span class="line">$ drop <span class="string">'yuzhouwan'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="行列修改"><a href="#行列修改" class="headerlink" title="行列修改"></a>行列修改</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改表</span></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">'yuzhouwan'</span></span><br><span class="line"><span class="comment"># 添加列</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, NAME =&gt; <span class="string">'f1'</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, NAME =&gt; <span class="string">'f2'</span></span><br><span class="line">  Updating all regions with the new schema...</span><br><span class="line">  1/1 regions updated.</span><br><span class="line">  Done.</span><br><span class="line">  0 row(s) <span class="keyword">in</span> 1.3020 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 CQ</span></span><br><span class="line">$ create <span class="string">'yuzhouwan'</span>, {NAME =&gt; <span class="string">'info'</span>}</span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk00001'</span>, <span class="string">'info:name'</span>, <span class="string">'China'</span></span><br><span class="line"></span><br><span class="line">$ get <span class="string">'yuzhouwan'</span>, <span class="string">'rk00001'</span>, {COLUMN =&gt; <span class="string">'info:name'</span>}, <span class="string">'value'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk00001'</span>, <span class="string">'info:address'</span>, <span class="string">'value'</span></span><br><span class="line"></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span></span><br><span class="line">  ROW                                                 COLUMN+CELL</span><br><span class="line">   rk00001                                            column=info:address, timestamp=1480556328381, value=value</span><br><span class="line">  1 row(s) <span class="keyword">in</span> 0.0220 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除列</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, {NAME =&gt; <span class="string">'f3'</span>}, {NAME =&gt; <span class="string">'f4'</span>}</span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, {NAME =&gt; <span class="string">'f5'</span>}, {NAME =&gt; <span class="string">'f1'</span>, METHOD =&gt; <span class="string">'delete'</span>}, {NAME =&gt; <span class="string">'f2'</span>, METHOD =&gt; <span class="string">'delete'</span>}, {NAME =&gt; <span class="string">'f3'</span>, METHOD =&gt; <span class="string">'delete'</span>}, {NAME =&gt; <span class="string">'f4'</span>, METHOD =&gt; <span class="string">'delete'</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法细到 CQ 级别，alter 'ns_rec:tb_mem_tag', {NAME =&gt; 'cf_tag:partyIdType', METHOD =&gt; 'delete'}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除行</span></span><br><span class="line">$ deteleall &lt;table&gt;,  &lt;rowkey&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 清空表数据</span></span><br><span class="line">$ describe <span class="string">'yuzhouwan'</span></span><br><span class="line">  Table yuzhouwan is ENABLED</span><br><span class="line">  COLUMN FAMILIES DESCRIPTION</span><br><span class="line">  {NAME =&gt; <span class="string">'data'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>, VERSIONS =&gt; <span class="string">'1'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, BLOCKCACHE =&gt; <span class="string">'true'</span>}</span><br><span class="line">  {NAME =&gt; <span class="string">'f5'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, VERSIONS =&gt; <span class="string">'1'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span></span><br><span class="line">  , BLOCKSIZE =&gt; <span class="string">'65536'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, BLOCKCACHE =&gt; <span class="string">'true'</span>}</span><br><span class="line">  {NAME =&gt; <span class="string">'info'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>, VERSIONS =&gt; <span class="string">'3'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, BLOCKCACHE =&gt; <span class="string">'true'</span>}</span><br><span class="line">  3 row(s) <span class="keyword">in</span> 0.0230 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.98 版本引入的命令，可以清空表数据的同时，保留 region 分区</span></span><br><span class="line">$ truncate_preserve <span class="string">'yuzhouwan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># truncate 会进行 drop table 和 create table 的操作</span></span><br><span class="line">$ truncate <span class="string">'yuzhouwan'</span></span><br><span class="line">$ scan <span class="string">'yuzhouwan'</span></span><br><span class="line">  ROW                                                 COLUMN+CELL</span><br><span class="line">  0 row(s) <span class="keyword">in</span> 0.3170 seconds</span><br></pre></td></tr></tbody></table></figure>
<h3 id="改表名"><a href="#改表名" class="headerlink" title="改表名"></a>改表名</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 注意 snapshot 的名字 不可带 ':' 之类的字符，也就是说，不需要特意去区分 namespace</span></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">'yuzhouwan'</span></span><br><span class="line">$ snapshot <span class="string">'yuzhouwan'</span>, <span class="string">'yuzhouwan_snapshot'</span></span><br><span class="line">$ clone_snapshot <span class="string">'yuzhouwan_snapshot'</span>, <span class="string">'ns_site:yuzhouwan'</span></span><br><span class="line">$ delete_snapshot <span class="string">'yuzhouwan_snapshot'</span></span><br><span class="line">$ drop <span class="string">'yuzhouwan'</span></span><br><span class="line">$ grant <span class="string">'site'</span>, <span class="string">'CXWR'</span>, <span class="string">'ns_site:yuzhouwan'</span></span><br><span class="line"></span><br><span class="line">$ user_permission <span class="string">'yuzhouwan'</span></span><br><span class="line">  User                                                Table,Family,Qualifier:Permission</span><br><span class="line">   site                                               default,yuzhouwan,,: [Permission: actions=CREATE,EXEC,WRITE,READ]</span><br><span class="line">   hbase                                              default,yuzhouwan,,: [Permission: actions=READ,WRITE,EXEC,CREATE,ADMIN]</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">'ns_site:yuzhouwan'</span></span><br><span class="line">$ drop <span class="string">'ns_site:yuzhouwan'</span></span><br><span class="line"></span><br><span class="line">$ exists <span class="string">'ns_site:yuzhouwan'</span></span><br><span class="line">  Table ns_site:yuzhouwan does not exist</span><br><span class="line">  0 row(s) <span class="keyword">in</span> 0.0200 seconds</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">可以通过 org.apache.hadoop.hbase.snapshot.ExportSnapshot 将 snapshot 文件导出，以实现跨集群的数据迁移</div>


<h3 id="改表属性"><a href="#改表属性" class="headerlink" title="改表属性"></a>改表属性</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">disable</span> <span class="string">'yuzhouwan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># versions</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, NAME =&gt; <span class="string">'f'</span>, VERSIONS =&gt; 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># ttl（注意，超时属性是针对 CF 的，而不是 Table 级别的，且单位是 秒）</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, NAME =&gt; <span class="string">'f'</span>, TTL =&gt; 20</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">enable</span> <span class="string">'yuzhouwan'</span></span><br><span class="line">$ describe <span class="string">'yuzhouwan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alter 操作的耗时，主要在 Region 的 close 和 open 两次操作上</span></span><br><span class="line"><span class="comment"># 耗时时长主要取决于 Region 的数量</span></span><br><span class="line"><span class="comment"># alter 操作本身不会导致 服务不可用，但是业务量过大，HBase 可能会抖</span></span><br><span class="line"><span class="comment"># alter 属于 HBase 常规运维操作</span></span><br><span class="line"><span class="comment"># 函数入口在 `HBaseAdmin#modifyTable`，属于异步调用，timeout 耗时由 `hbase.client.sync.wait.timeout.msec` 控制，默认 10min</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a><a href="https://quixdb.github.io/squash-benchmark/">压缩算法</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩算法为 'SNAPPY' 报错，ERROR: java.io.IOException: Compression algorithm 'snappy' previously failed test.</span></span><br><span class="line"><span class="comment"># 尝试 LZ4（低压缩比，高速，在 Spark 2.x 中已作为默认压缩算法）</span></span><br><span class="line">$ create <span class="string">'yuzhouwan'</span>, {NUMREGIONS =&gt; 15, SPLITALGO =&gt; <span class="string">'HexStringSplit'</span>}, {NAME =&gt; <span class="string">'v'</span>, COMPRESSION =&gt; <span class="string">'LZ4'</span>, BLOOMFILTER =&gt; <span class="string">'NONE'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'FAST_DIFF'</span>}</span><br><span class="line"></span><br><span class="line">$ describe <span class="string">'yuzhouwan'</span></span><br><span class="line">  Table yuzhouwan is ENABLED</span><br><span class="line">  COLUMN FAMILIES DESCRIPTION</span><br><span class="line">  {NAME =&gt; <span class="string">'v'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'FAST_DIFF'</span>, BLOOMFILTER =&gt; <span class="string">'NONE'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>, VERSIONS =&gt; <span class="string">'1'</span>, COMPRESSION =&gt; <span class="string">'LZ4'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, BLOCKCACHE =&gt; <span class="string">'true'</span>}</span><br><span class="line">  1 row(s) <span class="keyword">in</span> 0.0280 seconds</span><br></pre></td></tr></tbody></table></figure>
<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ACL</span></span><br><span class="line"><span class="comment"># R - read</span></span><br><span class="line"><span class="comment"># W - write</span></span><br><span class="line"><span class="comment"># X - execute</span></span><br><span class="line"><span class="comment"># C - create</span></span><br><span class="line"><span class="comment"># A - admin</span></span><br><span class="line">$ grant <span class="string">'benedict'</span>, <span class="string">'WRXC'</span>, <span class="string">'yuzhouwan'</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"scan 'hbase:acl'"</span> | hbase shell &gt; acl.txt</span><br><span class="line">  yuzhouwan column=l:benedict, timestamp=1496216745249, value=WRXC</span><br><span class="line">  yuzhouwan column=l:hbase, timestamp=1496216737326, value=RWXCA</span><br><span class="line"></span><br><span class="line">$ user_permission                  <span class="comment"># 如果不接 &lt;table_name&gt;，将从 'hbase:acl' 表中获取全部</span></span><br><span class="line">$ user_permission <span class="string">'yuzhouwan'</span></span><br><span class="line">    User                                 Table,Family,Qualifier:Permission</span><br><span class="line">   hbase                               default,yuzhouwan,,: [Permission: actions=READ,WRITE,EXEC,CREATE,ADMIN]</span><br><span class="line">   benedict                            default,yuzhouwan,,: [Permission: actions=WRITE,READ,EXEC,CREATE]</span><br><span class="line">  2 row(s) <span class="keyword">in</span> 0.0510 seconds</span><br><span class="line"></span><br><span class="line">$ revoke <span class="string">'benedict'</span>, <span class="string">'yuzhouwan'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># splits</span></span><br><span class="line">$ create <span class="string">'yuzhouwan'</span>, {NAME =&gt; <span class="string">'f'</span>}, SPLITS =&gt; [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]                      <span class="comment"># 5 regions</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, SPLITS =&gt; [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]        <span class="comment"># not work</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动分区</span></span><br><span class="line">$ alter <span class="string">'yuzhouwan'</span>, {METHOD =&gt; <span class="string">'table_att'</span>, SPLIT_POLICY =&gt; <span class="string">'org.apache.hadoop.hbase.regionserver.DisabledRegionSplitPolicy'</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Master 是否去平衡各个 RegionServer 的 Region 数量</span></span><br><span class="line"><span class="comment"># 维护或者重启一个 RegionServer 时，会关闭 balancer，会导致 Region 在 RegionServer 上的分布不均，这个时候需要手工的开启 balance</span></span><br><span class="line">$ balance_switch <span class="literal">true</span></span><br><span class="line">$ balance_switch <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">预分区可以配合自增 ID 的二进制翻转，来解决写入热点问题</div>

<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># namespace</span></span><br><span class="line">$ list_namespace_tables <span class="string">'hbase'</span></span><br><span class="line">  TABLE</span><br><span class="line">  acl</span><br><span class="line">  meta</span><br><span class="line">  namespace</span><br><span class="line">  3 row(s) <span class="keyword">in</span> 0.0050 seconds</span><br><span class="line"></span><br><span class="line">$ list_namespace</span><br><span class="line">  NAMESPACE</span><br><span class="line">  default</span><br><span class="line">  hbase</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  50 row(s) <span class="keyword">in</span> 0.3710 seconds</span><br><span class="line"></span><br><span class="line">$ create_namespace <span class="string">'www'</span></span><br><span class="line">$ exists <span class="string">'www:yuzhouwan.site'</span></span><br><span class="line">$ create <span class="string">'www:yuzhouwan.site'</span>, {NAME =&gt; <span class="string">'info'</span>, VERSIONS=&gt; 9}, SPLITS =&gt; [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">$ alter_namespace <span class="string">'www'</span>, {METHOD =&gt; <span class="string">'set'</span>, <span class="string">'PROPERTY_NAME'</span> =&gt; <span class="string">'PROPERTY_VALUE'</span>}</span><br><span class="line"></span><br><span class="line">$ drop_namespace <span class="string">'www'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="手动-Split"><a href="#手动-Split" class="headerlink" title="手动 Split"></a>手动 Split</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ create <span class="string">'yuzhouwan'</span>, {NAME =&gt; <span class="string">'info'</span>, VERSIONS =&gt; 3}, {NAME =&gt; <span class="string">'data'</span>, VERSIONS =&gt; 1}</span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'info:name'</span>, <span class="string">'Benedict Jin'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'info:gender'</span>, <span class="string">'Man'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0001'</span>, <span class="string">'data:pic'</span>, <span class="string">'[picture]'</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rk0002'</span>, <span class="string">'info:name'</span>, <span class="string">'Yuzhouwan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage:</span></span><br><span class="line"><span class="comment">#   split 'tableName'</span></span><br><span class="line"><span class="comment">#   split 'namespace:tableName'</span></span><br><span class="line"><span class="comment">#   split 'regionName' # format: 'tableName,startKey,id'</span></span><br><span class="line"><span class="comment">#   split 'tableName', 'splitKey'</span></span><br><span class="line"><span class="comment">#   split 'regionName', 'splitKey'</span></span><br><span class="line">$ split <span class="string">'yuzhouwan'</span>, <span class="string">'rk0002'</span></span><br><span class="line">  <span class="comment"># Name                                                            Region Server        Start Key   End Key    Locality    Requests</span></span><br><span class="line">  yuzhouwan,,1500964657548.bd21cdf7ae9e2d8e5b2ed3730eb8b738.        yuzhouwan01:60020                rk0002     1.0         0</span><br><span class="line">  yuzhouwan,rk0002,1500964657548.76f95590aed5d39291a087c5e8e83833.  yuzhouwan02:60020    rk0002                 1.0         2</span><br></pre></td></tr></tbody></table></figure>
<h3 id="手动-Compact"><a href="#手动-Compact" class="headerlink" title="手动 Compact"></a>手动 Compact</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 触发 small compaction</span></span><br><span class="line"><span class="comment"># 只是发送请求到 RS，具体还要看是否满足触发的条件</span></span><br><span class="line">$ compact <span class="string">'yuzhouwan'</span></span><br><span class="line"><span class="comment"># 触发 major compaction</span></span><br><span class="line"><span class="comment"># 只有 major compaction 操作才是肯定会被执行的</span></span><br><span class="line">$ major_compact <span class="string">'yuzhouwan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># small compaction 的 scan 类型为 org.apache.hadoop.hbase.regionserver.ScanType#COMPACT_RETAIN_DELETES</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Phoenix-命令"><a href="#Phoenix-命令" class="headerlink" title="Phoenix 命令"></a>Phoenix 命令</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行外部 SQL 脚本</span></span><br><span class="line">$ sqlline.py &lt;hbase.zookeeper.quorum host without port&gt;:/phoenix sql.txt</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="Hive-数据导入（Bulkload）"><a href="#Hive-数据导入（Bulkload）" class="headerlink" title="Hive 数据导入（Bulkload）"></a>Hive 数据导入（Bulkload）</h3><p>　Bulkload 就是 依据 Hive 表的 schema 解析 RCFile，然后通过 MapReduce 程序 生成 HBase 的 HFile 文件，最后直接利用 Bulkload 机制将 HFile 文件导入到 HBase 中。也就是 直接存放到 HDFS 中。这样比调用接口一条条的导入，效率会高很多（一般的，Hive 的数据入库到 HBase 中，都会采用 Bulkload 的方式）</p>
<h3 id="集群间复制（CopyTable-Replication）"><a href="#集群间复制（CopyTable-Replication）" class="headerlink" title="集群间复制（CopyTable + Replication）"></a>集群间复制（CopyTable + Replication）</h3><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Commend</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_peer</td>
<td>添加一条复制连接，ID 是连接的标识符，CLUSTER_KEY 的格式是 HBase.zookeeper.quorum: HBase.zookeeper.property.clientPort: zookeeper.znode.parent</td>
</tr>
<tr>
<td>list_peers</td>
<td>查看所有的复制连接</td>
</tr>
<tr>
<td>enable_peer</td>
<td>设置某条复制连接为可用状态，add_peer 一条连接默认就是 <code>enable</code> 的，通过 disable_peer 命令让该连接变为不可用的时候，可以通过 enable_peer 让连接变成可用</td>
</tr>
<tr>
<td>disable_peer</td>
<td>设置某条复制连接为不可用状态</td>
</tr>
<tr>
<td>remove_peer</td>
<td>删除某条复制连接</td>
</tr>
<tr>
<td>set_peer_tableCFs</td>
<td>设置某条复制连接可以复制的表信息</td>
</tr>
<tr>
<td></td>
<td>默认 add_peer 添加的复制连接是可以复制集群所有的表。如果，只想复制某些表的话，就可以用 set_peer_tableCFs，复制连接的粒度可以到表的列族。表之间通过 ‘;’ 分号 隔开，列族之间通过 ‘,’ 逗号 隔开。e.g. set_peer_tableCFs ‘2’, “table1; table2:cf1,cf2; table3:cfA,cfB”。使用 ‘set_peer_tableCFs’ 命令，可以设置复制连接所有的表</td>
</tr>
<tr>
<td>append_peer_tableCFs</td>
<td>可以为复制连接添加需要复制的表</td>
</tr>
<tr>
<td>remove_peer_tableCFs</td>
<td>为复制连接删除不需要复制的表</td>
</tr>
<tr>
<td>show_peer_tableCFs</td>
<td>查看某条复制连接复制的表信息，查出的信息为空时，表示复制所有的表</td>
</tr>
<tr>
<td>list_replicated_tables</td>
<td>列出所有复制的表</td>
</tr>
</tbody>
</table>
</div>
<h4 id="监控-Replication"><a href="#监控-Replication" class="headerlink" title="监控 Replication"></a>监控 Replication</h4><h5 id="HBase-Shell"><a href="#HBase-Shell" class="headerlink" title="HBase Shell"></a>HBase Shell</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ status <span class="string">'replication'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h5><p>源端</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Metrics Name</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>sizeOfLogQueue</td>
<td>还有多少 WAL 文件没处理</td>
</tr>
<tr>
<td>ageOfLastShippedOp</td>
<td>上一次复制延迟时间</td>
</tr>
<tr>
<td>shippedBatches</td>
<td>传输了多少批数据</td>
</tr>
<tr>
<td>shippedKBs</td>
<td>传输了多少 KB 的数据</td>
</tr>
<tr>
<td>shippedOps</td>
<td>传输了多少条数据</td>
</tr>
<tr>
<td>logEditsRead</td>
<td>读取了多少个 logEdits</td>
</tr>
<tr>
<td>logReadInBytes</td>
<td>读取了多少 KB 数据</td>
</tr>
<tr>
<td>logEditsFiltered</td>
<td>实际过滤了多少 logEdits</td>
</tr>
</tbody>
</table>
</div>
<p>目的端</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Metrics Name</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>sink.ageOfLastAppliedOp</td>
<td>上次处理的延迟</td>
</tr>
<tr>
<td>sink.appliedBatches</td>
<td>处理的批次数</td>
</tr>
<tr>
<td>sink.appliedOps</td>
<td>处理的数据条数</td>
</tr>
</tbody>
</table>
</div>
<h4 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h4><h5 id="CopyTable"><a href="#CopyTable" class="headerlink" title="CopyTable"></a>CopyTable</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 明确迁移时间</span></span><br><span class="line">2017-01-01 00:00:00(1483200000000)          2017-05-01 00:00:00(1493568000000)</span><br><span class="line"><span class="comment"># 这里需要转换时间格式为 13 位的 毫秒级 unix timestamp</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"`date -d "</span>2017-01-01 00:00:00<span class="string">" +%s`000"</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"`date -d "</span>2017-05-01 00:00:00<span class="string">" +%s`000"</span></span><br><span class="line"><span class="comment"># 这里不用担心出现 边界问题 [starttime, endtime)</span></span><br><span class="line"><span class="comment"># 源集群执行（不限制 starttime，可以增加参数 --starttime=0）</span></span><br><span class="line">$ hbase org.apache.hadoop.hbase.mapreduce.CopyTable --starttime=1483200000000 --endtime=1493568000000 --peer.adr=&lt;aim zk address&gt;,&lt;aim zk address&gt;,...:&lt;aim zk port&gt;:/&lt;hbase parent path&gt; &lt;table name&gt;</span><br><span class="line"><span class="comment"># 检查数据一致性（在两个集群分别执行，比较 RowCount 是否一致）</span></span><br><span class="line">$ hbase org.apache.hadoop.hbase.mapreduce.RowCounter &lt;table name&gt; --endtime=1493568000000</span><br><span class="line"><span class="comment"># 进一步检查数据一致性（在两个集群分别执行，比较 字节数 是否一致）</span></span><br><span class="line">$ hadoop fs -du hdfs://&lt;base path&gt;/hbase/data/&lt;namespace&gt;/&lt;table name&gt;</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果是拷贝至自身集群，则可以使用 new.name 参数，以创建新的表</div>
<div class="note info">如果是统计列数，可以使用 CellCounter</div>



<h5 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 小集群上执行</span></span><br><span class="line"><span class="comment"># 预先进行 list_peers，避免 peer id 冲突</span></span><br><span class="line">$ list_peers</span><br><span class="line">$ add_peer <span class="string">'&lt;peer id&gt;'</span>, <span class="string">"&lt;big cluster zk address&gt;,&lt;big cluster zk address&gt;,...:&lt;big cluster zk port&gt;:/&lt;hbase parent path&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启表的 REPLICATION_SCOPE</span></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">'&lt;table name&gt;'</span></span><br><span class="line"><span class="comment"># 1: open; 0: close（default）</span></span><br><span class="line">$ alter <span class="string">'&lt;table name&gt;'</span>, {NAME =&gt; <span class="string">'&lt;column family&gt;'</span>, REPLICATION_SCOPE =&gt; <span class="string">'1'</span>}</span><br><span class="line">$ <span class="built_in">enable</span> <span class="string">'&lt;table name&gt;'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Trouble-shooting"><a href="#Trouble-shooting" class="headerlink" title="Trouble shooting"></a>Trouble shooting</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 源集群执行</span></span><br><span class="line">$ hbase hbck</span><br><span class="line"><span class="comment"># 出现问题后 hbase hbck --repair</span></span><br><span class="line"><span class="comment"># 没有问题后 `hbase shell` 中执行</span></span><br><span class="line">$ balance_switch <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="关闭自动分区"><a href="#关闭自动分区" class="headerlink" title="关闭自动分区"></a>关闭自动分区</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ alter <span class="string">'yuzhouwan'</span>, {METHOD =&gt; <span class="string">'table_att'</span>, SPLIT_POLICY =&gt; <span class="string">'org.apache.hadoop.hbase.regionserver.DisabledRegionSplitPolicy'</span>}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="JMX-获取部分指标项"><a href="#JMX-获取部分指标项" class="headerlink" title="JMX 获取部分指标项"></a>JMX 获取部分指标项</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">http://namenode:50070/jmx?qry=&lt;指标项&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如，只返回 NameNodeInfo 指标项</span></span><br><span class="line">http://namenode:50070/jmx?qry=hadoop:service=NameNode,name=NameNodeInfo</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示已经被删除的表，仍然存在"><a href="#提示已经被删除的表，仍然存在" class="headerlink" title="提示已经被删除的表，仍然存在"></a>提示已经被删除的表，仍然存在</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hbase zkcli</span><br><span class="line">&gt; ls /hbase/table</span><br><span class="line">&gt; rmr /hbase/table/<span class="variable">${table_name}</span></span><br><span class="line"><span class="comment"># 重启 HBase 集群即可</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>　一般的，我们会在一张 HBase 表中定义少量的 CF。而随着数据不断地写入到同一个 CF，为了避免 HStore 中单个的 HStoreFile 文件过大（默认 10G），会触发 Split 操作进行分裂。而对应于 Split 切割 HStoreFile 的行为，就是 Compaction 合并 HStoreFile 的操作。Compaction 的作用也是显而易见的，通过合并小的 HStoreFile，避免产生过多的小文件。同时 Compaction 操作小文件的时候，也不会带来严重的 IO 放大问题。另外，众多的业务场景，每个业务的数据分布的情况也不尽相同，因此 HBase 定义了 <code>CompactionPolicy</code> 接口，以便扩展选择 HStoreFile 的策略</p>
<h4 id="Date-Tiered-Compaction-Strategy"><a href="#Date-Tiered-Compaction-Strategy" class="headerlink" title="Date Tiered Compaction Strategy"></a>Date Tiered Compaction Strategy</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>　HBase 2.x 中新的 Compaction 策略 DTCS，同样也是扩展了 <code>CompactionPolicy</code> 接口。主要是针对时序数据的场景，解决了默认策略无法针对时间维度进行 Compaction，导致一次查询命中过多的 HStoreFile 的问题，如下图所示：</p>
<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>　如下图所示，整个时间轴被一个个时间窗口分割开，每 4 个时间窗口会被 Compact，从而组成一个大的 Tier（由 <code>hbase.hstore.compaction.date.tiered.windows.per.tier</code> 指定，默认值为 4；窗口的大小由 <code>hbase.hstore.compaction.date.tiered.base.window.millis</code> 指定，默认值为 6h）。时间轴最右边是最近一段时间写入的数据，刚形成的 HStoreFile 不会立即被 DTCS 选中，需要等数量达到一定阀值的时候（由 <code>hbase.hstore.compaction.date.tiered.incoming.window.min</code> 指定，默认值为 6），可以减少不必要的 Compact 数量。为了避免 Compact 已经写入很久的数据，则可以指定一个阀值，来控制距离当前时间多久的数据不被 DTCS 选中（由 <code>hbase.hstore.compaction.date.tiered.max.storefile.age.millis</code> 指定，默认值为 <code>Long.MAX_VALUE</code>）</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>通过基于时间分层的存储结构，优化了针对时间范围的 Scan 查询请求</li>
<li>减少了 Compaciton 操作的开销</li>
<li>优化了 TTL 的处理效率</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>不适合非时序数据，并且如果时序数据完全乱序写入的话，还是可能会退化到默认的 Compaction 策略</li>
<li>频繁的更新和删除操作，性能会比较差</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p><img data-src="/picture/hbase/hbase_performance.png" alt="Apache HBase Performance"></p>
<center>（利用 <a href="https://www.xmind.net/" target="_blank">XMind</a>™ 绘制而成）</center>



<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="Table-is-neither-in-disabled-nor-in-enabled-state"><a href="#Table-is-neither-in-disabled-nor-in-enabled-state" class="headerlink" title="Table is neither in disabled nor in enabled state"></a>Table is neither in disabled nor in enabled state</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>　执行完正常的建表语句之后，一直卡在 <code>enable table</code> 这步上</p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查发现 table 既不处于 `enable` 状态，也不处于 `disable` 状态</span></span><br><span class="line">$ is_enabled <span class="string">'yuzhouwan'</span></span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">$ is_disabled <span class="string">'yuzhouwan'</span></span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">$ hbase zkcli</span><br><span class="line">$ delete /hbase/table/yuzhouwan</span><br><span class="line">$ hbase hbck -fixMeta -fixAssignments</span><br><span class="line"><span class="comment"># 重启 active HMaster</span></span><br><span class="line">$ is_enabled <span class="string">'yuzhouwan'</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">'yuzhouwan'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="No-GCs-detected"><a href="#No-GCs-detected" class="headerlink" title="No GCs detected"></a>No GCs detected</h3><h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 从 JDK6 开始 默认开启偏向锁</span></span><br><span class="line">-XX:+PrintSafepointStatistics -XX:PrintSafepointStatisticsCount=0</span><br><span class="line"><span class="comment"># 但是不适合高并发的场景，Cassandra 中已默认关闭</span></span><br><span class="line"><span class="comment"># 详见，https://github.com/apache/cassandra/blob/trunk/conf/jvm.options#L116</span></span><br><span class="line">-XX:-UseBiasedLocking</span><br><span class="line"><span class="comment"># 关闭偏向锁之后，JVM 默认使用轻量级锁</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><div class="table-container">
<table>
<thead>
<tr>
<th>锁</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>偏向锁</td>
<td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距</td>
<td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td>
<td>适用于只有一个线程访问同步块场景</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>竞争的线程不会阻塞，提高了程序的响应速度</td>
<td>如果始终得不到锁竞争的线程使用自旋会消耗 CPU</td>
<td>追求响应时间，同步块执行速度非常快</td>
</tr>
<tr>
<td>重量级锁</td>
<td>线程竞争不使用自旋，不会消耗 CPU</td>
<td>线程阻塞，响应时间缓慢</td>
<td>追求吞吐量，同步块执行速度较慢</td>
</tr>
</tbody>
</table>
</div>
<h3 id="十六进制无法在命令行被识别"><a href="#十六进制无法在命令行被识别" class="headerlink" title="十六进制无法在命令行被识别"></a>十六进制无法在命令行被识别</h3><h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只需要用双引号包起来就可以了</span></span><br><span class="line">$ put <span class="string">'yuzhouwan'</span>, <span class="string">'rowkey01'</span>, <span class="string">'cf:age'</span>, <span class="string">"\xFF"</span>  <span class="comment">#255</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="社区跟进"><a href="#社区跟进" class="headerlink" title="社区跟进"></a>社区跟进</h2><p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://hbase.apache.org/book.html#hbase_metrics">HBase Metrics</a></li>
<li><a href="http://hbase.apache.org/book.html#ops.date.tiered">Date Tiered Compaction</a></li>
<li><a href="https://hbase.apache.org/book.html#hbase_mob">MOB: Medium-sized Objects</a></li>
<li><a href="https://www.cloudera.com/documentation/enterprise/5-9-x/topics/admin_hbase_filtering.html">HBase Filtering</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://issues.apache.org/jira/browse/HBASE-15181">A simple implementation of date based tiered compaction</a></li>
<li><a href="https://issues.apache.org/jira/browse/HBASE-19215">Incorrect exception handling on the client causes incorrect call timeouts and byte buffer allocations on the server</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="https://issues.apache.org/jira/browse/HBASE-7266">[89-fb] Using pread for non-compaction read request</a></li>
<li><img data-src="/picture/hbase/hbase_test_caching_limit_small.jpg" alt=""><center>（图片来源：<a href="https://issues.apache.org/jira/secure/attachment/12602275/test%20results.jpg" target="_blank">issues.apache.org</a>™）</center></li>
<li><a href="https://issues.apache.org/jira/browse/HBASE-9488">Improve performance for small scan</a></li>
<li><a href="https://issues.apache.org/jira/browse/HBASE-17917">Use pread by default for all user scan and switch to streaming read if needed</a></li>
<li><a href="https://blog.csdn.net/caoli98033/article/details/44650497">HBase scan setBatch 和 setCaching 的区别</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache HBase</tag>
        <tag>Apache Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache IoTDB：一款面向物联网的数据库</title>
    <url>/posts/201221/</url>
    <content><![CDATA[<h2 id="Apache-IoTDB-是什么？"><a href="#Apache-IoTDB-是什么？" class="headerlink" title="Apache IoTDB 是什么？"></a>Apache IoTDB 是什么？</h2><blockquote>
<p><strong><a href="https://github.com/apache/iotdb">Apache IoTDB</a></strong>™ (Database for Internet of Things) is an IoT native database with high performance for data management and analysis, deployable on the edge and the cloud.</p>
</blockquote>
<p><img data-src="/picture/iotdb/apache_iotdb_logo.png" alt=""></p>
<center>（图片来源：<a href="https://iotdb.apache.org/" target="_blank">Apache IoTDB</a>™ 官网）</center>



<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>高吞吐量读写</li>
<li>高效的目录结构</li>
<li>丰富的查询语义</li>
<li>硬件成本低</li>
<li>灵活的部署</li>
<li>与开源生态系统的紧密集成</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>高端制造业</li>
<li>本地控制器服务器</li>
<li>云数据管理</li>
</ul>
<span id="more"></span>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Docker-容器版"><a href="#Docker-容器版" class="headerlink" title="Docker 容器版"></a><a href="https://hub.docker.com/r/apache/iotdb">Docker 容器版</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker pull apache/iotdb</span><br><span class="line">$ docker run -d -p 6667:6667 -p 31999:31999 -p 8181:8181 --name yuzhouwan-iotdb apache/iotdb:latest</span><br><span class="line">$ docker <span class="built_in">exec</span> -it `docker ps | grep iotdb | awk <span class="string">'{print $1}'</span>` bash</span><br><span class="line">$ start-cli.sh</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">IoTDB&gt; login successfully</span><br><span class="line">IoTDB&gt; <span class="built_in">help</span></span><br><span class="line">    &lt;your-sql&gt;                  execute your sql statment</span><br><span class="line">    show timeseries             show how many timeseries are <span class="keyword">in</span> iotdb</span><br><span class="line">    <span class="built_in">set</span> time_display_type=xxx   eg. long, default, ISO8601, yyyy-MM-dd HH:mm:ss.</span><br><span class="line">    show time_display_type      show time display <span class="built_in">type</span></span><br><span class="line">    <span class="built_in">set</span> time_zone=xxx           eg. +08:00, Asia/Shanghai.</span><br><span class="line">    show time_zone              show cli time zone</span><br><span class="line">    <span class="built_in">set</span> fetch_size=xxx          <span class="built_in">set</span> fetch size when querying data from server.</span><br><span class="line">    show fetch_size             show fetch size</span><br><span class="line">    <span class="built_in">set</span> max_display_num=xxx     eg. <span class="built_in">set</span> max lines <span class="keyword">for</span> cli to ouput, -1 equals to unlimited.</span><br><span class="line"></span><br><span class="line">IoTDB&gt; insert into root.ln.wf01.wt01(timestamp, status) values(100, <span class="literal">true</span>);</span><br><span class="line">Msg: The statement is executed successfully.</span><br><span class="line"></span><br><span class="line">IoTDB&gt; show timeseries</span><br><span class="line">+------------------------+-----+-------------+--------+--------+-----------+</span><br><span class="line">|              timeseries|<span class="built_in">alias</span>|storage group|dataType|encoding|compression|</span><br><span class="line">+------------------------+-----+-------------+--------+--------+-----------+</span><br><span class="line">|root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|     RLE|     SNAPPY|</span><br><span class="line">+------------------------+-----+-------------+--------+--------+-----------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.008s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; select * from root.ln.wf01.wt01;</span><br><span class="line">+-----------------------------+------------------------+</span><br><span class="line">|                         Time|root.ln.wf01.wt01.status|</span><br><span class="line">+-----------------------------+------------------------+</span><br><span class="line">|1970-01-01T08:00:00.100+08:00|                    <span class="literal">true</span>|</span><br><span class="line">+-----------------------------+------------------------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.005s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; <span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="集群版"><a href="#集群版" class="headerlink" title="集群版"></a>集群版</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git fetch upstream cluster_new:cluster_new</span><br><span class="line">$ git checkout cluster_new</span><br><span class="line">$ ./mvnw.sh clean package -T 1C -DskipTests</span><br><span class="line">$ find . -name <span class="string">'*.zip'</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">echo</span> {} \;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./cluster/target/cluster-0.12.0-SNAPSHOT.zip</span><br><span class="line">./distribution/target/apache-iotdb-0.12.0-SNAPSHOT-bin.zip</span><br><span class="line">./server/target/iotdb-server-0.12.0-SNAPSHOT.zip</span><br><span class="line">./cli/target/iotdb-cli-0.12.0-SNAPSHOT.zip</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir -p ~/apps/iotdb/cluster/node1</span><br><span class="line">$ mkdir -p ~/apps/iotdb/cluster/node2</span><br><span class="line">$ mkdir -p ~/apps/iotdb/cluster/node3</span><br><span class="line">$ cp ./cluster/target/cluster-0.12.0-SNAPSHOT.zip ~/apps/iotdb/cluster/node1/</span><br><span class="line">$ cp ./cluster/target/cluster-0.12.0-SNAPSHOT.zip ~/apps/iotdb/cluster/node2/</span><br><span class="line">$ cp ./cluster/target/cluster-0.12.0-SNAPSHOT.zip ~/apps/iotdb/cluster/node3/</span><br><span class="line">$ <span class="built_in">cd</span> ~/apps/iotdb/cluster/node1</span><br><span class="line">$ unzip cluster-0.12.0-SNAPSHOT.zip</span><br><span class="line">$ <span class="built_in">cd</span> ~/apps/iotdb/cluster/node2</span><br><span class="line">$ unzip cluster-0.12.0-SNAPSHOT.zip</span><br><span class="line">$ <span class="built_in">cd</span> ~/apps/iotdb/cluster/node3</span><br><span class="line">$ unzip cluster-0.12.0-SNAPSHOT.zip</span><br><span class="line">$ <span class="built_in">cd</span> ~/apps/iotdb/cluster</span><br><span class="line">$ chmod +x node1/sbin/start-node.sh</span><br><span class="line">$ chmod +x node2/sbin/start-node.sh</span><br><span class="line">$ chmod +x node3/sbin/start-node.sh</span><br><span class="line">$ sed -in-place -e <span class="string">'s/31999/31997/g'</span> node1/conf/iotdb-env.sh</span><br><span class="line">$ sed -in-place -e <span class="string">'s/31999/31998/g'</span> node2/conf/iotdb-env.sh</span><br><span class="line">$ node1/sbin/start-node.sh -internal_meta_port 9003 -internal_data_port 40010 -cluster_rpc_port 55560</span><br><span class="line">$ node2/sbin/start-node.sh -internal_meta_port 9005 -internal_data_port 40012 -cluster_rpc_port 55561</span><br><span class="line">$ node3/sbin/start-node.sh -internal_meta_port 9007 -internal_data_port 40014 -cluster_rpc_port 55562</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir ~/apps/iotdb/standalone</span><br><span class="line">$ cp ./cli/target/iotdb-cli-0.12.0-SNAPSHOT.zip ~/apps/iotdb/standalone/</span><br><span class="line">$ <span class="built_in">cd</span> ~/apps/iotdb/standalone</span><br><span class="line">$ chmod +x sbin/start-cli.sh</span><br><span class="line">$ sbin/start-cli.sh</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">---------------------</span><br><span class="line">Starting IoTDB Cli</span><br><span class="line">---------------------</span><br><span class="line"> _____       _________  ______   ______</span><br><span class="line">|_   _|     |  _   _  ||_   _ `.|_   _ \</span><br><span class="line">  | |   .--.|_/ | | \_|  | | `. \ | |_) |</span><br><span class="line">  | | / .<span class="string">'`\ \  | |      | |  | | |  __'</span>.</span><br><span class="line"> _| |_| \__. | _| |_    _| |_.<span class="string">' /_| |__) |</span></span><br><span class="line"><span class="string">|_____|'</span>.__.<span class="string">' |_____|  |______.'</span>|_______/  version 0.12.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IoTDB&gt; login successfully</span><br><span class="line">IoTDB&gt; show timeseries</span><br><span class="line">+----------+-----+-------------+--------+--------+-----------+----+----------+</span><br><span class="line">|timeseries|<span class="built_in">alias</span>|storage group|dataType|encoding|compression|tags|attributes|</span><br><span class="line">+----------+-----+-------------+--------+--------+-----------+----+----------+</span><br><span class="line">+----------+-----+-------------+--------+--------+-----------+----+----------+</span><br><span class="line">Empty <span class="built_in">set</span>.</span><br><span class="line">It costs 0.276s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; <span class="built_in">set</span> storage group to root.yuzhouwan</span><br><span class="line">Msg: The statement is executed successfully.</span><br><span class="line"></span><br><span class="line">IoTDB&gt; create timeseries root.yuzhouwan.user with datatype=INT64,encoding=PLAIN</span><br><span class="line">Msg: The statement is executed successfully.</span><br><span class="line"></span><br><span class="line">IoTDB&gt; insert into root.yuzhouwan(timestamp, user) values(1, 1)</span><br><span class="line">Msg: The statement is executed successfully.</span><br><span class="line"></span><br><span class="line">IoTDB&gt; show timeseries</span><br><span class="line">+-------------------+-----+--------------+--------+--------+-----------+----+----------+</span><br><span class="line">|         timeseries|<span class="built_in">alias</span>| storage group|dataType|encoding|compression|tags|attributes|</span><br><span class="line">+-------------------+-----+--------------+--------+--------+-----------+----+----------+</span><br><span class="line">|root.yuzhouwan.user| null|root.yuzhouwan|   INT64|   PLAIN|     SNAPPY|null|      null|</span><br><span class="line">+-------------------+-----+--------------+--------+--------+-----------+----+----------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.015s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; select * from root.yuzhouwan</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">|                         Time|root.yuzhouwan.user|</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">|1970-01-01T08:00:00.001+08:00|                  1|</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.005s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; select * from root.*</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">|                         Time|root.yuzhouwan.user|</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">|1970-01-01T08:00:00.001+08:00|                  1|</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.004s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; select * from root</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">|                         Time|root.yuzhouwan.user|</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">|1970-01-01T08:00:00.001+08:00|                  1|</span><br><span class="line">+-----------------------------+-------------------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.005s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; show child paths root</span><br><span class="line">+--------------+</span><br><span class="line">|   child paths|</span><br><span class="line">+--------------+</span><br><span class="line">|root.yuzhouwan|</span><br><span class="line">+--------------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.003s</span><br><span class="line"></span><br><span class="line">IoTDB&gt; show child paths root.*</span><br><span class="line">+-------------------+</span><br><span class="line">|        child paths|</span><br><span class="line">+-------------------+</span><br><span class="line">|root.yuzhouwan.user|</span><br><span class="line">+-------------------+</span><br><span class="line">Total line number = 1</span><br><span class="line">It costs 0.002s</span><br></pre></td></tr></tbody></table></figure>
<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> p <span class="keyword">in</span> `jps -ml | grep iotdb | awk <span class="string">'{print $1}'</span>`; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$p</span> &amp;&amp; <span class="built_in">kill</span> <span class="variable">$p</span>; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="待完善列表"><a href="#待完善列表" class="headerlink" title="待完善列表"></a>待完善列表</h4><ul>
<li>模拟集群故障频繁重启的情况，发现 RaftServer 会出现 OOM 问题，可能存在线程泄露问题</li>
<li>可以考虑使用 Google 设计的有界一致性 Hash 算法，替换原生的一致性算法，以提高集群扩缩容时的平衡性</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="总体架构图"><a href="#总体架构图" class="headerlink" title="总体架构图"></a>总体架构图</h3><p><img data-src="/picture/iotdb/apache_iotdb_architecture.png" alt="Apache IoTDB Architecture"></p>
<center>（图片来源：<a href="https://iotdb.apache.org/" target="_blank">iotdb.apache.org</a>™）</center>

<h3 id="写入链路"><a href="#写入链路" class="headerlink" title="写入链路"></a>写入链路</h3><pre class="mermaid">sequenceDiagram

participant Thrift
participant TSIService
participant TSServiceImpl
participant Planner
participant PlanExecutor
participant StorageEngine
participant StorageGroupProcessor
participant TsFileProcessor
participant AbstractMemTable
participant InsertRowPlan
participant WritableMemChunk
participant MeasurementSchema
participant TVList
participant ExclusiveWriteLogNode
participant TsFileFlushPolicy

opt insert into root.yuzhouwan(timestamp, value) values(1,1)
Thrift -&gt;&gt;+ TSIService : getResult
TSIService -&gt;&gt;+ TSServiceImpl : executeStatement
end

opt deviceId: root.yuzhouwan, time: 1, measurements: [value], values: [1.0]
TSServiceImpl -&gt;&gt;+ Planner : parseSQLToPhysicalPlan
Planner -&gt;&gt;- TSServiceImpl : PhysicalPlan

TSServiceImpl -&gt;&gt;+ TSServiceImpl : executeUpdateStatement
TSServiceImpl -&gt;&gt;+ TSServiceImpl : executeNonQueryPlan
TSServiceImpl -&gt;&gt;+ TSServiceImpl : executeNonQuery

TSServiceImpl -&gt;&gt; PlanExecutor : processNonQuery
PlanExecutor -&gt;&gt; StorageEngine : insert
StorageEngine -&gt;&gt; StorageGroupProcessor : insert
StorageGroupProcessor -&gt;&gt; StorageGroupProcessor : insert

StorageGroupProcessor -&gt;&gt;+ StorageGroupProcessor : writeLock


opt MemTable
StorageGroupProcessor -&gt;&gt;+ StorageEngine : getTimePartition

alt enable_partition is true
StorageEngine -&gt;&gt; StorageEngine : time / timePartitionInterval
else
StorageEngine -&gt;&gt; StorageEngine : 0
end

alt !isSequence &amp;&amp; time &gt; lastFlushTime &amp;&amp; enable_discard_out_of_order_data is true
StorageGroupProcessor --&gt;&gt; TSServiceImpl : return
end

StorageEngine -&gt;&gt;- StorageGroupProcessor : long timePartitionId

StorageGroupProcessor -&gt;&gt; StorageGroupProcessor : insertToTsFileProcessor
StorageGroupProcessor -&gt;&gt; TsFileProcessor : insert
TsFileProcessor -&gt;&gt; AbstractMemTable : insert
AbstractMemTable -&gt;&gt;+ InsertRowPlan : getIndex
InsertRowPlan -&gt;&gt;- AbstractMemTable : long index
AbstractMemTable -&gt;&gt; AbstractMemTable : updatePlanIndexes
AbstractMemTable -&gt;&gt; AbstractMemTable : write
AbstractMemTable -&gt;&gt;+ AbstractMemTable : createIfNotExistAndGet
AbstractMemTable -&gt;&gt;- AbstractMemTable : IWritableMemChunk
AbstractMemTable -&gt;&gt; WritableMemChunk : write(insertTime, objectValue)

WritableMemChunk -&gt;&gt;+ MeasurementSchema : getType
MeasurementSchema -&gt;&gt;- WritableMemChunk : TSDataType

alt BOOLEAN
WritableMemChunk -&gt;&gt; WritableMemChunk : putBoolean
else INT32
WritableMemChunk -&gt;&gt; WritableMemChunk : putInt
else INT64
WritableMemChunk -&gt;&gt; WritableMemChunk : putLong
else FLOAT
WritableMemChunk -&gt;&gt; WritableMemChunk : putFloat
else DOUBLE
WritableMemChunk -&gt;&gt; WritableMemChunk : putDouble
else TEXT
WritableMemChunk -&gt;&gt; WritableMemChunk : putBinary
end

WritableMemChunk -&gt;&gt; TVList : putFloat
end


alt enable_wal is true
opt WAL
TsFileProcessor -&gt;&gt;+ TsFileProcessor : getLogNode
TsFileProcessor -&gt;&gt;- TsFileProcessor : WriteLogNode
TsFileProcessor -&gt;&gt; ExclusiveWriteLogNode : write

ExclusiveWriteLogNode -&gt;&gt; ExclusiveWriteLogNode : putLog

alt &gt;= flush_wal_threshold
ExclusiveWriteLogNode -&gt;&gt; ExclusiveWriteLogNode : sync
end

end
end


opt Flush
StorageGroupProcessor -&gt;&gt;+ TsFileProcessor : shouldFlush
TsFileProcessor -&gt;&gt;- StorageGroupProcessor : boolean

alt memSize of memtable &gt;= memtable_size_threshold or pointNum of memtable &gt;= avg_series_point_number_threshold
StorageGroupProcessor -&gt;&gt; TsFileFlushPolicy : apply
TsFileFlushPolicy -&gt;&gt;+ TsFileProcessor : shouldClose
TsFileProcessor -&gt;&gt;- TsFileFlushPolicy : boolean
alt shouldClose is true
TsFileFlushPolicy -&gt;&gt; StorageGroupProcessor : asyncCloseOneTsFileProcessor
else
TsFileFlushPolicy -&gt;&gt; TsFileProcessor : asyncFlush
end
end

end



StorageGroupProcessor -&gt;&gt;- StorageGroupProcessor : writeUnlock

StorageGroupProcessor --&gt;&gt; TSServiceImpl : may throw exception
end

TSServiceImpl -&gt;&gt;- TSServiceImpl : boolean succ
TSServiceImpl -&gt;&gt;- TSServiceImpl : TSStatus
TSServiceImpl -&gt;&gt;- TSServiceImpl : TSExecuteStatementResp
TSServiceImpl -&gt;&gt;- TSIService : TSExecuteStatementResp
TSIService -&gt;&gt;- Thrift : executeStatement_result</pre>

<div class="note success">点击<a href="/picture/iotdb/apache_iotdb_write.svg" target="_blank">这里</a>查看完整大图</div>
<div class="note info">写入数据时，时间粒度支持 ms / us / ns 三种，默认为 ms，且存储时间粒度统一为 ms</div>
<div class="note info">参数 enable_partition 控制是否 partition 分区，默认为 false</div>
<div class="note info">参数 enable_discard_out_of_order_data 控制是否丢弃乱序数据，默认为 false</div>
<div class="note info">参数 enable_wal 控制是否开启写 WAL 日志，默认为 true</div>
<div class="note info">参数 flush_wal_threshold 控制 MemTable 中缓存了多少条记录后，才会同步到 WAL 日志文件中，默认为 10000</div>
<div class="note info">参数 memtable_size_threshold 控制 MemTable 中缓存占用多大内存后，才会 Flush 到 TSFile 数据文件中，默认为 1G</div>
<div class="note info">参数 avg_series_point_number_threshold 控制 MemTable 中缓存了多少条记录后，才会 Flush 到 TSFile 数据文件中，默认为 100000</div>



<h3 id="查询链路"><a href="#查询链路" class="headerlink" title="查询链路"></a>查询链路</h3><pre class="mermaid">sequenceDiagram

participant Thrift
participant TSIService
participant TSServiceImpl
participant Planner
participant PhysicalPlan
participant QueryPlan
participant RawDataQueryPlan
participant IPlanExecutor
participant IQueryRouter
participant RawDataQueryExecutor
participant RawQueryDataSetWithoutValueFilter
participant RawQueryDataSetWithoutValueFilter.ReadTask
participant IBatchReader
participant TSQueryDataSet
participant TSExecuteStatementResp

opt select * from root.*
Thrift -&gt;&gt;+ TSIService : getResult
TSIService -&gt;&gt;+ TSServiceImpl : requestStatementId
TSServiceImpl -&gt;&gt;- TSIService : long statementId

TSIService -&gt;&gt;+ TSServiceImpl : executeStatement


TSServiceImpl -&gt;&gt;+ Planner : parseSQLToPhysicalPlan
Planner -&gt;&gt;- TSServiceImpl : PhysicalPlan
TSServiceImpl -&gt;&gt;+ PhysicalPlan : isQuery
PhysicalPlan -&gt;&gt;- TSServiceImpl : boolean
alt isQuery
TSServiceImpl -&gt;&gt;+ TSServiceImpl : internalExecuteQueryStatement
TSServiceImpl -&gt;&gt;+ TSServiceImpl : getQueryResp
TSServiceImpl -&gt;&gt;+ TSServiceImpl : getQueryColumnHeaders

TSServiceImpl -&gt;&gt;+ TSServiceImpl : getWideQueryHeaders

opt root.yuzhouwan.value
TSServiceImpl -&gt;&gt;+ QueryPlan : getPaths
QueryPlan -&gt;&gt;- TSServiceImpl : list of PartialPath
end

TSServiceImpl -&gt;&gt;+ TSServiceImpl : getSeriesTypeByPath
TSServiceImpl -&gt;&gt;- TSServiceImpl : TSDataType

TSServiceImpl --&gt;&gt;- TSServiceImpl : list of respColumns and list of columnTypes
end


alt plan instanceof is true
TSServiceImpl -&gt;&gt;+ RawDataQueryPlan : getDeduplicatedPaths().size()
RawDataQueryPlan -&gt;&gt;- TSServiceImpl : long deduplicatedPathNum
end

TSServiceImpl -&gt;&gt;+ TSServiceImpl : generateQueryId
TSServiceImpl -&gt;&gt;- TSServiceImpl : long queryId

TSServiceImpl -&gt;&gt;+ TSServiceImpl : createQueryDataSet

alt execute query
TSServiceImpl -&gt;&gt;+ IPlanExecutor : processQuery
IPlanExecutor -&gt;&gt;+ IPlanExecutor : processDataQuery
IPlanExecutor -&gt;&gt;+ IQueryRouter : rawDataQuery
IQueryRouter -&gt;&gt;+ RawDataQueryExecutor : executeWithoutValueFilter
RawDataQueryExecutor -&gt;&gt;+ RawQueryDataSetWithoutValueFilter : new
RawQueryDataSetWithoutValueFilter -&gt;&gt; RawQueryDataSetWithoutValueFilter : init
RawQueryDataSetWithoutValueFilter -&gt;&gt;+ RawQueryDataSetWithoutValueFilter.ReadTask : new
RawQueryDataSetWithoutValueFilter.ReadTask -&gt;&gt;- RawQueryDataSetWithoutValueFilter : RawQueryDataSetWithoutValueFilter.ReadTask
RawQueryDataSetWithoutValueFilter.ReadTask -&gt;&gt; RawQueryDataSetWithoutValueFilter.ReadTask : runMayThrow
RawQueryDataSetWithoutValueFilter.ReadTask -&gt;&gt;+ IBatchReader : nextBatch
IBatchReader -&gt;&gt;- RawQueryDataSetWithoutValueFilter.ReadTask : BatchData
RawQueryDataSetWithoutValueFilter -&gt;&gt; RawQueryDataSetWithoutValueFilter : fillCache
RawQueryDataSetWithoutValueFilter -&gt;&gt;- RawDataQueryExecutor : QueryDataSet
RawDataQueryExecutor -&gt;&gt;- IQueryRouter : QueryDataSet
IQueryRouter -&gt;&gt;- IPlanExecutor : QueryDataSet
IPlanExecutor -&gt;&gt;- IPlanExecutor : QueryDataSet
IPlanExecutor -&gt;&gt;- TSServiceImpl : QueryDataSet
end

TSServiceImpl -&gt;&gt;- TSServiceImpl : QueryDataSet

alt build result
TSServiceImpl -&gt;&gt;+ TSServiceImpl : fillRpcReturnData
TSServiceImpl -&gt;&gt;+ RawQueryDataSetWithoutValueFilter : fillBuffer
RawQueryDataSetWithoutValueFilter -&gt;&gt; TSQueryDataSet : setTime
RawQueryDataSetWithoutValueFilter -&gt;&gt; TSQueryDataSet : setValueList
RawQueryDataSetWithoutValueFilter -&gt;&gt; TSQueryDataSet : setBitmapList
RawQueryDataSetWithoutValueFilter -&gt;&gt;- TSServiceImpl : TSQueryDataSet

TSServiceImpl -&gt;&gt; TSExecuteStatementResp : setQueryDataSet
TSServiceImpl -&gt;&gt; TSExecuteStatementResp : setQueryId

TSServiceImpl -&gt;&gt;- TSServiceImpl : TSQueryDataSet
end

TSServiceImpl -&gt;&gt;- TSServiceImpl : TSExecuteStatementResp
TSServiceImpl -&gt;&gt;- TSServiceImpl : TSExecuteStatementResp
TSServiceImpl -&gt;&gt;- TSServiceImpl : TSExecuteStatementResp
TSServiceImpl -&gt;&gt;- TSIService : TSExecuteStatementResp
end

TSIService -&gt;&gt;- Thrift : requestStatementId_result</pre>

<div class="note success">点击<a href="/picture/iotdb/apache_iotdb_read.svg" target="_blank">这里</a>查看完整大图</div>



<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tree</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── data</span><br><span class="line">│&nbsp;&nbsp; ├── sequence</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── root.ln</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp;     └── 0</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp;         └── 1606030145164-1-0.tsfile</span><br><span class="line">│&nbsp;&nbsp; └── unsequence</span><br><span class="line">├── system</span><br><span class="line">│&nbsp;&nbsp; ├── roles</span><br><span class="line">│&nbsp;&nbsp; ├── schema</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── mlog.txt</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── system.properties</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── tlog.txt</span><br><span class="line">│&nbsp;&nbsp; ├── storage_groups</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── root.ln</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp;     ├── 0</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp;     │&nbsp;&nbsp; └── Version-100</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp;     └── upgrade</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp;         └── Version-100</span><br><span class="line">│&nbsp;&nbsp; ├── upgrade</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── upgrade.txt</span><br><span class="line">│&nbsp;&nbsp; └── users</span><br><span class="line">│&nbsp;&nbsp;     └── root.profile</span><br><span class="line">└── wal</span><br><span class="line">    └── root.ln-1606030145164-1-0.tsfile</span><br><span class="line">        └── wal1</span><br><span class="line"></span><br><span class="line">16 directories, 9 files</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat system/schema/mlog.txt</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2,root.ln</span><br><span class="line">0,root.ln.wf01.wt01.status,0,2,1,,,</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat system/schema/system.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#System properties:</span></span><br><span class="line"><span class="comment">#Sun Nov 22 15:28:58 CST 2020</span></span><br><span class="line"><span class="attr">partition_interval</span>=<span class="string">9223372036854775807</span></span><br><span class="line"><span class="attr">timestamp_precision</span>=<span class="string">ms</span></span><br><span class="line"><span class="attr">tsfile_storage_fs</span>=<span class="string">LOCAL</span></span><br><span class="line"><span class="attr">enable_partition</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">max_degree_of_index_node</span>=<span class="string">1024</span></span><br><span class="line"><span class="attr">tag_attribute_total_size</span>=<span class="string">700</span></span><br><span class="line"><span class="attr">iotdb_version</span>=<span class="string">UNKNOWN</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat system/users/root.profile</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rootc���{��Pykd��HE%</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat wal/root.ln-1606030145164-1-0.tsfile/wal1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">8droot.ln.wf01.wt01status�O�f%</span><br></pre></td></tr></tbody></table></figure>
<h3 id="压缩策略"><a href="#压缩策略" class="headerlink" title="压缩策略"></a>压缩策略</h3><ul>
<li>LevelCompactionTsFileManagement</li>
<li>NoCompactionTsFileManagement</li>
</ul>
<h2 id="性能压测"><a href="#性能压测" class="headerlink" title="性能压测"></a>性能压测</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 --single-branch --branch master https://github.com/thulab/iotdb-benchmark</span><br><span class="line">$ <span class="built_in">cd</span> iotdb-benchmark</span><br><span class="line">$ mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line">$ mkdir ../lib</span><br><span class="line">$ find . -name <span class="string">'*jar'</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">echo</span> {} \; -<span class="built_in">exec</span> cp {} ../lib/ \;</span><br><span class="line">$ mv ../lib .</span><br><span class="line">$ ./benchmark.sh</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="Cannot-connect-to-node-Node"><a href="#Cannot-connect-to-node-Node" class="headerlink" title="Cannot connect to node Node"></a>Cannot connect to node Node</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">---------------------</span><br><span class="line"><span class="function">Starting <span class="title">IoTDB</span> <span class="params">(Cluster Mode)</span></span></span><br><span class="line"><span class="function">---------------------</span></span><br><span class="line"><span class="function">Maximum memory allocation pool </span>= 4096MB, initial memory allocation pool = 800MB</span><br><span class="line">If you want to change <span class="keyword">this</span> configuration, please check conf/iotdb-env.sh(Unix or OS X, <span class="keyword">if</span> you use Windows, check conf/iotdb-env.bat).</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">126</span> [main] INFO  org.apache.iotdb.cluster.config.ClusterDescriptor:<span class="number">191</span> - Start to read config file sbin/../conf/iotdb-cluster.properties</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">159</span> [main] INFO  org.apache.iotdb.db.conf.IoTDBDescriptor:<span class="number">148</span> - Start to read config file file:sbin/../conf/iotdb-engine.properties</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">161</span> [main] INFO  org.apache.iotdb.db.conf.IoTDBDescriptor:<span class="number">803</span> - allocateMemoryForRead = <span class="number">347078656</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">161</span> [main] INFO  org.apache.iotdb.db.conf.IoTDBDescriptor:<span class="number">804</span> - allocateMemoryForWrite = <span class="number">2429550592</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">161</span> [main] INFO  org.apache.iotdb.db.conf.IoTDBDescriptor:<span class="number">805</span> - allocateMemoryForSchema = <span class="number">347078656</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">162</span> [main] INFO  org.apache.iotdb.db.conf.IoTDBDescriptor:<span class="number">247</span> - IoTDB enable memory control: <span class="keyword">true</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">166</span> [main] INFO  org.apache.iotdb.tsfile.common.conf.TSFileDescriptor:<span class="number">108</span> - Start to read config file sbin/../conf/iotdb-engine.properties</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">168</span> [main] INFO  org.apache.iotdb.cluster.ClusterMain:<span class="number">90</span> - Running mode -s</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">250</span> [main] INFO  org.apache.iotdb.db.engine.version.SimpleFileVersionController:<span class="number">115</span> - Version file updated, previous: /Users/benedictjin/apps/iotdb/cluster/sbin/../data/system/raftLog/<span class="number">0</span>/upgrade/Version-<span class="number">100</span>, current: /Users/benedictjin/apps/iotdb/cluster/sbin/../data/system/raftLog/<span class="number">0</span>/upgrade/Version-<span class="number">200</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">252</span> [main] INFO  org.apache.iotdb.cluster.log.manage.serializable.SyncLogDequeSerializer:<span class="number">786</span> - Recovered log meta: LogManagerMeta{ commitLogTerm=-<span class="number">1</span>, commitLogIndex=-<span class="number">1</span>, lastLogIndex=-<span class="number">1</span>, lastLogTerm=-<span class="number">1</span>, maxHaveAppliedCommitIndex=-<span class="number">1</span>}, availableVersion: [<span class="number">0</span>,<span class="number">9223372036854775807</span>], state: HardState{currentTerm=<span class="number">0</span>, voteFor=<span class="keyword">null</span>}</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">253</span> [main] INFO  org.apache.iotdb.cluster.log.manage.serializable.SyncLogDequeSerializer:<span class="number">482</span> - Find log type =idx log files [sbin/../data/system/raftLog/<span class="number">0</span>/<span class="number">0</span>-<span class="number">9223372036854775807</span>-<span class="number">101</span>-idx]</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">260</span> [main] INFO  org.apache.iotdb.cluster.log.manage.serializable.SyncLogDequeSerializer:<span class="number">482</span> - Find log type =data log files [sbin/../data/system/raftLog/<span class="number">0</span>/<span class="number">0</span>-<span class="number">9223372036854775807</span>-<span class="number">101</span>-data]</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">261</span> [main] INFO  org.apache.iotdb.cluster.log.manage.serializable.SyncLogDequeSerializer:<span class="number">546</span> - no log index file to recover</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">269</span> [main] INFO  org.apache.iotdb.cluster.server.member.MetaGroupMember:<span class="number">1267</span> - Recovered node identifier <span class="number">356238364</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">270</span> [main] INFO  org.apache.iotdb.cluster.server.member.MetaGroupMember:<span class="number">1294</span> - The identifier of <span class="keyword">this</span> node has been set to <span class="number">356238364</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">58</span>,<span class="number">307</span> [main] INFO  org.apache.iotdb.db.auth.authorizer.BasicAuthorizer$InstanceHolder:<span class="number">87</span> - Authorizer provider <span class="class"><span class="keyword">class</span>: <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">auth</span>.<span class="title">authorizer</span>.<span class="title">LocalFileAuthorizer</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,313 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">auth</span>.<span class="title">user</span>.<span class="title">BasicUserManager</span>:79 - <span class="title">Admin</span> <span class="title">initialized</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,316 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">auth</span>.<span class="title">user</span>.<span class="title">BasicUserManager</span>:79 - <span class="title">Admin</span> <span class="title">initialized</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,316 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">auth</span>.<span class="title">authorizer</span>.<span class="title">BasicAuthorizer</span>:67 - <span class="title">Initialization</span> <span class="title">of</span> <span class="title">Authorizer</span> <span class="title">completes</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,329 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">member</span>.<span class="title">MetaGroupMember</span>:1189 - <span class="title">No</span> <span class="title">partition</span> <span class="title">table</span> <span class="title">file</span> <span class="title">found</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,334 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">RaftServer</span>:220 - <span class="title">Cluster</span> <span class="title">node</span> <span class="title">Node</span>(<span class="title">ip</span>:127.0.0.1, <span class="title">metaPort</span>:9003, <span class="title">nodeIdentifier</span>:356238364, <span class="title">dataPort</span>:40010, <span class="title">clientPort</span>:55560) <span class="title">begins</span> <span class="title">to</span> <span class="title">set</span> <span class="title">up</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,348 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">RaftServer</span>:231 - <span class="title">Cluster</span> <span class="title">node</span> <span class="title">Node</span>(<span class="title">ip</span>:127.0.0.1, <span class="title">metaPort</span>:9003, <span class="title">nodeIdentifier</span>:356238364, <span class="title">dataPort</span>:40010, <span class="title">clientPort</span>:55560) <span class="title">is</span> <span class="title">up</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,349 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">heartbeat</span>.<span class="title">HeartbeatServer</span>:201 - <span class="title">Cluster</span> <span class="title">node</span>'<span class="title">s</span> <span class="title">heartbeat</span> <span class="title">Node</span>(<span class="title">ip</span>:127.0.0.1, <span class="title">metaPort</span>:9003, <span class="title">nodeIdentifier</span>:356238364, <span class="title">dataPort</span>:40010, <span class="title">clientPort</span>:55560) <span class="title">begins</span> <span class="title">to</span> <span class="title">set</span> <span class="title">up</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,350 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">heartbeat</span>.<span class="title">HeartbeatServer</span>:213 - <span class="title">Cluster</span> <span class="title">node</span>'<span class="title">s</span> <span class="title">heartbeat</span> <span class="title">Node</span>(<span class="title">ip</span>:127.0.0.1, <span class="title">metaPort</span>:9003, <span class="title">nodeIdentifier</span>:356238364, <span class="title">dataPort</span>:40010, <span class="title">clientPort</span>:55560) <span class="title">is</span> <span class="title">up</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,361 [<span class="title">main</span>] <span class="title">WARN</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">StartupChecks</span>:35 - <span class="title">iotdb</span>.<span class="title">jmx</span>.<span class="title">port</span> <span class="title">missing</span> <span class="title">from</span> <span class="title">iotdb</span>-<span class="title">env</span>.<span class="title">sh</span>(<span class="title">Unix</span> <span class="title">or</span> <span class="title">OS</span> <span class="title">X</span>, <span class="title">if</span> <span class="title">you</span> <span class="title">use</span> <span class="title">Windows</span>, <span class="title">check</span> <span class="title">conf</span>/<span class="title">iotdb</span>-<span class="title">env</span>.<span class="title">bat</span>)</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,361 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">StartupChecks</span>:50 - <span class="title">JDK</span> <span class="title">veriosn</span> <span class="title">is</span> 8.</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,361 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:95 - <span class="title">Setting</span> <span class="title">up</span> <span class="title">IoTDB</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,362 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:99 - <span class="title">recover</span> <span class="title">the</span> <span class="title">schema</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,402 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:151 - <span class="title">spend</span> 40<span class="title">ms</span> <span class="title">to</span> <span class="title">recover</span> <span class="title">schema</span>.</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,402 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:152 - <span class="title">After</span> <span class="title">initializing</span>, <span class="title">tsFile</span> <span class="title">threshold</span> <span class="title">is</span> 0, <span class="title">memtableSize</span> <span class="title">is</span> 134217728</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,407 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">concurrent</span>.<span class="title">IoTDBThreadPoolFactory</span>:46 - <span class="title">new</span> <span class="title">fixed</span> <span class="title">thread</span> <span class="title">pool</span>: <span class="title">Flush</span>-<span class="title">ServerServiceImpl</span>, <span class="title">thread</span> <span class="title">number</span>: 8</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,409 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">concurrent</span>.<span class="title">IoTDBThreadPoolFactory</span>:80 - <span class="title">new</span> <span class="title">cached</span> <span class="title">thread</span> <span class="title">pool</span>: <span class="title">Flush</span>-<span class="title">SubTask</span>-<span class="title">ServerServiceImpl</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,409 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">engine</span>.<span class="title">flush</span>.<span class="title">pool</span>.<span class="title">FlushSubTaskPoolManager</span>:57 - <span class="title">Flush</span> <span class="title">sub</span> <span class="title">task</span> <span class="title">manager</span> <span class="title">started</span>.</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,409 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">engine</span>.<span class="title">flush</span>.<span class="title">pool</span>.<span class="title">FlushTaskPoolManager</span>:58 - <span class="title">Flush</span> <span class="title">task</span> <span class="title">manager</span> <span class="title">started</span>.</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,414 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">cost</span>.<span class="title">statistic</span>.<span class="title">Measurement</span>:142 - <span class="title">start</span> <span class="title">measurement</span> <span class="title">stats</span> <span class="title">module</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,415 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">cost</span>.<span class="title">statistic</span>.<span class="title">Measurement</span>:250 - <span class="title">start</span> <span class="title">the</span> <span class="title">consuming</span> <span class="title">task</span> <span class="title">in</span> <span class="title">the</span> <span class="title">measurement</span> <span class="title">stats</span> <span class="title">module</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,422 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">concurrent</span>.<span class="title">IoTDBThreadPoolFactory</span>:46 - <span class="title">new</span> <span class="title">fixed</span> <span class="title">thread</span> <span class="title">pool</span>: <span class="title">Recovery</span>-<span class="title">Thread</span>-<span class="title">Pool</span>, <span class="title">thread</span> <span class="title">number</span>: 8</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,427 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">concurrent</span>.<span class="title">IoTDBThreadPoolFactory</span>:63 - <span class="title">new</span> <span class="title">single</span> <span class="title">thread</span> <span class="title">pool</span>: <span class="title">Begin</span>-<span class="title">Recovery</span>-<span class="title">Pool</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,430 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">thrift</span>.<span class="title">ThriftService</span>:99 - <span class="title">IoTDB</span>: <span class="title">start</span> <span class="title">RPC</span> <span class="title">ServerService</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,441 [<span class="title">RPC</span>-<span class="title">ServerServiceImpl</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">thrift</span>.<span class="title">ThriftServiceThread</span>:125 - <span class="title">The</span> <span class="title">RPC</span> <span class="title">ServerService</span> <span class="title">service</span> <span class="title">thread</span> <span class="title">begin</span> <span class="title">to</span> <span class="title">run</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,544 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">thrift</span>.<span class="title">ThriftService</span>:117 - <span class="title">IoTDB</span>: <span class="title">start</span> <span class="title">RPC</span> <span class="title">ServerService</span> <span class="title">successfully</span>, <span class="title">listening</span> <span class="title">on</span> <span class="title">ip</span> 0.0.0.0 <span class="title">port</span> 6667</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,544 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:118 - <span class="title">IoTDB</span> <span class="title">is</span> <span class="title">set</span> <span class="title">up</span>, <span class="title">now</span> <span class="title">may</span> <span class="title">some</span> <span class="title">sgs</span> <span class="title">are</span> <span class="title">not</span> <span class="title">ready</span>, <span class="title">please</span> <span class="title">wait</span> <span class="title">several</span> <span class="title">seconds</span>...</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,554 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">UpgradeSevice</span>:112 - <span class="title">finish</span> <span class="title">counting</span> <span class="title">upgrading</span> <span class="title">files</span>, <span class="title">total</span> <span class="title">num</span>:0</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,554 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">UpgradeSevice</span>:73 - <span class="title">Waiting</span> <span class="title">for</span> <span class="title">upgrade</span> <span class="title">task</span> <span class="title">pool</span> <span class="title">to</span> <span class="title">shut</span> <span class="title">down</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,554 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">UpgradeSevice</span>:78 - <span class="title">Upgrade</span> <span class="title">service</span> <span class="title">stopped</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,565 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">engine</span>.<span class="title">merge</span>.<span class="title">manage</span>.<span class="title">MergeManager</span>:154 - <span class="title">MergeManager</span> <span class="title">started</span></span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,566 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">engine</span>.<span class="title">compaction</span>.<span class="title">CompactionMergeTaskPoolManager</span>:57 - <span class="title">Compaction</span> <span class="title">task</span> <span class="title">manager</span> <span class="title">started</span>.</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,566 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:137 - <span class="title">Congratulation</span>, <span class="title">IoTDB</span> <span class="title">is</span> <span class="title">set</span> <span class="title">up</span> <span class="title">successfully</span>. <span class="title">Now</span>, <span class="title">enjoy</span> <span class="title">yourself</span>!</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,566 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">db</span>.<span class="title">service</span>.<span class="title">IoTDB</span>:91 - <span class="title">IoTDB</span> <span class="title">has</span> <span class="title">started</span>.</span></span><br><span class="line"><span class="class">2020-12-01 17:12:58,569 [<span class="title">main</span>] <span class="title">INFO</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">member</span>.<span class="title">RaftMember</span>:282 - <span class="title">Meta</span> <span class="title">started</span></span></span><br><span class="line"><span class="class">2020-12-01 17:13:03,578 [<span class="title">pool</span>-12-<span class="title">thread</span>-1] <span class="title">WARN</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">member</span>.<span class="title">MetaGroupMember</span>:1005 - <span class="title">Start</span> <span class="title">up</span> <span class="title">exception</span>. <span class="title">Cannot</span> <span class="title">connect</span> <span class="title">to</span> <span class="title">node</span> <span class="title">Node</span>(<span class="title">ip</span>:127.0.0.1, <span class="title">metaPort</span>:9005, <span class="title">nodeIdentifier</span>:0, <span class="title">dataPort</span>:40012, <span class="title">clientPort</span>:55561). <span class="title">Try</span> <span class="title">again</span> <span class="title">in</span> <span class="title">next</span> <span class="title">turn</span>.</span></span><br><span class="line"><span class="class">2020-12-01 17:13:03,578 [<span class="title">pool</span>-12-<span class="title">thread</span>-2] <span class="title">WARN</span>  <span class="title">org</span>.<span class="title">apache</span>.<span class="title">iotdb</span>.<span class="title">cluster</span>.<span class="title">server</span>.<span class="title">member</span>.<span class="title">MetaGroupMember</span>:1005 - <span class="title">Start</span> <span class="title">up</span> <span class="title">exception</span>. <span class="title">Cannot</span> <span class="title">connect</span> <span class="title">to</span> <span class="title">node</span> <span class="title">Node</span>(<span class="title">ip</span>:127.0.0.1, <span class="title">metaPort</span>:9007, <span class="title">nodeIdentifier</span>:0, <span class="title">dataPort</span>:40014, <span class="title">clientPort</span>:55562). <span class="title">Try</span> <span class="title">again</span> <span class="title">in</span> <span class="title">next</span> <span class="title">turn</span>.</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>　检查 <code>conf/iotdb-cluster.properties</code> 配置文件中 <code>seed_nodes</code> 是否都正常启动</p>
<h3 id="org-apache-maven-wagon-TransferFailedException-Transfer-failed"><a href="#org-apache-maven-wagon-TransferFailedException-Transfer-failed" class="headerlink" title="org.apache.maven.wagon.TransferFailedException: Transfer failed"></a>org.apache.maven.wagon.TransferFailedException: Transfer failed</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./mvnw.sh clean install -P mac</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.apache.maven.wagon.TransferFailedException: Transfer failed <span class="keyword">for</span> https:<span class="comment">//github.com/jt2594838/mvn-thrift-compiler/raw/master/thrift_0.12.0_0.13.0_mac.exe</span></span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.fillInputData (AbstractHttpClientWagon.java:<span class="number">1242</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.fillInputData (AbstractHttpClientWagon.java:<span class="number">1138</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.getInputStream (StreamWagon.java:<span class="number">126</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.getIfNewer (StreamWagon.java:<span class="number">88</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.get (StreamWagon.java:<span class="number">61</span>)</span><br><span class="line">    at com.googlecode.download.maven.plugin.internal.WGet.doGet (WGet.java:<span class="number">377</span>)</span><br><span class="line">    at com.googlecode.download.maven.plugin.internal.WGet.execute (WGet.java:<span class="number">282</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call (MultiThreadedBuilder.java:<span class="number">190</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call (MultiThreadedBuilder.java:<span class="number">186</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run (FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:<span class="number">511</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run (FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">    at java.lang.Thread.run (Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.readRecord (SSLSocketImpl.java:<span class="number">994</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.performInitialHandshake (SSLSocketImpl.java:<span class="number">1367</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.startHandshake (SSLSocketImpl.java:<span class="number">1395</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.startHandshake (SSLSocketImpl.java:<span class="number">1379</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket (SSLConnectionSocketFactory.java:<span class="number">436</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.conn.ssl.SSLConnectionSocketFactory.connectSocket (SSLConnectionSocketFactory.java:<span class="number">384</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.conn.DefaultHttpClientConnectionOperator.connect (DefaultHttpClientConnectionOperator.java:<span class="number">142</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.conn.PoolingHttpClientConnectionManager.connect (PoolingHttpClientConnectionManager.java:<span class="number">374</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.MainClientExec.establishRoute (MainClientExec.java:<span class="number">393</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.MainClientExec.execute (MainClientExec.java:<span class="number">236</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.ProtocolExec.execute (ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.RetryExec.execute (RetryExec.java:<span class="number">89</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.RedirectExec.execute (RedirectExec.java:<span class="number">110</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.client.InternalHttpClient.doExecute (InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.execute (AbstractHttpClientWagon.java:<span class="number">1002</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.fillInputData (AbstractHttpClientWagon.java:<span class="number">1160</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.fillInputData (AbstractHttpClientWagon.java:<span class="number">1138</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.getInputStream (StreamWagon.java:<span class="number">126</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.getIfNewer (StreamWagon.java:<span class="number">88</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.get (StreamWagon.java:<span class="number">61</span>)</span><br><span class="line">    at com.googlecode.download.maven.plugin.internal.WGet.doGet (WGet.java:<span class="number">377</span>)</span><br><span class="line">    at com.googlecode.download.maven.plugin.internal.WGet.execute (WGet.java:<span class="number">282</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call (MultiThreadedBuilder.java:<span class="number">190</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call (MultiThreadedBuilder.java:<span class="number">186</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run (FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:<span class="number">511</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run (FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">    at java.lang.Thread.run (Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: java.io.EOFException: SSL peer shut down incorrectly</span><br><span class="line">    at sun.security.ssl.InputRecord.read (InputRecord.java:<span class="number">505</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.readRecord (SSLSocketImpl.java:<span class="number">975</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.performInitialHandshake (SSLSocketImpl.java:<span class="number">1367</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.startHandshake (SSLSocketImpl.java:<span class="number">1395</span>)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.startHandshake (SSLSocketImpl.java:<span class="number">1379</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket (SSLConnectionSocketFactory.java:<span class="number">436</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.conn.ssl.SSLConnectionSocketFactory.connectSocket (SSLConnectionSocketFactory.java:<span class="number">384</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.conn.DefaultHttpClientConnectionOperator.connect (DefaultHttpClientConnectionOperator.java:<span class="number">142</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.conn.PoolingHttpClientConnectionManager.connect (PoolingHttpClientConnectionManager.java:<span class="number">374</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.MainClientExec.establishRoute (MainClientExec.java:<span class="number">393</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.MainClientExec.execute (MainClientExec.java:<span class="number">236</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.ProtocolExec.execute (ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.RetryExec.execute (RetryExec.java:<span class="number">89</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.RedirectExec.execute (RedirectExec.java:<span class="number">110</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.client.InternalHttpClient.doExecute (InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.httpclient.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.execute (AbstractHttpClientWagon.java:<span class="number">1002</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.fillInputData (AbstractHttpClientWagon.java:<span class="number">1160</span>)</span><br><span class="line">    at org.apache.maven.wagon.providers.http.wagon.shared.AbstractHttpClientWagon.fillInputData (AbstractHttpClientWagon.java:<span class="number">1138</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.getInputStream (StreamWagon.java:<span class="number">126</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.getIfNewer (StreamWagon.java:<span class="number">88</span>)</span><br><span class="line">    at org.apache.maven.wagon.StreamWagon.get (StreamWagon.java:<span class="number">61</span>)</span><br><span class="line">    at com.googlecode.download.maven.plugin.internal.WGet.doGet (WGet.java:<span class="number">377</span>)</span><br><span class="line">    at com.googlecode.download.maven.plugin.internal.WGet.execute (WGet.java:<span class="number">282</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call (MultiThreadedBuilder.java:<span class="number">190</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call (MultiThreadedBuilder.java:<span class="number">186</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run (FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:<span class="number">511</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run (FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">    at java.lang.Thread.run (Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://github.com/jt2594838/mvn-thrift-compiler/raw/master/thrift_0.12.0_0.13.0_mac.exe</span><br><span class="line">$ cp thrift_0.12.0_0.13.0_mac.exe thrift/target/tools/</span><br></pre></td></tr></tbody></table></figure>
<h2 id="社区发展"><a href="#社区发展" class="headerlink" title="社区发展"></a>社区发展</h2><h3 id="Star-趋势"><a href="#Star-趋势" class="headerlink" title="Star 趋势"></a>Star 趋势</h3><p><img data-src="/picture/iotdb/apache_iotdb_star_history.jpg" alt="Apache IoTDB Star History"></p>
<center>（图片来源：<a href="https://star-history.t9t.io/#apache/druid&amp;apache/pinot&amp;influxdata/influxdb&amp;timescale/timescaledb&amp;OpenTSDB/opentsdb&amp;crate/crate&amp;apache/iotdb" target="_blank">star-history.t9t.io</a>™ 官网）</center>

<h3 id="个人贡献"><a href="#个人贡献" class="headerlink" title="个人贡献"></a>个人贡献</h3><ul>
<li><a href="https://github.com/apache/iotdb/pulls?q=is%3Apr+author%3Aasdf2014">Pull Request</a></li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>物联网</category>
      </categories>
      <tags>
        <tag>IoT</tag>
        <tag>物联网</tag>
        <tag>Apache IoTDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 高级玩法</title>
    <url>/posts/30041/</url>
    <content><![CDATA[<p><img data-src="/picture/github/github_octocat.png" alt="Github Octocat"></p>
<center>（图片来源：<a href="https://github.com/asdf2014" target="_blank">Github</a>™ 官网）</center>

<h2 id="Git-Blame"><a href="#Git-Blame" class="headerlink" title="Git Blame"></a>Git Blame</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件中，每一行的修改人和最后改动时间</span></span><br><span class="line">$ git blame pom.xml</span><br><span class="line">  ^e81ccde3 (BenedictJin 2018-06-04 11:16:19 +0800   1) &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆当前分支，以此创建新的 branch，并切换</span></span><br><span class="line">$ git checkout -b &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名 branch 名称</span></span><br><span class="line">$ git branch -m &lt;old_name&gt; &lt;new_name&gt;</span><br><span class="line">$ git branch -m &lt;new_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复删除掉的 branch</span></span><br><span class="line"><span class="comment"># 查看你上一次 commit SHA1 值</span></span><br><span class="line">$ git reflog</span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">$ git branch &lt;branch_name&gt; &lt;sha1&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Cache"><a href="#Git-Cache" class="headerlink" title="Git Cache"></a>Git Cache</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 .gitignore 文件之后，可能有些文件报错 `ignored tracked with git`</span></span><br><span class="line"><span class="comment"># 需要用 `git rm --cached` 进行删除</span></span><br><span class="line">$ git rm --cached &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部分动态文件可能报错文件内容不一致 `the following files have staged content different from both the file and the HEAD`</span></span><br><span class="line"><span class="comment"># 需要增加 `-f` 参数进行强制删除</span></span><br><span class="line">$ git rm --cached -f .idea/workspace.xml</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h2 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git Cherry-pick"></a>Git Cherry-pick</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定某一次提交，合并到当前分支中</span></span><br><span class="line">$ git cherry-pick 5738c801c</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Checkout"><a href="#Git-Checkout" class="headerlink" title="Git Checkout"></a>Git Checkout</h2><h3 id="checkout-的同时，创建新的-branch"><a href="#checkout-的同时，创建新的-branch" class="headerlink" title="checkout 的同时，创建新的 branch"></a>checkout 的同时，创建新的 branch</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git checkout -b &lt;new_branch_new&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="撤销某个文件的修改"><a href="#撤销某个文件的修改" class="headerlink" title="撤销某个文件的修改"></a>撤销某个文件的修改</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></tbody></table></figure>
<!-- echo "backup..." && now_branch="`git branch | ccat | grep "*" | sed 's/* //g'`" && echo "now: $now_branch" && new_branch="${now_branch}_`date +%Y-%m-%d_%H%M%S`" && echo "new: $new_branch" && git checkout -b "$new_branch" && git checkout "$now_branch" && echo "done." -->
<h2 id="Git-Clone"><a href="#Git-Clone" class="headerlink" title="Git Clone"></a>Git Clone</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只下载最后一次 commit 版本的代码</span></span><br><span class="line">$ git <span class="built_in">clone</span> --depth 1 https://github.com/asdf2014/yuzhouwan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时，是不可以直接 push 代码的，需要下载剩下的历史 commit 记录，否则会报错 shallow update not allowed</span></span><br><span class="line">$ git fetch --unshallow origin</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Config"><a href="#Git-Config" class="headerlink" title="Git Config"></a>Git Config</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"asdf2014"</span></span><br><span class="line">$ git config --global user.email <span class="string">"asdf2014@apache.org"</span></span><br><span class="line">$ git reset .</span><br><span class="line">$ git add -A</span><br><span class="line">$ git diff --staged</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h2><h3 id="Allow-Empty"><a href="#Allow-Empty" class="headerlink" title="Allow Empty"></a>Allow Empty</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git commit --allow-empty -m <span class="string">'yuzhouwan.com'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Commit-Merge"><a href="#Commit-Merge" class="headerlink" title="Commit Merge"></a>Commit Merge</h3><h4 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"></span><br><span class="line">  651cc60d971aba93bdde645b6331c33068462645 Merge branch <span class="string">'master'</span> of https://github.com/asdf2014/superset</span><br><span class="line">  415610958494446ccd37c0c87da98eba56af42ac Merge branch <span class="string">'temp'</span></span><br><span class="line">  b881140282893fa4add183a2b3f2637968f95069 Merge branch <span class="string">'master'</span> into master</span><br><span class="line">  f2bf3160583533bd0dc5004f248f81251aa8c57e Add NUMERIC num_type (<span class="comment">#2127)</span></span><br><span class="line">  6a0fefdbd542da4ea313313a191eadd1efe58faa Using the time zone with specific name <span class="keyword">for</span> querying Druid</span><br><span class="line">  9cd38fa1eda63152c27b76c29dd948f29444b686 little code refactor <span class="keyword">in</span> models.py (<span class="comment">#2124)</span></span><br><span class="line"></span><br><span class="line">$ git reset --soft HEAD~2 &amp;&amp;</span><br><span class="line">$ git commit --edit -m <span class="string">"<span class="subst">$($ git log --format=%B --reverse HEAD..HEAD@{1})</span>"</span></span><br><span class="line"></span><br><span class="line">  [master fd41c16] Add NUMERIC num_type (<span class="comment">#2127)</span></span><br><span class="line">  1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改之后的 commit 信息</span></span><br><span class="line">fd41c1608579408fcd26d0dd03adf0d461599101 Add NUMERIC num_type (<span class="comment">#2127)</span></span><br><span class="line">6a0fefdbd542da4ea313313a191eadd1efe58faa Using the time zone with specific name <span class="keyword">for</span> querying Druid</span><br><span class="line">9cd38fa1eda63152c27b76c29dd948f29444b686 little code refactor <span class="keyword">in</span> models.py (<span class="comment">#2124)</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h4><h5 id="Failed-to-push-some-refs"><a href="#Failed-to-push-some-refs" class="headerlink" title="Failed to push some refs"></a>Failed to push some refs</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: asdf2014</span><br><span class="line">To https://github.com/asdf2014/superset.git</span><br><span class="line">! [rejected]        ext_deprecation_warning -&gt; ext_deprecation_warning (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/asdf2014/superset.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">'$ git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'$ git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 强制提交</span></span><br><span class="line">$ git push -u origin ext_deprecation_warning --force</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Commit-Remove"><a href="#Commit-Remove" class="headerlink" title="Commit Remove"></a>Commit Remove</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git reset --hard &lt;sha1-commit-id&gt;</span><br><span class="line">$ git push origin HEAD --force</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Commit-Change"><a href="#Commit-Change" class="headerlink" title="Commit Change"></a>Commit Change</h3><h4 id="只修改最后一次提交"><a href="#只修改最后一次提交" class="headerlink" title="只修改最后一次提交"></a>只修改最后一次提交</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">$ git commit --amend</span><br><span class="line">$ git commit --amend -m <span class="string">"New commit message"</span></span><br><span class="line">$ git commit --amend --author <span class="string">"Author Name &lt;email@address.com&gt;"</span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ git commit --amend -m <span class="string">'remove warnings.simplefilter from cli.py into superset for PEP (#2137)'</span></span><br><span class="line">$ git commit --amend --author <span class="string">"asdf2014 &lt;asdf2014@apache.org&gt;"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="修改之前的提交信息"><a href="#修改之前的提交信息" class="headerlink" title="修改之前的提交信息"></a>修改之前的提交信息</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git rebase -i HEAD~2</span><br><span class="line">  pick xxxx</span><br><span class="line">  reword yyyy</span><br></pre></td></tr></tbody></table></figure>
<h4 id="修改提交的日期"><a href="#修改提交的日期" class="headerlink" title="修改提交的日期"></a>修改提交的日期</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前时间</span></span><br><span class="line">$ date -R</span><br><span class="line">  Mon, 07 Jan 2018 11:12:55 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最后一次 commit 的提交日期</span></span><br><span class="line">$ git commit --amend --date=<span class="string">"Mon, 07 Jan 2018 12:00:00 +0800"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新提交日期为当前时间</span></span><br><span class="line">$ git commit --amend --date=<span class="string">"<span class="subst">$(date -R)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Reset-into-Specific-Commit"><a href="#Reset-into-Specific-Commit" class="headerlink" title="Reset into Specific Commit"></a>Reset into Specific Commit</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># It will make your local code and local history be just like it was at that commit. But then if you wanted to push this to someone else who has the new history, it would fail.</span></span><br><span class="line">$ git reset --hard c14809fa</span><br><span class="line"></span><br><span class="line"><span class="comment"># It will make your local files changed to be like they were then, but leave your history etc. the same.</span></span><br><span class="line">$ git reset --soft c14809fa</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Squash-Commits-into-a-Single-Commit"><a href="#Squash-Commits-into-a-Single-Commit" class="headerlink" title="Squash Commits into a Single Commit"></a>Squash Commits into a Single Commit</h3><h4 id="常规操作-1"><a href="#常规操作-1" class="headerlink" title="常规操作"></a>常规操作</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看哪些 commits 需要进行合并</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"><span class="comment"># 合并最后 11 个 commit</span></span><br><span class="line">$ git rebase -i HEAD~11</span><br><span class="line">  pick xxxx yyyy</span><br><span class="line">  pick xxxx yyyy</span><br><span class="line">  pick xxxx yyyy</span><br><span class="line">  <span class="comment"># 将需要压缩的 commit 之前的 `pick` 替换为 `squash`</span></span><br><span class="line">  pick xxxx yyyy</span><br><span class="line">  squash xxxx yyyy</span><br><span class="line">  squash xxxx yyyy</span><br><span class="line"></span><br><span class="line">$ git commit --amend -m <span class="string">'The log length has exceeded the limit of 4 MB in Travis'</span></span><br><span class="line">$ git push origin travis_log --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需解决冲突后，继续进行 rebase 操作，可执行</span></span><br><span class="line">$ git rebase --<span class="built_in">continue</span></span><br><span class="line"><span class="comment"># 如果想中断 rebase 操作，则执行</span></span><br><span class="line">$ git rebase --abort</span><br><span class="line"><span class="comment"># 更多细节</span></span><br><span class="line">$ git rebase --<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></tbody></table></figure>
<h5 id="回滚上一次操作"><a href="#回滚上一次操作" class="headerlink" title="回滚上一次操作"></a><a href="https://stackoverflow.com/questions/927358/how-to-undo-the-most-recent-commits-in-git">回滚上一次操作</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Something terribly misguided"</span></span><br><span class="line">$ git reset HEAD~</span><br><span class="line">&lt;&lt; <span class="string">edit files as necessary &gt;&gt;</span></span><br><span class="line"><span class="string">$ git add ...</span></span><br><span class="line"><span class="string">$ git commit -c ORIG_HEAD</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="指定-commit-number"><a href="#指定-commit-number" class="headerlink" title="指定 commit number"></a>指定 commit number</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git rebase &lt;commit number&gt;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="合并-branch-改动到-master-中"><a href="#合并-branch-改动到-master-中" class="headerlink" title="合并 branch 改动到 master 中"></a>合并 branch 改动到 master 中</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 会将 branch 里的 commit 排到 master 的顶部，避免带 Merge 信息的 `空 commit` 出现</span></span><br><span class="line">$ git checkout &lt;branch name&gt;</span><br><span class="line">$ git rebase -i master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果已经在当前 branch 执行了 git merge master，并解决了冲突，可以直接执行下面这行命令，完成 rebase 操作</span></span><br><span class="line">$ git rebase --root --onto master --preserve-merges</span><br><span class="line"></span><br><span class="line"><span class="comment"># 万一出现太多的问题，难以解决，可以采用如下暴力的方式（在意 commit 信息的，请预先备份好）</span></span><br><span class="line">$ git rebase --abort                <span class="comment"># 首先 abort 之前的 rebase 流程</span></span><br><span class="line">$ git checkout code_refactoring</span><br><span class="line">$ git checkout -b re2</span><br><span class="line">$ git branch root bbb61e638b391d29  <span class="comment"># 以当前 branch 未做任何修改之前的 commit 为基础，创建 root 分支</span></span><br><span class="line">$ git checkout re2</span><br><span class="line">$ git diff master &gt; ../123.patch    <span class="comment"># 当前 branch 相对 master 已经做的修改打出 patch 文件</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git checkout -b r2</span><br><span class="line">$ git apply ../123.patch            <span class="comment"># 以 master 为基础，apply 分支上做的修改</span></span><br><span class="line">$ git diff master</span><br><span class="line">$ git status</span><br><span class="line">$ git diff --name-status | wc -l    <span class="comment"># 确认修改的文件数 是否正确</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git status</span><br><span class="line">$ git diff master</span><br><span class="line">$ git commit -m <span class="string">'Improve `collection` related things that reusing a immutable object instead of creating a new object'</span></span><br><span class="line">$ git status</span><br><span class="line">$ git push origin r2:code_refactoring -f</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Diff"><a href="#Git-Diff" class="headerlink" title="Git Diff"></a>Git Diff</h2><h3 id="Git-diff-two-commits"><a href="#Git-diff-two-commits" class="headerlink" title="Git diff two commits"></a>Git diff two commits</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git diff 1285c982 b0aaa7de &gt; v3.4.6_vs_v3.4.10.patch</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Git-diff-two-branchs"><a href="#Git-diff-two-branchs" class="headerlink" title="Git diff two branchs"></a>Git diff two branchs</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git diff branch_1..branch_2</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h2><h3 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Github 上对某一个开源项目进行 fork</span></span><br><span class="line">https://github.com/apache/superset</span><br><span class="line">https://github.com/asdf2014/superset (forked from apache/superset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地获取 fork 出来的 asdf2014/superset</span></span><br><span class="line">$ git init</span><br><span class="line">$ git remote add origin https://github.com/asdf2014/superset.git</span><br><span class="line">$ git remote -v</span><br><span class="line">  origin  https://github.com/asdf2014/superset.git (fetch)</span><br><span class="line">  origin  https://github.com/asdf2014/superset.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 发现并没有 airbnb/superset 的 origin/master，可以在直接往 asdf2014/superset 提交，然后在 github 上进行 pull request 的创建</span></span><br><span class="line">https://github.com/apache/superset/pull/2136 (Fix werkzeug instance was created twice <span class="keyword">in</span> Debug Mode (<span class="comment">#2135) #2136)</span></span><br><span class="line"></span><br><span class="line">$ git fetch https://github.com/apache/superset.git master:tmp</span><br><span class="line">$ git diff tmp</span><br><span class="line">$ git merge tmp</span><br><span class="line">$ git branch -d tmp</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Fetch-all-tags"><a href="#Fetch-all-tags" class="headerlink" title="Fetch all tags"></a>Fetch all tags</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git fetch --tags</span><br><span class="line">$ git checkout tags/release-3.4.6</span><br><span class="line">$ git checkout master</span><br><span class="line">  Previous HEAD position was 1285c982... ZooKeeper 3.4.6 release.</span><br><span class="line">  Switched to branch <span class="string">'master'</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Merge"><a href="#Git-Merge" class="headerlink" title="Git Merge"></a>Git Merge</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果不希望 PR 中的 comment 信息被冲掉，可以使用 `git merge` 替代 `git rebase`</span></span><br><span class="line">$ git merge</span><br><span class="line"><span class="comment"># 如果存在冲突，解决后，执行如下两个命令</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git merge --<span class="built_in">continue</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Apply"><a href="#Git-Apply" class="headerlink" title="Git Apply"></a>Git Apply</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 --reject 强制打补丁，会生成 .rej 文件，需要手动解决冲突</span></span><br><span class="line">$ git apply --reject yuzhouwan.patch</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Reflog"><a href="#Git-Reflog" class="headerlink" title="Git Reflog"></a>Git Reflog</h2><h3 id="恢复-git-reset-hard"><a href="#恢复-git-reset-hard" class="headerlink" title="恢复 git reset --hard"></a>恢复 <code>git reset --hard</code></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 找到 reset 操作的</span></span><br><span class="line">$ git reflog</span><br><span class="line">  2a93709d (HEAD -&gt; yuzhouwan, origin/yuzhouwan) HEAD@{0}: reset: moving to 631cc5233063bb014587a9caf0c9e3095fe6a60e</span><br><span class="line">  b5b67779 HEAD@{1}: commit: Something important</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到 reset 操作前的一次提交</span></span><br><span class="line">$ git reset --hard b5b67779</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Remote"><a href="#Git-Remote" class="headerlink" title="Git Remote"></a>Git Remote</h2><h3 id="Change-remote-url"><a href="#Change-remote-url" class="headerlink" title="Change remote url"></a>Change remote url</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git remote set-url origin &lt;url&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Pull-specific-tag-from-remote"><a href="#Pull-specific-tag-from-remote" class="headerlink" title="Pull specific tag from remote"></a>Pull specific tag from remote</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git pull origin release-1.7.7:release-1.7.7</span><br></pre></td></tr></tbody></table></figure>
<h3 id="同时-push-到多个仓库"><a href="#同时-push-到多个仓库" class="headerlink" title="同时 push 到多个仓库"></a>同时 push 到多个仓库</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git remote set-url --add origin git@github.com:asdf2014/draft.git</span><br><span class="line">$ git remote -v</span><br><span class="line">  origin  https://git.coding.net/BenedictJin/test.git (fetch)</span><br><span class="line">  origin  https://git.coding.net/BenedictJin/test.git (push)</span><br><span class="line">  origin  git@github.com:asdf2014/test.git (push)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Reset"><a href="#Git-Reset" class="headerlink" title="Git Reset"></a>Git Reset</h2><h3 id="回退某一个文件的修改"><a href="#回退某一个文件的修改" class="headerlink" title="回退某一个文件的修改"></a>回退某一个文件的修改</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git reset HEAD^ yuzhouwan.txt</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Revert"><a href="#Git-Revert" class="headerlink" title="Git Revert"></a>Git Revert</h2><h3 id="创建某一个-commit-相反的-patch"><a href="#创建某一个-commit-相反的-patch" class="headerlink" title="创建某一个 commit 相反的 patch"></a>创建某一个 commit 相反的 patch</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git revert &lt;commit number&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Rm"><a href="#Git-Rm" class="headerlink" title="Git Rm"></a>Git Rm</h2><h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>　某些已经被加到 <code>.gitignore</code> 的文件提示，ignored, tracked with git</p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 单个文件</span></span><br><span class="line">$ git rm --cached &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个项目</span></span><br><span class="line">$ git rm -r --cached .</span><br><span class="line"></span><br><span class="line"><span class="comment"># add 变更内容，并切换到 tmp 分支，commit 后，再删除 tmp 分支</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git checkout -b tmp</span><br><span class="line">$ git commit -m <span class="string">'Remove ignored files'</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git branch -D tmp</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Stash"><a href="#Git-Stash" class="headerlink" title="Git Stash"></a>Git Stash</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前分支已经存在的改动</span></span><br><span class="line">$ git status</span><br><span class="line">  On branch exception_governance</span><br><span class="line">  Your branch is up to date with <span class="string">'origin/exception_governance'</span>.</span><br><span class="line"></span><br><span class="line">  Changes to be committed:</span><br><span class="line">    (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">          new file:   a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时保存当前分支的修改</span></span><br><span class="line">$ git stash</span><br><span class="line">  Saved working directory and index state WIP on exception_governance: d5062a04 Govern old error codes and their exceptions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已经临时保存的改动</span></span><br><span class="line">$ git stash list</span><br><span class="line">  stash@{0}: WIP on exception_governance: d5062a04 Govern old error codes and their exceptions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经看到修改已经被隐藏了</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次从 stash 中恢复出之前的修改</span></span><br><span class="line">$ git stash pop</span><br><span class="line">  On branch exception_governance</span><br><span class="line">  Your branch is up to date with <span class="string">'origin/exception_governance'</span>.</span><br><span class="line"></span><br><span class="line">  Changes to be committed:</span><br><span class="line">    (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">          new file:   a</span><br><span class="line"></span><br><span class="line">  Dropped refs/stash@{0} (a88e4f6d681eb59b9b22e800f2c00f4c9e22d529)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-Tag"><a href="#Git-Tag" class="headerlink" title="Git Tag"></a>Git Tag</h2><h3 id="Create-tag"><a href="#Create-tag" class="headerlink" title="Create tag"></a>Create tag</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建简单的标签</span></span><br><span class="line">$ git tag v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有附注的 tag</span></span><br><span class="line">$ git tag -a v0.0.2 -m <span class="string">"v0.0.2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示 tag 信息</span></span><br><span class="line">$ git show v0.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给指定的 commit，打 tag</span></span><br><span class="line">$ git tag -a v0.0.3 6d23400</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Submit-tag"><a href="#Submit-tag" class="headerlink" title="Submit tag"></a>Submit tag</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git push origin v0.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># push 本地所有标签</span></span><br><span class="line">$ git push origin –tags</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Pull-with-specific-tag"><a href="#Pull-with-specific-tag" class="headerlink" title="Pull with specific tag"></a>Pull with specific tag</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 tag 列表，并 checkout 到指定的 tag</span></span><br><span class="line">$ git tag -l</span><br><span class="line">$ git checkout tags/&lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># checkout 到指定的 tag，并创建一个新的 branch</span></span><br><span class="line">$ git checkout tags/&lt;tag_name&gt; -b &lt;branch_name&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Delete-tag"><a href="#Delete-tag" class="headerlink" title="Delete tag"></a>Delete tag</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地 Tag</span></span><br><span class="line">$ git tag -d v3.4.6.0</span><br><span class="line">  Deleted tag <span class="string">'v3.4.6.0'</span> (was 0e48a03a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程 Tag</span></span><br><span class="line">$ git push origin :refs/tags/v3.4.6.0</span><br><span class="line">  To http://github.com/asdf2014/zookeeper.git</span><br><span class="line">   - [deleted]           v3.4.6.0</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-代理"><a href="#Git-代理" class="headerlink" title="Git 代理"></a>Git 代理</h2><h3 id="通过命令设置"><a href="#通过命令设置" class="headerlink" title="通过命令设置"></a>通过命令设置</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global http.proxy <span class="string">'http://192.168.1.101:8888'</span></span><br><span class="line">$ git config --global https.proxy <span class="string">'https://192.168.1.101:8888'</span></span><br><span class="line">$ git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line">$ git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="通过配置文件设置"><a href="#通过配置文件设置" class="headerlink" title="通过配置文件设置"></a>通过配置文件设置</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">   [http]</span><br><span class="line">     proxy = http://192.168.1.101:8888</span><br><span class="line">   [https]</span><br><span class="line">     proxy = https://192.168.1.101:8888</span><br><span class="line"><span class="comment">#  [http]</span></span><br><span class="line"><span class="comment">#    proxy = socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="comment">#  [https]</span></span><br><span class="line"><span class="comment">#    proxy = socks5://127.0.0.1:1080</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><h4 id="SSL-ERROR-SYSCALL-in-connection-to-git-coding-net-443"><a href="#SSL-ERROR-SYSCALL-in-connection-to-git-coding-net-443" class="headerlink" title="SSL_ERROR_SYSCALL in connection to git.coding.net:443"></a>SSL_ERROR_SYSCALL in connection to git.coding.net:443</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">  Counting objects: 9, <span class="keyword">done</span>.</span><br><span class="line">  Delta compression using up to 4 threads.</span><br><span class="line">  Compressing objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">  Writing objects: 100% (9/9), 1.05 KiB | 1.05 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">  Total 9 (delta 6), reused 0 (delta 0)</span><br><span class="line">  error: RPC failed; curl 35 OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="keyword">in</span> connection to git.coding.net:443</span><br><span class="line">  fatal: The remote end hung up unexpectedly</span><br><span class="line">  fatal: The remote end hung up unexpectedly</span><br><span class="line">  Everything up-to-date</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 先确保 git 和 curl 版本不能过低，如果 git &lt;2.60 或者 curl &lt;7.29，则需要升级到最新版本</span></span><br><span class="line">$ git --version</span><br><span class="line">$ curl --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 git 命令的 trace 日志</span></span><br><span class="line">$ <span class="built_in">export</span> GIT_CURL_VERBOSE=1</span><br><span class="line">$ <span class="built_in">export</span> GIT_TRACE_PACKET=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次执行出错命令</span></span><br><span class="line">$ git push origin master</span><br><span class="line">  // ...</span><br><span class="line">  error: RPC failed; curl 7 Failed to connect to 127.0.0.1 port 1080: Connection refused</span><br><span class="line">  fatal: The remote end hung up unexpectedly</span><br><span class="line">  Everything up-to-date</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过日志分析，定位出是 proxy 的问题，关闭 proxy 即可</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git-中文乱码"><a href="#Git-中文乱码" class="headerlink" title="Git 中文乱码"></a>Git 中文乱码</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global core.quotepath <span class="literal">false</span>          <span class="comment"># 显示 status 编码</span></span><br><span class="line">$ git config --global gui.encoding utf-8            <span class="comment"># 图形界面编码</span></span><br><span class="line">$ git config --global i18n.commit.encoding utf-8    <span class="comment"># 提交信息编码</span></span><br><span class="line">$ git config --global i18n.logoutputencoding utf-8  <span class="comment"># 输出 log 编码</span></span><br><span class="line">$ <span class="built_in">export</span> LESSCHARSET=utf-8                          <span class="comment"># `git log` 默认使用 `less` 分页，所以需要 `bash` 对 `less` 命令进行 `utf-8` 编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 `ls` 命令可以显示中文名称</span></span><br><span class="line">$ vim %GIT_HOME%\mingw64\share\git\completion\git-completion.bash</span><br><span class="line">  <span class="comment"># 在文件末尾处添加一行</span></span><br><span class="line">  <span class="built_in">alias</span> ls=<span class="string">"ls --show-control-chars --color"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Github-加速"><a href="#Github-加速" class="headerlink" title="Github 加速"></a>Github 加速</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Ctrl + R（管理员权限运行）</span></span><br><span class="line"><span class="comment"># notepad "%SystemRoot%\system32\drivers\etc\hosts"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://asm.ca.com/zh_cn/ping.php</span></span><br><span class="line">192.30.253.112 github.com</span><br><span class="line">151.101.56.133 assets-cdn.github.com</span><br><span class="line">192.30.253.116 api.github.com</span><br><span class="line">192.30.253.121 codeload.github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国 - 香港特别行政区（hkhkg02）</span></span><br><span class="line">192.30.253.112 github.com</span><br><span class="line">151.101.100.133 assets-cdn.github.com</span><br><span class="line">192.30.253.116 api.github.com</span><br><span class="line">192.30.253.121 codeload.github.com</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git diff &gt; patch.diff</span><br><span class="line">$ git apply patch.diff</span><br></pre></td></tr></tbody></table></figure>
<h2 id="SSH-免密"><a href="#SSH-免密" class="headerlink" title="SSH 免密"></a>SSH 免密</h2><h3 id="常规操作-2"><a href="#常规操作-2" class="headerlink" title="常规操作"></a>常规操作</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有 .ssh 隐藏文件，则需要先打开 `git bash`，并执行</span></span><br><span class="line">$ mkdir ~/.ssh</span><br><span class="line">$ chmod 700 ~/.ssh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"asdf2014@apache.org"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ~/.ssh/id_rsa.pub 中的公钥加入 github/gitlab</span></span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">  Hi asdf2014! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.    '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http -&gt; ssh</span></span><br><span class="line">$ git remote -v</span><br><span class="line">  origin  https://github.com/asdf2014/yuzhouwan (fetch)</span><br><span class="line">  origin  https://github.com/asdf2014/yuzhouwan (push)</span><br><span class="line"></span><br><span class="line">$ git remote set-url origin git@github.com:asdf2014/yuzhouwan.git</span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">  origin  git@github.com:asdf2014/yuzhouwan.git (fetch)</span><br><span class="line">  origin  git@github.com:asdf2014/yuzhouwan.git (push)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="如何在代理环境下，同时支持-github-gitlab-coding-的免密操作"><a href="#如何在代理环境下，同时支持-github-gitlab-coding-的免密操作" class="headerlink" title="如何在代理环境下，同时支持 github / gitlab / coding 的免密操作"></a>如何在代理环境下，同时支持 github / gitlab / coding 的免密操作</h3><h4 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h4><ul>
<li><code>github.com</code> 和 <code>coding.net</code> 需要走代理访问</li>
<li><code>gitlab</code> 是自建的私服</li>
</ul>
<h4 id="PAC-配置"><a href="#PAC-配置" class="headerlink" title="PAC 配置"></a>PAC 配置</h4><p>　在任何 git 相关操作之前，需要先配置 PAC 文件，来保证本机网络的畅通</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">var domains = {</span><br><span class="line">  <span class="string">"coding.net"</span>: 1,</span><br><span class="line">  <span class="string">"git.coding.net"</span>: 1,</span><br><span class="line">  <span class="string">"github.com"</span>: 1,</span><br><span class="line">  <span class="string">"ssh.github.com"</span>: 1</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">var proxy = <span class="string">"__PROXY__"</span>;</span><br><span class="line"></span><br><span class="line">var direct = <span class="string">'DIRECT;'</span>;</span><br><span class="line"></span><br><span class="line">var hasOwnProperty = Object.hasOwnProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> FindProxyForURL(url, host) {</span><br><span class="line">    var suffix;</span><br><span class="line">    var pos = host.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">    pos = host.lastIndexOf(<span class="string">'.'</span>, pos - 1);</span><br><span class="line">    <span class="keyword">while</span>(1) {</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= 0) {</span><br><span class="line">            <span class="keyword">if</span> (hasOwnProperty.call(domains, host)) {</span><br><span class="line">                <span class="built_in">return</span> proxy;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="built_in">return</span> direct;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        suffix = host.substring(pos + 1);</span><br><span class="line">        <span class="keyword">if</span> (hasOwnProperty.call(domains, suffix)) {</span><br><span class="line">            <span class="built_in">return</span> proxy;</span><br><span class="line">        }</span><br><span class="line">        pos = host.lastIndexOf(<span class="string">'.'</span>, pos - 1);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h4><p>　在配置 SSH 之前，同样需要保证 ssh 命令使用的网络代理是正确的</p>
<p>　首先，找到 <code>connect</code> 命令安装路径</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> connect</span><br><span class="line">  /mingw64/bin/connect</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">which</span> connect.exe</span><br><span class="line">  /mingw64/bin/connect.exe</span><br></pre></td></tr></tbody></table></figure>
<p>　其次，修改 <code>~/.ssh/config</code> 文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa  <span class="comment"># 这里也可以填写绝对路径</span></span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  ProxyCommand /mingw64/bin/connect.exe -H 127.0.0.1:1080 %h %p</span><br><span class="line"></span><br><span class="line">Host ssh.github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 443</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  ProxyCommand /mingw64/bin/connect.exe -H 127.0.0.1:1080 %h %p</span><br><span class="line"></span><br><span class="line">Host git.coding.net</span><br><span class="line">  User &lt;email&gt;  <span class="comment"># coding.net 这里比较特殊，需要填写注册的邮箱地址</span></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  ProxyCommand /mingw64/bin/connect.exe -H 127.0.0.1:1080 %h %p</span><br><span class="line"></span><br><span class="line">Host yuzhouwan.gitlab.com</span><br><span class="line">  User git</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname yuzhouwan.gitlab.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></tbody></table></figure>
<p>　然后，生成私钥、公钥，并分别拷贝公钥到 <code>github</code> / <code>gitlab</code> / <code>coding</code> 服务器中，具体操作见上文描述</p>
<p>　最后，验证</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">  Hi asdf2014! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ ssh -T git@yuzhouwan.gitlab.com</span></span><br><span class="line"><span class="string">  Welcome to GitLab, BenedictJin!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ ssh -T git@git.coding.net</span></span><br><span class="line"><span class="string">  Coding 提示: Hello BenedictJin, You'</span>ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">  BenedictJin，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span><br></pre></td></tr></tbody></table></figure>
<h2 id="保持从-fork-端更新代码"><a href="#保持从-fork-端更新代码" class="headerlink" title="保持从 fork 端更新代码"></a>保持从 fork 端更新代码</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 申明 fork 端的仓库地址</span></span><br><span class="line">$ git remote add upstream git@gitlab.yuzhouwan.com:asdf2014/yuzhouwan.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># check 是否添加正确</span></span><br><span class="line">$ git remote -v</span><br><span class="line">  origin  git@gitlab.yuzhouwan.com:asdf2018/yuzhouwan.git (fetch)</span><br><span class="line">  origin  git@gitlab.yuzhouwan.com:asdf2018/yuzhouwan.git (push)</span><br><span class="line">  upstream  git@gitlab.yuzhouwan.com:asdf2014/yuzhouwan.git (fetch)</span><br><span class="line">  upstream  git@gitlab.yuzhouwan.com:asdf2014/yuzhouwan.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有的分支</span></span><br><span class="line">$ git fetch upstream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定更新某一个分支，这里以 master 分支为例</span></span><br><span class="line">$ git fetch upstream master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 fork 端的 master 分支进行 rebase</span></span><br><span class="line">$ git rebase upstream/master</span><br></pre></td></tr></tbody></table></figure>
<h2 id="代码风格配置"><a href="#代码风格配置" class="headerlink" title="代码风格配置"></a>代码风格配置</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Intellij Idea</span><br><span class="line"></span><br><span class="line"><span class="comment"># download: http://www.arminalter.com/public/img/attach/checkstyle/eclipse-java-google-style.xml</span></span><br><span class="line">File - Settings - Editor - Code Style - Schema - Manage - Import - Eclipse XML Profile</span><br><span class="line">File - Settings - Plugins - <span class="string">"CheckStyle-IDEA"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download: http://www.arminalter.com/public/img/attach/checkstyle/google_checks.xml</span></span><br><span class="line">File - Setting - Other Settings - Check Style(+)                        <span class="comment"># 如果这里使用的是 带有变量的 xml 文件，需要正确指定对应的 value 值</span></span><br><span class="line">File - Settings - Editor - Inspections - Checkstyle real-time scan(√)   <span class="comment"># 开启实时 check code style</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般的，项目中都会给出 format.xml 文件，如 hadoop(hadoop-format.xml) / druid(druid_intellij_formatting.xml) etc.</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><h3 id="Auto-CRLF"><a href="#Auto-CRLF" class="headerlink" title="Auto CRLF"></a>Auto CRLF</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 提交时转换为 LF，检出时转换为 CRLF</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时转换为 LF，检出时不转换</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交检出均不转换</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Safe-CRLF"><a href="#Safe-CRLF" class="headerlink" title="Safe CRLF"></a>Safe CRLF</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 拒绝提交包含混合换行符的文件</span></span><br><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许提交包含混合换行符的文件</span></span><br><span class="line">$ git config --global core.safecrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交包含混合换行符的文件时给出警告</span></span><br><span class="line">$ git config --global core.safecrlf warn</span><br></pre></td></tr></tbody></table></figure>
<h2 id="整合持续集成"><a href="#整合持续集成" class="headerlink" title="整合持续集成"></a>整合持续集成</h2><h3 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h3><h4 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">language:</span><br><span class="line">  - java</span><br><span class="line">  - scala</span><br><span class="line">  - python</span><br><span class="line">  - groovy</span><br><span class="line"></span><br><span class="line">os:</span><br><span class="line">  - windows</span><br><span class="line"></span><br><span class="line">jdk:</span><br><span class="line">  - oraclejdk8</span><br><span class="line"></span><br><span class="line">scala:</span><br><span class="line">  - 2.11.8</span><br><span class="line"></span><br><span class="line">python:</span><br><span class="line">  - 2.7.12</span><br><span class="line"></span><br><span class="line">groovy:</span><br><span class="line">  - 2.3.11</span><br><span class="line"></span><br><span class="line">before_install: sudo <span class="built_in">echo</span> <span class="string">"MAVEN_OPTS='-Xmx2048m -Xms1024m -Dorg.slf4j.simpleLogger.defaultLogLevel=error'"</span> &gt; ~/.mavenrc</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - mvn clean install -B &amp;&amp; mvn clean -B</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    - MAVEN_OPTS: <span class="string">"-Xmx2048m -Xms1024m -Dorg.slf4j.simpleLogger.defaultLogLevel=error"</span></span><br><span class="line"></span><br><span class="line">sudo: required</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - <span class="variable">$HOME</span>/.m2</span><br></pre></td></tr></tbody></table></figure>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="string">![Build Status</span>](<span class="link">https://travis-ci.org/asdf2014/yuzhouwan.svg?branch=master</span>)](<span class="link">https://travis-ci.org/asdf2014/yuzhouwan</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://travis-ci.org/asdf2014/yuzhouwan"><img data-src="https://travis-ci.org/asdf2014/yuzhouwan.svg?branch=master" alt="Build Status"></a></p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/.travis.yml">here</a>.</p>
<h2 id="设置编辑器"><a href="#设置编辑器" class="headerlink" title="设置编辑器"></a>设置编辑器</h2><h3 id="在-Mac-下设置-sublime-作为编辑器"><a href="#在-Mac-下设置-sublime-作为编辑器" class="headerlink" title="在 Mac 下设置 sublime 作为编辑器"></a>在 Mac 下设置 sublime 作为编辑器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 git 配置文件</span></span><br><span class="line">$ vim ~/.gitconfig</span><br><span class="line">  [core]</span><br><span class="line">    editor = /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者通过命令行配置</span></span><br><span class="line">$ git config --global core.editor <span class="string">"/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl -n -w"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="在-Windows-下设置-Notepad-作为编辑器"><a href="#在-Windows-下设置-Notepad-作为编辑器" class="headerlink" title="在 Windows 下设置 Notepad++ 作为编辑器"></a>在 Windows 下设置 Notepad++ 作为编辑器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 git 配置文件</span></span><br><span class="line">$ vim ~/.gitconfig</span><br><span class="line">  [core]</span><br><span class="line">    editor = <span class="string">'D:/apps/Notepad++/notepad++.exe'</span> -multiInst -notabbar -nosession -noPlugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者通过命令行配置</span></span><br><span class="line">$ git config --global core.editor <span class="string">"'D:/apps/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="GitHub-CLI"><a href="#GitHub-CLI" class="headerlink" title="GitHub CLI"></a><a href="https://github.blog/2020-09-17-github-cli-1-0-is-now-available/">GitHub CLI</a></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install gh</span><br><span class="line">$ gh version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gh version 1.4.0 (2020-12-15)</span><br><span class="line">https://github.com/cli/cli/releases/latest</span><br></pre></td></tr></tbody></table></figure>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew upgrade gh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="首次获取-issue-列表时需要进行赋权"><a href="#首次获取-issue-列表时需要进行赋权" class="headerlink" title="首次获取 issue 列表时需要进行赋权"></a>首次获取 issue 列表时需要进行赋权</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gh issue list</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Notice: authentication required</span><br><span class="line">Press Enter to open github.com <span class="keyword">in</span> your browser...</span><br><span class="line">Authentication complete. Press Enter to <span class="built_in">continue</span>...</span><br></pre></td></tr></tbody></table></figure>
<h3 id="这里以-Apache-Druid-为例"><a href="#这里以-Apache-Druid-为例" class="headerlink" title="这里以 Apache Druid 为例"></a>这里以 <a href="https://yuzhouwan.com/posts/5845/">Apache Druid</a> 为例</h3><h4 id="获取-issue-列表"><a href="#获取-issue-列表" class="headerlink" title="获取 issue 列表"></a>获取 issue 列表</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gh issue list</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Showing 30 of 925 open issues <span class="keyword">in</span> apache/druid</span><br><span class="line"></span><br><span class="line"><span class="comment">#10525  Incorrect results (including nulls) when querying string column with ...  (Uncategorized problem report)     about 1 hour ago</span></span><br><span class="line"><span class="comment">#10523  Historical server fails to load segments in kubernetes                    (Helm Chart)                       about 1 hour ago</span></span><br><span class="line"><span class="comment">#10522  Ingesting to same Datasource from 2 different Kafka clusters with exa...  (Uncategorized problem report)     about 9 hours ago</span></span><br><span class="line"><span class="comment">#10521  Druid Lookups Auditing                                                                                       about 10 hours ago</span></span><br><span class="line"><span class="comment">#10520  Druid UI Load Data -&gt; Edit Spec text area redundant reinsert              (Area - Web Console, Ease of Use)  about 23 hours ago</span></span><br><span class="line"><span class="comment">#10519  When I use topN query, the results are very different.                    (Uncategorized problem report)     about 1 day ago</span></span><br><span class="line"><span class="comment">#10516  Bad/outdated documentation on "S3 permissions settings"                                                      about 5 days ago</span></span><br><span class="line"><span class="comment">#10513  Averaging timestampdiff output yields MAX_INT                             (Uncategorized problem report)     about 5 days ago</span></span><br><span class="line"><span class="comment">#10512  A java.lang.ClassCastException Error in druid cluster 0.13.0              (Uncategorized problem report)     about 5 days ago</span></span><br><span class="line"><span class="comment">#10509  build from source with 0.19.0 failed                                      (Uncategorized problem report)     about 7 days ago</span></span><br><span class="line"><span class="comment">#10508  Kill task launched from web console is stuck                              (Uncategorized problem report)     about 8 days ago</span></span><br><span class="line"><span class="comment">#10501  Druid 0.18.1 DSQL                                                                                            about 11 days ago</span></span><br><span class="line"><span class="comment">#10498  Tasks fail without and there are no error logs for it                     (Uncategorized problem report)     about 9 days ago</span></span><br><span class="line"><span class="comment">#10497  [BUG] [Indexing Task 0.16.0] Update metadata failed after indexing ta...  (Uncategorized problem report)     about 7 days ago</span></span><br><span class="line"><span class="comment">#10494  Remove redundant `IncrementalIndex.Builder`                               (Design Review, Proposal)          about 12 days ago</span></span><br><span class="line"><span class="comment">#10493  Avro Union type support                                                   (Feature/Change Description)       about 12 days ago</span></span><br><span class="line"><span class="comment">#10477  When we choose to delete all the data of the specified datasource, de...  (Feature/Change Description)       about 15 days ago</span></span><br><span class="line"><span class="comment">#10468  Posible druid template for Openshift/Kubernetes                           (Design Review, Proposal)          about 18 days ago</span></span><br><span class="line"><span class="comment">#10462  [DRAFT] 0.20.0 Release Notes                                              (Release Notes)                    about 5 days ago</span></span><br><span class="line"><span class="comment">#10455  User Impersonation in Druid                                               (Feature/Change Description)       about 21 days ago</span></span><br><span class="line"><span class="comment">#10444  Better handling of different servers having different versions of bro...  (Area - Querying, Bug)             about 7 days ago</span></span><br><span class="line"><span class="comment">#10443  Druid middleManager jvm's InterpreterRuntime::throw_ClassCastException    (Uncategorized problem report)     about 23 days ago</span></span><br><span class="line"><span class="comment">#10442  Why druid expects data files to be available on all data servers                                             about 21 days ago</span></span><br><span class="line"><span class="comment">#10439  Druid Auth doesn't limit the permission                                                                      about 24 days ago</span></span><br><span class="line"><span class="comment">#10434  Show Unused segment count in Druid Console Summary page                   (Feature/Change Description)       about 26 days ago</span></span><br><span class="line"><span class="comment">#10423  Post metadata operation information to ingestion log for a Kill task      (Feature/Change Description)       about 27 days ago</span></span><br><span class="line"><span class="comment">#10415  Druid is on yarn ?                                                                                           about 29 days ago</span></span><br><span class="line"><span class="comment">#10411  StatsD emmiter just emit native queries count in druid/query/count me...  (Uncategorized problem report)     about 23 days ago</span></span><br><span class="line"><span class="comment">#10409  Documentation for SQL ARRAY to use [] instead of ()                                                          about 1 month ago</span></span><br><span class="line"><span class="comment">#10403  Kafka ingestion sometimes produces rows that aren't aggregated            (Uncategorized problem report)     about 1 month ago</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="获取-PR-列表"><a href="#获取-PR-列表" class="headerlink" title="获取 PR 列表"></a>获取 PR 列表</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gh pr list</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Showing 30 of 71 open pull requests <span class="keyword">in</span> apache/druid</span><br><span class="line"></span><br><span class="line"><span class="comment">#10524  Kafka dynamic scale ingest tasks                                                           zhangyue19921010:kafka-dynamic-scale-ingest-tasks</span></span><br><span class="line"><span class="comment">#10518  Add grouping_id function                                                                   abhishekagarwal87:grouping_id</span></span><br><span class="line"><span class="comment">#10517  Fix compaction integration test CI timeout                                                 maytasm:IMPLY-4796</span></span><br><span class="line"><span class="comment">#10505  WIP: Avro union support                                                                    josephglanville:jpg/avro-union-support</span></span><br><span class="line"><span class="comment">#10502  0.20.0                                                                                     0.20.0</span></span><br><span class="line"><span class="comment">#10499  support for vectorizing expressions with non-existent inputs, more consistent type han...  clintropolis:vector-nil-expr</span></span><br><span class="line"><span class="comment">#10495  Added Request log updates for status change on cooridnator / overlord…                    senthilkv:requestlog</span></span><br><span class="line"><span class="comment">#10484  improve retention rule management with import rules                                        kroeders:ft-import-retention-rules</span></span><br><span class="line"><span class="comment">#10478  Refactor AppenderatorConfig to inherit from TuningConfig                                   liran-funaro:pr-tuning-config</span></span><br><span class="line"><span class="comment">#10467  Fix bug in TimedShutoffInputSourceReader where a timeout does not close all registered...  maytasm:REQ-1314</span></span><br><span class="line"><span class="comment">#10464  Improved exception handling in case of query timeouts                                      a2l007:timeout_status</span></span><br><span class="line"><span class="comment">#10458  Fix the config initialization on container restart                                         valdemar-giosg:feature-fix-docker-entrypoint-config-overwrite</span></span><br><span class="line"><span class="comment">#10448  Added CronScheduler support as a proof to clock drift while emitting metrics               miqdigital:cronScheduling</span></span><br><span class="line"><span class="comment">#10428  allow server selection to be aware of query                                                kroeders:ft-query-aware-selectors</span></span><br><span class="line"><span class="comment">#10427  ServerSelectorStrategy to filter servers with missing required lookups                     kroeders:ft-lookup-aware-server-selector-ext</span></span><br><span class="line"><span class="comment">#10421  Improve lookup state update to avoid query failures                                        yuanlihan:improve-lookup-state-update</span></span><br><span class="line"><span class="comment">#10420  Add ingestion merge count metric                                                           jon-wei:merge_metric</span></span><br><span class="line"><span class="comment">#10418  Support to show leader of coordinators in `Services` web console view                      FrankChen021:show_leader</span></span><br><span class="line"><span class="comment">#10414  Applying modification pattern in #10025 to DataSegmentPusher#getDefaultStorageDirWithE...  T45K:related_to_10025</span></span><br><span class="line"><span class="comment">#10412  prometheus metric exporter                                                                 adobe:feature/prometheus-metric-exporter</span></span><br><span class="line"><span class="comment">#10408  Web console: single instance of axios for all network requests                             AshishKapoor:axios-single-instance</span></span><br><span class="line"><span class="comment">#10407  emit processed bytes metric                                                                pjain1:processed_bytes</span></span><br><span class="line"><span class="comment">#10400  optimize_getPendingSegmentsForIntervalWithHandle                                           xiangqiao123:optimize_getPendingSegmentsForIntervalWithHandle</span></span><br><span class="line"><span class="comment">#10396  Update index.md                                                                            tlblessing:patch-1</span></span><br><span class="line"><span class="comment">#10383  Fix ingestion failure of pretty-formatted JSON message                                     FrankChen021:json_parse_bug</span></span><br><span class="line"><span class="comment">#10376  Live reporting system for parallel task                                                    jihoonson:live-metrics-system</span></span><br><span class="line"><span class="comment">#10365  Inject ObjectMapper instead of manually setting it for TaskReportFileWriter                jihoonson:inject-mapper-report-writer</span></span><br><span class="line"><span class="comment">#10363  fix injection failure of StorageLocationSelectorStrategy objects                           FrankChen021:bug_10348</span></span><br><span class="line"><span class="comment">#10339  Security overview documentation                                                            sthetland:security-doc-revamp</span></span><br><span class="line"><span class="comment">#10335  Configurable Index Type                                                                    liran-funaro:config-index</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="切换到某一个-PR-中"><a href="#切换到某一个-PR-中" class="headerlink" title="切换到某一个 PR 中"></a>切换到某一个 PR 中</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gh pr checkout 10524</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">remote: Enumerating objects: 44, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (44/44), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 110 (delta 44), reused 44 (delta 44), pack-reused 66</span><br><span class="line">Receiving objects: 100% (110/110), 43.63 KiB | 269.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (45/45), completed with 27 <span class="built_in">local</span> objects.</span><br><span class="line">From https://github.com/apache/druid</span><br><span class="line"> * [new ref]               refs/pull/10524/head -&gt; kafka-dynamic-scale-ingest-tasks</span><br><span class="line">Switched to branch <span class="string">'kafka-dynamic-scale-ingest-tasks'</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">使用该命令后，会自动下载并切换到 PR 所对应的 branch 中</div>

<h4 id="查看-PR-的-diff-内容"><a href="#查看-PR-的-diff-内容" class="headerlink" title="查看 PR 的 diff 内容"></a>查看 PR 的 diff 内容</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gh pr diff</span><br></pre></td></tr></tbody></table></figure>
<h4 id="合并-PR"><a href="#合并-PR" class="headerlink" title="合并 PR"></a>合并 PR</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gh pr merge</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">? What merge method would you like to use?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; Create a merge commit</span><br><span class="line">  Rebase and merge</span><br><span class="line">  Squash and merge</span><br></pre></td></tr></tbody></table></figure>
<h2 id="英文缩写"><a href="#英文缩写" class="headerlink" title="英文缩写"></a>英文缩写</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">缩写</th>
<th style="text-align:center">全拼</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>ACK</strong></td>
<td style="text-align:center"><strong>A</strong>cknowledgement</td>
<td style="text-align:center">同意（改变 / 概念）</td>
</tr>
<tr>
<td style="text-align:center"><strong>AFAICT</strong></td>
<td style="text-align:center"><strong>A</strong>s <strong>F</strong>ar <strong>A</strong>s <strong>I</strong> <strong>C</strong>an <strong>T</strong>ell</td>
<td style="text-align:center">据我所知</td>
</tr>
<tr>
<td style="text-align:center"><strong>AFAIK</strong></td>
<td style="text-align:center"><strong>A</strong>s <strong>F</strong>ar <strong>A</strong>s <strong>I</strong> <strong>K</strong>now</td>
<td style="text-align:center">据我所知</td>
</tr>
<tr>
<td style="text-align:center"><strong>AKA</strong></td>
<td style="text-align:center"><strong>A</strong>lso <strong>K</strong>nown <strong>A</strong>s</td>
<td style="text-align:center">也称作</td>
</tr>
<tr>
<td style="text-align:center"><strong>ASAP</strong></td>
<td style="text-align:center"><strong>A</strong>s <strong>S</strong>oon <strong>A</strong>s <strong>P</strong>ossible</td>
<td style="text-align:center">尽快</td>
</tr>
<tr>
<td style="text-align:center"><strong>BTW</strong></td>
<td style="text-align:center"><strong>B</strong>y <strong>T</strong>he <strong>W</strong>ay</td>
<td style="text-align:center">顺便一提</td>
</tr>
<tr>
<td style="text-align:center"><strong>CC</strong></td>
<td style="text-align:center"><strong>C</strong>arbon <strong>C</strong>opy</td>
<td style="text-align:center">抄送</td>
</tr>
<tr>
<td style="text-align:center"><strong>FWIW</strong></td>
<td style="text-align:center"><strong>F</strong>or <strong>W</strong>hat <strong>I</strong>t´s <strong>W</strong>orth</td>
<td style="text-align:center">无论如何</td>
</tr>
<tr>
<td style="text-align:center"><strong>FWIAW</strong></td>
<td style="text-align:center"><strong>F</strong>or <strong>W</strong>hat <strong>I</strong>t´s <strong>A</strong>ll <strong>W</strong>orth</td>
<td style="text-align:center">不管有没有用（FWIW 含义一样，且 FWIW 更常用一些）</td>
</tr>
<tr>
<td style="text-align:center"><strong>FYI</strong></td>
<td style="text-align:center"><strong>F</strong>or<strong>Y</strong>our <strong>I</strong>nformation</td>
<td style="text-align:center">供你参考</td>
</tr>
<tr>
<td style="text-align:center"><strong>IANAL</strong></td>
<td style="text-align:center"><strong>I</strong> <strong>A</strong>m <strong>N</strong>ot <strong>A</strong> <strong>L</strong>awyer</td>
<td style="text-align:center">我不是律师（但是我发现了一个问题）</td>
</tr>
<tr>
<td style="text-align:center"><strong>IIRC</strong></td>
<td style="text-align:center"><strong>I</strong>f <strong>I</strong> <strong>R</strong>ecall <strong>C</strong>orrectly</td>
<td style="text-align:center">如果我没有记错的话</td>
</tr>
<tr>
<td style="text-align:center"><strong>IMHO</strong></td>
<td style="text-align:center"><strong>I</strong>n <strong>M</strong>y <strong>H</strong>umble <strong>O</strong>pinion</td>
<td style="text-align:center">以我浅见</td>
</tr>
<tr>
<td style="text-align:center"><strong>IMO</strong></td>
<td style="text-align:center"><strong>I</strong>n <strong>M</strong>y <strong>O</strong>pinion</td>
<td style="text-align:center">我的想法是</td>
</tr>
<tr>
<td style="text-align:center"><strong>LGTM</strong></td>
<td style="text-align:center"><strong>L</strong>ooks <strong>G</strong>ood <strong>t</strong>o <strong>M</strong>e</td>
<td style="text-align:center">在我看来很好</td>
</tr>
<tr>
<td style="text-align:center"><strong>NACK</strong> / <strong>NAK</strong></td>
<td style="text-align:center"><strong>N</strong>egative <strong>A</strong>cknowledgement</td>
<td style="text-align:center">不同意（改变 / 概念）</td>
</tr>
<tr>
<td style="text-align:center"><strong>OTOH</strong></td>
<td style="text-align:center"><strong>O</strong>n <strong>T</strong>he <strong>O</strong>ther <strong>H</strong>and</td>
<td style="text-align:center">另一方面</td>
</tr>
<tr>
<td style="text-align:center"><strong>PTAL</strong></td>
<td style="text-align:center"><strong>P</strong>lease <strong>T</strong>ake <strong>a</strong> <strong>L</strong>ook</td>
<td style="text-align:center">请看一下</td>
</tr>
<tr>
<td style="text-align:center"><strong>RC</strong></td>
<td style="text-align:center"><strong>R</strong>elease <strong>C</strong>andidate</td>
<td style="text-align:center">正式发布前的候选版本</td>
</tr>
<tr>
<td style="text-align:center"><strong>RFC</strong></td>
<td style="text-align:center"><strong>R</strong>equest <strong>F</strong>or <strong>C</strong>omments</td>
<td style="text-align:center">征求意见</td>
</tr>
<tr>
<td style="text-align:center"><strong>SGTM</strong></td>
<td style="text-align:center"><strong>S</strong>ounds <strong>G</strong>ood <strong>t</strong>o <strong>M</strong>e</td>
<td style="text-align:center">听起来不错</td>
</tr>
<tr>
<td style="text-align:center"><strong>TBD</strong></td>
<td style="text-align:center"><strong>T</strong>o <strong>B</strong>e <strong>D</strong>one</td>
<td style="text-align:center">尚未完成</td>
</tr>
<tr>
<td style="text-align:center"><strong>TBH</strong></td>
<td style="text-align:center"><strong>T</strong>o <strong>B</strong>e <strong>H</strong>onest</td>
<td style="text-align:center">老实说</td>
</tr>
<tr>
<td style="text-align:center"><strong>TBR</strong></td>
<td style="text-align:center"><strong>T</strong>o <strong>B</strong>e <strong>R</strong>eviewed</td>
<td style="text-align:center">准备被审查</td>
</tr>
<tr>
<td style="text-align:center"><strong>TL;DR</strong></td>
<td style="text-align:center"><strong>T</strong>oo <strong>L</strong>ong; <strong>D</strong>idn’t <strong>R</strong>ead</td>
<td style="text-align:center">太长懒得看</td>
</tr>
<tr>
<td style="text-align:center"><strong>WDYT</strong></td>
<td style="text-align:center"><strong>W</strong>hat <strong>D</strong>o <strong>Y</strong>ou <strong>T</strong>hink?</td>
<td style="text-align:center">你怎么看？</td>
</tr>
<tr>
<td style="text-align:center"><strong>WIP</strong></td>
<td style="text-align:center"><strong>W</strong>ork <strong>i</strong>n <strong>P</strong>rocessing</td>
<td style="text-align:center">进行中</td>
</tr>
<tr>
<td style="text-align:center"><strong>WTF</strong></td>
<td style="text-align:center"><strong>W</strong>hy <strong>T</strong>he <strong>F</strong>ace</td>
<td style="text-align:center">你懂的</td>
</tr>
</tbody>
</table>
</div>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://github.com/logos">GitHub Logos and Usage</a></li>
</ul>
<h3 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h3><ul>
<li><a href="https://gist.github.com/AliMD/3344523">All github Emoji (Smiles)</a></li>
<li><a href="https://gist.github.com/rxaviers/7360908">Complete list of github markdown emoji markup</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 实战</title>
    <url>/posts/200919/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="45bbf5f54b2914aedc4040dbd7fc771822975c0a935d9e89383e21841203d4ff"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>Helm</tag>
        <tag>Apache Druid</tag>
        <tag>OpenTSDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 实战技巧</title>
    <url>/posts/15691/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="adduser"><a href="#adduser" class="headerlink" title="adduser"></a>adduser</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 以创建 Apache Eagle 用户为例</span></span><br><span class="line">$ adduser eagle</span><br><span class="line">$ passwd eagle            <span class="comment"># ur password for eagle user</span></span><br><span class="line"><span class="comment"># 赋予用户可以 sudo 的权限</span></span><br><span class="line">$ chmod u+w /etc/sudoers</span><br><span class="line">$ vim /etc/sudoers</span><br><span class="line">  <span class="comment"># 找到 `root ALL=(ALL) ALL` 这行，并在下面添加 eagle 用户</span></span><br><span class="line">  eagle    ALL=(ALL)    ALL</span><br><span class="line">$ chmod u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 eagle 用户</span></span><br><span class="line">$ su - eagle</span><br></pre></td></tr></tbody></table></figure>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'1'</span> &gt;&gt; sum</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'2'</span> &gt;&gt; sum</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'3'</span> &gt;&gt; sum</span><br><span class="line">$ cat sum</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat sum | awk <span class="string">'{s+=$1} END {print s}'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ awk <span class="string">'{s+=$1} END {print s}'</span> sum</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></tbody></table></figure>
<h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载并一键执行 Shell 脚本，更多相关内容：https://yuzhouwan.com/posts/666/</span></span><br><span class="line">$ bash -c <span class="string">"<span class="subst">$(curl -L https://raw.githubusercontent.com/asdf2014/algorithm/master/first_commit.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统版本</span></span><br><span class="line">$ cat /etc/issue</span><br><span class="line">  Yuzhouwan Group Enterprise Linux Server release 7.2</span><br></pre></td></tr></tbody></table></figure>
<h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 软链接</span></span><br><span class="line">$ chown -h superset:superset superset</span><br><span class="line"><span class="comment"># 所有子目录及文件</span></span><br><span class="line">$ chown -R superset:superset superset-0.15.4</span><br></pre></td></tr></tbody></table></figure>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -r 拷贝目录</span></span><br><span class="line"><span class="comment"># -p 保留源文件或目录的属性，包括所有者、所属组、权限与时间</span></span><br><span class="line"><span class="comment"># -u 只会在源文件的修改时间，相比目的文件的修改时间更新时，或是对应的目的文件不存在，才执行复制</span></span><br><span class="line"><span class="comment"># -v 打印拷贝了哪些文件</span></span><br><span class="line">$ cp -r -p -u -v ../* /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过如下方式，可以避免源文件不存在而导致的报错</span></span><br><span class="line">$ cp ~/does_not_exist ~/somewhere 2&gt;/dev/null | <span class="literal">true</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"always get here"</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info">为了避免别名的影响，可以使用 /bin/cp 原生的命令，或者 unalias cp 消除别名</div>

<h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看脚本是否执行</span></span><br><span class="line">$ tail -f /var/<span class="built_in">log</span>/cron</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止 nohup 的定时任务发邮件给 root，导致 var 目录堆积（/var/spool/cron）</span></span><br><span class="line">$ crontab -e</span><br><span class="line">  <span class="comment"># 加在文件开头</span></span><br><span class="line">  MAILTO=<span class="string">""</span></span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 发送 Post 请求</span></span><br><span class="line">$ curl -H <span class="string">"Content-Type:application/json"</span> -X POST --data <span class="string">'{"blog":"yuzhouwan"}'</span> localhost:8080/api/query</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送的 Put 请求中带时间戳</span></span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=100; i++ )); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">'[{"ts": "yuzhouwan_'</span>`date <span class="string">"+%s"</span>`<span class="string">'"}]'</span> &gt; id.data;  curl -s -X POST -H <span class="string">"Content-Type: application/json"</span> http://yuzhouwan:8081/api/put -d <span class="string">"@id.data"</span> ; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 gzip 压缩的请求</span></span><br><span class="line">$ gzip raw</span><br><span class="line">$ curl -X POST --data-binary <span class="string">"@raw.gz"</span> --header <span class="string">"Content-Type: application/json"</span> --header <span class="string">"Content-Encoding: gzip"</span> http://yuzhouwan:8888/gzip_api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看公网 IP</span></span><br><span class="line">$ curl cip.cc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 该时间戳格式为 13 位毫秒级别</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"`date -d '2017-04-21 10:00:00' +%s`000"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印时间戳</span></span><br><span class="line">$ date +%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化时间戳</span></span><br><span class="line">$ date <span class="string">'+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印纳秒</span></span><br><span class="line">$ date <span class="string">"+%s%N"</span></span><br><span class="line">  1539065478653578171</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析时间戳</span></span><br><span class="line">$ date -d@1545149326</span><br><span class="line">  Wed Dec 19 00:08:46 CST 2018</span><br><span class="line">$ date -d@1543210000 <span class="string">"+%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">  2018-11-26 13:26:40</span><br><span class="line"></span><br><span class="line"><span class="comment"># For MacOS</span></span><br><span class="line">$ date -r 1577808000</span><br><span class="line">  2020年 1月 1日 星期三 00时00分00秒 CST</span><br><span class="line">$ date -r 1577808000 <span class="string">"+%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">  2020-01-01 00:00:00</span><br></pre></td></tr></tbody></table></figure>
<h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘信息</span></span><br><span class="line">$ df -h</span><br><span class="line">  Filesystem                   Size  Used Avail Use% Mounted on</span><br><span class="line">  /dev/mapper/systemvg-rootlv  7.9G  388M  7.1G   6% /</span><br><span class="line">  tmpfs                        3.9G   12K  3.9G   1% /dev/shm</span><br><span class="line">  /dev/vda1                    485M   39M  421M   9% /boot</span><br><span class="line">  /dev/mapper/systemvg-homelv   30G   11G   18G  38% /home</span><br><span class="line">  /dev/mapper/systemvg-optlv    30G  187M   28G   1% /opt</span><br><span class="line">  /dev/mapper/systemvg-tmplv   2.0G   68M  1.9G   4% /tmp</span><br><span class="line">  /dev/mapper/systemvg-usrlv   9.9G  2.7G  6.7G  29% /usr</span><br><span class="line">  /dev/mapper/systemvg-varlv   6.0G  352M  5.3G   7% /var</span><br><span class="line">  /dev/mapper/datavg-datalv     98G  4.1G   89G   5% /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 device 对应的 disk</span></span><br><span class="line">$ ls -trl /dev/mapper/</span><br><span class="line">  crw-rw---- 1 root root 10, 58 May 27  2017 control</span><br><span class="line">  lrwxrwxrwx 1 root root      7 May 27  2017 systemvg-lv_swap -&gt; ../dm-0</span><br><span class="line">  lrwxrwxrwx 1 root root      7 May 27  2017 systemvg-optlv -&gt; ../dm-4</span><br><span class="line">  lrwxrwxrwx 1 root root      7 May 27  2017 systemvg-tmplv -&gt; ../dm-5</span><br><span class="line">  lrwxrwxrwx 1 root root      7 May 27  2017 systemvg-usrlv -&gt; ../dm-6</span><br><span class="line">  lrwxrwxrwx 1 root root      7 May 27  2017 systemvg-varlv -&gt; ../dm-3</span><br><span class="line">  lrwxrwxrwx 1 root root      7 May 27  2017 systemvg-rootlv -&gt; ../dm-1</span><br><span class="line">  lrwxrwxrwx 1 root root      7 Jun  1  2017 datavg-datalv -&gt; ../dm-7</span><br><span class="line">  lrwxrwxrwx 1 root root      7 Jun  1  2017 systemvg-homelv -&gt; ../dm-2</span><br></pre></td></tr></tbody></table></figure>
<h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"a"</span> &gt; a</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"b"</span> &gt; b</span><br><span class="line">$ diff a b</span><br><span class="line">  1c1</span><br><span class="line">  &lt; a</span><br><span class="line">  ---</span><br><span class="line">  &gt; b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1c1：表示 a 文件的第 1 行 和 b 文件的第 1 行不一致</span></span><br><span class="line"><span class="comment"># &lt; a：展示的是 a 文件中不一致的那一行的内容</span></span><br><span class="line"><span class="comment"># &gt; b：展示的是 b 文件中不一致的那一行的内容</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 文件大小</span></span><br><span class="line">$ du -h /home/ --max-depth=1</span><br><span class="line">  3.1G	/home/eagle</span><br><span class="line">  40.8G	/home/</span><br><span class="line"></span><br><span class="line">$ du -sh *</span><br><span class="line">  64K	logs</span><br><span class="line">  276M	software</span><br><span class="line">  28K	zkdata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定以 MB 为单位展示大小，并排序</span></span><br><span class="line">$ du -sm * | sort -nr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外，使用 `ll -h` 也可以得到文件的大小</span></span><br><span class="line">$ ll -h</span><br><span class="line">  总用量 546M</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper  41M 8月  31 10:08 zookeeper.log</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper 101M 8月  31 00:06 zookeeper.log.1</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper 101M 8月  29 11:39 zookeeper.log.2</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper 101M 8月  27 16:01 zookeeper.log.3</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper 101M 8月  25 20:38 zookeeper.log.4</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper 101M 8月  24 00:34 zookeeper.log.5</span><br><span class="line">  -rw-rw-r-- 1 zookeeper zookeeper 4.2M 8月  31 09:35 zookeeper.out</span><br></pre></td></tr></tbody></table></figure>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 不换行</span></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">"yuzhouwan.com\c"</span> &gt;&gt; blogs.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法结果保留小数位</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"scale=2;1234/1000"</span> | bc</span><br><span class="line">  1.23</span><br><span class="line">$ res=$(<span class="built_in">echo</span> <span class="string">"scale=2;1234/1000"</span> | bc)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$res</span></span><br><span class="line">  1.23</span><br></pre></td></tr></tbody></table></figure>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 找到最占用磁盘空间的十个文件</span></span><br><span class="line">$ find / -<span class="built_in">type</span> f -print0 | xargs -0 du -h | sort -rh | head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当需要删除的文件列表过长时，rm 会报错 Argument list too long，此时则可以使用 find 命令进行查找删除</span></span><br><span class="line">$ find . -name <span class="string">"*.log"</span> -delete</span><br></pre></td></tr></tbody></table></figure>
<h3 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum install firefox</span><br><span class="line">$ firefox yuzhouwan.html</span><br></pre></td></tr></tbody></table></figure>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 或操作</span></span><br><span class="line">$ grep -E <span class="string">'bin|etc'</span></span><br><span class="line">$ egrep <span class="string">'bin|etc'</span></span><br><span class="line">$ awk <span class="string">'/bin|etc/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与操作</span></span><br><span class="line">$ grep bin | grep etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不区分大小写</span></span><br><span class="line">$ grep -i BIN		<span class="comment"># (bin/sbin)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全词匹配</span></span><br><span class="line">$ grep -w bin		<span class="comment"># (bin)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配，并指定显示多少行上下文</span></span><br><span class="line">$ grep -C 1 bin		<span class="comment"># (bin/boot root/sbin/script)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤脚本输出（|&amp; 相当于 stdout + stderr）</span></span><br><span class="line">$ zkServer.sh status |&amp; grep Mode</span><br><span class="line">  Mode: follower</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊字符，需要增加反斜杠（\），进行转义</span></span><br><span class="line">$ grep \$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据字段 str 匹配到某一行，并获取这一行随后的 n 行（grep -A &lt;n&gt; &lt;str&gt;）</span></span><br><span class="line">$ vim yuzhouwan.txt</span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br><span class="line">  4</span><br><span class="line">  5</span><br><span class="line">  6</span><br><span class="line">$ cat yuzhouwan.txt | grep -A 2 3</span><br><span class="line">  3</span><br><span class="line">  4</span><br><span class="line">  5</span><br></pre></td></tr></tbody></table></figure>
<h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看机器的 IP 地址</span></span><br><span class="line">$ hostname -i</span><br><span class="line">  10.10.10.1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘 I/O</span></span><br><span class="line">$ iostat -x 1 10</span><br><span class="line">  Linux 2.6.32-504.3.3.el6.centos.plus.x86_64 (yuzhouwan01.com) 	01/19/2018 	_x86_64_	(24 CPU)</span><br><span class="line"></span><br><span class="line">  avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">            17.28    0.00    2.02    0.08    0.00   80.62</span><br><span class="line"></span><br><span class="line">  Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util</span><br><span class="line">  sdb               0.01   159.15    2.51    9.62   493.46  1350.14   151.96     0.02    1.77   0.28   0.34</span><br><span class="line">  sdd               0.01   162.24    2.49    9.69   493.13  1375.44   153.42     0.02    1.85   0.28   0.34</span><br><span class="line">  sdc               0.01   162.57    2.49    9.83   487.72  1379.15   151.58     0.02    2.02   0.27   0.34</span><br><span class="line">  sde               0.01   161.54    2.54    9.80   500.08  1370.68   151.61     0.02    1.87   0.28   0.34</span><br><span class="line">  sdg               0.01   162.06    2.53    9.83   498.98  1375.10   151.64     0.02    1.93   0.28   0.34</span><br><span class="line">  sdf               0.01   163.34    2.53    9.74   496.43  1384.64   153.22     0.02    1.92   0.28   0.35</span><br><span class="line">  sdh               0.01   161.44    2.56    9.74   502.61  1369.43   152.20     0.02    1.90   0.28   0.34</span><br><span class="line">  sdi               0.01   162.58    2.54    9.78   498.87  1378.82   152.48     0.02    1.99   0.28   0.35</span><br><span class="line">  sda               0.29    83.48    0.29  146.49    14.22  1146.37     7.91     0.04    0.28   0.05   0.69</span><br><span class="line">  sdj               0.01   164.20    2.60    9.77   512.11  1391.74   153.90     0.02    1.97   0.28   0.35</span><br><span class="line">  sdk               0.01   161.76    2.60    9.70   505.17  1371.69   152.56     0.03    2.04   0.28   0.35</span><br><span class="line">  sdl               0.01   168.31    2.50    9.84   490.59  1425.20   155.30     0.03    2.57   0.28   0.35</span><br><span class="line">  sdm               0.01   162.34    2.52    9.69   486.76  1376.20   152.68     0.02    1.97   0.28   0.34</span><br><span class="line">  dm-0              0.00     0.00    0.02    0.31     0.70     2.45     9.64     0.00    6.04   0.43   0.01</span><br><span class="line">  dm-1              0.00     0.00    0.39    0.42     3.10     3.32     8.00     0.00    3.42   0.27   0.02</span><br><span class="line">  dm-2              0.00     0.00    0.10  173.34     7.42  1035.66     6.01     0.02    0.04   0.03   0.55</span><br><span class="line">  dm-3              0.00     0.00    0.01    7.47     0.22    59.05     7.93     0.00    0.56   0.07   0.05</span><br><span class="line">  dm-4              0.00     0.00    0.00    4.10     0.00    32.78     8.00     0.00    0.56   0.04   0.02</span><br><span class="line">  dm-5              0.00     0.00    0.04    0.81     1.26     6.51     9.07     0.00    0.59   0.17   0.01</span><br><span class="line">  dm-6              0.00     0.00    0.01    0.82     1.51     6.59     9.68     0.00    2.02   0.16   0.01</span><br></pre></td></tr></tbody></table></figure>
<h3 id="jq"><a href="#jq" class="headerlink" title="jq"></a><a href="https://stedolan.github.io/jq/">jq</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https://stedolan.github.io/jq/download/ 下载 jq-linux64</span></span><br><span class="line">$ mv jq-linux64 ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/</span><br><span class="line">$ chmod +x jq-linux64</span><br><span class="line">$ ln -s jq-linux64 jq</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">alias</span> jq=<span class="string">'/home/connect/software/jq'</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ curl localhost:8083/ | jq</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.11.0.0-cp1"</span>,</span><br><span class="line">    <span class="string">"commit"</span>: <span class="string">"5cadaa94d0a69e0d"</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取某一个元素</span></span><br><span class="line">$ jq <span class="string">".element"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组中的某一个</span></span><br><span class="line">$ jq <span class="string">".element[0]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新把 JSON 压缩成一行</span></span><br><span class="line">$ jq -c</span><br></pre></td></tr></tbody></table></figure>
<h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 线程 dump，可以判断进程是否是假死状态</span></span><br><span class="line">$ jstack -m &lt;pid&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Java 进程的 GC 情况</span></span><br><span class="line"><span class="comment"># Usage: jstat -gcutil &lt;pid&gt; &lt;interval_ms&gt;</span></span><br><span class="line">$ jstat -gcutil 24909 1000</span><br><span class="line">    S0     S1     E      O      P       YGC   YGCT     FGC   FGCT     GCT</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  98.56   6.38  46.86      2    0.147     0    0.000    0.147</span><br><span class="line">  40.77   0.00  99.16   6.38  46.87      2    0.147     0    0.000    0.147</span><br></pre></td></tr></tbody></table></figure>
<h3 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ lsblk -d -o name,rota</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># rota，全称 rotational，表示磁盘是否可以旋转</span></span><br><span class="line"><span class="comment"># 其中，0 表示不可以旋转，而 1 表示可以旋转</span></span><br><span class="line"><span class="comment"># 前者不可以旋转的说明是 SSD 盘，反之，后者可以旋转则不是 SSD 盘，有可能是 SDA 盘等</span></span><br><span class="line">NAME  ROTA</span><br><span class="line">vda      1</span><br><span class="line">vdb      1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 系统级 监控 &amp; 诊断工具</span></span><br><span class="line"><span class="comment"># 指定进程号，可以查看该进程打开的文件</span></span><br><span class="line">$ lsof -p &lt;pid&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对打开的文件数，对进程进行排序</span></span><br><span class="line">$ lsof -n | awk <span class="string">'{print $2}'</span> | sort | uniq -c | sort -nr</span><br></pre></td></tr></tbody></table></figure>
<h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟暴露 8080 端口的服务器</span></span><br><span class="line">$ nc -l 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最简聊天室</span></span><br><span class="line"><span class="comment"># Windows1</span></span><br><span class="line">$ nc -l 8080</span><br><span class="line"><span class="comment"># Windows2</span></span><br><span class="line">$ nc localhost 8080</span><br><span class="line"><span class="comment"># 然后，可以在各自的窗口输入信息，另一个窗口就可以接收到</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="nmon"><a href="#nmon" class="headerlink" title="nmon"></a>nmon</h3><h4 id="生成-nmon-文件"><a href="#生成-nmon-文件" class="headerlink" title="生成 nmon 文件"></a>生成 nmon 文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获得帮助文档</span></span><br><span class="line">$ nmon_x86_64_centos6 -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同的操作系统，可能 nmon 命令不一样</span></span><br><span class="line"><span class="comment"># -f 使得 xxx.nmon 文件名包含文件创建的时间</span></span><br><span class="line"><span class="comment"># -N 指定需要对 NFS 活动情况进行监控</span></span><br><span class="line"><span class="comment"># -m 指定生成的 xxx.nmon 存放的目录</span></span><br><span class="line"><span class="comment"># -s 指定相隔多少秒，做一次监控</span></span><br><span class="line"><span class="comment"># -c 指定采集多少次监控数据，生成一个 xxx.nmon 文件</span></span><br><span class="line">$ /nmon/nmon_x86_64_rhel6 -f -N -m /nmon -s 60 -c 1440</span><br><span class="line">$ /nmon/nmon_x86_64_centos6 -f -N -m /nmon -s 60 -c 1440</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换 .nmon 文件为 .csv 文件</span></span><br><span class="line">$ sort yuzhouwan-prd3_170831_0001.nmon &gt; yuzhouwan-prd3_170831_0001.csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看监控数据</span></span><br><span class="line"><span class="comment"># 在 https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power%20Systems/page/nmon_analyser 页面，下载 nmon analyser v52_1.xlsm 文件</span></span><br><span class="line"><span class="comment"># 打开后，会提示“启用宏定义”，点击确定</span></span><br><span class="line"><span class="comment"># 一共会有 Analyser / Settings / Release Notes 三个 sheet，跳转到第一个 Analyser 里</span></span><br><span class="line"><span class="comment"># 点击 “Analyze nmon data” 按钮，选择 yuzhouwan-prd3_170831_0001.csv 文件</span></span><br><span class="line"><span class="comment"># 会生成一个 yuzhouwan-prd3_170831_0001.nmon.xlsx，并直接打开</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="系统资源实时监控"><a href="#系统资源实时监控" class="headerlink" title="系统资源实时监控"></a>系统资源实时监控</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ /nmon/nmon_x86_64_centos6</span><br><span class="line">  <span class="comment"># 常用组合：nml</span></span><br><span class="line">  lnmonq14g-------------------Hostname=yuzhouwan-prd3-Refresh= 2secs ---11:04.35-----------|</span><br><span class="line">  | CPU +-------------------------------------------------------------------------+        |</span><br><span class="line">  |100%-|                                           |                                      |</span><br><span class="line">  | 95%-|                                           |                                      | <span class="comment"># 为方便展示，此处省去 25% ~ 90%</span></span><br><span class="line">  | 20%-|                                           |                                      |</span><br><span class="line">  | 15%-|                                           |                                      |</span><br><span class="line">  | 10%-|              ss                           |                                      |</span><br><span class="line">  |  5%-|UUUUsUUUUsUUsUUUUwUUssUssUUssUUUsUUsUUUUUsU|                                      |</span><br><span class="line">  |     +--------------------User---------System----+----Wait---------------------+        |</span><br><span class="line">  | Memory Stats --------------------------------------------------------------------------|</span><br><span class="line">  |                RAM     High       Low     Swap    Page Size=4 KB                       |</span><br><span class="line">  | Total MB    129013.3     -0.0     -0.0  10240.0                                        |</span><br><span class="line">  | Free  MB     584.1     -0.0     -0.0  10240.0                                          |</span><br><span class="line">  | Free Percent     0.5%   100.0%   100.0%   100.0%                                       |</span><br><span class="line">  |             MB                  MB                  MB                                 |</span><br><span class="line">  |                      Cached= 76656.7     Active= 54649.3                               |</span><br><span class="line">  | Buffers=  4908.1 Swapcached=     0.0  Inactive = 68809.5                               |</span><br><span class="line">  | Dirty  =   131.6 Writeback =     0.0  Mapped   =    75.1                               |</span><br><span class="line">  | Slab   =  4059.3 Commit_AS = 47663.8 PageTables=    96.6                               |</span><br><span class="line">  | Network I/O ---------------------------------------------------------------------------|</span><br><span class="line">  |I/F Name Recv=KB/s Trans=KB/s packin packout insize outsize Peak-&gt;Recv Trans            |</span><br><span class="line">  |      lo  1044.0  1044.0     335.5    335.5  3186.8 3186.8     8639.4  8639.4           |</span><br><span class="line">  |    eth0  5262.7  1168.7    5999.0   2762.1   898.3  433.3    10531.6 43312.1           |</span><br><span class="line">  |    eth1     0.0     0.0    0.0     0.0     0.0    0.0        0.0     0.0               |</span><br><span class="line">  |---------Warning: Some Statistics may not shown-----------------------------------------|</span><br></pre></td></tr></tbody></table></figure>
<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动一个后台进程</span></span><br><span class="line">$ nohup sleep 1000 &amp;</span><br><span class="line">  [1] 30408</span><br><span class="line"><span class="comment"># 列出所有的后台进程</span></span><br><span class="line">$ <span class="built_in">jobs</span></span><br><span class="line">  [1]+  Running                 nohup sleep 1000 &amp;</span><br><span class="line"><span class="comment"># 将后台进程 [1] 提到前台，并 Ctrl+C 停止进程</span></span><br><span class="line">$ <span class="built_in">fg</span> %1</span><br><span class="line">  nohup sleep 1000</span><br><span class="line"><span class="comment"># 检查后台进程已经被停止</span></span><br><span class="line">$ <span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># 不输出任何内容</span></span><br><span class="line">$ nohup bash yuzhouwan.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ make -j&lt;thread_num&gt;</span><br><span class="line"><span class="comment"># 查看 CPU 核数</span></span><br><span class="line">$ cat /proc/cpuinfo | grep processor | wc -l</span><br><span class="line"><span class="comment"># 如果是两个处理器的话，一般 `-j2` 可以达到最高效率（某些进程主要耗时是在 I/O 上，并不能充分利用单个 cpu 的时间，则可以考虑 -j4）</span></span><br><span class="line"><span class="comment"># 一般的，使用 `thread_num = number_of_cores + 1` 公式来计算即可</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><h4 id="重命名挂载点"><a href="#重命名挂载点" class="headerlink" title="重命名挂载点"></a>重命名挂载点</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里举例将 old 目录更名为 yuzhouwan</span></span><br><span class="line">$ sudo su root</span><br><span class="line">$ mkdir -p /yuzhouwan</span><br><span class="line">$ vim /etc/fstab</span><br><span class="line">  /dev/mapper/vg_os-lv_app /yuzhouwan ext4 defaults 1 2</span><br><span class="line">$ umount /old</span><br><span class="line">$ mount /yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ locale </span><br><span class="line">  LANG=en_US.UTF-8                    <span class="comment"># 未设置任何 LC_xxx 变量时所使用的默认值</span></span><br><span class="line">  LC_CTYPE=zh_CN.UTF-8                <span class="comment"># 指定使用某区域的字符分类及处理方式</span></span><br><span class="line">  LC_NUMERIC=<span class="string">"en_US.UTF-8"</span>            <span class="comment"># 指定使用某区域的非货币的数字格式</span></span><br><span class="line">  LC_TIME=<span class="string">"en_US.UTF-8"</span>               <span class="comment"># 指定使用某区域的日期和时间格式</span></span><br><span class="line">  LC_COLLATE=<span class="string">"en_US.UTF-8"</span>            <span class="comment"># 指定使用某区域的排序规则</span></span><br><span class="line">  LC_MONETARY=<span class="string">"en_US.UTF-8"</span>           <span class="comment"># 指定使用某区域的货币格式</span></span><br><span class="line">  LC_MESSAGES=<span class="string">"en_US.UTF-8"</span>           <span class="comment"># 指定使用某区域的响应与信息的格式</span></span><br><span class="line">  LC_PAPER=<span class="string">"en_US.UTF-8"</span>              <span class="comment"># 指定使用某区域的纸张大小</span></span><br><span class="line">  LC_NAME=<span class="string">"en_US.UTF-8"</span>               <span class="comment"># 指定使用某区域的姓名书写方式</span></span><br><span class="line">  LC_ADDRESS=<span class="string">"en_US.UTF-8"</span>            <span class="comment"># 指定使用某区域的地址格式和位置信息</span></span><br><span class="line">  LC_TELEPHONE=<span class="string">"en_US.UTF-8"</span>          <span class="comment"># 指定使用某区域的电话号码格式</span></span><br><span class="line">  LC_MEASUREMENT=<span class="string">"en_US.UTF-8"</span>        <span class="comment"># 指定使用某区域的度量衡规则</span></span><br><span class="line">  LC_IDENTIFICATION=<span class="string">"en_US.UTF-8"</span>     <span class="comment"># 对 locale 自身信息的概述</span></span><br><span class="line">  LC_ALL=                             <span class="comment"># 用来覆盖掉所有其他 LC_xxx 变量的值</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">$ tar zcvf gc.tar.gz gc</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar zxvf gc.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在 top 展示页面中</span></span><br><span class="line"><span class="comment"># 按 CPU 排序：Shift + P</span></span><br><span class="line"><span class="comment"># 按内存排序：Shift + M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程内，各线程的资源消耗</span></span><br><span class="line">$ top -Hp &lt;pid&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进一步，可以根据线程 pid 在 jstack 中定位出对应的线程栈</span></span><br><span class="line"><span class="comment"># 拿到 thread_pid 对应的 16 进制数</span></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">'%x\n'</span> &lt;thread_pid&gt;</span><br><span class="line">$ jstack &lt;pid&gt; | less</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 batch 模式（-b），并控制命令执行迭代次数为 1 次（-n），达到生成一次 CPU 使用情况的快照</span></span><br><span class="line">$ top -b -n 1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum install tree -y</span><br><span class="line">$ tree -L 1 /</span><br><span class="line">  /</span><br><span class="line">  ├── bin</span><br><span class="line">  ├── usr</span><br><span class="line">  └── var</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ rpm -i --badreloc --relocate /usr/java=/home/eagle/software/java jdk-7u80-linux-x64.rpm</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a><a href="https://en.wikipedia.org/wiki/Rolling_hash">rsync</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 软链接、隐藏文件等特殊文件的复制，需要用 `rsync` 命令而不能用 `scp`</span></span><br><span class="line">$ rsync -avuz -e ssh eagle/ root@eagle:/home/eagle</span><br></pre></td></tr></tbody></table></figure>
<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 直接修改文件</span></span><br><span class="line">$ sed -in-place -e <span class="string">'s/blog/yuzhouwan.com/g'</span> yuzhouwan.json</span><br></pre></td></tr></tbody></table></figure>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 后台运行 scp 传输任务</span></span><br><span class="line">$ scp yuzhouwan root@192.168.1.1:/</span><br><span class="line">  root@192.168.1.1<span class="string">'s password: </span></span><br><span class="line"><span class="string">  yuzhouwan  0%   11MB   1.3MB/s 5:24:10 ETA^Z</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Ctrl+Z 暂停 scp 任务</span></span><br><span class="line"><span class="string">  [1]+  Stopped    scp yuzhouwan root@192.168.1.1:/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查看任务已经被暂停</span></span><br><span class="line"><span class="string">$ jobs</span></span><br><span class="line"><span class="string">  [1]+  Stopped    scp yuzhouwan root@192.168.1.1:/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使得其在后台恢复运行</span></span><br><span class="line"><span class="string">$ bg %1</span></span><br><span class="line"><span class="string">  [1]+ scp yuzhouwan root@192.168.1.1:/ &amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 已恢复运行</span></span><br><span class="line"><span class="string">$ jobs</span></span><br><span class="line"><span class="string">  [1]+  Running    scp yuzhouwan root@192.168.1.1:/ &amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 忽略 HUP 信号（终端断线的中断信号）</span></span><br><span class="line"><span class="string">$ disown -h %1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 退出</span></span><br><span class="line"><span class="string">$ exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 重新登录后，查看 scp 后台任务是否正常运行</span></span><br><span class="line"><span class="string">$ ps -ef | grep scp</span></span><br><span class="line"><span class="string">  root  6189     1  0 18:04 ?        00:00:00 scp yuzhouwan root@192.168.1.1:/</span></span><br><span class="line"><span class="string">  root  6190  6189  0 18:04 ?        00:00:00 /usr/bin/ssh -x -oForwardAgent=no -oPermitLocalCommand=no -oClearAllForwardings=yes -l root -- 192.168.1.1 scp -t /</span></span><br><span class="line"><span class="string">  root  7723  7643  0 18:05 pts/3    00:00:00 grep --color=auto scp</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 写入三行数据</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"1"</span> &gt;&gt; yuzhouwan</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"2"</span> &gt;&gt; yuzhouwan</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"3"</span> &gt;&gt; yuzhouwan</span><br><span class="line">$ cat yuzhouwan</span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照数据行数切分</span></span><br><span class="line">$ split -l 1 yuzhouwan tmp_</span><br><span class="line"><span class="comment"># 按照数据大小切分</span></span><br><span class="line"><span class="comment"># 默认不指定单位是 B，支持 K, M, G, T, P, E, Z, Y</span></span><br><span class="line">$ split -b 2 yuzhouwan tmp_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功切分</span></span><br><span class="line">$ ll tmp_*</span><br><span class="line">-rw-r--r-- 1 root root 2 Aug  2 19:35 tmp_aa</span><br><span class="line">-rw-r--r-- 1 root root 2 Aug  2 19:35 tmp_ab</span><br><span class="line">-rw-r--r-- 1 root root 2 Aug  2 19:35 tmp_ac</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种切分方式，得到的结果应该是一样的</span></span><br><span class="line">$ cat tmp_aa</span><br><span class="line">  1</span><br><span class="line">$ cat tmp_ab</span><br><span class="line">  2</span><br><span class="line">$ cat tmp_ac</span><br><span class="line">  3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并为新文件</span></span><br><span class="line">$ cat tmp_* &gt; yuzhouwan_new</span><br><span class="line">$ cat yuzhouwan_new</span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 登录远程机器，执行命令</span></span><br><span class="line">$ ssh bj@192.168.1.101 <span class="string">"df -h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用逗号分隔多个执行命令</span></span><br><span class="line">$ ssh bj@192.168.1.101 <span class="string">"pwd; ls"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="sz"><a href="#sz" class="headerlink" title="sz"></a>sz</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ yum install lrzsz -y</span><br><span class="line"><span class="comment"># 将服务器上文件，拉取到本机</span></span><br><span class="line">$ sz &lt;file name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果下载出现乱码，可以增加 `-e` 参数，同理 `rz` 也可以通过这个参数来解决乱码问题</span></span><br><span class="line">-e, --escape</span><br><span class="line">  Force sender to escape all control characters; normally XON, XOFF, DLE, CR-@-CR, and Ctrl-X are escaped.</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果遇到 ZooKeeper 报警网络延迟，不能只看延迟，还需要关注丢包率（packet loss）</span></span><br><span class="line"><span class="comment"># 如果出现网络丢包率过高，可能是交换机的负载过大，接口松动，或者是网线质量问题</span></span><br><span class="line">$ ping yuzhouwan01</span><br><span class="line">  PING yuzhouwan01.com (192.168.1.101) 56(84) bytes of data.</span><br><span class="line">  64 bytes from yuzhouwan01.com (192.168.1.101): icmp_seq=1 ttl=64 time=0.055 ms</span><br><span class="line">  64 bytes from yuzhouwan01.com (192.168.1.101): icmp_seq=2 ttl=64 time=0.066 ms</span><br><span class="line">  64 bytes from yuzhouwan01.com (192.168.1.101): icmp_seq=3 ttl=64 time=0.064 ms</span><br><span class="line">  64 bytes from yuzhouwan01.com (192.168.1.101): icmp_seq=4 ttl=64 time=0.083 ms</span><br><span class="line">  ^C</span><br><span class="line">  --- yuzhouwan01.com ping statistics ---</span><br><span class="line">  4 packets transmitted, 4 received, 0% packet loss, time 3443ms</span><br><span class="line">  rtt min/avg/max/mdev = 0.055/0.067/0.083/0.010 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制 ping 的次数 和 timeout 时间（单位：秒）</span></span><br><span class="line">$ ping -c 4 yuzhouwan01 -W 5</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程的 “启动时间” 和 “已运行时长”</span></span><br><span class="line">$ ps -eo pid,lstart,etime | grep &lt;pid&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程分配内存大小</span></span><br><span class="line"><span class="comment"># RSS（Resident Set Size）常驻内存集，表示该进程分配的内存大小</span></span><br><span class="line">$ ps -e -o pid,rss</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ulimit"><a href="#ulimit" class="headerlink" title="ulimit"></a>ulimit</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 当进程报错 `java.io.IOException: Too many open files` 时，可以检查是不是没有修改默认的打开文件数（1024）</span></span><br><span class="line">$ <span class="built_in">ulimit</span> -n</span><br><span class="line">  1024</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过下面这行命令进行修改</span></span><br><span class="line">$ <span class="built_in">ulimit</span> -HSn 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要重启系统后，保证修改仍然生效，则可以把上面的命令，添加到 ~/.bash_profile 或者 /etc/profile</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">  Linux yuzhouwan 2.6.32-504.3.3.el6.centos.plus.x86_64 <span class="comment">#1 SMP Wed Dec 17 01:21:03 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel version</span></span><br><span class="line">$ uname -r</span><br><span class="line">  2.6.32-504.3.3.el6.centos.plus.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体含义：&lt;内核主版本&gt;.&lt;偶数:稳定版本/奇数:开发中版本&gt;.&lt;错误修补的次数&gt;-&lt;?&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># umask 全称 user file-creatiopn mode mask，用来控制用户权限的</span></span><br><span class="line"><span class="comment"># 查看 umask</span></span><br><span class="line">$ <span class="built_in">umask</span></span><br><span class="line">  0022</span><br><span class="line">$ <span class="built_in">umask</span> -S</span><br><span class="line">  u=rwx,g=rx,o=rx</span><br><span class="line"><span class="comment"># 修改 umask</span></span><br><span class="line">$ <span class="built_in">umask</span> 0022</span><br><span class="line"><span class="comment"># 存在 umask 之后，会减少用户的 umask 权限（例如，0777 - 0022 = 0755）</span></span><br><span class="line"><span class="comment"># 所以，部署安装包的时候，如果 *.sh / *.py 脚本的执行权限分配不足的话，同时 umask 设置较大时，解压安装包后，会出现文件执行权限不足的情况</span></span><br><span class="line"><span class="comment"># 这时候，需要考虑分配适当的文件和文件夹权限</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h4 id="按照单词跳转"><a href="#按照单词跳转" class="headerlink" title="按照单词跳转"></a>按照单词跳转</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># w       跳到下一个单词的开头</span></span><br><span class="line"><span class="comment"># get     跳到上一个单词的开头</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># u       撤销上一步的操作</span></span><br><span class="line"><span class="comment"># U       恢复当前行（即一次撤销对当前行的全部操作）</span></span><br><span class="line"><span class="comment"># Ctrl+r  恢复上一步被撤销的操作</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Ctrl+U   向上翻半页</span></span><br><span class="line"><span class="comment"># Ctrl+D   向下翻半页</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="退出并保存"><a href="#退出并保存" class="headerlink" title="退出并保存"></a>退出并保存</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># esc + ZZ   （esc 是确保 vim 已经退出了编辑模式）</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><h4 id="从-ftp-服务器下载文件"><a href="#从-ftp-服务器下载文件" class="headerlink" title="从 ftp 服务器下载文件"></a>从 ftp 服务器下载文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget -nd -m --ftp-user=&lt;user&gt; --ftp-password=&lt;password&gt; ftp://&lt;ftp_server&gt;/zookeeper/zookeeper-3.4.6.4.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h4 id="输出到控制台"><a href="#输出到控制台" class="headerlink" title="输出到控制台"></a>输出到控制台</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -q：quiet 模式，屏蔽 request header 信息的回显</span></span><br><span class="line"><span class="comment"># -O：指定输出文件，后面加 - 横杠，就定向为 console</span></span><br><span class="line">$ wget -q -O- &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">$ wget -qO- &lt;url&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 另外还有一个好处，wget 可以实现跳转。以 <a href="https://yuzhouwan.com/posts/5845/">Apache Druid</a> 为例，用 <code>curl 命令去访问 http://standby-overlord:8090/druid/indexer/v1/runningTasks</code> 会因为 overlord 是 standby 结点，导致调用接口失败。而如果用 wget 命令则可以自动跳转到 active 结点，同时再配合使用 <code>-qO-</code> 命令，就能达到和 <code>curl</code> 命令一样，将接口调用结果直接输出到控制台的效果（当然 <code>curl -L</code> 也可以实现）</p>
<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 Java 进程的 PID，并使用 jstat 命令观察 GC 情况</span></span><br><span class="line">$ jps -ml | grep yuzhouwan | awk <span class="string">'{print $1}'</span> | xargs -i jstat -gcutil {} 1000</span><br></pre></td></tr></tbody></table></figure>
<h3 id="标准-I-O"><a href="#标准-I-O" class="headerlink" title="标准 I/O"></a>标准 I/O</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只输出 “脚本执行异常信息”</span></span><br><span class="line">$ ./commands.sh 1&gt;/dev/null 2&gt;./error.log</span><br><span class="line"><span class="comment"># 完全不作输出</span></span><br><span class="line">$ ./commands.sh 1&gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Shell-编程"><a href="#Shell-编程" class="headerlink" title="Shell 编程"></a>Shell 编程</h2><h3 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在执行脚本开始的时候，载入环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure>
<h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转到，当前脚本的文件目录</span></span><br><span class="line"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`</span><br></pre></td></tr></tbody></table></figure>
<h3 id="cut-string"><a href="#cut-string" class="headerlink" title="cut string"></a>cut string</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将 string 的前后各删除一个字符</span></span><br><span class="line">arr=<span class="string">"[leader, election, zookeeper]"</span></span><br><span class="line">arr=`<span class="built_in">echo</span> <span class="variable">${arr:1:<span class="variable">${#arr}</span>-2}</span>`    <span class="comment"># leader, election, zookeeper</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 `command` 命令，可以在脚本开始执行前，对需要的命令进行 check</span></span><br><span class="line"><span class="built_in">command</span> -v nc &gt;/dev/null 2&gt;&amp;1 || {</span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 <span class="string">"I require nc but it's not installed!"</span>; <span class="built_in">exit</span> 1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h3><h4 id="遍历文件"><a href="#遍历文件" class="headerlink" title="遍历文件"></a>遍历文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `cat yuzhouwan.txt`; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">arr=<span class="string">"leader, election, zookeeper"</span></span><br><span class="line">OLD_IFS=<span class="string">"<span class="variable">$IFS</span>"</span></span><br><span class="line">IFS=$<span class="string">", "</span></span><br><span class="line">arr=(<span class="variable">${arr}</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="variable">${arr[@]}</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">${a}</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">IFS=<span class="string">"<span class="variable">$OLD_IFS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 IFS，前文 "实战技巧 - IFS 设置" 部分已经提到了</span></span><br><span class="line"><span class="comment"># 下面介绍一种 `fori` 的遍历方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0	/election</span></span><br><span class="line"><span class="comment"># 0	/leader</span></span><br><span class="line"><span class="comment"># 2	/zookeeper</span></span><br><span class="line">sorted_num=`<span class="built_in">echo</span> <span class="variable">${sorted}</span> | wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">${sorted_num}</span> -gt <span class="variable">${top_n}</span> ]; <span class="keyword">then</span></span><br><span class="line">    sorted_num=<span class="variable">${top_n}</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">json=<span class="string">"{"</span></span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=<span class="variable">${sorted_num}</span>; i++ )); <span class="keyword">do</span></span><br><span class="line">    line=`<span class="built_in">echo</span> <span class="string">"<span class="variable">${sorted}</span>"</span> | sed -n <span class="string">"<span class="variable">${i}</span> p"</span>`</span><br><span class="line">    json=<span class="string">"<span class="variable">${json}</span>`echo <span class="variable">${line}</span> | awk '{print <span class="variable">$1</span>}'`: `echo <span class="variable">${line}</span> | awk '{print <span class="variable">$2</span>}'`"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">${i}</span> -lt <span class="variable">${sorted_num}</span> ]; <span class="keyword">then</span></span><br><span class="line">        json=<span class="string">"<span class="variable">${json}</span>, "</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">json=<span class="string">"<span class="variable">${json}</span>}"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，也有其他的实现方法，比如下面 `seq` 这种</span></span><br><span class="line"><span class="comment"># 但是，`seq` 这种方式需要注意两点</span></span><br><span class="line"><span class="comment"># 第一点，$(seq 1 1 10) 里面的 初始值、步长、最大值 都必须要是 Integer 类型的，如果是通过 shell 外部传参进来的，需要做类型转换</span></span><br><span class="line"><span class="comment"># 第二点，`seq` 方式在 console 里面执行没问题，但是，写在 shell 脚本里面，可能会失效（原因尚不明确）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 2 10); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"skip by 2 step, value is <span class="variable">$i</span>"</span>; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数的时候，不需要表示入参，直接用 $1 / $2 获取入参的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() {</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span>.<span class="variable">$2</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数定义需要在调用逻辑之前</span></span><br><span class="line"><span class="comment"># 多个入参，依次空格隔开传入，即可</span></span><br><span class="line">f <span class="string">"yuzhouwan"</span> <span class="string">"com"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 判断字符串是否一致</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">${context}</span>_x == <span class="string">"_x"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"OK"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值比较大小(这种写法还支持浮点数，而 `lt` / `gt` 的写法则不行)</span></span><br><span class="line"><span class="keyword">if</span> [[ $(<span class="built_in">echo</span> <span class="string">"<span class="variable">${origin_cost_time}</span> &gt;= <span class="variable">${compact_cost_time}</span>"</span>|bc) -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"True"</span> &gt;&gt; time.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"False"</span> &gt;&gt; time.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 针对某一列进行 sum 求和</span></span><br><span class="line">$ cat c | awk <span class="string">'{print $1}'</span>  | paste -sd+ - | bc</span><br><span class="line">  160</span><br></pre></td></tr></tbody></table></figure>
<h3 id="readlink"><a href="#readlink" class="headerlink" title="readlink"></a>readlink</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取到文件</span></span><br><span class="line">$ readlink -f logs/zookeeper.log</span><br><span class="line">  /home/zookeeper/logs/zookeeper.log</span><br></pre></td></tr></tbody></table></figure>
<h3 id="sed-1"><a href="#sed-1" class="headerlink" title="sed"></a>sed</h3><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 先后从 zk_con 里面，将 ":" 冒号后面 和 "/" 斜线之前的都删掉</span></span><br><span class="line">zk_con=<span class="string">" /192.168.1.1:35632[1](queued=0,recved=146,sent=146,sid=0x25dd0c02a0a02a7,lop=PING,est=1503994626336,to=40000,lcxid=0x0,lzxid=0xffffffffffffffff,lresp=1503996561355,llat=0,minlat=0,avglat=0,maxlat=3)"</span></span><br><span class="line">zk_con=`<span class="built_in">echo</span> <span class="variable">$zk_con</span> | sed <span class="string">'s/:.*//g'</span> | sed <span class="string">'s/.*\///g'</span>`    <span class="comment"># 192.168.1.1</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除匹配行"><a href="#删除匹配行" class="headerlink" title="删除匹配行"></a>删除匹配行</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 从 txt 文件中，删除包含 yuzhouwan 字符串的行</span></span><br><span class="line">$ sed -e <span class="string">'/yuzhouwan/d'</span> txt</span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除空白行"><a href="#删除空白行" class="headerlink" title="删除空白行"></a>删除空白行</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除没有任何字符的行</span></span><br><span class="line">$ sed -i <span class="string">'s/^$//g'</span> <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 删除只有空格的行</span></span><br><span class="line">$ sed -i <span class="string">'/^\s*$/d'</span> <span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 `-k1` 指定 针对第一列进行排序</span></span><br><span class="line"><span class="comment"># 通过 `-n` 指定 针对数字进行排序，避免 9 排在了 10 前面</span></span><br><span class="line"><span class="comment"># 当然也可以通过增加 `-r`，使得排序变成降序</span></span><br><span class="line"><span class="comment"># 如果，列与列之间的分隔符不是默认的 \t，则需要通过 `-t` 参数进行指定</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0	/election</span></span><br><span class="line"><span class="comment"># 0	/leader</span></span><br><span class="line"><span class="comment"># 2	/zookeeper</span></span><br><span class="line">sorted=`<span class="built_in">echo</span> <span class="variable">${result}</span> | sort -k1 -n`</span><br></pre></td></tr></tbody></table></figure>
<h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 计数</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"1\n1\n0"</span> | uniq -c</span><br><span class="line"><span class="comment"># 2 1</span></span><br><span class="line"><span class="comment"># 1 0</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="exit-0"><a href="#exit-0" class="headerlink" title="exit 0"></a>exit 0</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 养成一个，脚本结尾，添加 `exit 0` 的好习惯</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="IFS-设置"><a href="#IFS-设置" class="headerlink" title="IFS 设置"></a>IFS 设置</h3><p>　Shell 脚本中 IFS 变量全称 <strong>I</strong>nternal <strong>F</strong>ield <strong>S</strong>eprator，内部域分隔符</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$IFS</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"<span class="variable">$IFS</span>"</span> | od -b</span><br><span class="line">  0000000 040 011 012 012</span><br><span class="line">  0000004</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历多行文本之前，设置 IFS 为 \n</span></span><br><span class="line">pids=`ps -ef | grep <span class="string">"<span class="variable">${PROCESS_NAME}</span>"</span> | grep -v grep | grep -v <span class="string">"<span class="variable">${SELF_NAME}</span>"</span> | awk <span class="string">'{print $2}'</span>`</span><br><span class="line">IFS=$<span class="string">'\n'</span> <span class="built_in">read</span> -rd <span class="string">''</span> -a pids &lt;&lt;&lt;<span class="string">"<span class="variable">$pids</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pids: <span class="variable">${pids}</span>"</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> <span class="string">"<span class="variable">${pids}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"kill -9 <span class="variable">${pid}</span>"</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="string">"<span class="variable">${pid}</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="每秒执行一次"><a href="#每秒执行一次" class="headerlink" title="每秒执行一次"></a>每秒执行一次</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sleep 1; &lt;<span class="built_in">command</span>&gt;; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 以 OpenTSDB 为例</span></span><br><span class="line">$ vim keep_alive.sh</span><br><span class="line">  <span class="comment">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">      process_num=`ps -ef | grep -v grep | grep opentsdb | wc -l`</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">${process_num}</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="variable">${process_num}</span> -gt 0 ]]; <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"health"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opentsdb</span><br><span class="line">          nohup ./build/tsdb tsd &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      sleep 10;</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ nohup sh keep_alive.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="获得当前机器的资源使用情况"><a href="#获得当前机器的资源使用情况" class="headerlink" title="获得当前机器的资源使用情况"></a>获得当前机器的资源使用情况</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">idle_cpu_percent=`top -b -n 1 | grep Cpu | awk <span class="string">'{print $5}'</span> | cut -f 1 -d <span class="string">"."</span>`</span><br><span class="line">used_cpu_percent=$(<span class="built_in">echo</span> <span class="string">"100-<span class="variable">${idle_cpu_percent}</span>"</span> | bc)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">free_m=`free -m`</span><br><span class="line">free_m_detail=`<span class="built_in">echo</span> <span class="variable">${free_m}</span> | sed <span class="string">'s/.*Mem://g'</span> | sed <span class="string">'s/-\/+.*//g'</span>`</span><br><span class="line">total_mem=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">${free_m_detail}</span>"</span> | awk <span class="string">'{print $1}'</span>)</span><br><span class="line">used_mem=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">${free_m_detail}</span>"</span> | awk <span class="string">'{print $2}'</span>)</span><br><span class="line">used_mem_percent=$[<span class="variable">${used_mem}</span> * 100 / <span class="variable">${total_mem}</span>]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h4><h5 id="空间使用率"><a href="#空间使用率" class="headerlink" title="空间使用率"></a>空间使用率</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">used_disk_percent=`df -P | grep <span class="string">"home"</span> | awk <span class="string">'{print $5}'</span>`</span><br></pre></td></tr></tbody></table></figure>
<h5 id="I-O-使用率"><a href="#I-O-使用率" class="headerlink" title="I/O 使用率"></a>I/O 使用率</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">virtual_device=`df -h | grep <span class="string">"home"</span> | awk <span class="string">'{print $1}'</span> | cut -f 4 -d <span class="string">'/'</span>`</span><br><span class="line">device=`ls -trl /dev/mapper/ | grep <span class="variable">${virtual_device}</span> | sed <span class="string">'s/.*\///g'</span>`</span><br><span class="line">device_io=`iostat -x 1 1 | grep <span class="variable">${device}</span> | awk <span class="string">'{print $12}'</span>`</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h4><h5 id="获得当前机器的-IP"><a href="#获得当前机器的-IP" class="headerlink" title="获得当前机器的 IP"></a>获得当前机器的 IP</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">now_ip=`ifconfig | grep <span class="string">"inet addr"</span> | grep -v <span class="string">"127.0.0.1"</span> | awk <span class="string">'{print $2}'</span> | sed <span class="string">'s/.*://g'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">${now_ip}</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">    now_ip=`hostname -i | awk <span class="string">'{print $1}'</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="从机器列表中获取目标-IP"><a href="#从机器列表中获取目标-IP" class="headerlink" title="从机器列表中获取目标 IP"></a>从机器列表中获取目标 IP</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里以 ZooKeeper 为例</span></span><br><span class="line">aim_ip=`cat <span class="variable">${zk_home}</span>/conf/zoo.cfg | grep server | sed <span class="string">'s/.*=//g'</span> | cut -d <span class="string">':'</span> -f 1 | grep -v <span class="variable">${now_ip}</span> | tail -1`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">${aim_ip}</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">    aim_ip=<span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="网络延迟和丢包率"><a href="#网络延迟和丢包率" class="headerlink" title="网络延迟和丢包率"></a>网络延迟和丢包率</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ping_result=`ping -c 4 <span class="variable">${aim_ip}</span> -W 5`</span><br><span class="line">ping_packet_loss=`<span class="built_in">echo</span> <span class="variable">${ping_result}</span> | sed <span class="string">'s/.*received, //g'</span> | sed <span class="string">'s/ packet loss.*//g'</span>`</span><br><span class="line">ping_avg_ms=`<span class="built_in">echo</span> <span class="variable">${ping_result}</span> | sed <span class="string">'s/.*rtt //g'</span> | awk <span class="string">'{print $3}'</span> | cut -d <span class="string">'/'</span> -f 2`</span><br></pre></td></tr></tbody></table></figure>
<h4 id="通用工具"><a href="#通用工具" class="headerlink" title="通用工具"></a>通用工具</h4><h5 id="tsar"><a href="#tsar" class="headerlink" title="tsar"></a><a href="https://github.com/alibaba/tsar">tsar</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ wget -O tsar.zip https://github.com/alibaba/tsar/archive/master.zip --no-check-certificate</span><br><span class="line">$ unzip tsar.zip</span><br><span class="line">$ <span class="built_in">cd</span> tsar-master/</span><br><span class="line">$ yum install gcc -y</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="comment"># 指标含义</span></span><br><span class="line"><span class="comment"># cpu - util:        CPU 总使用的时间百分比</span></span><br><span class="line"><span class="comment"># mem - util:        内存使用率</span></span><br><span class="line"><span class="comment"># tcp - retran:      系统的重传率</span></span><br><span class="line"><span class="comment"># traffic - bytin:   入口流量 Byte/s</span></span><br><span class="line"><span class="comment"># traffic - bytout:  出口流量 Byte/s</span></span><br><span class="line"><span class="comment"># vda - util:        虚拟磁盘 vda 的 I/O</span></span><br><span class="line"><span class="comment"># vda1 - util:       虚拟磁盘 vda1 的 I/O</span></span><br><span class="line"><span class="comment"># load - load1:      一分钟的系统平均负载</span></span><br><span class="line">$ tsar -l -i 1</span><br><span class="line">  Time              ---cpu-- ---mem-- ---tcp-- -----traffic---- --vda--- --vda1--  ---load-</span><br><span class="line">  Time                util     util   retran    bytin  bytout     util     util     load1</span><br><span class="line">  09/04/19-19:59:44   0.00     0.71     0.00   126.00  222.00     0.00     0.00      0.16</span><br><span class="line">  09/04/19-19:59:45   0.02     0.71     0.00    66.00  338.00     0.00     0.00      0.16</span><br><span class="line">  09/04/19-19:59:46   0.00     0.71     0.00    66.00  242.00     0.00     0.00      0.16</span><br></pre></td></tr></tbody></table></figure>
<h3 id="从-JVM-进程中，找到占用-CPU-最高的-Java-线程"><a href="#从-JVM-进程中，找到占用-CPU-最高的-Java-线程" class="headerlink" title="从 JVM 进程中，找到占用 CPU 最高的 Java 线程"></a>从 JVM 进程中，找到占用 CPU 最高的 Java 线程</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用命令 top -p &lt;pid&gt;，显示 Java 进程的内存情况</span></span><br><span class="line">$ top -p 15108</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按大写的 H，获取每个线程的内存情况</span></span><br><span class="line"><span class="comment"># 找到内存和 CPU 占用最高的线程 pid</span></span><br><span class="line">PID   USER      PR  NI  VIRT   RES   SHR   S  %CPU   %MEM  TIME+    COMMAND</span><br><span class="line">15133 druid     20   0  24.9g  1.1g  7776  S  244.9  0.9   0:07.36  java</span><br><span class="line">15108 druid     20   0  24.9g  1.1g  7776  S  0.0    0.9   0:00.57  java</span><br><span class="line">15114 druid     20   0  24.9g  1.1g  7776  S  0.0    0.9   0:08.96  java</span><br><span class="line">15115 druid     20   0  24.9g  1.1g  7776  S  0.0    0.9   0:07.26  java</span><br><span class="line">15116 druid     20   0  24.9g  1.1g  7776  S  0.0    0.9   0:07.25  java</span><br><span class="line">15117 druid     20   0  24.9g  1.1g  7776  S  0.0    0.9   0:07.19  java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得线程 pid 的十六进制</span></span><br><span class="line">$ <span class="built_in">printf</span> 0x%x 15133</span><br><span class="line">  0x3b1d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从线程堆栈信息中找到 3b1d 这个线程，并展示所在行的后面 10 行</span></span><br><span class="line">$ jstack 15108 | grep -A 10 3b1d</span><br><span class="line">  <span class="string">"qtp2028042905-211-acceptor-3@41374390-ServerConnector@2faa55bb{HTTP/1.1}{0.0.0.0:8090}"</span> <span class="comment">#211 daemon prio=4 os_prio=0 tid=0x00007f789bc47800 nid=0x3b1d runnable [0x00007f74e29ec000]</span></span><br><span class="line">     java.lang.Thread.State: RUNNABLE</span><br><span class="line">          at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method)</span><br><span class="line">          at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422)</span><br><span class="line">          at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250)</span><br><span class="line">          - locked &lt;0x00000007122b1fa0&gt; (a java.lang.Object)</span><br><span class="line">          at org.eclipse.jetty.server.ServerConnector.accept(ServerConnector.java:377)</span><br><span class="line">          at org.eclipse.jetty.server.AbstractConnector<span class="variable">$Acceptor</span>.run(AbstractConnector.java:500)</span><br><span class="line">          at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:620)</span><br><span class="line">          at org.eclipse.jetty.util.thread.QueuedThreadPool<span class="variable">$3</span>.run(QueuedThreadPool.java:540)</span><br><span class="line">          at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"><span class="comment"># 查看对应的堆栈信息，找出可能存在问题的代码</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Windows-相关"><a href="#Windows-相关" class="headerlink" title="Windows 相关"></a>Windows 相关</h3><h4 id="Windows-下执行-shell-脚本"><a href="#Windows-下执行-shell-脚本" class="headerlink" title="Windows 下执行 shell 脚本"></a>Windows 下执行 shell 脚本</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 git</span></span><br><span class="line">$ doskey bash=<span class="string">"%GIT_HOME%\bin\bash.exe"</span> $*</span><br><span class="line">$ doskey sh=<span class="string">"%GIT_HOME%\bin\sh.exe"</span> $*</span><br><span class="line">$ bash shell.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似的可以设置 `np` 为 `notepad++` 的快捷启动命令</span></span><br><span class="line">$ doskey np=D:\apps\Notepad++\notepad++.exe $*</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Cmd-设置-Proxy"><a href="#Cmd-设置-Proxy" class="headerlink" title="Cmd 设置 Proxy"></a>Cmd 设置 Proxy</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">set</span> http_proxy=http://your_proxy:your_port</span><br><span class="line">$ <span class="built_in">set</span> http_proxy=http://username:password@your_proxy:your_port</span><br><span class="line">$ <span class="built_in">set</span> https_proxy=https://your_proxy:your_port</span><br><span class="line">$ <span class="built_in">set</span> https_proxy=https://username:password@your_proxy:your_port</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>　在<a href="https://cygwin.com/">官网</a>找到 <a href="https://cygwin.com/setup-x86_64.exe">setup-x86_64.exe</a> 安装包，下载并执行（安装的过程中，如果提示有冲突，选择 <code>contiune</code> 而不能是 <code>retry</code>，否则，将会全部重新开始）</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到想要的盘符下</span></span><br><span class="line">$ <span class="built_in">cd</span> /cygdrive/e</span><br><span class="line">$ <span class="built_in">cd</span> e:/</span><br></pre></td></tr></tbody></table></figure>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><h5 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ service iptable status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">$ servcie iptables stop</span><br><span class="line"><span class="comment"># 永久关闭</span></span><br><span class="line">$ chkconfig iptables off</span><br></pre></td></tr></tbody></table></figure>
<h5 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看默认防火墙状态（CentOS 7.0）</span></span><br><span class="line">$ firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看默认防火墙状态（CentOS 7.x）</span></span><br><span class="line">$ systemctl list-unit-files | grep firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 firewall</span></span><br><span class="line">$ systemctl start firewalld.service</span><br><span class="line"><span class="comment"># 重启 firewall</span></span><br><span class="line">$ systemctl restart firewalld.service</span><br><span class="line"><span class="comment"># 停止 firewall</span></span><br><span class="line">$ systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 查看 firewall 状态</span></span><br><span class="line">$ systemctl status firewalld.service</span><br><span class="line"><span class="comment"># 是否 / 开启 / 禁止 firewall 的开机自启</span></span><br><span class="line">$ systemctl is-enabled/<span class="built_in">enable</span>/<span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">$ ufw <span class="built_in">enable</span></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">$ ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 iptables 服务</span></span><br><span class="line">$ apt-get remove iptables</span><br></pre></td></tr></tbody></table></figure>
<h2 id="优化实战"><a href="#优化实战" class="headerlink" title="优化实战"></a>优化实战</h2><h3 id="关闭-Swappiness"><a href="#关闭-Swappiness" class="headerlink" title="关闭 Swappiness"></a>关闭 Swappiness</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat /proc/sys/vm/swappiness</span><br><span class="line">  <span class="comment"># default: 60</span></span><br><span class="line">  <span class="comment"># memory first: 0</span></span><br><span class="line">  <span class="comment"># swap first: 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使得 swappiness 设置永久生效</span></span><br><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line">  vm.swappiness=10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以配合 JVM 中的 `-XX:+AlwaysPreTouch` 参数，在进程启动的时候，让 jvm 通过 demand-zeroed 方式将内存一次分配到位，提高 daemon 常驻进程性能</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="控制-Overcommit"><a href="#控制-Overcommit" class="headerlink" title="控制 Overcommit"></a>控制 Overcommit</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat /proc/sys/vm/overcommit_memory</span><br><span class="line">  <span class="comment"># 0: 表示内核将检查是否有足够的可用内存供应用进程使用</span></span><br><span class="line">  <span class="comment">#    如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程</span></span><br><span class="line">  <span class="comment"># 1: 表示内核允许分配所有的物理内存，而不管当前的内存状态如何</span></span><br><span class="line">  <span class="comment"># 2: 表示内核允许分配超过所有物理内存和交换空间总和的内存</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="禁用透明巨页"><a href="#禁用透明巨页" class="headerlink" title="禁用透明巨页"></a>禁用透明巨页</h3><h4 id="Page-Size"><a href="#Page-Size" class="headerlink" title="Page Size"></a>Page Size</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ getconf PAGE_SIZE</span><br><span class="line">  4096</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Huge-Page-Size"><a href="#Huge-Page-Size" class="headerlink" title="Huge Page Size"></a>Huge Page Size</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat /proc/meminfo | grep Hugepagesize</span><br><span class="line">  Hugepagesize:       2048 kB</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Transparent-Huge-Pages"><a href="#Transparent-Huge-Pages" class="headerlink" title="Transparent Huge Pages"></a>Transparent Huge Pages</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">  [always] madvise never</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">$ <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redhat 的相关目录: /sys/kernel/mm/redhat_transparent_hugepage/</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="清理-Cache"><a href="#清理-Cache" class="headerlink" title="清理 Cache"></a>清理 Cache</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ free -g &amp;&amp; sync &amp;&amp; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches &amp;&amp; free -g</span><br><span class="line">  <span class="comment"># before</span></span><br><span class="line">                 total       used       free     shared    buffers     cached</span><br><span class="line">    Mem:          3833       3726        106          0        107        272</span><br><span class="line">    -/+ buffers/cache:       3346        486</span><br><span class="line">    Swap:        10239          0      10239</span><br><span class="line">  <span class="comment"># after</span></span><br><span class="line">                 total       used       free     shared    buffers     cached</span><br><span class="line">    Mem:          3833       3345        487          0          1         31</span><br><span class="line">    -/+ buffers/cache:       3312        520</span><br><span class="line">    Swap:        10239          0      10239</span><br><span class="line"></span><br><span class="line"><span class="comment"># To free pagecache:</span></span><br><span class="line">$ <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment"># To free dentries and inodes:</span></span><br><span class="line">$ <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment"># To free pagecache, dentries and inodes:</span></span><br><span class="line">$ <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行完清空 Cache 的命令之后，需要重新设置为 0，否则 Cache 机制就相当于被 disable 了</span></span><br><span class="line">$ <span class="built_in">echo</span> 0 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></tbody></table></figure>
<h3 id="增大预留空闲内存"><a href="#增大预留空闲内存" class="headerlink" title="增大预留空闲内存"></a>增大预留空闲内存</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 系统默认预留内存空间，只有 88 MB</span></span><br><span class="line">$ cat /proc/sys/vm/min_free_kbytes</span><br><span class="line">  90112</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了系统稳定性，可以增加到 1 GB</span></span><br><span class="line">$ vim /proc/sys/vm/min_free_kbytes</span><br><span class="line">  1048576</span><br></pre></td></tr></tbody></table></figure>
<h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><h3 id="Cache-amp-Buffer"><a href="#Cache-amp-Buffer" class="headerlink" title="Cache &amp; Buffer"></a>Cache &amp; Buffer</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>　在 Linux 的内存管理中，<strong>Cache</strong>（Page Cache）属于 页面缓存，<strong>Buffer</strong>（Buffer Cache）则属于 缓冲区缓存。前者，针对 页（Page）内存进行管理，后者，则针对 块（Block）内存进行管理</p>
<h4 id="分析-Cache"><a href="#分析-Cache" class="headerlink" title="分析 Cache"></a>分析 Cache</h4><h5 id="fincore"><a href="#fincore" class="headerlink" title="fincore"></a><a href="https://github.com/david415/linux-ftools">fincore</a></h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装两个 perl 依赖包（大小仅 336 KB）</span></span><br><span class="line">$ yum install perl-Inline perl-Parse-RecDescent -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载编译 fincore</span></span><br><span class="line">$ wget https://github.com/david415/linux-ftools/archive/master.zip</span><br><span class="line">$ unzip linux-ftools-master.zip</span><br><span class="line">$ <span class="built_in">cd</span> linux-ftools-master</span><br><span class="line">$ chmod 777 configure</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/ &amp;&amp; make -j2 &amp;&amp; make -j2 install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果报错 WARNING: `automake-1.10` is missing on your system.</span></span><br><span class="line">$ ln -sf /usr/bin/aclocal /usr/bin/aclocal-1.10</span><br><span class="line">$ ln -sf /usr/bin/automake /usr/bin/automake-1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要在线上环境，进行离线安装</span></span><br><span class="line">$ mkdir -p /tmp/fincore</span><br><span class="line">$ yum reinstall --downloadonly --downloaddir=/tmp/fincore perl-Inline perl-Parse-RecDescent -y</span><br><span class="line">$ ll /tmp/fincore</span><br><span class="line">  -rw-r--r-- 1 root root 151484 Jul 22  2010 perl-Inline-0.46-1.el6.noarch.rpm</span><br><span class="line">  -rw-r--r-- 1 root root 193348 Sep 25  2011 perl-Parse-RecDescent-1.965-1.el6.noarch.rpm</span><br></pre></td></tr></tbody></table></figure>
<h6 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span> -v fincore &gt;/dev/null 2&gt;&amp;1 || {</span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 <span class="string">"I require fincore but it's not installed. Try install..."</span> ; <span class="built_in">exit</span> 1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">pids_tmp=/tmp/cache.pids</span><br><span class="line">cache_tmp=/tmp/cache.files</span><br><span class="line">fincore_tmp=/tmp/cache.fincore</span><br><span class="line">result_tmp=/tmp/result.fincore</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The top 3 cache pid:"</span></span><br><span class="line">ps -e -o pid,rss | sort -nk2 -r | grep -vw 1 | head -3 | awk <span class="string">'{print $1}'</span> &gt; <span class="variable">${pids_tmp}</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"`cat <span class="variable">${pids_tmp}</span>`\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> `cat <span class="variable">${pids_tmp}</span>`; <span class="keyword">do</span></span><br><span class="line">    ps -ef | grep <span class="variable">${pid}</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">${cache_tmp}</span> ]; <span class="keyword">then</span></span><br><span class="line">    rm -f <span class="variable">${cache_tmp}</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Pid: <span class="variable">${line}</span>, Files:"</span></span><br><span class="line">    file=`lsof -p <span class="variable">${line}</span> 2&gt;/dev/null | awk <span class="string">'{print $9}'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">${file}</span>"</span> &gt;&gt; <span class="variable">${cache_tmp}</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">${file}</span>\n"</span> | grep -vw <span class="string">"NAME"</span></span><br><span class="line"><span class="keyword">done</span>&lt;<span class="variable">${pids_tmp}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">${fincore_tmp}</span> ]; <span class="keyword">then</span></span><br><span class="line">    rm -f <span class="variable">${fincore_tmp}</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat <span class="variable">${cache_tmp}</span>`; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">${i}</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">${i}</span> &gt;&gt; <span class="variable">${fincore_tmp}</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">fincore --pages=<span class="literal">false</span> `cat <span class="variable">${fincore_tmp}</span> | grep -v /usr/sbin/sshd | grep -v /lib64/ld-2.12.so | grep -v /bin/bash | grep -v /bin/login` &gt; <span class="variable">${result_tmp}</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"filename size	total pages	cached pages    cached size	cached percentage"</span></span><br><span class="line"></span><br><span class="line">len=`cat <span class="variable">${result_tmp}</span> | wc -l`</span><br><span class="line">cat <span class="variable">${result_tmp}</span> | tail -$(<span class="built_in">echo</span> <span class="string">"<span class="variable">${len}</span>-1"</span> | bc) | sort -nk4 -r</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/src/main/resources/shell/max_cache.sh">here</a>.</p>
<h5 id="System-Tap"><a href="#System-Tap" class="headerlink" title="System Tap"></a>System Tap</h5><p>　依赖包太多，线上环境不适合</p>
<h5 id="pcstat"><a href="#pcstat" class="headerlink" title="pcstat"></a><a href="https://github.com/tobert/pcstat">pcstat</a></h5><p>　卡在了安装的第一步 <code>go get golang.org/x/sys/unix</code> …</p>
<h4 id="回收-Cache"><a href="#回收-Cache" class="headerlink" title="回收 Cache"></a>回收 Cache</h4><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>　具体操作，请看上文 “优化实战 - <a href="https://yuzhouwan.com/posts/15691/#清理-Cache">清理 Cache</a>” 部分</p>
<h5 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h5><p>　清理 Cache 之前，需要保证 Cache 中的数据，和对应文件中的数据一致，才能对 Cache 进行释放。因此，清除 Cache 之前，内核会检查 Cache 数据与对应磁盘文件数据一致性，并将不一致的 Cache 写回磁盘。这一过程，将消耗大量的磁盘 I/O 资源</p>
<h5 id="无法被回收的情况"><a href="#无法被回收的情况" class="headerlink" title="无法被回收的情况"></a>无法被回收的情况</h5><h6 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a><a href="http://www.tmtpost.com/43815.html">tmpfs</a></h6><p>　Linux 提供一种 “临时”文件系统（重启之后数据不会被保存），拿出一部分的内存空间当做文件系统使用，可以动态调整文件系统的大小，并且相比磁盘文件系统的读写速度，会快上很多倍。在 <strong>tmpfs</strong> 系统里面的内存，是不会被回收的，除非 tmpfs 里面的文件被删除</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 操作系统默认就创建了一个 `/dev/shm` 的 tmpfs 目录，可以用来做缓存，进行提速（Automatic Memory Management、Web 缓存等）</span></span><br><span class="line">$ ll -h /dev/shm</span><br><span class="line">  total 76K</span><br><span class="line">  -rw-r--r-- 1 root root  46 Aug 13 11:05 10694</span><br><span class="line">  -r-------- 1 root root 65M May 25 14:43 pulse-shm-17791060</span><br><span class="line">  -r-------- 1 root root 65M May 25 14:43 pulse-shm-31652098</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，也可以创建自己的 tmpfs</span></span><br><span class="line">$ mkdir /tmp/tmpfs</span><br><span class="line">$ mount -t tmpfs -o size=3G none /tmp/tmpfs/</span><br><span class="line">$ df -h</span><br><span class="line">  Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">  tmpfs            63G     0   63G   0% /dev/shm</span><br><span class="line">  none            3.0G     0  3.0G   0% /tmp/tmpfs</span><br><span class="line"></span><br><span class="line">$ free -g</span><br><span class="line">               total       used       free     shared    buffers     cached</span><br><span class="line">  Mem:           125         79         46          0          0          0</span><br><span class="line">  -/+ buffers/cache:         79         46</span><br><span class="line">  Swap:            0          0          0</span><br><span class="line"></span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=/tmp/tmpfs/yuzhouwan bs=1G</span><br><span class="line">  dd: writing <span class="string">'/tmp/tmpfs/yuzhouwan'</span>: No space left on device</span><br><span class="line">  4+0 records <span class="keyword">in</span></span><br><span class="line">  3+0 records out</span><br><span class="line">  3221225472 bytes (3.2 GB) copied, 2.57476 s, 1.3 GB/s</span><br><span class="line"></span><br><span class="line">$ free -g</span><br><span class="line">               total       used       free     shared    buffers     cached</span><br><span class="line">  Mem:           125         83         42          0          0          3</span><br><span class="line">  -/+ buffers/cache:         80         45</span><br><span class="line">  Swap:            0          0          0</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">$ free -g</span><br><span class="line">               total       used       free     shared    buffers     cached</span><br><span class="line">  Mem:           125         84         41          0          0          3</span><br><span class="line">  -/+ buffers/cache:         80         44</span><br><span class="line">  Swap:            0          0          0</span><br><span class="line"></span><br><span class="line">$ rm /tmp/tmpfs/yuzhouwan</span><br><span class="line">$ free -g</span><br><span class="line">               total       used       free     shared    buffers     cached</span><br><span class="line">  Mem:           125         86         39          0          0          0</span><br><span class="line">  -/+ buffers/cache:         85         40</span><br><span class="line">  Swap:            0          0          0</span><br></pre></td></tr></tbody></table></figure>
<h6 id="ipcs"><a href="#ipcs" class="headerlink" title="ipcs"></a>ipcs</h6><p>　进程间通信（IPC）方式，只需要在 “输入文件” 到 “共享内存区” 之间进行两次数据的拷贝。但是，如果通过 <code>shmget</code> 创建完共享内存之后，没有在结束的时候，使用 <code>shmctl</code> 删除共享内存，那么，这块内存将一直无法被清理出去</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过以下两个命令，查看共享内存空间，并删除</span></span><br><span class="line">$ ipcs -m</span><br><span class="line">$ ipcrm -m &lt;shmid&gt;</span><br></pre></td></tr></tbody></table></figure>
<h6 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h6><p>　进程之间还可以通过 <code>mmap</code> 方法，映射同一个普通文件，来实现共享内存。普通文件被映射到进程地址空间后，进程可以像访问普通内存一样对文件进行访问，不必再调用 <code>read</code> / <code>write</code> 方法。同样地，如果没有在进程退出时，使用 <code>munmap</code> 方法解除映射关系，也会存在共享内存无法被清除的情况</p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="http://fifilyu.github.io/halcpgb/">高可用负载均衡集群实践</a></li>
</ul>
<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul>
<li><a href="https://www.memtest86.com/">MemTest86</a></li>
<li><a href="http://pyropus.ca/software/memtester/">MemTester 4</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 高级玩法</title>
    <url>/posts/2254/</url>
    <content><![CDATA[<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="Maven-提速"><a href="#Maven-提速" class="headerlink" title="Maven 提速"></a>Maven 提速</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用 4 个线程构建，以及根据 CPU 核数每个核分配 1 个线程进行构建</span></span><br><span class="line">$ mvn -T 4 clean install</span><br><span class="line">$ mvn -T 1C clean install</span><br></pre></td></tr></tbody></table></figure>
<h4 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-DskipTests               <span class="comment"># 不执行测试用例，但编译测试用例类生成相应的 class 文件至 target/test-classes 下</span></span><br><span class="line">-Dmaven.test.skip=<span class="literal">true</span>    <span class="comment"># 不执行测试用例，也不编译测试用例类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合上文的`并行执行`</span></span><br><span class="line">$ mvn -T 1C clean install -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果还是阻塞: 资源管理器 - shutdown all java app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 jar 包过大，可以下载按照路径放在 repository 中，之后可能还需要 mvn clean 来下载 groovy-all-2.3.11.pom 文件 (mvnrepository.com)</span></span><br><span class="line">D:\apps\maven\repository\org\codehaus\groovy\groovy-all\2.3.11\groovy-all-2.3.11.jar</span><br></pre></td></tr></tbody></table></figure>
<h4 id="编译失败后，接着编译"><a href="#编译失败后，接着编译" class="headerlink" title="编译失败后，接着编译"></a>编译失败后，接着编译</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是 Apache Eagle 之类带有几十个子项目的工程，如果从头编译所有的模块，会很耗功夫</span></span><br><span class="line"><span class="comment"># 通过指定之前失败的模块名，可以继续之前的编译</span></span><br><span class="line">$ mvn -rf :moduleName clean install</span><br></pre></td></tr></tbody></table></figure>
<h4 id="跳过失败的模块，编译到最后再报错"><a href="#跳过失败的模块，编译到最后再报错" class="headerlink" title="跳过失败的模块，编译到最后再报错"></a>跳过失败的模块，编译到最后再报错</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean install --fail-at-end</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用-Aliyun-国内镜像"><a href="#使用-Aliyun-国内镜像" class="headerlink" title="使用 Aliyun 国内镜像"></a>使用 Aliyun 国内镜像</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="指定-Repository-目录"><a href="#指定-Repository-目录" class="headerlink" title="指定 Repository 目录"></a>指定 Repository 目录</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default: ~/.m2/repository  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\apps\maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="如何使用-Maven-编译指定-module"><a href="#如何使用-Maven-编译指定-module" class="headerlink" title="如何使用 Maven 编译指定 module"></a>如何使用 Maven 编译指定 module</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn install -pl &lt;module_name&gt; -am</span><br><span class="line"></span><br><span class="line">  -pl, --projects      (Build specified reactor projects instead of all project)</span><br><span class="line">  -am, --also-make     (If project list is specified, also build projects required by the list)</span><br><span class="line">  -amd, --also-make-dependents    (If project list is specified, also build projects that depend on)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="如何使用-Maven-编译跳过-module"><a href="#如何使用-Maven-编译跳过-module" class="headerlink" title="如何使用 Maven 编译跳过 module"></a><a href="https://yuzhouwan.com/posts/200906/#%E7%BC%96%E8%AF%91">如何使用 Maven 编译跳过 module</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn install -pl &lt;!module_name&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Maven-标准目录结构"><a href="#Maven-标准目录结构" class="headerlink" title="Maven 标准目录结构"></a>Maven 标准目录结构</h3><figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line">src/main/java             Application/Library sources</span><br><span class="line">src/main/resources        Application/Library resources</span><br><span class="line">src/main/filters          Resource filter files</span><br><span class="line">src/main/webapp           Web application sources</span><br><span class="line">src/test/java             Test sources</span><br><span class="line">src/test/resources        Test resources</span><br><span class="line">src/test/filters          Test resource filter files</span><br><span class="line">src/it                    Integration Tests (primarily <span class="keyword">for</span> plugins)</span><br><span class="line">src/assembly              Assembly descriptors</span><br><span class="line">src/site                  Site</span><br><span class="line">LICENSE.txt               Project<span class="string">'s license</span></span><br><span class="line"><span class="string">NOTICE.txt                Notices and attributions required by libraries that the project depends on</span></span><br><span class="line"><span class="string">README.txt                Project'</span>s readme</span><br></pre></td></tr></tbody></table></figure>
<h3 id="如何在-Maven-中使用多个-source"><a href="#如何在-Maven-中使用多个-source" class="headerlink" title="如何在 Maven 中使用多个 source"></a>如何在 Maven 中使用多个 source</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Using-Scala-UnitTest-by-Maven"><a href="#Using-Scala-UnitTest-by-Maven" class="headerlink" title="Using Scala UnitTest by Maven"></a>Using Scala UnitTest by Maven</h3><h4 id="安装-Scala"><a href="#安装-Scala" class="headerlink" title="安装 Scala"></a>安装 <a href="https://yuzhouwan.com/posts/18651/">Scala</a></h4><h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scalatest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scalatest_2.10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="创建-unittest-需要的-trait"><a href="#创建-unittest-需要的-trait" class="headerlink" title="创建 unittest 需要的 trait"></a>创建 unittest 需要的 trait</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.scalatest._</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitTestStyle</span> <span class="keyword">extends</span> <span class="title">FlatSpec</span></span></span><br><span class="line"><span class="keyword">with</span> <span class="type">Matchers</span> <span class="keyword">with</span> <span class="type">OptionValues</span> <span class="keyword">with</span> <span class="type">Inside</span> <span class="keyword">with</span> <span class="type">Inspectors</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h4><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> spark.streaming.detect.<span class="type">SendNetflow</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendNetflowTest</span> <span class="keyword">extends</span> <span class="title">UnitTestStyle</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="string">"Clean method"</span> should <span class="string">"output a string"</span> in {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">"0,tcp,http,SF,229,9385,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,9,9,0.00,0.00,0.00,0.00,1.00,0.00,0.00,9,90,1.00,0.00,0.11,0.04,0.00,0.00,0.00,0.00,normal."</span></span><br><span class="line">    <span class="type">SendNetflow</span>.clean(s) should be(<span class="string">"0,229,9385,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,9,9,0.00,0.00,0.00,0.00,1.00,0.00,0.00,9,90,1.00,0.00,0.11,0.04,0.00,0.00,0.00,0.00\tnormal."</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  it should <span class="string">"throw Exception if an empty string is inputted"</span> in {</span><br><span class="line">    <span class="keyword">val</span> emptyS = <span class="string">""</span></span><br><span class="line">    a[<span class="type">RuntimeException</span>] should be thrownBy {</span><br><span class="line">    <span class="type">SendNetflow</span>.clean(emptyS)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-bigdata/yuzhouwan-bigdata-spark/src/test/scala/com/yuzhouwan/bigdata/spark/style">here</a>.</p>
<h3 id="Using-slf4j-by-Maven"><a href="#Using-slf4j-by-Maven" class="headerlink" title="Using slf4j by Maven"></a>Using slf4j by Maven</h3><h4 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${logback.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${logback.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="logback-xml-in-resources-directory"><a href="#logback-xml-in-resources-directory" class="headerlink" title="logback.xml in resources directory"></a>logback.xml in resources directory</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- %p:Level %m:Message %c.%M:Package+Method %F:%L:File+Line --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"%d{yyyy-MM-dd HH:mm:ss.SSS} | %p | %m | %c.%M | %F:%L %n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Print in Console --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${pattern}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ALL"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger _log = LoggerFactory.getLogger(ZKEventWatch.class);</span><br><span class="line">_log.info(state);</span><br></pre></td></tr></tbody></table></figure>
<h5 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><h6 id="SLF4J-multi-bindings"><a href="#SLF4J-multi-bindings" class="headerlink" title="SLF4J multi bindings"></a>SLF4J multi bindings</h6><ul>
<li>描述</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/D:/apps/maven/repository/ch/qos/logback/logback-classic/1.1.3/logback-classic-1.1.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/D:/apps/maven/repository/org/slf4j/slf4j-log4j12/1.6.1/slf4j-log4j12-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>解决</li>
</ul>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 Apache Curator 需要 exclusion slf4j-log4j12，否则会出现问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${apache.curator.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/pom.xml">here</a>.</p>
<h3 id="导出依赖-Jar"><a href="#导出依赖-Jar" class="headerlink" title="导出依赖 Jar"></a>导出依赖 Jar</h3><p>　如何利用 Maven 将依赖的 jar 都导入到一个文件夹下<br></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>${project.build.directory}/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean dependency:copy-dependencies</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 yuzhouwan-flume 依赖的 jars 都 导出到一个文件夹</span></span><br><span class="line"><span class="comment"># 用相对路径，不能是 绝对路径，否则 maven 会报错：Unknown lifecycle phase "Java"</span></span><br><span class="line">$ mvn dependency:copy-dependencies -f yuzhouwan-flume/pom.xml -DoutputDirectory=yuzhouwan-flume/target/lib</span><br><span class="line">$ mvn dependency:copy-dependencies -f yuzhouwan-api/yuzhouwan-admin-api/pom.xml -DoutputDirectory=target/lib</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h3><h4 id="根据操作系统自动选择-Profile"><a href="#根据操作系统自动选择-Profile" class="headerlink" title="根据操作系统自动选择 Profile"></a><a href="https://maven.apache.org/enforcer/enforcer-rules/requireOS.html">根据操作系统自动选择 Profile</a></h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>linux<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">family</span>&gt;</span>unix<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">blog</span>&gt;</span>https://yuzhouwan.com/posts/15691/<span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>mac<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">family</span>&gt;</span>mac<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">blog</span>&gt;</span>https://yuzhouwan.com/posts/190101/<span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="指定-Profile"><a href="#指定-Profile" class="headerlink" title="指定 Profile"></a>指定 Profile</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 激活指定的 profile</span></span><br><span class="line">$ mvn clean install -P &lt;profile_A&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不激活指定的 profile</span></span><br><span class="line">$ mvn clean install -P <span class="string">'!&lt;profile_B&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以结合使用</span></span><br><span class="line">$ mvn clean install -P &lt;profile_A&gt; -P <span class="string">'!&lt;profile_B&gt;'</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/pom.xml">here</a>.</p>
<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>　-Dorg.slf4j.simpleLogger.defaultLogLevel=<a href="https://maven.apache.org/maven-logging.html">error</a></p>
<h3 id="Generate-Code-for-Antlr"><a href="#Generate-Code-for-Antlr" class="headerlink" title="Generate Code for Antlr"></a>Generate Code for Antlr</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean install -T 1C -DskipTests=<span class="literal">true</span> -Dorg.slf4j.simpleLogger.defaultLogLevel=error -B</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Maven-Properties"><a href="#Maven-Properties" class="headerlink" title="Maven Properties"></a>Maven Properties</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean install -Dmy.property=propertyValue</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Maven-Check-Style"><a href="#Maven-Check-Style" class="headerlink" title="Maven Check Style"></a>Maven Check Style</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean install -Dcheckstyle.skip</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Maven-Update"><a href="#Maven-Update" class="headerlink" title="Maven Update"></a>Maven Update</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean install -U</span><br><span class="line"><span class="comment"># -U means force update of dependencies.</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h3><h4 id="Pre-download"><a href="#Pre-download" class="headerlink" title="Pre-download"></a>Pre-download</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn dependency:go-offline</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Version-compare"><a href="#Version-compare" class="headerlink" title="Version-compare"></a>Version-compare</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在开发一些 Coprocessor 的时候，需要保证和 HBase 集群的依赖 jar 版本一致，可以使用该方法</span></span><br><span class="line">$ mvn versions:compare-dependencies -DremotePom=org.apache.hbase:hbase:0.98.8-hadoop2 -DreportOutputFile=depDiffs.txt</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Maven-Proxy"><a href="#Maven-Proxy" class="headerlink" title="Maven Proxy"></a>Maven Proxy</h3><h4 id="命令行设置"><a href="#命令行设置" class="headerlink" title="命令行设置"></a>命令行设置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Linux (bash)</span></span><br><span class="line">$ <span class="built_in">export</span> MAVEN_OPTS=<span class="string">"-DsocksProxyHost=10.10.10.10 -DsocksProxyPort=8080"</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">$ <span class="built_in">set</span> MAVEN_OPTS=<span class="string">"-DsocksProxyHost=10.10.10.10 -DsocksProxyPort=8080"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">$ vim $MAVEN_HOME/conf/settings.xml</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;http-proxy&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;10.10.10.10&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;8888&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;*.yuzhouwan.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>socks-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>socks5<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>1080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.yuzhouwan.com<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Avro-插件"><a href="#Avro-插件" class="headerlink" title="Avro 插件"></a>Avro 插件</h3><h4 id="创建-avsc-文件"><a href="#创建-avsc-文件" class="headerlink" title="创建 avsc 文件"></a>创建 avsc 文件</h4><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"namespace"</span>: <span class="string">"com.yuzhouwan.hacker.avro"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"record"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"User"</span>,</span><br><span class="line">  <span class="attr">"fields"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"favorite_number"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: [</span><br><span class="line">        <span class="string">"int"</span>,</span><br><span class="line">        <span class="string">"null"</span></span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"favorite_color"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: [</span><br><span class="line">        <span class="string">"string"</span>,</span><br><span class="line">        <span class="string">"null"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用-avro-tools-工具生成-Avro-类"><a href="#使用-avro-tools-工具生成-Avro-类" class="headerlink" title="使用 avro-tools 工具生成 Avro 类"></a>使用 avro-tools 工具生成 Avro 类</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 avro-tools</span></span><br><span class="line"><span class="comment"># https://mvnrepository.com/artifact/org.apache.avro/avro-tools/1.8.1</span></span><br><span class="line"><span class="comment"># http://archive.apache.org/dist/avro/avro-1.8.1/java/                    (better)</span></span><br><span class="line">$ wget http://archive.apache.org/dist/avro/avro-1.8.1/java/avro-tools-1.8.1.jar -c avro-tools-1.8.1.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 avsc 文件中的 Schema 生成 Avro 类</span></span><br><span class="line">$ java -jar avro-tools-1.8.1.jar compile schema user.avsc .</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用-avro-plugin-插件生成-Avro-类"><a href="#使用-avro-plugin-插件生成-Avro-类" class="headerlink" title="使用 avro-plugin 插件生成 Avro 类"></a>使用 avro-plugin 插件生成 Avro 类</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">apache.avro.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">apache.avro.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- apache avro --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.avro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>avro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${apache.avro.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.avro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>avro-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${apache.avro.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>schema<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>${project.basedir}/src/main/resources/avsc/<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>${project.basedir}/src/main/java/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/avro">here</a>.</p>
<h3 id="Shade-插件解决-Jar-多版本共存"><a href="#Shade-插件解决-Jar-多版本共存" class="headerlink" title="Shade 插件解决 Jar 多版本共存"></a><a href="http://maven.apache.org/plugins/maven-shade-plugin/">Shade</a> 插件解决 Jar 多版本共存</h3><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>　在整合大型项目时，可能都依赖 commons-collections 此类的工具包，但是也可能 commons-collections 的版本却因为不一致，导致冲突。可以通过 Shade 插件的 <code>relocation</code> 方法进行重定向，此时冲突的依赖 package 名，会被重命名，并且依赖该 jar 的程序，都会被自动替换为新的 package 名</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><h5 id="指定-Shade-插件的版本"><a href="#指定-Shade-插件的版本" class="headerlink" title="指定 Shade 插件的版本"></a>指定 Shade 插件的版本</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.shade.plugin.version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">maven.shade.plugin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h5><p>　除了 org.mapdb.* 路径之外的 <code>org.apache.commons.collections</code> 包路径，将被重命名为 <code>com.yuzhouwan.org.apache.commons.collections</code></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${maven.shade.plugin.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shadedArtifactAttached</span>&gt;</span>false<span class="tag">&lt;/<span class="name">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">createSourcesJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">createSourcesJar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.mapdb.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>org.apache.commons.collections<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>com.yuzhouwan.org.apache.commons.collections<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h5><p>　除了 org.glassfish.* 路径之外的 <code>javax.ws</code> 包路径，将被重命名为 <code>shade.javax.ws</code>。同时，<code>org.apache.curator</code> 包路径，将被重命名为 <code>shade.org.apache.curator</code>。另外，将 <code>shadedArtifactAttached</code> 参数指定为 true 之后，可以避免子模块中出现找不到 shade 后的新包路径的问题</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${maven.shade.plugin.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shadedArtifactAttached</span>&gt;</span>true<span class="tag">&lt;/<span class="name">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shadedClassifierName</span>&gt;</span>all<span class="tag">&lt;/<span class="name">shadedClassifierName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">createSourcesJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">createSourcesJar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 因为 org.glassfish 里面存在类似 public static class Builder implements javax.ws.rs.client.Invocation.Builder 全限定名的写法 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 所以只能用 shade 去隐藏 com.sun.jersey --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.glassfish.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>javax.ws<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>shade.javax.ws<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>shade.org.apache.curator<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;relocation&gt;</span></span><br><span class="line"><span class="comment">                        &lt;pattern&gt;org.glassfish&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">                        &lt;shadedPattern&gt;shade.org.glassfish&lt;/shadedPattern&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/relocation&gt;</span></span><br><span class="line"><span class="comment">                    &lt;relocation&gt;</span></span><br><span class="line"><span class="comment">                        &lt;pattern&gt;com.sun.jersey&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">                        &lt;shadedPattern&gt;shade.com.sun.jersey&lt;/shadedPattern&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/relocation&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="Error-creating-shaded-jar-Error-in-ASM-processing-class"><a href="#Error-creating-shaded-jar-Error-in-ASM-processing-class" class="headerlink" title="Error creating shaded jar: Error in ASM processing class"></a>Error creating shaded jar: Error in ASM processing class</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:<span class="number">2.1</span>:shade (<span class="keyword">default</span>) on project base-k2d-flow: Error creating shaded jar: Error in ASM processing <span class="class"><span class="keyword">class</span> <span class="title">com</span>/<span class="title">yuzhouwan</span>/<span class="title">bigdata</span>/<span class="title">k2d</span>/<span class="title">K2DPartitioner</span>.<span class="title">class</span>: 52264 -&gt; [<span class="title">Help</span> 1]</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><p>　升级 <code>maven-shade-plugin</code> 版本到 <code>2.4.x</code></p>
<h5 id="通过-Shade-将问题解决后，部署上线后，依赖冲突复现"><a href="#通过-Shade-将问题解决后，部署上线后，依赖冲突复现" class="headerlink" title="通过 Shade 将问题解决后，部署上线后，依赖冲突复现"></a>通过 Shade 将问题解决后，部署上线后，依赖冲突复现</h5><h6 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h6><p>　因为官方明确指出 <code>java.io.File.listFiles()</code> 方法返回的文件序列顺序，是不做保证的。所以，上线后运行环境发生变化，加载 <code>lib</code> 目录下的 <code>jar 包</code>顺序，可能会发生变化。这时候，就需要利用不同 <code>lib</code> 目录，并修改 classpath 的方式，将 <code>jar 包</code>加载顺序确定下来</p>
<p>　例如，在整合 <a href="https://yuzhouwan.com/posts/5845/">Druid</a> 这类依赖树比较庞大的工程，就遇到了这么一种情况。Druid 中 com.sun.jersey (1.19) 和 Dataflow 中 org.glassfish.jersey (2.25.1) 发生冲突。增加了上述实例二中的 Shade 操作仍然会在线上环境，复现依赖冲突。这时，我们可以通过增加一个 <code>lib_jersey</code> 目录，存放 <code>javax.ws.rs-api-2.1.jar</code>，并修改 classpath 为 <code>lib_jersey/*:lib/*</code>。以此，保证了 <code>lib_jersey</code> 中的依赖得以优先加载，从而解决冲突</p>
<h5 id="报错-Invalid-signature-file-digest-for-Manifest-main-attributes"><a href="#报错-Invalid-signature-file-digest-for-Manifest-main-attributes" class="headerlink" title="报错 Invalid signature file digest for Manifest main attributes"></a>报错 Invalid signature file digest for Manifest main attributes</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.SecurityException: Invalid signature file digest <span class="keyword">for</span> Manifest main attributes</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${maven.shade.plugin.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">shadedArtifactAttached</span>&gt;</span>true<span class="tag">&lt;/<span class="name">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">createSourcesJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">createSourcesJar</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>com.google.common<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>com.yuzhouwan.google.common<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.hadoop:hadoop-common<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 加上如下的 filter 过滤，可以忽略有问题的 META-INF 目录 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 之后，也可以通过 zip 命令，将 META-INF 目录下的相关文件，从 jar 包中删除</span></span><br><span class="line">$ zip -d yuzhouwan.jar <span class="string">'META-INF/*.SF'</span> <span class="string">'META-INF/*.DSA'</span> <span class="string">'META-INF/*.RSA'</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">如果是某一个第三方依赖导致的版本冲突，则只需要针对这个第三方依赖进行 shade 操作即可。因此，这里的 artifactSet 使用了 includes，而不是 excludes</div>






<h3 id="Assembly-插件"><a href="#Assembly-插件" class="headerlink" title="Assembly 插件"></a>Assembly 插件</h3><h4 id="重命名-jar-包"><a href="#重命名-jar-包" class="headerlink" title="重命名 jar 包"></a>重命名 jar 包</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>${project.basedir}/../yuzhouwan-common/target/yuzhouwan-common-${project.version}.jar<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destName</span>&gt;</span>ayuzhouwan-common-${project.version}.jar<span class="tag">&lt;/<span class="name">destName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">更名为 a 开头的 jar 包之后，可以确保在 classpath 中能被优先加载起来。如此，项目中对依赖里面类的修改，才会生效</div>



<h4 id="不同模块的依赖，打包到不同的目录下"><a href="#不同模块的依赖，打包到不同的目录下" class="headerlink" title="不同模块的依赖，打包到不同的目录下"></a>不同模块的依赖，打包到不同的目录下</h4><h5 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h5><p>　第一步，先在负责打包分发的 distribution 模块中，设置 pom.xml 文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.assembly.plugin.version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">maven.assembly.plugin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yuzhouwan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yuzhouwan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ai<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yuzhouwan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bigdata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${maven.assembly.plugin.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>assemble<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/assembly/bin.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/assembly/src.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tarLongFileMode</span>&gt;</span>gnu<span class="tag">&lt;/<span class="name">tarLongFileMode</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>　第二步，创建好对应的 bin.xml 和 src.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>dir<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">baseDirectory</span>&gt;</span>yuzhouwan-${project.version}-bin<span class="tag">&lt;/<span class="name">baseDirectory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>../<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/target/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.classpath<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.project<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.settings/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>lib/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>conf/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>README<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>LICENSE<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>NOTICE<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>CHANGELOG<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>RELEASE-NOTES<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>conf/<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>../<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>bin/yuzhouwan-cli.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0777<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directoryMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">directoryMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">moduleSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeSubModules</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeSubModules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useAllReactorProjects</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useAllReactorProjects</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.yuzhouwan:yuzhouwan-core<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:ai<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:bigdata<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">binaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib/core<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useTransitiveDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useTransitiveDependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:ai<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:bigdata<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">binaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">moduleSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeSubModules</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeSubModules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useAllReactorProjects</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useAllReactorProjects</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.yuzhouwan:ai<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:bigdata<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">binaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib/plugins/ai<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useTransitiveDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useTransitiveDependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:bigdata<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">binaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">moduleSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeSubModules</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeSubModules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useAllReactorProjects</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useAllReactorProjects</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.yuzhouwan:bigdata<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:ai<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">binaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib/plugins/bigdata<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useTransitiveDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useTransitiveDependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.yuzhouwan:ai<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">binaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">moduleSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>src<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>dir<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">baseDirectory</span>&gt;</span>yuzhouwan-${project.version}-src<span class="tag">&lt;/<span class="name">baseDirectory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>../<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/target/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.classpath<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.project<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.iml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/.settings/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>lib/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>.ci<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>.gitignore<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>DEVNOTES<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>README<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>LICENSE<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>NOTICE<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>CHANGELOG<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>RELEASE-NOTES<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>bin/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>conf/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>native/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>pom.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>dev-conf/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>yuzhouwan-core/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>yuzhouwan-ai/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>yuzhouwan-bigdata/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>　构建完成之后，即可看到 <code>yuzhouwan-ai</code> 和 <code>yuzhouwan-bigdata</code> 模块的依赖，分别被打包到了 <code>plugins/ai</code> 和 <code>plugins/bigdata</code> 目录下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要预先安装 tree 命令（yum install tree -y）</span></span><br><span class="line">$ tree</span><br><span class="line">  .</span><br><span class="line">  ├── bin</span><br><span class="line">  │&nbsp;&nbsp; └── yuzhouwan-cli.sh</span><br><span class="line">  └── lib</span><br><span class="line">      ├── core</span><br><span class="line">      └── plugins</span><br><span class="line">          ├── ai</span><br><span class="line">          └── bigdata</span><br></pre></td></tr></tbody></table></figure>
<h5 id="踩过的坑-1"><a href="#踩过的坑-1" class="headerlink" title="踩过的坑"></a>踩过的坑</h5><h6 id="模块间存在版本冲突的-jar-包"><a href="#模块间存在版本冲突的-jar-包" class="headerlink" title="模块间存在版本冲突的 jar 包"></a>模块间存在版本冲突的 jar 包</h6><ul>
<li><p>问题描述</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Currently, inclusion of module dependencies may produce unpredictable results <span class="keyword">if</span> a version conflict occurs</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>解决</p>
<p>如果上述 <code>yuzhouwan-ai</code> 和 <code>yuzhouwan-bigdata</code> 模块，与 <code>yuzhouwan-common</code> 模块存在版本冲突的 jar 包，则需要将 <code>bin.xml</code> 拆解成 <code>bin-common.xml</code>、<code>bin-ai.xml</code> 和 <code>bin-bigdata.xml</code> 三个 assembly 配置文件，依次进行构建（此时需要将 id 设置成一样的，不然会被构建到不同的目录下）。否则，版本冲突的 jar 包，将只能保留其中一个版本，且具体保留哪个版本是不确定的</p>
</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="如何使用其他语言编译出来的-Jar"><a href="#如何使用其他语言编译出来的-Jar" class="headerlink" title="如何使用其他语言编译出来的 Jar"></a>如何使用其他语言编译出来的 Jar</h3><h4 id="Clojar"><a href="#Clojar" class="headerlink" title="Clojar"></a>Clojar</h4><p>　如果需要在 Maven 中，添加新的 Repository，这里以 Clojar 为例，配置如下：<br></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>clojars.org<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://clojars.org/repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>　Maven 中出现 Repository 被缓存在本地，则可以进一步添加下面属性，以配置更新策略：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>clojars.org<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://clojars.org/repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="下载问题"><a href="#下载问题" class="headerlink" title="下载问题"></a>下载问题</h3><h4 id="已-download，未-import"><a href="#已-download，未-import" class="headerlink" title="已 download，未 import"></a>已 download，未 import</h4><p>　如果发现 <code>pom.xml</code> 中的 依赖虽然在 <code>.m2</code> 中被下载了，但是没有被 <code>import</code> 到项目中<br>　尝试在 Intellij Idea 的 setting 中 找到 <code>Maven -&gt; Ignored Files</code>，看看对应的 <code>pom.xml</code> 有没有被勾选</p>
<div class="note info">如果仍然无法解决，也有可能是 Intellij Idea 自身的问题，可尝试通过 Just Restart 来解决</div>



<h3 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h3><h4 id="JDK-版本不一致"><a href="#JDK-版本不一致" class="headerlink" title="JDK 版本不一致"></a>JDK 版本不一致</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Error:java: Compilation failed: internal java compiler error</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h5><p>　调整 compiler 的级别，并在 <code>pom.xml</code> 中添加 build 标签，规定 compiler 的级别</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>elastic-netflow-v5<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Scala-版本不一致"><a href="#Scala-版本不一致" class="headerlink" title="Scala 版本不一致"></a>Scala 版本不一致</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[ERROR] error: error <span class="keyword">while</span> loading &lt;root&gt;, Error accessing D:\.m2\repository\org\apache\curator\curator-client\2.4.0\curator-client-2.4.0.jar</span><br><span class="line">[ERROR] error: scala.reflect.internal.MissingRequirementError: object java.lang.Object <span class="keyword">in</span> compiler mirror not found.</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h5><p>　查看 pom 文件中指定的 Scala 版本，切换到对应的版本，进行编译即可</p>
<h4 id="存在没有下载好的依赖"><a href="#存在没有下载好的依赖" class="headerlink" title="存在没有下载好的依赖"></a>存在没有下载好的依赖</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Error creating properties files <span class="keyword">for</span> forking; nested exception is java.io.IOException: No such file or directory</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h5><p>　安装依赖</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn dependency::tree</span><br></pre></td></tr></tbody></table></figure>
<p>　离线 build (offline)<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn install -o</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="本地-mvn-clean-install-到-m2-repository-中的-jar-和-仓库中的不一致时"><a href="#本地-mvn-clean-install-到-m2-repository-中的-jar-和-仓库中的不一致时" class="headerlink" title="本地 mvn clean install 到 .m2/repository 中的 jar 和 仓库中的不一致时"></a>本地 mvn clean install 到 .m2/repository 中的 jar 和 仓库中的不一致时</h4><h5 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"Class not found 'xxxx' Empty test suite"</span> <span class="keyword">in</span> java unittest, after change the modules<span class="string">' names</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Maven           -&gt;        Reimport            -&gt;        Generte Source and Update Folder</span><br><span class="line">Ctrl + F9       -&gt;        Make Project</span><br></pre></td></tr></tbody></table></figure>
<h4 id="打包存在脏程序"><a href="#打包存在脏程序" class="headerlink" title="打包存在脏程序"></a>打包存在脏程序</h4><p>　<code>war:war</code> 之前需要先执行 <code>mvn clean install</code>。否则，会因为 <code>profiles</code> 的缘故，导致 <code>war</code> 包中 缺少文件</p>
<h3 id="语法问题"><a href="#语法问题" class="headerlink" title="语法问题"></a>语法问题</h3><h4 id="Maven-中无法识别-project-version"><a href="#Maven-中无法识别-project-version" class="headerlink" title="Maven 中无法识别 ${project.version}"></a>Maven 中无法识别 ${project.version}</h4><p>　需要将所有（除了 root / parent 模块）的 <code>&lt;version&gt;1.0&lt;/version&gt;</code> 中的具体版本号（如 <code>1.0.0</code>）全部替换成 <code>"${project.version}"</code></p>
<h3 id="插件问题"><a href="#插件问题" class="headerlink" title="插件问题"></a>插件问题</h3><h4 id="xxx-module-must-not-contain-source-root-the-root-already-belongs-to-module-xxx"><a href="#xxx-module-must-not-contain-source-root-the-root-already-belongs-to-module-xxx" class="headerlink" title="xxx module must not contain source root. the root already belongs to module xxx"></a>xxx module must not contain source root. the root already belongs to module xxx</h4><h5 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Artifacts Setting  -&gt;  Modules -&gt; Sourc tab</span><br><span class="line">delete the fold by clicking on the X icon to the right of it</span><br></pre></td></tr></tbody></table></figure>
<h4 id="ExecutionException-The-forked-VM-terminated-without-properly-saying-goodbye"><a href="#ExecutionException-The-forked-VM-terminated-without-properly-saying-goodbye" class="headerlink" title="ExecutionException The forked VM terminated without properly saying goodbye"></a>ExecutionException The forked VM terminated without properly saying goodbye</h4><h5 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:<span class="built_in">test</span> (default-test) on project eagle-app-streamproxy: ExecutionException The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${maven-surefire.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 增加 argLine 参数以调整 JVM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argLine</span>&gt;</span>-Xmx2048m -Xms1024m -XX:MaxPermSize=512m -XX:-UseGCOverheadLimit<span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">forkMode</span>&gt;</span>always<span class="tag">&lt;/<span class="name">forkMode</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>详见：<a href="https://github.com/apache/eagle/pull/897">Eagle-RP-897</a></p>
<h4 id="Fatal-error-compiling-无效的目标发行版-1-8"><a href="#Fatal-error-compiling-无效的目标发行版-1-8" class="headerlink" title="Fatal error compiling: 无效的目标发行版: 1.8"></a>Fatal error compiling: 无效的目标发行版: 1.8</h4><p>　需要在 IDE 的 <code>Project Structure(Ctrl+Alt+Shift+S)</code> 里设置 <code>Project JDK</code> 为 <code>jdk1.8</code>，并在 <code>Settings(Ctrl+Alt+S)</code> 里设置 <code>Java Compiler</code> 的 <code>bytecode version</code> 为 <code>1.8</code></p>
<h4 id="Assembly-插件报错-java-lang-StackOverflowError"><a href="#Assembly-插件报错-java-lang-StackOverflowError" class="headerlink" title="Assembly 插件报错 java.lang.StackOverflowError"></a>Assembly 插件报错 java.lang.StackOverflowError</h4><h5 id="解决-9"><a href="#解决-9" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 调大默认的堆栈大小</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_OPTS=-Xss2m</span><br></pre></td></tr></tbody></table></figure>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-Xms：jvm 进程启动时分配的内存</span><br><span class="line">-Xmx：jvm 进程运行过程中最大能分配到的内存</span><br><span class="line">-Xss：jvm 进程中启动线程，为每个线程分配的内存大小</span><br></pre></td></tr></tbody></table></figure>
<h4 id="protobuf-maven-plugin-找不到-protoc-运行程序"><a href="#protobuf-maven-plugin-找不到-protoc-运行程序" class="headerlink" title="protobuf-maven-plugin 找不到 protoc 运行程序"></a>protobuf-maven-plugin 找不到 protoc 运行程序</h4><h5 id="解决-10"><a href="#解决-10" class="headerlink" title="解决"></a>解决</h5><p>　本地安装 Protobuf 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gcc --version</span><br><span class="line">  Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1</span><br><span class="line">  Apple LLVM version 10.0.1 (clang-1001.0.46.4)</span><br><span class="line">  Target: x86_64-apple-darwin18.7.0</span><br><span class="line">  Thread model: posix</span><br><span class="line">  InstalledDir: /Library/Developer/CommandLineTools/usr/bin</span><br><span class="line"></span><br><span class="line">$ brew install autoconf automake libtool curl</span><br><span class="line">$ wget https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz</span><br><span class="line">$ tar zxvf protobuf-2.5.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> protobuf-2.5.0</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make check</span><br><span class="line">$ make install</span><br><span class="line">$ protoc --version</span><br><span class="line">  libprotoc 2.5.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="如何跳过-gpg-插件"><a href="#如何跳过-gpg-插件" class="headerlink" title="如何跳过 gpg 插件"></a>如何跳过 gpg 插件</h4><p>　增加 <code>&lt;skip&gt;true&lt;/skip&gt;</code> 配置即可</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Permission-denied-of-shell-script"><a href="#Permission-denied-of-shell-script" class="headerlink" title="Permission denied of shell script"></a>Permission denied of shell script</h4><h5 id="解决-11"><a href="#解决-11" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 exec-maven-plugin 中需要用到脚本即可</span></span><br><span class="line">$ chmod +x yuzhouwan.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以通过以下命令，修改已经上传的文件权限</span></span><br><span class="line">$ git update-index --chmod=+x yuzhouwan.sh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="依赖问题"><a href="#依赖问题" class="headerlink" title="依赖问题"></a>依赖问题</h3><h4 id="Maven-中央仓库找不到对应版本的依赖"><a href="#Maven-中央仓库找不到对应版本的依赖" class="headerlink" title="Maven 中央仓库找不到对应版本的依赖"></a>Maven 中央仓库找不到对应版本的依赖</h4><h5 id="如何将其他项目的-jar-安装到-maven-仓库中"><a href="#如何将其他项目的-jar-安装到-maven-仓库中" class="headerlink" title="如何将其他项目的 jar 安装到 maven 仓库中"></a>如何将其他项目的 jar 安装到 maven 仓库中</h5><h6 id="利用命令安装"><a href="#利用命令安装" class="headerlink" title="利用命令安装"></a>利用命令安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn install:install-file -Dfile=&lt;jar 包的位置&gt; -DgroupId=&lt;上面的 groupId&gt; -DartifactId=&lt;上面的 artifactId&gt; -Dversion=&lt;上面的 version&gt; -Dpackaging=jar -DgeneratePom=<span class="literal">true</span> -DpomFile=&lt;指定一个 pom.xml 添加进去&gt;</span><br><span class="line"></span><br><span class="line">$ mvn install:install-file -Dfile=G:\ES\yuzhouwan_netflow-rest\lib\ite-esmanage-0.7.2-SNAPSHOT.jar -DgroupId=ite -DartifactId=esmanage -Dversion=0.7.2-SNAPSHOT -Dpackaging=jar -DgeneratePom=<span class="literal">true</span> -DpomFile=C:\yuzhouwan\Maven\pom.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># -DgeneratePom 没有成功</span></span><br><span class="line"><span class="comment"># 原因是 这个第三方的 jar 中，pom.xml 路径不对，必须手动 copy 出来，并用 -DpomFile 的方式导入</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="利用插件安装"><a href="#利用插件安装" class="headerlink" title="利用插件安装"></a>利用插件安装</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：${project.basedir} 是当前模块的根目录，需要把依赖包，放对位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>install-external<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>clean<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">file</span>&gt;</span>${project.basedir}/lib/flume-hdfs-sink-${flume.version}.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">repositoryLayout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">repositoryLayout</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume.flume-ng-sinks<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-hdfs-sink<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>${flume.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">generatePom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generatePom</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-file<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="控制-Scope-范围"><a href="#控制-Scope-范围" class="headerlink" title="控制 Scope 范围"></a>控制 Scope 范围</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># compile（编译范围）</span></span><br><span class="line">　compile 范围是默认的。编译范围依赖在所有的 classpath 中可用，同时它们也会被打包</span><br><span class="line"></span><br><span class="line"><span class="comment"># provided（已提供范围）</span></span><br><span class="line">　provided 范围只有在当 JDK 或者一个容器已提供该依赖之后才使用。它们不是传递性的，也不会被打包。适用于在实现了公共 common 模块，其中有很多依赖，但是只有在其他依赖了 common 模块的子模块中，重新声明依赖，才会真正被打包到子模块中。这样，既可以保证 common 模块的正常编译，又可以减少子模块中的依赖包大小</span><br><span class="line"></span><br><span class="line"><span class="comment"># runtime（运行时范围）</span></span><br><span class="line">　runtime 范围在运行和测试系统的时候需要，但在编译的时候不需要。例如，在编译的时候，如果只需要 JDBC API Jar，但只有在运行的时候才需要 JDBC 驱动的具体实现</span><br><span class="line"></span><br><span class="line"><span class="comment"># test（测试范围）</span></span><br><span class="line">　<span class="built_in">test</span> 范围在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。常用于 JUnit 的依赖</span><br><span class="line"></span><br><span class="line"><span class="comment"># system（系统范围）</span></span><br><span class="line">　system 范围与 provided 类似，但是必须显式的提供一个对于本地系统中 Jar 文件的路径。这么做是为了允许基于本地对象编译（systemPath），而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它（不推荐使用）</span><br></pre></td></tr></tbody></table></figure>
<h4 id="引入某一个本身依赖树很庞大的-Dependency"><a href="#引入某一个本身依赖树很庞大的-Dependency" class="headerlink" title="引入某一个本身依赖树很庞大的 Dependency"></a>引入某一个本身依赖树很庞大的 Dependency</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖列表</span></span><br><span class="line">$ mvn dependency:list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖树（这里推荐直接用 Intellij Idea 中自带的 "Show Dependencies" 功能，可视化地展示依赖树 和 对应依赖冲突，并能够直接对 依赖树进行修剪）</span></span><br><span class="line">$ mvn dependency:tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖分析</span></span><br><span class="line">$ mvn dependency:analyze</span><br><span class="line">  Unused declared dependencies  表示项目中未使用的，但显示声明的依赖</span><br><span class="line">  Used undeclared dependencies  表示项目中使用到的，但是没有显示声明的依赖</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Detected-both-log4j-over-slf4j-jar-AND-slf4j-log4j12-jar-on-the-class-path-preempting-StackOverflowError"><a href="#Detected-both-log4j-over-slf4j-jar-AND-slf4j-log4j12-jar-on-the-class-path-preempting-StackOverflowError" class="headerlink" title="Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError."></a>Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError.</h4><h5 id="解决-12"><a href="#解决-12" class="headerlink" title="解决"></a>解决</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spark.scala.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">spark.scala.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">apache.kafka.version</span>&gt;</span>0.9.0.1<span class="tag">&lt;/<span class="name">apache.kafka.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_${spark.scala.version}<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${apache.kafka.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Could-not-find-artifact-jdk-tools-jdk-tools-jar-1-7-at-specified-path-Library-Java-JavaVirtualMachines-jdk-12-0-2-jdk-Contents-Home-lib-tools-jar"><a href="#Could-not-find-artifact-jdk-tools-jdk-tools-jar-1-7-at-specified-path-Library-Java-JavaVirtualMachines-jdk-12-0-2-jdk-Contents-Home-lib-tools-jar" class="headerlink" title="Could not find artifact jdk.tools:jdk.tools:jar:1.7 at specified path /Library/Java/JavaVirtualMachines/jdk-12.0.2.jdk/Contents/Home/../lib/tools.jar"></a>Could not find artifact jdk.tools:jdk.tools:jar:1.7 at specified path /Library/Java/JavaVirtualMachines/jdk-12.0.2.jdk/Contents/Home/../lib/tools.jar</h4><h5 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h5><p>　Hive 中存在 jdk.tools 依赖，需要特定的 JDK 版本</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-13"><a href="#解决-13" class="headerlink" title="解决"></a>解决</h5><p>　通过 exclusion 标签将 jdk.tools 去除掉即可。如果仍然需要 jdk.tools 依赖，则可以另外单独增加 jdk.tools 的 dependency，并指定好正确的 JDK 版本</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>Scala</tag>
        <tag>Clojure</tag>
        <tag>Apache Avro</tag>
      </tags>
  </entry>
  <entry>
    <title>Python：从入门到实践</title>
    <url>/posts/43687/</url>
    <content><![CDATA[<h2 id="什么是-Python"><a href="#什么是-Python" class="headerlink" title="什么是 Python?"></a>什么是 Python?</h2><p>　<strong>Python</strong> is a programming language that lets you work <strong>quickly</strong> and integrate systems more <strong>effectively</strong>.</p>
<p><img data-src="/picture/python/python_and_mouse.jpg" alt="Python and Mouse"></p>
<center>（图片来源：<a href="http://www.mac-smith.com/" target="_blank">Mac Smith</a> 的个人作品，已获得授权）</center>



<h2 id="为什么要有-Python"><a href="#为什么要有-Python" class="headerlink" title="为什么要有 Python?"></a>为什么要有 Python?</h2><h3 id="胶水语言"><a href="#胶水语言" class="headerlink" title="胶水语言"></a>胶水语言</h3><p>　胶水语言，能够把用其他语言制作的各种模块（尤其是 <code>C</code>/<code>C++</code>）很轻松地联结在一起</p>
<h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3><p>　ABC 语言的一种继承</p>
<p>　缩短传统的 <code>编写</code> - <code>编译</code> - <code>链接</code> - <code>运行</code>（<code>edit</code>-<code>compile</code>-<code>link</code>-<code>run</code>）过程</p>
<span id="more"></span>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h3><h4 id="Linux-基础环境"><a href="#Linux-基础环境" class="headerlink" title="Linux 基础环境"></a>Linux 基础环境</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo yum install gcc libffi-devel python-devel python-pip python-wheel openssl-devel libsasl2-devel openldap-devel -y</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Python-编译安装"><a href="#Python-编译安装" class="headerlink" title="Python 编译安装"></a>Python 编译安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在 python ftp 服务器中下载到 对应版本的 python</span></span><br><span class="line">$ wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ tar -zxvf Python-3.6.8.tgz</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Python-3.6.8</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python36</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"></span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/python36/ -al</span><br><span class="line">  total 24</span><br><span class="line">  drwxr-xr-x 6 root root 4096 Jan 30 11:10 .</span><br><span class="line">  drwxr-xr-x 1 root root 4096 Jan 30 11:09 ..</span><br><span class="line">  drwxr-xr-x 2 root root 4096 Jan 30 11:10 bin</span><br><span class="line">  drwxr-xr-x 3 root root 4096 Jan 30 11:10 include</span><br><span class="line">  drwxr-xr-x 4 root root 4096 Jan 30 11:10 lib</span><br><span class="line">  drwxr-xr-x 3 root root 4096 Jan 30 11:10 share</span><br></pre></td></tr></tbody></table></figure>
<h4 id="覆盖旧版-Python"><a href="#覆盖旧版-Python" class="headerlink" title="覆盖旧版 Python"></a>覆盖旧版 Python</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 覆盖原来的 python6</span></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">  /usr/bin/python</span><br><span class="line">$ /usr/<span class="built_in">local</span>/python36/bin/python3.6 -V</span><br><span class="line">  Python 3.6.8</span><br><span class="line">$ mv /usr/bin/python /usr/bin/python_old</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python36/bin/python3.6 /usr/bin/python</span><br><span class="line">$ python -V</span><br><span class="line">  Python 3.6.8</span><br></pre></td></tr></tbody></table></figure>
<h4 id="恢复-yum-中旧版-Python-的引用"><a href="#恢复-yum-中旧版-Python-的引用" class="headerlink" title="恢复 yum 中旧版 Python 的引用"></a>恢复 yum 中旧版 Python 的引用</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 yum 引用的 python 版本为旧版 2.6 的 python</span></span><br><span class="line">$ vim /usr/bin/yum</span><br><span class="line">  <span class="comment"># 第一行修改为 python2.6</span></span><br><span class="line">  <span class="comment">#!/usr/bin/python2.6</span></span><br><span class="line"></span><br><span class="line">$ yum --version | sed <span class="string">'2,$d'</span></span><br><span class="line">  3.2.29</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Pip"><a href="#Pip" class="headerlink" title="Pip"></a>Pip</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="在线"><a href="#在线" class="headerlink" title="在线"></a>在线</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip --version</span><br><span class="line">  pip 9.0.1 from /usr/<span class="built_in">local</span>/lib/python2.7/site-packages (python 2.7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># upgrade setup tools and pip</span></span><br><span class="line">$ pip install --upgrade setuptools pip</span><br></pre></td></tr></tbody></table></figure>
<h5 id="离线"><a href="#离线" class="headerlink" title="离线"></a>离线</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https://pypi.org/project/setuptools/#files 下载 setuptools-40.7.1.zip</span></span><br><span class="line">$ unzip setuptools-40.7.1.zip</span><br><span class="line">$ <span class="built_in">cd</span> setuptools-40.7.1</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://pypi.org/project/pip/#files 下载 pip-19.0.1.tar.gz</span></span><br><span class="line">$ tar zxvf pip-19.0.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pip-19.0.1</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line">$ python -m pip -V</span><br><span class="line">  pip 18.1 from /usr/<span class="built_in">local</span>/python36/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/python36/bin</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ pip -V</span><br><span class="line">  pip 19.0.1 from /usr/<span class="built_in">local</span>/python36/lib/python3.6/site-packages/pip-19.0.1-py3.6.egg/pip (python 3.6)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="VirtualEnv"><a href="#VirtualEnv" class="headerlink" title="VirtualEnv"></a>VirtualEnv</h3><p>　这里我们以 Apache Superset 为例，更多相关内容，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/743/">Apache Superset 二次开发</a>》</p>
<h4 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtualenv is shipped in Python 3 as pyvenv</span></span><br><span class="line">$ virtualenv venv</span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate</span><br><span class="line"><span class="comment"># 如果希望 virtualEnv 的隔离环境，能够访问系统全局的 site-packages 目录，可以增加 `--system-site-packages` 参数</span></span><br><span class="line"><span class="comment"># virtualenv -p /usr/local/bin/python --system-site-packages venv</span></span><br><span class="line"><span class="comment"># 另外，如果考虑到便于拷贝，使得 virtualEnv 中依赖的文件，都是复制进来的，而非软链接，则增加 `--always-copy` 参数</span></span><br><span class="line"><span class="comment"># virtualenv -p /usr/local/bin/python --always-copy venv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 【Offline环境】安装 virtualenv</span></span><br><span class="line"><span class="comment"># 在 https://pypi.python.org/pypi/virtualenv#downloads 页面，下载 virtualenv-15.1.0.tar.gz</span></span><br><span class="line">$ tar zxvf virtualenv-15.1.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> virtualenv-15.1.0</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line">$ virtualenv --version</span><br><span class="line">  15.1.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h4><h5 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># rsync 替换 scp 可以确保软链接 也能被 cp</span></span><br><span class="line">$ rsync -avuz -e ssh /home/superset/superset-0.15.4/ yuzhouwan@middle:/home/yuzhouwan/superset-0.15.4</span><br><span class="line"></span><br><span class="line">  //...</span><br><span class="line">  sent 142935894 bytes  received 180102 bytes  3920986.19 bytes/sec</span><br><span class="line">  total size is 359739823  speedup is 2.51</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 本机 和 目标机器 的 Superset 目录下，校验文件数量</span></span><br><span class="line">$ find | wc -l</span><br><span class="line">  10113</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复以上步骤，从跳板机 rsync 到线上机器</span></span><br><span class="line">$ rsync -avuz -e ssh /home/yuzhouwan/superset-0.15.4/ root@192.168.2.10:/home/superset/superset-0.15.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtualenv 创建依赖的 python</span></span><br><span class="line">$ rsync -avuz -e ssh /root/software yuzhouwan@middle:/home/yuzhouwan</span><br><span class="line">$ rsync -avuz -e ssh /home/yuzhouwan/software root@druid-prd01:/root</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/software</span><br><span class="line">$ tar zxvf Python-2.7.12.tgz</span><br><span class="line">$ <span class="built_in">cd</span> Python-2.7.12</span><br><span class="line"></span><br><span class="line">$ ./configure --prefix=/usr --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /      <span class="comment"># nessnary!!</span></span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br></pre></td></tr></tbody></table></figure>
<h5 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然软链接已经 rsync 过来了，但是 目标机器相关目录下，没有对应的 python 的动态链接库</span></span><br><span class="line">$ file /root/superset/lib/python2.7/lib-dynload</span><br><span class="line"></span><br><span class="line">  /root/superset/lib/python2.7/lib-dynload: broken symbolic link to `/usr/<span class="built_in">local</span>/python27/lib/python2.7/lib-dynload`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要和联网环境中，创建 virtualenv 时的 python 全局环境一致</span></span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27 --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line"></span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/python27/lib/python2.7/lib-dynload -sail</span><br></pre></td></tr></tbody></table></figure>
<h4 id="VirtualEnvWrapper"><a href="#VirtualEnvWrapper" class="headerlink" title="VirtualEnvWrapper"></a>VirtualEnvWrapper</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># VirtualEnv Wrapper 是 virtualenv 的扩展工具，可以方便的创建、删除、复制、切换不同的虚拟环境</span></span><br><span class="line">$ pip install virtualenvwrapper</span><br><span class="line">$ mkdir ~/workspaces</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="comment"># 增加</span></span><br><span class="line">  <span class="built_in">export</span> WORKON_HOME=~/virtualenv</span><br><span class="line">  <span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">$ mkvirtualenv --python=/usr/bin/python superset</span><br><span class="line">  Running virtualenv with interpreter /usr/bin/python</span><br><span class="line">  New python executable <span class="keyword">in</span> /root/virtualenv/superset/bin/python</span><br><span class="line">  Installing setuptools, pip, wheel...done.</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/predeactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/postdeactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/preactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/postactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/get_env_details</span><br><span class="line">(superset) [root@superset01 virtualenv]<span class="comment"># deactivate</span></span><br><span class="line"></span><br><span class="line">$ workon superset</span><br><span class="line">(superset) [root@superset01 virtualenv]<span class="comment"># lsvirtualenv -b</span></span><br><span class="line">  superset</span><br></pre></td></tr></tbody></table></figure>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><h5 id="int-类型的最大值"><a href="#int-类型的最大值" class="headerlink" title="int 类型的最大值"></a>int 类型的最大值</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.maxsize</span><br><span class="line">  <span class="number">9223372036854775807</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该值取决于你的操作系统位数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">63</span>) - <span class="number">1</span></span><br><span class="line">  <span class="number">9223372036854775807</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt;&lt; <span class="number">64</span> - <span class="number">1</span></span><br><span class="line">  <span class="number">9223372036854775808</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><h5 id="inf-无穷大"><a href="#inf-无穷大" class="headerlink" title="inf 无穷大"></a><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p07_infinity_and_nan.html">inf</a> 无穷大</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">  inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'Inf'</span>)</span><br><span class="line">  inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'inf'</span>) &gt; <span class="number">0</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'inf'</span>) &lt; <span class="number">0</span></span><br><span class="line">  <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'inf'</span>) &gt; <span class="number">9999999999</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'inf'</span>) &gt; <span class="number">9999999999999999999999</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'-inf'</span>) &lt; -<span class="number">9999999999999999999999</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line"><span class="comment"># inf、Inf、INF 都是可以表示无穷大的（infinity），这里没有大小写的规定</span></span><br><span class="line"><span class="comment"># inf 表示正无穷，而 -inf 表示为负无穷</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'Inf'</span>) == <span class="built_in">float</span>(<span class="string">'inf'</span>) == -<span class="built_in">float</span>(<span class="string">'-inf'</span>) == -<span class="built_in">float</span>(<span class="string">'-Inf'</span>)</span><br><span class="line">  <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="string"><a href="#string" class="headerlink" title="string"></a><a href="https://docs.python.org/3/library/string.html">string</a></h4><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b c'</span>.split(<span class="string">' '</span>)</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b c'</span>.split(<span class="string">' '</span>, <span class="number">1</span>)</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'b c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b c'</span>.split(<span class="string">' '</span>, <span class="number">2</span>)</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="number">1.0</span>)</span><br><span class="line">  <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b"yuzhouwan.com"</span>.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">  <span class="string">u'yuzhouwan.com'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"speed: %skm/h"</span> % <span class="number">16.8</span></span><br><span class="line">  <span class="string">'speed: 16.8km/h'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"(%s, %s)"</span> % (<span class="string">"percent"</span>, <span class="number">99.97</span>)</span><br><span class="line">  <span class="string">'(percent, 99.97)'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="遍历字符"><a href="#遍历字符" class="headerlink" title="遍历字符"></a>遍历字符</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">'yuzhouwan.com'</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> i, c</span><br><span class="line">...</span><br><span class="line">  <span class="number">0</span> y</span><br><span class="line">  <span class="number">1</span> u</span><br><span class="line">  <span class="number">2</span> z</span><br><span class="line">  <span class="number">3</span> h</span><br><span class="line">  <span class="number">4</span> o</span><br><span class="line">  <span class="number">5</span> u</span><br><span class="line">  <span class="number">6</span> w</span><br><span class="line">  <span class="number">7</span> a</span><br><span class="line">  <span class="number">8</span> n</span><br><span class="line">  <span class="number">9</span> .</span><br><span class="line">  <span class="number">10</span> c</span><br><span class="line">  <span class="number">11</span> o</span><br><span class="line">  <span class="number">12</span> m</span><br></pre></td></tr></tbody></table></figure>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><h4 id="不换行"><a href="#不换行" class="headerlink" title="不换行"></a>不换行</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">"[]"</span>, end=<span class="string">""</span>)</span><br><span class="line">[]&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a><a href="https://docs.python.org/3/library/os.html">OS</a></h3><h4 id="操作系统相关"><a href="#操作系统相关" class="headerlink" title="操作系统相关"></a>操作系统相关</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取操作系统特定的路径分割符（Windows: '\\'；Linux/Unix: '/'）</span></span><br><span class="line">os.sep</span><br><span class="line"><span class="comment"># 字符串表示正在使用的平台（Windows: 'nt'；Linux/Unix: 'posix'）</span></span><br><span class="line">os.name</span><br><span class="line"><span class="comment"># 字符串给出当前平台使用的行终止符（Windows: '\r\n'；Linux: '\n'；Mac: '\r'）</span></span><br><span class="line">os.linesep</span><br><span class="line"><span class="comment"># 函数用来运行 shell 命令</span></span><br><span class="line">os.system(shell)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前工作目录</span></span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment"># 获取 / 设置 环境变量</span></span><br><span class="line">os.getenv(key) / os.putenv(key, value)</span><br><span class="line"><span class="comment"># 获得当前进程的 PID</span></span><br><span class="line">os.getpid()</span><br></pre></td></tr></tbody></table></figure>
<h4 id="获取文件-路径信息"><a href="#获取文件-路径信息" class="headerlink" title="获取文件/路径信息"></a>获取文件/路径信息</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 返回指定目录下的所有文件和目录名，v3.5 之后被替换为 scandir</span></span><br><span class="line">os.listdir(path)</span><br><span class="line"><span class="comment"># 函数返回路径 path 的目录名和文件名</span></span><br><span class="line">os.path.split(path)</span><br><span class="line"><span class="comment"># 判断路径是一个文件还是目录</span></span><br><span class="line">os.path.isfile(path) / os.path.isdir(path)</span><br><span class="line"><span class="comment"># 判断路径是否是软链接</span></span><br><span class="line">os.path.islink(path)</span><br><span class="line"><span class="comment"># 判断是否存在文件或目录</span></span><br><span class="line">os.path.exists(path)</span><br><span class="line"><span class="comment"># 获得文件大小，如果 path 是目录返回 0L</span></span><br><span class="line">os.path.getsize(path)</span><br><span class="line"><span class="comment"># 获得绝对路径</span></span><br><span class="line">os.path.abspath(path)</span><br><span class="line"><span class="comment"># 规范 path 字符串形式</span></span><br><span class="line">os.path.normpath(path)</span><br><span class="line"><span class="comment"># 分割文件名与目录</span></span><br><span class="line">os.path.split(path)</span><br><span class="line"><span class="comment"># 分离文件名与扩展名</span></span><br><span class="line">os.path.splitext(path)</span><br><span class="line"><span class="comment"># 连接目录与文件名或目录</span></span><br><span class="line">os.path.join(path, file)</span><br><span class="line"><span class="comment"># 返回文件名</span></span><br><span class="line">os.path.basename(path)</span><br><span class="line"><span class="comment"># 返回文件路径</span></span><br><span class="line">os.path.dirname(path)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="实际操作文件-路径"><a href="#实际操作文件-路径" class="headerlink" title="实际操作文件 / 路径"></a>实际操作文件 / 路径</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 返回但前目录</span></span><br><span class="line">os.curdir</span><br><span class="line"><span class="comment"># 改变工作目录到 path</span></span><br><span class="line">os.chdir(path)</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">os.remove(path)</span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line">os.rmdir(path)</span><br><span class="line"><span class="comment"># 递归删除目录，删除 'foo/bar/baz'，意味着依次删除 'foo/bar/baz' - 'foo/bar' - 'foo'</span></span><br><span class="line">os.removedirs(path)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span>(<span class="params">f = <span class="string">""</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(f):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"File not exists, path is %s!"</span> % f)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(f, <span class="string">"r+"</span>, encoding = <span class="string">"utf8"</span>) <span class="keyword">as</span> of:</span><br><span class="line">        <span class="keyword">return</span> of.readlines()</span><br></pre></td></tr></tbody></table></figure>
<h4 id="执行-shell-命令"><a href="#执行-shell-命令" class="headerlink" title="执行 shell 命令"></a>执行 shell 命令</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; exit_code = os.system(<span class="string">"source ~/.bashrc"</span>)</span><br><span class="line">&gt;&gt;&gt; exit_code</span><br><span class="line">  0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a><a href="https://docs.python.org/3/library/json.html">JSON</a></h3><h4 id="加载与提取"><a href="#加载与提取" class="headerlink" title="加载与提取"></a>加载与提取</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = json.loads(<span class="string">'{"name":"benedict","infos":{"age":0,"blog":"yuzhouwan.com"}}'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user[<span class="string">'name'</span>]</span><br><span class="line">  <span class="string">'benedict'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user[<span class="string">'infos'</span>][<span class="string">'blog'</span>]</span><br><span class="line">  <span class="string">'yuzhouwan.com'</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="与-YAML-格式互换"><a href="#与-YAML-格式互换" class="headerlink" title="与 YAML 格式互换"></a>与 YAML 格式互换</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># json2yaml</span></span><br><span class="line">sys.stdout.write(yaml.dump(json.load(sys.stdin)))</span><br><span class="line"><span class="comment"># yaml2json</span></span><br><span class="line">sys.stdout.write(json.dumps(yaml.load(sys.stdin)))</span><br></pre></td></tr></tbody></table></figure>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><h5 id="赋值-取值"><a href="#赋值-取值" class="headerlink" title="赋值 / 取值"></a>赋值 / 取值</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv_map = {}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv_map[<span class="string">"k"</span>] = <span class="string">"v"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv_map</span><br><span class="line">  {<span class="string">'k'</span>: <span class="string">'v'</span>}</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv_map[<span class="string">"k"</span>]</span><br><span class="line">  <span class="string">'v'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>costs = {<span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"c"</span>: <span class="number">3</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>costs</span><br><span class="line">  {<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'a'</span>: <span class="number">1</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 Key 排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(costs)</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(costs.keys())</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 Value 排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(costs.values())</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[ (k, costs[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">sorted</span>(costs, key=costs.get, reverse=<span class="literal">False</span>) ]</span><br><span class="line">  [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(costs.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">  [(<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'a'</span>, <span class="number">1</span>)]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> costs_sorted:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(k, v)</span><br><span class="line">...</span><br><span class="line">  a <span class="number">1</span></span><br><span class="line">  b <span class="number">2</span></span><br><span class="line">  c <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>({<span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"c"</span>: <span class="number">3</span>}.values())</span><br><span class="line">  <span class="number">6</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><h5 id="单层-list"><a href="#单层-list" class="headerlink" title="单层 list"></a>单层 list</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># range(start, stop, step)</span></span><br><span class="line"><span class="comment"># 参数三 如果是负数，则是倒序遍历</span></span><br><span class="line"><span class="comment"># 注意 [start, stop) 是前闭后开的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[ _ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">0</span>, -<span class="number">1</span>)]</span><br><span class="line">  [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="双层-list"><a href="#双层-list" class="headerlink" title="双层 list"></a>双层 list</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="string">''</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">  [[<span class="string">''</span>, <span class="string">''</span>], [<span class="string">''</span>, <span class="string">''</span>]]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Join-双层-list"><a href="#Join-双层-list" class="headerlink" title="Join 双层 list"></a>Join 双层 list</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'.'</span>.join(<span class="built_in">str</span>(x) <span class="keyword">for</span> inner_arr <span class="keyword">in</span> [<span class="string">'yuzhouwan'</span>, <span class="string">'com'</span>] <span class="keyword">for</span> x <span class="keyword">in</span> inner_arr)</span><br><span class="line">  <span class="string">'y.u.z.h.o.u.w.a.n.c.o.m'</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s)</span><br><span class="line">  <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="iter"><a href="#iter" class="headerlink" title="iter"></a>iter</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>blog = <span class="string">"yuzhouwan"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter_blog = <span class="built_in">iter</span>(blog)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  u</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  h</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  o</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  u</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  w</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog))</span><br><span class="line">  Traceback (most recent call last):</span><br><span class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(iter_blog, <span class="literal">None</span>))</span><br><span class="line">  <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">1</span> <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  -<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">1</span> <span class="keyword">if</span> <span class="literal">False</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="try-except"><a href="#try-except" class="headerlink" title="try-except"></a>try-except</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    resp = urllib2.urlopen(<span class="string">"https://yuzhouwan.com/"</span>)</span><br><span class="line">    <span class="built_in">print</span> resp.read()</span><br><span class="line"><span class="keyword">except</span> urllib2.HTTPError, error:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"Cannot visit this url!"</span>, error</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><h4 id="除以并返回商的整数值"><a href="#除以并返回商的整数值" class="headerlink" title="除以并返回商的整数值"></a>除以并返回商的整数值</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> // <span class="number">1</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">1</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> // <span class="number">1</span></span><br><span class="line">  <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> // <span class="number">2</span></span><br><span class="line">  <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">2</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> // <span class="number">2</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> // <span class="number">2</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> // <span class="number">2</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span> // <span class="number">2</span></span><br><span class="line">  <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h4 id="amp-vs-and"><a href="#amp-vs-and" class="headerlink" title="&amp; vs and"></a>&amp; vs and</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> &amp; <span class="literal">False</span></span><br><span class="line">  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line">  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> &gt; <span class="number">1</span> &amp; <span class="number">10</span> &lt; <span class="number">1</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">10</span> &lt; <span class="number">1</span></span><br><span class="line">  <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><div class="table-container">
<table>
<thead>
<tr>
<th>位运算</th>
<th>运算符</th>
<th>运算规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>与运算</td>
<td><code>&amp;</code></td>
<td>A 与 B 值均为 1 时，结果才为 1，否则为 0</td>
</tr>
<tr>
<td>或运算</td>
<td><code>|</code></td>
<td>A 或 B 值为 1 时，结果才为 1，否则为 0</td>
</tr>
<tr>
<td>异或运算</td>
<td><code>^</code></td>
<td>A 与 B 不同为 0 或 1 时，结果才为 1，否则为 0</td>
</tr>
<tr>
<td>按位取反</td>
<td><code>~</code></td>
<td>取反二进制数，0 取 1，1 取 0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h4 id="获取列表的一部分"><a href="#获取列表的一部分" class="headerlink" title="获取列表的一部分"></a>获取列表的一部分</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][:<span class="number">1</span>]</span><br><span class="line">  [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][:<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][:<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][<span class="number">1</span>::]</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="获取整个列表"><a href="#获取整个列表" class="headerlink" title="获取整个列表"></a>获取整个列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][:]</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 反转列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][::-<span class="number">1</span>]</span><br><span class="line">  [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 反转字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'nawuohzuy'</span>[::-<span class="number">1</span>]</span><br><span class="line">  <span class="string">'yuzhouwan'</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="对列表的切片赋值"><a href="#对列表的切片赋值" class="headerlink" title="对列表的切片赋值"></a>对列表的切片赋值</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>:<span class="number">3</span>] = [<span class="number">0</span>, -<span class="number">1</span>, -<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">  [<span class="number">0</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>::<span class="number">3</span>] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">  [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>]</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Python-标准库"><a href="#Python-标准库" class="headerlink" title="Python 标准库"></a>Python 标准库</h2><h3 id="binascii"><a href="#binascii" class="headerlink" title="binascii"></a><a href="https://docs.python.org/3/library/binascii.html">binascii</a></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转 16 进制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">u"宇宙湾"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">  <span class="string">'e5ae87e5ae99e6b9be'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 16 进制转字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'e5ae87e5ae99e6b9be'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">  <span class="string">'\xe5\xae\x87\xe5\xae\x99\xe6\xb9\xbe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'e5ae87e5ae99e6b9be'</span>.decode(<span class="string">'hex'</span>))</span><br><span class="line">  宇宙湾</span><br></pre></td></tr></tbody></table></figure>
<h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a><a href="https://docs.python.org/3/library/datetime.html">datetime</a></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start = datetime.datetime.now()</span><br><span class="line">end = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>((end - start).microseconds)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a><a href="https://docs.python.org/3/library/gettext.html">gettext</a></h3><h4 id="制作-PO-文件"><a href="#制作-PO-文件" class="headerlink" title="制作 PO 文件"></a>制作 PO 文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 生成模板</span></span><br><span class="line">$ python D:\apps\Python\Python35\Tools\i18n\pygettext.py</span><br><span class="line">$ cat messages.pot</span><br><span class="line">  <span class="comment"># SOME DESCRIPTIVE TITLE.</span></span><br><span class="line">  <span class="comment"># Copyright (C) YEAR ORGANIZATION</span></span><br><span class="line">  <span class="comment"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  msgid <span class="string">""</span></span><br><span class="line">  msgstr <span class="string">""</span></span><br><span class="line">  <span class="string">"Project-Id-Version: PACKAGE VERSION\n"</span></span><br><span class="line">  <span class="string">"POT-Creation-Date: 2017-12-28 11:24+0800\n"</span></span><br><span class="line">  <span class="string">"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"</span></span><br><span class="line">  <span class="string">"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"</span></span><br><span class="line">  <span class="string">"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"</span></span><br><span class="line">  <span class="string">"MIME-Version: 1.0\n"</span></span><br><span class="line">  <span class="string">"Content-Type: text/plain; charset=cp936\n"</span></span><br><span class="line">  <span class="string">"Content-Transfer-Encoding: 8bit\n"</span></span><br><span class="line">  <span class="string">"Generated-By: pygettext.py 1.5\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 charset 为 UTF-8，以及其他基本信息</span></span><br><span class="line">$ vim messages.pot</span><br><span class="line">  <span class="comment"># SOME DESCRIPTIVE TITLE.</span></span><br><span class="line">  <span class="comment"># Copyright (C) 2017 yuzhouwan.com</span></span><br><span class="line">  <span class="comment"># Benedict Jin &lt;benedictjin2016@gmail.com&gt;, 2017.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  msgid <span class="string">""</span></span><br><span class="line">  msgstr <span class="string">""</span></span><br><span class="line">  <span class="string">"Project-Id-Version: Yuzhouwan v1.0.2\n"</span></span><br><span class="line">  <span class="string">"POT-Creation-Date: 2017-12-28 11:24+0800\n"</span></span><br><span class="line">  <span class="string">"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"</span></span><br><span class="line">  <span class="string">"Last-Translator: Benedict Jin &lt;benedictjin2016@gmail.com&gt;\n"</span></span><br><span class="line">  <span class="string">"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"</span></span><br><span class="line">  <span class="string">"MIME-Version: 1.0\n"</span></span><br><span class="line">  <span class="string">"Content-Type: text/plain; charset=UTF-8\n"</span></span><br><span class="line">  <span class="string">"Content-Transfer-Encoding: 8bit\n"</span></span><br><span class="line">  <span class="string">"Generated-By: pygettext.py 1.5\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 PoEdit 打开，并且保存为 po 文件（messages.pot - messages.po）</span></span><br><span class="line"><span class="comment"># 移动到 locale 目录下</span></span><br><span class="line">$ mv messages.po locale/cn/LC_MESSAGES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加两段翻译</span></span><br><span class="line">$ vim messages.po</span><br><span class="line">  <span class="comment"># SOME DESCRIPTIVE TITLE.</span></span><br><span class="line">  <span class="comment"># Copyright (C) 2017 yuzhouwan.com</span></span><br><span class="line">  <span class="comment"># Benedict Jin &lt;benedictjin2016@gmail.com&gt;, 2017.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  msgid <span class="string">""</span></span><br><span class="line">  msgstr <span class="string">""</span></span><br><span class="line">  <span class="string">"Project-Id-Version: Yuzhouwan v1.0.2\n"</span></span><br><span class="line">  <span class="string">"POT-Creation-Date: 2017-12-28 11:39+0800\n"</span></span><br><span class="line">  <span class="string">"PO-Revision-Date: 2017-12-28 11:43+0800\n"</span></span><br><span class="line">  <span class="string">"Language-Team: \n"</span></span><br><span class="line">  <span class="string">"MIME-Version: 1.0\n"</span></span><br><span class="line">  <span class="string">"Content-Type: text/plain; charset=UTF-8\n"</span></span><br><span class="line">  <span class="string">"Content-Transfer-Encoding: 8bit\n"</span></span><br><span class="line">  <span class="string">"Generated-By: pygettext.py 1.5\n"</span></span><br><span class="line">  <span class="string">"X-Generator: Poedit 2.0.1\n"</span></span><br><span class="line">  <span class="string">"Last-Translator: \n"</span></span><br><span class="line">  <span class="string">"Plural-Forms: nplurals=2; plural=(n != 1);\n"</span></span><br><span class="line">  <span class="string">"Language: zh\n"</span></span><br><span class="line"></span><br><span class="line">  msgid <span class="string">"Hello, world!"</span></span><br><span class="line">  msgstr <span class="string">"世界，你好!"</span></span><br><span class="line"></span><br><span class="line">  msgid <span class="string">"yuzhouwan.com"</span></span><br><span class="line">  msgstr <span class="string">"宇宙湾"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="编写-PO-程序"><a href="#编写-PO-程序" class="headerlink" title="编写 PO 程序"></a>编写 PO 程序</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gettext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLocStrings</span>():</span></span><br><span class="line">    current_dir = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">    locale_dir = os.path.join(current_dir, <span class="string">"locale"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Locale directory:"</span>, locale_dir)</span><br><span class="line">    <span class="keyword">return</span> gettext.translation(<span class="string">'messages'</span>, locale_dir, [<span class="string">"zh_CN"</span>, <span class="string">"en-US"</span>]).gettext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_ = getLocStrings()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_(<span class="string">"Hello, world!"</span>))</span><br><span class="line"><span class="built_in">print</span>(_(<span class="string">"yuzhouwan.com"</span>))</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Locale directory: E:\Core Code\leetcode\i18n\locale</span><br><span class="line">世界，你好!</span><br><span class="line">宇宙湾</span><br></pre></td></tr></tbody></table></figure>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a><a href="https://docs.python.org/3/library/time.html">time</a></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到当前时间的字符串</span></span><br><span class="line">time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到秒级的时间戳</span></span><br><span class="line"><span class="built_in">int</span>(time.mktime(time.strptime(<span class="string">"2016-3-1 0:0:0"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间戳</span></span><br><span class="line">datetime.datetime.now().time()</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Python-第三方库"><a href="#Python-第三方库" class="headerlink" title="Python 第三方库"></a>Python 第三方库</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><p>　完整的 Flask 服务端示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Welcome!"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/blog'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;a href='https://yuzhouwan.com/'&gt;https://yuzhouwan.com/&lt;a&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">65533</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数据分析核心库"><a href="#数据分析核心库" class="headerlink" title="数据分析核心库"></a>数据分析核心库</h3><h4 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a><a href="http://pandas.pydata.org/">Pandas</a></h4><h4 id="SciPy"><a href="#SciPy" class="headerlink" title="SciPy"></a><a href="http://www.scipy.org/">SciPy</a></h4><h4 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a><a href="http://www.numpy.org/">NumPy</a></h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span> np.mean(arr)     <span class="comment"># 平均值</span></span><br><span class="line"><span class="built_in">print</span> np.median(arr)   <span class="comment"># 中位数</span></span><br><span class="line"><span class="built_in">print</span> np.std(arr)      <span class="comment"># 标准差</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6.0</span></span><br><span class="line">  <span class="number">6.0</span></span><br><span class="line">  <span class="number">2.82842712475</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/yuzhouwan-hacker-python/src/main/resources/numpy/NumpyExamples.ipynb">here</a>.</p>
<h3 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a><a href="https://yuzhouwan.com/posts/42737/#统计学">统计学</a></h3><h4 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a><a href="https://scrapy.org/">Scrapy</a></h4><h4 id="StatsModels"><a href="#StatsModels" class="headerlink" title="StatsModels"></a><a href="http://statsmodels.sourceforge.net/">StatsModels</a></h4><h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><h4 id="NLTK"><a href="#NLTK" class="headerlink" title="NLTK"></a><a href="http://www.nltk.org/">NLTK</a></h4><h4 id="Gensim"><a href="#Gensim" class="headerlink" title="Gensim"></a><a href="https://radimrehurek.com/gensim/">Gensim</a></h4><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><h4 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit-learn"></a><a href="http://scikit-learn.org/">Scikit-learn</a></h4><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a><a href="https://yuzhouwan.com/posts/42737/">人工智能</a></h3><h4 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a><a href="https://yuzhouwan.com/posts/42737/#开源项目">TensorFlow</a></h4><h4 id="Theano"><a href="#Theano" class="headerlink" title="Theano"></a><a href="https://github.com/Theano/Theano">Theano</a></h4><h4 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a><a href="https://keras.io/">Keras</a></h4><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><h4 id="PyEcharts"><a href="#PyEcharts" class="headerlink" title="PyEcharts"></a><a href="https://pyecharts.org/">PyEcharts</a></h4><iframe src="https://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/yuzhouwan-hacker-python/src/main/resources/pyecharts/pyecharts.ipynb" width="640" height="900" frameborder="0"></iframe>

<h4 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a><a href="https://matplotlib.org/">Matplotlib</a></h4><h5 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">byte_arr_for_point = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">byte_arr_for_multi_point = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>]</span><br><span class="line">plt.plot([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>)], byte_arr_for_point, ls=<span class="string">'-'</span>, label=<span class="string">'line1'</span>)</span><br><span class="line">plt.plot([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>)], byte_arr_for_multi_point, ls=<span class="string">'--'</span>, label=<span class="string">'line2'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/python/python_matplotlib_example.png" alt="Python Matplotlib Example"></p>
<center>（对 <a href="https://matplotlib.org/" target="_blank">Matplotlib</a>™ 输出界面的截图）</center>

<h5 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.figure(<span class="number">2</span>)</span><br><span class="line">plt.figure(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">6</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  plt.figure(<span class="number">1</span>)</span><br><span class="line">  plt.plot(x, np.sin(i * x))</span><br><span class="line">  plt.figure(<span class="number">2</span>)</span><br><span class="line">  plt.plot(x, np.cos(i * x))</span><br><span class="line">  plt.figure(<span class="number">3</span>)</span><br><span class="line">  plt.plot(x, np.tan(i * x))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/python/python_matplotlib_sin.png" alt="Python Matplotlib Sin"><br><img data-src="/picture/python/python_matplotlib_cos.png" alt="Python Matplotlib Cos"><br><img data-src="/picture/python/python_matplotlib_tan.png" alt="Python Matplotlib Tan"></p>
<center>（对 <a href="https://matplotlib.org/" target="_blank">Matplotlib</a>™ 输出界面的截图）</center>

<h5 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">_</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(np.e, (-<span class="number">1</span> * _))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">y = f(x)</span><br><span class="line"></span><br><span class="line">fig_size = <span class="number">6</span></span><br><span class="line">fig, ax = subplots(figsize=(fig_size, fig_size * <span class="number">0.618</span>))</span><br><span class="line">plot(x, y, <span class="string">'b'</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">ylim()</span><br><span class="line"></span><br><span class="line">x_ = np.linspace(a, b)</span><br><span class="line">y_ = f(x_)</span><br><span class="line">shadow = [(a, <span class="number">0</span>)] + <span class="built_in">list</span>(<span class="built_in">zip</span>(x_, y_)) + [(b, <span class="number">0</span>)]</span><br><span class="line">poly = Polygon(shadow, facecolor=<span class="string">'0.8'</span>, edgecolor=<span class="string">'0.4'</span>)</span><br><span class="line">ax.add_patch(poly)</span><br><span class="line"></span><br><span class="line">text(<span class="number">1.4</span> * (a + b), <span class="number">1.2</span>,</span><br><span class="line">     <span class="string">r"$Cost(X, Y) = \int_{x_0}^{x_1} \int_{y_0}^{y_1} e^{-\lambda|x-y|}{\rm d}x{\rm d}y$"</span>,</span><br><span class="line">     horizontalalignment=<span class="string">'center'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">figtext(<span class="number">0.95</span>, <span class="number">0.03</span>, <span class="string">'$x$'</span>)</span><br><span class="line">figtext(<span class="number">0.075</span>, <span class="number">0.82</span>, <span class="string">'$f(x)$'</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xticks((a, b))</span><br><span class="line">ax.set_xticklabels([<span class="string">'$x=%d$'</span> % a, <span class="string">'$y=%d$'</span> % b])</span><br><span class="line">ax.set_yticks([f(a), f(b)])</span><br><span class="line">title(<span class="string">''</span>)</span><br><span class="line">show()</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/python/python_matplotlib_cost.png" alt="Python Matplotlib Cost"></p>
<center>（对 <a href="https://matplotlib.org/" target="_blank">Matplotlib</a>™ 输出界面的截图）</center>

<h4 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a><a href="https://seaborn.pydata.org/">Seaborn</a></h4><h4 id="Bokeh"><a href="#Bokeh" class="headerlink" title="Bokeh"></a><a href="http://bokeh.pydata.org/en/latest/">Bokeh</a></h4><h4 id="Plotly"><a href="#Plotly" class="headerlink" title="Plotly"></a><a href="https://plot.ly/python/">Plotly</a></h4><h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><h4 id="GeoplotLib"><a href="#GeoplotLib" class="headerlink" title="GeoplotLib"></a><a href="https://github.com/andrea-cuttone/geoplotlib">GeoplotLib</a></h4><h4 id="MapBox"><a href="#MapBox" class="headerlink" title="MapBox"></a><a href="https://www.mapbox.com/">MapBox</a></h4><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><h4 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a><a href="https://pillow.readthedocs.io/">PIL</a></h4><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h4 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a><a href="http://lxml.de/tutorial.html">lxml</a></h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ide_id</span>(<span class="params">job_id, tag_name</span>):</span></span><br><span class="line">    <span class="comment"># view-source:http://historyserver-yuzhouwan:19888/jobhistory/conf/job_1010101010101_0101010</span></span><br><span class="line">    url = <span class="string">"http://historyserver-yuzhouwan:19888/jobhistory/conf/"</span> + job_id</span><br><span class="line">    page = requests.get(url)</span><br><span class="line">    html = page.text</span><br><span class="line">    selector = etree.HTML(html)</span><br><span class="line">    tds = selector.xpath(<span class="string">"//*[@id='conf']//tbody//tr//td//text()"</span>)</span><br><span class="line">    exist = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> td <span class="keyword">in</span> tds:</span><br><span class="line">        <span class="keyword">if</span> tag_name <span class="keyword">in</span> td:</span><br><span class="line">            exist = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> exist:</span><br><span class="line">            <span class="keyword">return</span> td.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_ide_id(<span class="string">"job_1010101010101_0101010"</span>, <span class="string">"hive.ide.job.id"</span>))</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果未指定 requests#get 方法中的 timeout 参数，则默认会一直阻塞着</div>





<h2 id="科学分析工具"><a href="#科学分析工具" class="headerlink" title="科学分析工具"></a>科学分析工具</h2><h3 id="IPython-Notebook"><a href="#IPython-Notebook" class="headerlink" title="IPython Notebook"></a><a href="https://ipython.org/notebook.html">IPython Notebook</a></h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装之前需要确定 pip 版本足够高，以及环境变量中加入了 %PYTHON_HOME%/Script</span></span><br><span class="line">$ python -m pip install --upgrade pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Enthought Canopy 套件 (https://www.enthought.com/canopy-subscriptions/)</span></span><br><span class="line"><span class="comment"># 安装后，配置环境变量</span></span><br><span class="line">$ PATH=D:\apps\Enthought\Canopy\App;%PATH%</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ pip install <span class="string">"ipython[all]"</span></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ mkdir ipython</span><br><span class="line">$ <span class="built_in">cd</span> ipython</span><br><span class="line">$ ipython notebook</span><br><span class="line">$ ipython notebook --pylab             <span class="comment"># pylab 模式</span></span><br><span class="line">$ ipython notebook --pylab inline      <span class="comment"># Matplotlib 生成的图片嵌入网页内显示</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip3 install notebook</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建默认配置文件</span></span><br><span class="line">$ jupyter notebook --generate-config</span><br><span class="line">  Writing default config to: C:\Users\BenedictJin\.jupyter\jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认工作区</span></span><br><span class="line">$ vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class="line">  c.NotebookApp.notebook_dir = <span class="string">'F:\Github\_draft\ipython'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启，验证</span></span><br><span class="line">$ ipython notebook</span><br></pre></td></tr></tbody></table></figure>
<h4 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ipython c --to markdown --execute Basic.ipynb</span><br><span class="line"><span class="comment"># 或者使用 notedown 进行转换 (https://github.com/aaren/notedown)</span></span><br><span class="line">$ pip install notedown</span><br></pre></td></tr></tbody></table></figure>
<h4 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h4><h5 id="嵌入-Markdown"><a href="#嵌入-Markdown" class="headerlink" title="嵌入 Markdown"></a>嵌入 Markdown</h5><p>　iPython 创建好 <code>.ipynb</code>文件后，在 markdown 使用 <code>&lt;iframe&gt;</code>标签，就可以将完成嵌入<br></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/yuzhouwan-hacker-python/src/main/resources/ipython/Basic.ipynb"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"700"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>　如此一来，可以将 matplotlib 画出的可视化图形，展示出来，而非仅仅一段 python 脚本，实际效果如下：<p></p>
<center><iframe src="https://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/yuzhouwan-hacker-python/src/main/resources/ipython/Basic.ipynb" width="640" height="700" frameborder="0"></iframe></center>

<p>Tips: 如果你的博客也是全站 <strong>HTTPS</strong> 的话，则需要保证 <code>iframe</code> 里面加载的资源也是 <code>https</code> 的，否则 Chrome 会<a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content?hl=zh-cn">阻止混合内容</a>的展示</p>
<h5 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h5><p>　<code>?</code> 单问号，可以展示出 对应函数、类、变量的文档，而使用 <code>??</code> 双问号，则可以将对应的源码展示出来</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ a = 1</span><br><span class="line">$ a?</span><br><span class="line">  Type:        int</span><br><span class="line">  String form: 1</span><br><span class="line">  Docstring:  </span><br><span class="line">  int(x=0) -&gt; int or long</span><br><span class="line">  int(x, base=10) -&gt; int or long</span><br><span class="line"></span><br><span class="line">  Convert a number or string to an <span class="built_in">integer</span>, or <span class="built_in">return</span> 0 <span class="keyword">if</span> no arguments</span><br><span class="line">  are given.  If x is floating point, the conversion truncates towards zero.</span><br><span class="line">  If x is outside the <span class="built_in">integer</span> range, the <span class="keyword">function</span> returns a long instead.</span><br><span class="line"></span><br><span class="line">  If x is not a number or <span class="keyword">if</span> base is given, <span class="keyword">then</span> x must be a string or</span><br><span class="line">  Unicode object representing an <span class="built_in">integer</span> literal <span class="keyword">in</span> the given base.  The</span><br><span class="line">  literal can be preceded by <span class="string">'+'</span> or <span class="string">'-'</span> and be surrounded by whitespace.</span><br><span class="line">  The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to</span><br><span class="line">  interpret the base from the string as an <span class="built_in">integer</span> literal.</span><br><span class="line">  &gt;&gt;&gt; int(<span class="string">'0b100'</span>, base=0)</span><br><span class="line">  4</span><br><span class="line"></span><br><span class="line">$ a??</span><br><span class="line">  Type:        int</span><br><span class="line">  String form: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外，推荐使用 "shift + tab" 快捷键，可以更便捷地展示方法的详细描述</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="配置-iPython-Notebook-支持Python-3"><a href="#配置-iPython-Notebook-支持Python-3" class="headerlink" title="配置 iPython Notebook 支持Python 3"></a>配置 iPython Notebook <a href="http://ipython.readthedocs.io/en/stable/install/kernel_install.html">支持Python 3</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 python3</span></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">  /d/apps/Python/Python35/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 iPython kernel</span></span><br><span class="line">$ python -m pip install ipykernel</span><br><span class="line">$ python -m ipykernel install --user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 notebook</span></span><br><span class="line">$ <span class="built_in">which</span> pip</span><br><span class="line">  /d/apps/Python/Python35/Scripts/pip</span><br><span class="line">$ pip install notebook</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Python-工程工具"><a href="#Python-工程工具" class="headerlink" title="Python 工程工具"></a>Python 工程工具</h2><h3 id="Tox"><a href="#Tox" class="headerlink" title="Tox"></a><a href="https://testrun.org/tox">Tox</a></h3><h3 id="VirtualEnv-1"><a href="#VirtualEnv-1" class="headerlink" title="VirtualEnv"></a><a href="https://github.com/pypa/virtualenv">VirtualEnv</a></h3><h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="设置-Proxy"><a href="#设置-Proxy" class="headerlink" title="设置 Proxy"></a>设置 Proxy</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:1080"</span></span><br><span class="line">$ <span class="built_in">export</span> https_proxy=<span class="string">"https://127.0.0.1:1080"</span></span><br><span class="line">$ <span class="built_in">export</span> socks5_proxy=<span class="string">"socks5://127.0.0.1:1080"</span></span><br><span class="line"><span class="comment"># pip install --upgrade pip</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Remote-Debug"><a href="#Remote-Debug" class="headerlink" title="Remote Debug"></a>Remote Debug</h3><p>　我们需要达到的效果是，<strong>本地</strong>通过 断点直接对 Python 代码进行 <strong>Debug</strong> 并<strong>修改</strong>，并在 <strong>Ctrl+S</strong> 之后会通过 <strong>SFTP</strong> 直接<strong>上传</strong>至<strong>远程服务器</strong>，待全部修改部署完成，自动通过 <strong>Flask</strong> 自动 <strong>reload 最新</strong>的<strong>代码</strong>，并<strong>自动重启</strong>远程 Python <strong>进程</strong>，在本地直接看到修改之后的线上效果。(这里我们以 Airbnb的 <a href="https://yuzhouwan.com/posts/743/">Superset</a> 项目为基础来介绍)</p>
<h4 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h4><h5 id="Windows-开发机"><a href="#Windows-开发机" class="headerlink" title="Windows 开发机"></a>Windows 开发机</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## local</span></span><br><span class="line"><span class="comment"># should shutdown local firewall firstly</span></span><br><span class="line">$ <span class="built_in">cd</span> .\JetBrains\PyCharm 2016.2.3\debug-eggs\pycharm-debug.egg</span><br><span class="line">$ easy_install pycharm-debug.egg</span><br><span class="line"><span class="comment"># 若运行使用的是 Python3，则需要 pycharm-debug-py3k.egg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run/Debug Configuration - SuperSet Remote Debug - 192.168.3.10(local ip) - 12345(port &gt; 10000), will generate..</span></span><br><span class="line">import pydevd</span><br><span class="line">pydevd.settrace(<span class="string">'192.168.3.10'</span>, port=12345, stdoutToServer=True, stderrToServer=True)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path mappings</span></span><br><span class="line">E:/Core Code/superset=/root/superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># SFTP</span></span><br><span class="line"><span class="comment"># copy a project to a local directory.</span></span><br><span class="line"><span class="comment"># configure: tools - deployment, to upload this local copy to remote server</span></span><br><span class="line"><span class="comment"># config remote host</span></span><br><span class="line"></span><br><span class="line">192.168.1.10 SFTP 192.168.1.10 22 /root/superset-0.15.4 root/****** UTF-8		<span class="comment"># 脱敏</span></span><br><span class="line"><span class="comment"># Tools - Deployment - Options - Upload changed files automatically to the default server (On explicit save action (Ctrl+S))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make deployment automatic: tools - deployment - "automatic upload"</span></span><br><span class="line"><span class="comment"># add remote interpreter: file - settings - python interpreters - "+" - "Remote.."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start Debug</span></span><br><span class="line">Starting debug server at port 12345</span><br><span class="line">Use the following code to connect to the debugger:</span><br><span class="line">import pydevd</span><br><span class="line">pydevd.settrace(<span class="string">'192.168.3.10'</span>, port=12345, stdoutToServer=True, stderrToServer=True)</span><br><span class="line">Waiting <span class="keyword">for</span> process connection...</span><br><span class="line">Connected to pydev debugger (build 162.1967.10)</span><br><span class="line">Starting server with <span class="built_in">command</span>: gunicorn -w 2 --timeout 60 -b 0.0.0.0:9097 --limit-request-line 0 --limit-request-field_size 0 superset:app</span><br></pre></td></tr></tbody></table></figure>
<h5 id="远程-Linux-运行环境"><a href="#远程-Linux-运行环境" class="headerlink" title="远程 Linux 运行环境"></a>远程 Linux 运行环境</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## remote</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/superset</span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br><span class="line">$ <span class="built_in">cd</span> /root/superset/lib</span><br><span class="line"><span class="comment"># cp \JetBrains\PyCharm 2016.2.3\debug-eggs\pycharm-debug.egg 到 lib 目录中</span></span><br><span class="line">$ easy_install pycharm-debug.egg</span><br><span class="line"></span><br><span class="line"><span class="comment"># trouble shooting</span></span><br><span class="line">&gt;&gt;&gt; import pydevd</span><br><span class="line"></span><br><span class="line"><span class="comment"># restart</span></span><br><span class="line">$ vim /root/superset/bin/superset</span><br><span class="line"></span><br><span class="line">  import pydevd</span><br><span class="line">  pydevd.settrace(<span class="string">'192.168.3.10'</span>, port=12345, stdoutToServer=True, stderrToServer=True)</span><br><span class="line"></span><br><span class="line"><span class="comment"># After local debug, then start superset</span></span><br><span class="line">$ mkdir logs</span><br><span class="line">$ nohup superset runserver -a 0.0.0.0 -p 9097 2&gt;&amp;1 &gt; logs/superset.log &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Flask - Werkzeug debugger</span></span><br><span class="line">2017-02-07 15:47:03,905:WARNING:werkzeug: * Debugger is active!</span><br><span class="line">2017-02-07 15:47:03,905:INFO:werkzeug: * Debugger pin code: 330-765-812</span><br><span class="line"></span><br><span class="line">$ pip install django-debug-toolbar</span><br><span class="line"></span><br><span class="line">$ vim lib/python2.7/site-packages/pycharm-debug.egg/tests_pydevd_python/my_django_proj_17/my_django_proj_17/settings.py</span><br><span class="line"></span><br><span class="line">  INSTALLED_APPS = (</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar'</span>,                       <span class="comment"># add</span></span><br><span class="line">    <span class="string">'my_app'</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable django</span></span><br><span class="line">Setting - Language &amp; Frameworks - Django - <span class="string">"Enable Django Support"</span></span><br><span class="line"></span><br><span class="line">E:\Core Code\superset-0.15.4\bin\superset runserver -a <span class="string">'0.0.0.0'</span> -p 9097</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# PyDevd is so stiff! Let's Try Remote Python. #############################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 SFTP (同上)</span></span><br><span class="line"><span class="comment"># 配置 Remote Python</span></span><br><span class="line"></span><br><span class="line">  File - Settings - Project: superset-0.15.4 - Project Interpreter - show all(+) - </span><br><span class="line"></span><br><span class="line">    name:                        Remote Python 2.7.12 (ssh://root@192.168.1.10:22/root/superset-0.15.4/bin/python)</span><br><span class="line">    SSH Credentials</span><br><span class="line">    Host:                        192.168.1.10 Port: 22</span><br><span class="line">    User name:                   root</span><br><span class="line">    Auth <span class="built_in">type</span>:                   Password      <span class="comment"># 脱敏</span></span><br><span class="line">    Python interpreter path:     /root/superset-0.15.4/bin/python</span><br><span class="line">    PyCharm helpers path:        /root/superset-0.15.4/.pycharm_helpers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发现无法识别，可能是 python 缺少运行权限</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/superset-0.15.4/bin &amp;&amp; chmod 777 *</span><br></pre></td></tr></tbody></table></figure>
<h5 id="PyCharm-相关配置"><a href="#PyCharm-相关配置" class="headerlink" title="PyCharm 相关配置"></a>PyCharm 相关配置</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 Python 运行项目</span></span><br><span class="line"></span><br><span class="line">  Run - Run/Debug Configurations(+) - Python - </span><br><span class="line"></span><br><span class="line">    Name:                     superset</span><br><span class="line">    Script:                   E:\Core Code\superset-0.15.4\bin\superset</span><br><span class="line">    Script parameters:        runserver -d -p 9097</span><br><span class="line">    Environment Variables:    VIRTUALENVWRAPPER_PYTHON=E:\Core Code\superset-0.15.4\bin\python;PYTHONUNBUFFERED=1</span><br><span class="line">    Python interpreter:       Remote Python 2.7.12 (ssh://root@192.168.1.10:22/root/superset-0.15.4/bin/python)		<span class="comment"># 上面配置的 remote python</span></span><br><span class="line">    Working directory:        E:\Core Code\superset-0.15.4\bin</span><br><span class="line">    Path mapping:             E:/Core Code/superset-0.15.4=/root/superset-0.15.4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在用远程 python 进行 remote debug 之前，进入到 virtualenv 中</span></span><br><span class="line"><span class="comment"># 这里有可能找不到 activate 文件，可直接添加</span></span><br><span class="line"></span><br><span class="line">  File - Settings - Tools - Terminal - Shell path</span><br><span class="line"></span><br><span class="line">    /bin/bash --rcfile ~/.pycharmrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ vim <span class="string">'/e/Core Code/superset-0.15.4/.pycharmrc'</span>     <span class="comment"># 本地工程增加 .pycharmrc</span></span><br><span class="line"></span><br><span class="line">  VIRTUAL_ENV=<span class="string">"/root/superset-0.15.4"</span>               <span class="comment"># 远程服务器中的 virtualenv 目录 (可以直接将 bin/activate 文件内容复制过来)</span></span><br><span class="line">  <span class="built_in">export</span> VIRTUAL_ENV</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程服务器上多了两个进程</span></span><br><span class="line">$ ps -ef | grep superset | grep -v grep</span><br><span class="line"></span><br><span class="line">  root      8638 10912  0 15:24 pts/1    00:00:00 bash -c <span class="built_in">cd</span> /root/superset-0.15.4/bin; env <span class="string">"IDE_PROJECT_ROOTS"</span>=<span class="string">"/root/superset-0.15.4"</span> <span class="string">"IPYTHONENABLE"</span>=<span class="string">"True"</span> <span class="string">"PYTHONPATH"</span>=<span class="string">"/root/superset-0.15.4:/root/superset-0.15.4/.pycharm_helpers/pydev"</span> <span class="string">"PYTHONUNBUFFERED"</span>=<span class="string">"1"</span> <span class="string">"PYCHARM_HOSTED"</span>=<span class="string">"1"</span> <span class="string">"VIRTUALENVWRAPPER_PYTHON"</span>=<span class="string">"E:\Core Code\superset-0.15.4\bin\python"</span> <span class="string">"LIBRARY_ROOTS"</span>=<span class="string">"C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/544046706;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/550610069;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/421221282;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/-1386076807;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/964856790;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/-1532312494;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/368920028/-1783908167;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/2125044534;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/550610069;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/421221282;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/-1386076807;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/-900005478;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/77779222;C:/Users/yuzhouwan/.PyCharm2016.2/system/remote_sources/250609560/-1783908167;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/2125044534;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/550610069;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/421221282;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/-1386076807;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/-900005478;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/77779222;C:/Users/yuzhouwan/.PyCharm2016.3/system/remote_sources/250609560/-1783908167;C:/Users/yuzhouwan/.PyCharm2016.3/system/python_stubs/250609560;D:/apps/JetBrains/PyCharm 2016.3.2/helpers/python-skeletons"</span> <span class="string">"PYTHONDONTWRITEBYTECODE"</span>=<span class="string">"1"</span> <span class="string">"JETBRAINS_REMOTE_RUN"</span>=<span class="string">"1"</span> <span class="string">"PYTHONIOENCODING"</span>=<span class="string">"UTF-8"</span> /root/superset-0.15.4/bin/python -u /root/superset-0.15.4/.pycharm_helpers/pydev/pydevd.py --multiproc --qt-support --client <span class="string">'0.0.0.0'</span> --port 39925 --file /root/superset-0.15.4/bin/superset runserver -d -p 9097</span><br><span class="line">  root      8660  8638 11 15:24 pts/1    00:00:17 /root/superset-0.15.4/bin/python -u /root/superset-0.15.4/.pycharm_helpers/pydev/pydevd.py --multiproc --qt-support --client 0.0.0.0 --port 39925 --file /root/superset-0.15.4/bin/superset runserver -d -p 9097</span><br><span class="line">  root      8715  8660 28 15:24 pts/1    00:00:38 /root/superset-0.15.4/bin/python /root/superset-0.15.4/.pycharm_helpers/pydev/pydevd.py --multiproc --qt-support --client 0.0.0.0 --port 39925 --file /root/superset-0.15.4/bin/superset runserver -d -p 9097</span><br></pre></td></tr></tbody></table></figure>
<h5 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 本地 windows 上访问</span></span><br><span class="line">http://192.168.1.10:9097/login/</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>　Not good for me! You can still try it if you are interested.</p>
<h4 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="Gunicorn-预开启了多个-Work-子进程，无法-Remote-Debug"><a href="#Gunicorn-预开启了多个-Work-子进程，无法-Remote-Debug" class="headerlink" title="Gunicorn 预开启了多个 Work 子进程，无法 Remote Debug"></a>Gunicorn 预开启了多个 Work 子进程，无法 Remote Debug</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><p>　在本地 windows 开发机上，远程连接 linux 上运行在 virtualenv 里的 superset，发现可以 debug，但是 superset 里的 gunicorn 用的是 prefork 模型，开启了好多个 work 子进程</p>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><p>a) 正常的 remote debug 来处理                    —not ok</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Connected to pydev debugger (build 162.1967.10)</span><br><span class="line">[2017-02-06 18:13:22 +0000] [13609] [INFO] Starting gunicorn 19.6.0</span><br><span class="line">[2017-02-06 18:13:22 +0000] [13609] [INFO] Listening at: http://0.0.0.0:9097 (13609)</span><br><span class="line">[2017-02-06 18:13:22 +0000] [13609] [INFO] Using worker: sync</span><br><span class="line">[2017-02-06 18:14:23 +0000] [13609] [CRITICAL] WORKER TIMEOUT (pid:13624)</span><br><span class="line">[2017-02-06 18:14:23 +0000] [13609] [CRITICAL] WORKER TIMEOUT (pid:13623)</span><br></pre></td></tr></tbody></table></figure>
<p>b) 所以用 “Django server” 替换 “Python Remote Debug” 来进行调试                    —not ok</p>
<p>　配置的 Remote Python 明明是 <code>/root/superset/bin/python</code>，但是看到 报错信息里面，用的却是 <code>/usr/local/bin/python</code></p>
<p>c) ipdb                    —not good</p>
<p>　将 gunicorn 进程切换到前台，在 命令行用 ipdb 进行 debug</p>
<p>d) 增加 <code>-w</code> 参数，控制 work 数量                    —not ok</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">@manager.option(</span><br><span class="line"><span class="string">'-w'</span>, <span class="string">'--workers'</span>, default=config.get(<span class="string">"SUPERSET_WORKERS"</span>, 2),    <span class="comment"># default: 2</span></span><br><span class="line"><span class="built_in">help</span>=<span class="string">"Number of gunicorn web server workers to fire up"</span>)</span><br><span class="line"></span><br><span class="line">$ superset runserver -a 0.0.0.0 -p 9097 -w 0</span><br></pre></td></tr></tbody></table></figure>
<p>e) 关闭 gunicorn                    —ok</p>
<p>　只有在压测时候，才需要开启 gunicorn<br>　<code>superset runserver -d -p 9097</code></p>
<h5 id="Trying-to-add-breakpoint-to-file-that-does-not-exist"><a href="#Trying-to-add-breakpoint-to-file-that-does-not-exist" class="headerlink" title="Trying to add breakpoint to file that does not exist"></a>Trying to add breakpoint to file that does not exist</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pydev debugger: warning: trying to add breakpoint to file that does not exist: /root/superset/d:/apps/python27/lib/site-packages/gunicorn/arbiter.py</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h6><p>a) 增加 python 中 site-packages 的 mapping 映射                    —not good</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">E:/Core Code/superset=/root/superset;D:/apps/Python27=/root/superset/lib/python2.7</span><br></pre></td></tr></tbody></table></figure>
<p>b) 修改 python 为 superset 项目中的 python，而不是本机的 python                    —ok</p>
<p>　同步到本机的 python 不是 python.exe                    —no<br>　使用 remote python                                                 —ok</p>
<h5 id="Couldn’t-obtain-remote-socket"><a href="#Couldn’t-obtain-remote-socket" class="headerlink" title="Couldn’t obtain remote socket"></a>Couldn’t obtain remote socket</h5><h6 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Error running superset</span><br><span class="line">Can<span class="string">'t run remote python interpreter: Couldn'</span>t obtain remote socket from output (<span class="string">'0.0.0.0'</span>, 52703), stderr /usr/<span class="built_in">local</span>/bin/python: No module named virtualenvwrapper virtualenvwrapper.sh: There was a problem running the initialization hooks. </span><br><span class="line">If Python could not import the module virtualenvwrapper.hook_loader, check that virtualenvwrapper has been installed <span class="keyword">for</span> VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">local</span>/bin/python and that PATH is <span class="built_in">set</span> properly.</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 PATH 是否包含 venvWapper 的环境变量</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有，则检查 ~/.bashrc，将其注释</span></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="comment"># export WORKON_HOME=~/virtualenv</span></span><br><span class="line"><span class="comment"># source /usr/local/bin/virtualenvwrapper.sh</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h3><p>　<strong>Vagrant</strong> 是一款可以<code>自动化</code>虚拟机的 <code>安装和配置流程</code>的软件</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Vagrant</span></span><br><span class="line">  https://www.vagrantup.com/downloads.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># VirtualBox</span></span><br><span class="line">  https://www.virtualbox.org/wiki/Downloads</span><br><span class="line">  http://download.virtualbox.org/virtualbox/5.1.12/      <span class="comment"># better</span></span><br><span class="line">  https://hashicorp-files.hashicorp.com/lucid32.box      <span class="comment"># not good</span></span><br><span class="line">  https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box      <span class="comment"># best</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关镜像</span></span><br><span class="line">  https://atlas.hashicorp.com/boxes/search</span><br><span class="line">  http://chef.github.io/bento/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成之后，需要 cmd/pycharm/git dash 等等，最好重启电脑</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vagrant box add superset /f/软件库/python/trusty-server-cloudimg-amd64-juju-vagrant-disk1.box</span><br><span class="line"></span><br><span class="line">  ==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">  ==&gt; box: Adding box <span class="string">'superset'</span> (v0) <span class="keyword">for</span> provider:</span><br><span class="line">      box: Unpacking necessary files from: file:///F:/%C8%ED%BC%FE%BF%E2/python/trusty-server-cloudimg-amd64-juju-vagrant-disk1.box</span><br><span class="line">      box:</span><br><span class="line">  ==&gt; box: Successfully added box <span class="string">'superset'</span> (v0) <span class="keyword">for</span> <span class="string">'virtualbox'</span>!</span><br><span class="line"></span><br><span class="line">$ vagrant box list</span><br><span class="line">  superset (virtualbox, 0)</span><br><span class="line"></span><br><span class="line">$ vagrant init</span><br><span class="line"></span><br><span class="line">  A `Vagrantfile` has been placed <span class="keyword">in</span> this directory. You are now ready to `vagrant up` your first virtual environment! Please <span class="built_in">read</span> the comments <span class="keyword">in</span> the Vagrantfile as well as documentation on `vagrantup.com` <span class="keyword">for</span> more information on using Vagrant.</span><br><span class="line"></span><br><span class="line">$ vim /e/vagrant/superset-0.15.4/Vagrantfile</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line">  <span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Vagrant.configure("2") do |config|</span></span><br><span class="line">  <span class="comment">#   config.vm.box = "superset"</span></span><br><span class="line">  <span class="comment">#   config.vm.box_check_update = false</span></span><br><span class="line">  <span class="comment">#   config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"</span></span><br><span class="line">  <span class="comment">#   config.vm.synced_folder "./", "/root/superset-0.15.4"</span></span><br><span class="line">  <span class="comment"># </span></span><br><span class="line">  <span class="comment">#   config.vm.network "public_network"</span></span><br><span class="line">  <span class="comment">#   config.vm.provider "virtualbox" do |vb|</span></span><br><span class="line">  <span class="comment">#     vb.gui = true</span></span><br><span class="line">  <span class="comment">#     vb.memory = "1024"</span></span><br><span class="line">  <span class="comment">#   end</span></span><br><span class="line">  <span class="comment">#   config.vm.provision "shell", inline: &lt;&lt;-SHELL</span></span><br><span class="line">  <span class="comment">#     apt-get update</span></span><br><span class="line">  <span class="comment">#   SHELL</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">$ vagrant up --provide virtualbox</span><br><span class="line"></span><br><span class="line">  Bringing machine <span class="string">'default'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">  ==&gt; default: Importing base box <span class="string">'superset'</span>...</span><br><span class="line">  ==&gt; default: Matching MAC address <span class="keyword">for</span> NAT networking...</span><br><span class="line">  ==&gt; default: Setting the name of the VM: superset-0154_default_1486969836220_44233</span><br><span class="line">  ==&gt; default: Clearing any previously <span class="built_in">set</span> forwarded ports...</span><br><span class="line">  ==&gt; default: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br><span class="line">  ==&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">      default: Adapter 1: nat</span><br><span class="line">      default: Adapter 2: hostonly</span><br><span class="line">  ==&gt; default: Forwarding ports...</span><br><span class="line">      default: 22 (guest) =&gt; 2122 (host) (adapter 1)</span><br><span class="line">      default: 80 (guest) =&gt; 6080 (host) (adapter 1)</span><br><span class="line">      default: 6079 (guest) =&gt; 6079 (host) (adapter 1)</span><br><span class="line">      default: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">  ==&gt; default: Running <span class="string">'pre-boot'</span> VM customizations...</span><br><span class="line">  ==&gt; default: Booting VM...</span><br><span class="line">  ==&gt; default: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">      default: SSH address: 127.0.0.1:2222</span><br><span class="line">      default: SSH username: vagrant</span><br><span class="line">      default: SSH auth method: private key</span><br></pre></td></tr></tbody></table></figure>
<h4 id="踩过的坑-1"><a href="#踩过的坑-1" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="Provider-‘virtualbox’-not-found"><a href="#Provider-‘virtualbox’-not-found" class="headerlink" title="Provider ‘virtualbox’ not found"></a>Provider ‘virtualbox’ not found</h5><h6 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">  ==&gt;  Provider <span class="string">'virtualbox'</span> not found. We<span class="string">'ll automatically install it now...</span></span><br><span class="line"><span class="string">  The installation process will start below. Human interaction may be required at some points. If you'</span>re uncomfortable with automatically installing this provider, you can safely Ctrl-C this process and install it manually.</span><br><span class="line">  ==&gt;  Downloading VirtualBox 5.0.10...</span><br><span class="line">  This may not be the latest version of VirtualBox, but it is a version that is known to work well. Over time, we<span class="string">'ll update the version that is installed.</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h6><p>　<code>vagrant up --provider=virtualbox</code></p>
<h5 id="Timed-out-while-waiting-for-the-machine-to-boot"><a href="#Timed-out-while-waiting-for-the-machine-to-boot" class="headerlink" title="Timed out while waiting for the machine to boot"></a>Timed out while waiting for the machine to boot</h5><h6 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">子目录或文件 -p 已经存在。</span><br><span class="line">处理: -p 时出错。</span><br><span class="line">子目录或文件 charms 已经存在。</span><br><span class="line">处理: charms 时出错。</span><br><span class="line">Timed out <span class="keyword">while</span> waiting <span class="keyword">for</span> the machine to boot. This means that Vagrant was unable to communicate with the guest machine within the configured (<span class="string">"config.vm.boot_timeout"</span> value) time period.</span><br><span class="line"></span><br><span class="line">If you look above, you should be able to see the error(s) that Vagrant had when attempting to connect to the machine. These errors are usually good hints as to what may be wrong.</span><br><span class="line"></span><br><span class="line">If you<span class="string">'re using a custom box, make sure that networking is properly working and you'</span>re able to connect to the machine. It is a common problem that networking isn<span class="string">'t setup properly in these boxes. Verify that authentication configurations are also setup properly, as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If the box appears to be booting properly, you may want to increase the timeout ("config.vm.boot_timeout") value.'</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h6><p>　升级 VirtualBox 到 5.1.12</p>
<h5 id="default-stdin-is-not-a-tty"><a href="#default-stdin-is-not-a-tty" class="headerlink" title="default: stdin: is not a tty"></a>default: stdin: is not a tty</h5><h6 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h6><p>　default: stdin: is not a tty</p>
<h6 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">config.ssh.shell = <span class="string">"bash -c 'BASH_ENV=/etc/profile exec bash'"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Unittest"><a href="#Unittest" class="headerlink" title="Unittest"></a><a href="https://docs.python.org/3/library/unittest.html#test-discovery">Unittest</a></h3><h4 id="t-改变-顶级-package-路径"><a href="#t-改变-顶级-package-路径" class="headerlink" title="-t 改变 顶级 package 路径"></a>-t 改变 顶级 package 路径</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">The discover sub-command has the following options:</span><br><span class="line"></span><br><span class="line">  -v, --verbose                         Verbose output</span><br><span class="line">  -s, --start-directory directory       Directory to start discovery (. default)</span><br><span class="line">  -p, --pattern pattern                 Pattern to match <span class="built_in">test</span> files (<span class="built_in">test</span>*.py default)</span><br><span class="line">  -t, --top-level-directory directory   Top level directory of project (defaults to start directory)</span><br><span class="line"></span><br><span class="line">Name                          druid_tests</span><br><span class="line">Script                        E:\Core Code\superset-0.15.4\code\tests\druid_tests.py</span><br><span class="line">Environment variables         VIRTUALENVWRAPPER_PYTHON=E:\Core Code\superset-0.15.4\bin\python;PYTHONUNBUFFERED=1</span><br><span class="line">Python interpreter            Remote Python 2.7.12 (ssh://root@192.168.1.10:22/root/superset-0.15.4/bin/python)</span><br><span class="line">Interpreter options           -m tests.druid_tests</span><br><span class="line">Working directory             E:\Core Code\superset-0.15.4\code\</span><br><span class="line">Path mappings                 E:/Core Code/superset-0.15.4=/root/superset-0.15.4</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">export</span> SUPERSET_CONFIG=tests.superset_test_config</span><br><span class="line">$ python -m tests.druid_tests discover . <span class="string">"druid_tests.py"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试完成之后，需要 unset掉 SUPERSET_CONFIG</span></span><br><span class="line">$ <span class="built_in">unset</span> SUPERSET_CONFIG</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ul>
<li>编写示例</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim blog.py</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--ip'</span>, <span class="string">'-i'</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">'ip'</span>, default=<span class="string">"localhost"</span>, required=<span class="literal">False</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--port'</span>, <span class="string">'-p'</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">'port'</span>, default=<span class="number">80</span>, required=<span class="literal">False</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--debug'</span>, <span class="string">'-d'</span>, action=<span class="string">'store_true'</span>, <span class="built_in">help</span>=<span class="string">'enable debug mode'</span>, default=<span class="literal">False</span>, required=<span class="literal">False</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">ip = <span class="built_in">str</span>(args.ip)</span><br><span class="line">port = <span class="built_in">int</span>(args.port)</span><br><span class="line">debug = args.debug</span><br><span class="line"><span class="keyword">if</span> port == <span class="number">80</span>:</span><br><span class="line">    blog = <span class="string">"https://%s"</span> % ip</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    blog = <span class="string">"https://%s:%s"</span> % (ip, port)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    <span class="built_in">print</span>(blog)</span><br><span class="line">os.system(<span class="string">"open '%s'"</span> % blog)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>查看帮助文档</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python3 blog.py -h</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">usage: blog.py [-h] [--ip IP] [--port PORT] [--debug]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  --ip IP, -i IP        ip</span><br><span class="line">  --port PORT, -p PORT  port</span><br><span class="line">  --debug, -d           <span class="built_in">enable</span> debug mode</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>执行脚本</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python3 blog.py -i yuzhouwan.com -d</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">https://yuzhouwan.com</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑-2"><a href="#踩过的坑-2" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="UnicodeDecodeError-‘gbk’-codec-can’t-decode-byte-0x87-in-position-illegal-multibyte-sequence"><a href="#UnicodeDecodeError-‘gbk’-codec-can’t-decode-byte-0x87-in-position-illegal-multibyte-sequence" class="headerlink" title="UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x87 in position illegal multibyte sequence"></a>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x87 in position illegal multibyte sequence</h3><h4 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在程序开头，指定编码，并在 open 文件的时候，指定 encoding 属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="built_in">open</span>(fname, <span class="string">"r"</span>, encoding=<span class="string">"utf8"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="connection-broken-by-SSLError"><a href="#connection-broken-by-SSLError" class="headerlink" title="connection broken by SSLError"></a>connection broken by SSLError</h3><h4 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python -m pip install --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --trusted-host pypi.org --upgrade pip</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ModuleNotFoundError-No-module-named-‘yaml’"><a href="#ModuleNotFoundError-No-module-named-‘yaml’" class="headerlink" title="ModuleNotFoundError: No module named ‘yaml’"></a>ModuleNotFoundError: No module named ‘yaml’</h3><h4 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install pyyaml</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ERROR-Gateway-Timeout"><a href="#ERROR-Gateway-Timeout" class="headerlink" title="ERROR: Gateway Timeout"></a>ERROR: Gateway Timeout</h3><h4 id="解决-9"><a href="#解决-9" class="headerlink" title="解决"></a>解决</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭代理</span></span><br><span class="line">os.environ[<span class="string">'NO_PROXY'</span>] = <span class="string">'127.0.0.1'</span></span><br><span class="line">r = requests.get(<span class="string">'http://127.0.0.1:8080'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://www.amazon.com/Python-Data-Science-Handbook-Essential/dp/1491912057">Python Data Science Handbook: Essential Tools for Working with Data</a></li>
</ul>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><ul>
<li><p><a href="https://github.com/vinta/awesome-python#awesome-python-">A curated list of awesome Python frameworks, libraries, software and resources</a></p>
</li>
<li><p><a href="http://pypl.github.io/PYPL.html">PYPL PopularitY of Programming Language</a></p>
<p><img data-src="/picture/language/pypl_popularity_of_programming_language.png" alt="PYPL PopularitY of Programming Language"></p>
<center>（图片来源：<a href="http://pypl.github.io/PYPL.html" target="_blank">pypl.github.io</a>™）</center>






</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Apache Superset</tag>
        <tag>TensorFlow</tag>
        <tag>Python</tag>
        <tag>iPython</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员的 Mac 高效手册</title>
    <url>/posts/190101/</url>
    <content><![CDATA[<h2 id="环境相关"><a href="#环境相关" class="headerlink" title="环境相关"></a>环境相关</h2><h3 id="右键开启-Terminal"><a href="#右键开启-Terminal" class="headerlink" title="右键开启 Terminal"></a>右键开启 Terminal</h3><p>　系统偏好设置 &gt; 键盘 &gt; 快捷键 &gt; 服务，勾选 “新建位于文件夹位置的终端窗口”</p>
<h3 id="右键创建新文件"><a href="#右键创建新文件" class="headerlink" title="右键创建新文件"></a>右键创建新文件</h3><p>　安装 “<a href="https://itunes.apple.com/cn/app/new-file-menu-free/id1066302071">New File Menu</a>“</p>
<h3 id="管理员权限打开-APP"><a href="#管理员权限打开-APP" class="headerlink" title="管理员权限打开 APP"></a>管理员权限打开 APP</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 以 Intellij IDEA 为例</span></span><br><span class="line">$ <span class="built_in">cd</span> /Applications</span><br><span class="line">$ sudo open -a <span class="string">'IntelliJ IDEA.app'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="在命令行中用-Finder-打开当前目录"><a href="#在命令行中用-Finder-打开当前目录" class="headerlink" title="在命令行中用 Finder 打开当前目录"></a>在命令行中用 Finder 打开当前目录</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ open .</span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置-PATH-环境变量"><a href="#配置-PATH-环境变量" class="headerlink" title="配置 PATH 环境变量"></a>配置 PATH 环境变量</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 环境变量的加载顺序是 /etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc</span></span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;PATH&gt;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure>
<h3 id="查看本机信息"><a href="#查看本机信息" class="headerlink" title="查看本机信息"></a>查看本机信息</h3><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ifconfig | grep <span class="string">"inet "</span> | grep -v 127.0.0.1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">inet 8.8.8.8 netmask 0xfffff800 broadcast 8.8.8.8</span><br></pre></td></tr></tbody></table></figure>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ nslookup store.chanjet.com</span><br><span class="line">$ cat /etc/resolv.conf</span><br></pre></td></tr></tbody></table></figure>
<h3 id="轻点触摸板"><a href="#轻点触摸板" class="headerlink" title="轻点触摸板"></a>轻点触摸板</h3><p><img data-src="/picture/mac/mac_soft_click_on_touch_board.png" alt="Soft click on mac touch board"></p>
<center>（对 <a href="https://www.apple.com/mac/" target="_blank">Mac</a>™ 的截图）</center>




<h2 id="Java-相关"><a href="#Java-相关" class="headerlink" title="Java 相关"></a>Java 相关</h2><h3 id="查看-JDK-安装目录"><a href="#查看-JDK-安装目录" class="headerlink" title="查看 JDK 安装目录"></a>查看 JDK 安装目录</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ /usr/libexec/java_home -V</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Matching Java Virtual Machines (1):</span><br><span class="line">  1.8.0_231, x86_64:  <span class="string">"Java SE 8"</span></span><br><span class="line">  /Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br></pre></td></tr></tbody></table></figure>
<h3 id="多-JDK-版本"><a href="#多-JDK-版本" class="headerlink" title="多 JDK 版本"></a>多 JDK 版本</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> /usr/libexec/java_home=<span class="string">'echo $JAVA_HOME'</span></span><br><span class="line"><span class="built_in">unalias</span> /usr/libexec/java_home</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)</span><br><span class="line"><span class="built_in">export</span> JAVA_12_HOME=$(/usr/libexec/java_home -v12)</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> java8=<span class="string">'export JAVA_HOME=$JAVA_8_HOME'</span></span><br><span class="line"><span class="built_in">alias</span> java12=<span class="string">'export JAVA_HOME=$JAVA_12_HOME'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> /usr/libexec/java_home=<span class="string">'echo $JAVA_HOME'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_8_HOME</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 默认 JDK8</span></span><br><span class="line">$ java -version</span><br><span class="line">  java version <span class="string">"1.8.0_231"</span></span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br><span class="line">$ /usr/libexec/java_home</span><br><span class="line">  /Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 JDK12</span></span><br><span class="line">$ java12</span><br><span class="line">$ java -version</span><br><span class="line">  java version <span class="string">"12.0.2"</span> 2019-07-16</span><br><span class="line">  Java(TM) SE Runtime Environment (build 12.0.2+10)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 12.0.2+10, mixed mode, sharing)</span><br><span class="line">$ /usr/libexec/java_home</span><br><span class="line">  /Library/Java/JavaVirtualMachines/jdk-12.0.2.jdk/Contents/Home</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 更多 Java 实用技巧，详见《<a href="https://yuzhouwan.com/posts/190413/">那些绕不过去的 Java 知识点</a>》</p>
<h2 id="Maven-相关"><a href="#Maven-相关" class="headerlink" title="Maven 相关"></a>Maven 相关</h2><h3 id="权限不足导致下载失败"><a href="#权限不足导致下载失败" class="headerlink" title="权限不足导致下载失败"></a>权限不足导致下载失败</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>　报错无法解析依赖，找不到 <code>xxx.lock</code> 文件</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>　对 Maven 的依赖文件存放目录赋权即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo chown -R benedictjin:wheel /data/maven/repo</span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>　另外，还可以通过以下一系列命令，统一对目录下的所有文件和文件夹进行权限修改</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo chown -R benedictjin:wheel *</span><br><span class="line">$ sudo chmod -R g+rwX .</span><br><span class="line">$ sudo find . -<span class="built_in">type</span> d -<span class="built_in">exec</span> chmod 755 {} \;</span><br><span class="line">$ sudo find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> chmod 644 {} \;</span><br></pre></td></tr></tbody></table></figure>
<p>　同理，还可以利用这个方法，删除 <code>.DS_Store</code> 文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看过滤出来的文件</span></span><br><span class="line">$ find . -name <span class="string">'.DS_Store'</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">$ find . -name <span class="string">'.DS_Store'</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> rm -f {} \;</span><br><span class="line"><span class="comment"># 再次检查</span></span><br><span class="line">$ find . -name <span class="string">'.DS_Store'</span></span><br></pre></td></tr></tbody></table></figure>
<p>　而如果需要执行多个命令的话，可以指定多个 <code>-exec</code> 参数</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 找到后缀为 .md 的文件，执行 grep 命令，如果命中规则，则执行后续的 echo 命令</span></span><br><span class="line">$ find . -name <span class="string">'*.md'</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> grep <span class="string">'##'</span> {} \; -<span class="built_in">exec</span> <span class="built_in">echo</span> {} \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以不用关心第一个命令是否执行成功，具体写法如下：</span></span><br><span class="line">$ find . -name <span class="string">'*.md'</span> -<span class="built_in">type</span> f \( -<span class="built_in">exec</span> grep <span class="string">'##'</span> {} \; -o -<span class="built_in">exec</span> <span class="literal">true</span> \; \) -<span class="built_in">exec</span> <span class="built_in">echo</span> {} \;</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 更多 Maven 实用技巧，详见《<a href="https://yuzhouwan.com/posts/2254/">Maven 高级玩法</a>》</p>
<h2 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h2><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a><a href="https://brew.sh/">brew</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用国内的镜像</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="subst">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line">$ brew update</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置恢复</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="subst">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ccat"><a href="#ccat" class="headerlink" title="ccat"></a><a href="https://github.com/jingweno/ccat">ccat</a></h3><p>　操作类似 cat 命令，但是高亮了输出</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 brew 安装</span></span><br><span class="line">$ brew install ccat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最后一次的代码修改</span></span><br><span class="line">$ git diff HEAD^ | ccat</span><br></pre></td></tr></tbody></table></figure>
<h3 id="diskutil"><a href="#diskutil" class="headerlink" title="diskutil"></a><a href="https://support.apple.com/zh-cn/HT208496">diskutil</a></h3><p>　通过命令行格式化 U 盘</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘列表</span></span><br><span class="line">$ diskutil list</span><br><span class="line"><span class="comment"># 分区 /dev/disk2 为 U 盘，将其卸载</span></span><br><span class="line">$ diskutil unmountDisk /dev/disk2</span><br><span class="line"><span class="comment"># 执行格式化命令</span></span><br><span class="line">$ diskutil eraseDisk JHFS+ raspberry disk2</span><br></pre></td></tr></tbody></table></figure>
<h3 id="fd"><a href="#fd" class="headerlink" title="fd"></a><a href="https://github.com/sharkdp/fd">fd</a></h3><p>　简化了 find 命令，使用起来更加简单高效，还会自动忽略隐藏目录（如 <code>.git/</code>、<code>.deploy_git/</code> 等）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install fd</span><br><span class="line">$ fd xml</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pom.xml</span><br><span class="line">processing/pom.xml</span><br><span class="line">server/pom.xml</span><br><span class="line">services/pom.xml</span><br><span class="line">sql/pom.xml</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ggrep"><a href="#ggrep" class="headerlink" title="ggrep"></a><a href="https://github.com/sharkdp/fd">ggrep</a></h3><p>　自带的 grep 命令不支持前缀匹配等操作，而 ggrep 命令可以有效地支持高阶正则表达式</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install grep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 + 加号左右两边没有空格的情况</span></span><br><span class="line">$ find . -name <span class="string">'*.md'</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> ggrep -Pio <span class="string">'(?! )\+(?! )| \+(?! )|(?&lt;! )\+ '</span> {} \; -<span class="built_in">exec</span> <span class="built_in">echo</span> {} \;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a><a href="https://hisham.hm/htop/">htop</a></h3><p>　增强了 top 命令，展示页面更加丰富</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install htop</span><br><span class="line">$ htop</span><br></pre></td></tr></tbody></table></figure>
<h3 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a><a href="https://github.com/tldr-pages/tldr">tldr</a></h3><p>　强化 man 命令，对展示的文档进行了简化，并展示了对应的例子</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 npm 安装</span></span><br><span class="line">$ npm install -g tldr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 cd 命令的使用文档</span></span><br><span class="line">$ tldr <span class="built_in">cd</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">✔ Page not found. Updating cache...</span><br><span class="line">✔ Creating index...</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">  Change the current working directory.</span><br><span class="line"></span><br><span class="line">  - Go to the given directory:</span><br><span class="line">    <span class="built_in">cd</span> path/to/directory</span><br><span class="line"></span><br><span class="line">  - Go to home directory of current user:</span><br><span class="line">    <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">  - Go up to the parent of the current directory:</span><br><span class="line">    <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line">  - Go to the previously chosen directory:</span><br><span class="line">    <span class="built_in">cd</span> -</span><br></pre></td></tr></tbody></table></figure>
<h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 brew 安装</span></span><br><span class="line">$ brew install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示目录结构，这里我们以 ElasticSearch 的数据目录为例</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$ES_HOME</span>/data</span><br><span class="line">$ tree -L 5</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── nodes</span><br><span class="line">    └── 0</span><br><span class="line">        ├── _state</span><br><span class="line">        │&nbsp;&nbsp; ├── global-20.st</span><br><span class="line">        │&nbsp;&nbsp; ├── manifest-35.st</span><br><span class="line">        │&nbsp;&nbsp; └── node-3.st</span><br><span class="line">        └── node.lock</span><br><span class="line"></span><br><span class="line">3 directories, 4 files</span><br></pre></td></tr></tbody></table></figure>
<h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a><a href="https://www.sublimetext.com/">Sublime</a></h3><h4 id="展示空格和制表符"><a href="#展示空格和制表符" class="headerlink" title="展示空格和制表符"></a>展示空格和制表符</h4><p>　使用 ⌘, 组合快捷键后，增加 <code>"draw_white_space": "all"</code> 配置项</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"color_scheme"</span>: <span class="string">"Packages/Color Scheme - Default/Mariana.sublime-color-scheme"</span>,</span><br><span class="line">  <span class="attr">"font_size"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"ignored_packages"</span>: [</span><br><span class="line">    <span class="string">"Vintage"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"word_wrap"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"draw_white_space"</span>: <span class="string">"all"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除重复行"><a href="#删除重复行" class="headerlink" title="删除重复行"></a>删除重复行</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ⌥+⌘+F 打开替换模式，并打开正则表达式的开关</span></span><br><span class="line">^(.+)$[\r\n](^\1$[\r\n]{0, 1})+</span><br></pre></td></tr></tbody></table></figure>
<h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><h5 id="JSON-格式化"><a href="#JSON-格式化" class="headerlink" title="JSON 格式化"></a>JSON 格式化</h5><p>　使用 ⌘⇧P 组合快捷键后，输入 <code>Pretty JSON: Validate</code> 再回车，对文件中的 JSON 进行校验；输入 <code>Pretty JSON: Format and Sort JSON</code> 再回车，对文件中的 JSON 进行格式化；输入 <code>Pretty JSON: Minify (compress) JSON</code> 再回车，将文件中的 JSON 压缩成一行</p>
<h5 id="二进制文件可视化"><a href="#二进制文件可视化" class="headerlink" title="二进制文件可视化"></a>二进制文件可视化</h5><p>　使用 ⌘⇧P 组合快捷键后，输入 <code>HexViewer: Toggle Hex View</code> 再回车，开启二进制可视化功能</p>
<h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><a href="https://iterm2.com/">iTerm2</a></h3><h4 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><h5 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install zsh-syntax-highlighting</span><br><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/Cellar/zsh-syntax-highlighting/0.6.0/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></tbody></table></figure>
<h5 id="vim-高亮"><a href="#vim-高亮" class="headerlink" title="vim 高亮"></a><a href="https://ethanschoonover.com/solarized/">vim 高亮</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget http://ethanschoonover.com/solarized/files/solarized.zip</span><br><span class="line">$ unzip solarized.zip</span><br><span class="line">$ <span class="built_in">cd</span> solarized/vim-colors-solarized/colors</span><br><span class="line">$ mkdir -p ~/.vim/colors</span><br><span class="line">$ cp solarized.vim ~/.vim/colors/</span><br><span class="line">$ vi ~/.vimrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">syntax <span class="built_in">enable</span></span><br><span class="line"><span class="built_in">set</span> background=dark</span><br><span class="line">colorscheme solarized</span><br></pre></td></tr></tbody></table></figure>
<h5 id="ls-高亮"><a href="#ls-高亮" class="headerlink" title="ls 高亮"></a>ls 高亮</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install coreutils</span><br><span class="line">$ gdircolors --print-database &gt; ~/.dir_colors</span><br><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> brew list | grep coreutils &gt; /dev/null ; <span class="keyword">then</span> PATH=<span class="string">"<span class="subst">$(brew --prefix coreutils)</span>/libexec/gnubin:<span class="variable">$PATH</span>"</span> <span class="built_in">alias</span> ls=<span class="string">'ls -F --show-control-chars --color=auto'</span> <span class="built_in">eval</span> `gdircolors -b <span class="variable">$HOME</span>/.dir_colors` <span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="加载环境变量"><a href="#加载环境变量" class="headerlink" title="加载环境变量"></a>加载环境变量</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># .zshrc 的最后一行加入</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<h4 id="自动补齐"><a href="#自动补齐" class="headerlink" title="自动补齐"></a>自动补齐</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># plugins=(git)</span></span><br><span class="line"><span class="comment"># 修改为：</span></span><br><span class="line">plugins=(zsh-autosuggestions git)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="自动补全只能看到一个字符"><a href="#自动补全只能看到一个字符" class="headerlink" title="自动补全只能看到一个字符"></a>自动补全只能看到一个字符</h4><p>　如果发现自动提示的命令只能展示出一个字符，则说明 ANSI Colors 里面第一行的 Normal 和 Bright 颜色过于相近</p>
<h4 id="scp-报错-cannot-change-locale-UTF-8"><a href="#scp-报错-cannot-change-locale-UTF-8" class="headerlink" title="scp 报错 cannot change locale (UTF-8)"></a>scp 报错 cannot change locale (UTF-8)</h4><p>　使用 zsh 替代了 Mac 上原生的 bash 之后，本地化的设置默认是没有配置的，可以通过 <a href="https://yuzhouwan.com/posts/15691/#locale">locale</a> 命令来检查。解决方法也很简单，具体操作如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line">$ locale</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">LANG=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_COLLATE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_CTYPE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_MESSAGES=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_MONETARY=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_NUMERIC=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_TIME=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_ALL=<span class="string">"en_US.UTF-8"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除-zsh-历史记录"><a href="#删除-zsh-历史记录" class="headerlink" title="删除 zsh 历史记录"></a>删除 zsh 历史记录</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">""</span> &gt; ~/.zsh_history &amp; <span class="built_in">exec</span> <span class="variable">$SHELL</span> -l</span><br></pre></td></tr></tbody></table></figure>
<h4 id="卸载-zsh"><a href="#卸载-zsh" class="headerlink" title="卸载 zsh"></a>卸载 zsh</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ uninstall_oh_my_zsh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h3><h4 id="不停顿地-Debug"><a href="#不停顿地-Debug" class="headerlink" title="不停顿地 Debug"></a>不停顿地 Debug</h4><p><img data-src="/picture/idea/idea_debug_without_pause.png" alt="Debug without pause in Intellij IDEA"></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>™ 的截图）</center>

<h4 id="Debug-启动的时候，卡在了-Finished-saving-caches"><a href="#Debug-启动的时候，卡在了-Finished-saving-caches" class="headerlink" title="Debug 启动的时候，卡在了 Finished, saving caches"></a>Debug 启动的时候，卡在了 Finished, saving caches</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 Mac 的 hostname</span></span><br><span class="line">$ hostname</span><br><span class="line">  BenedictJin.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到 hosts 文件，即可解决</span></span><br><span class="line">$ sudo vim /etc/hosts</span><br><span class="line">  127.0.0.1       localhost        BenedictJin.local</span><br></pre></td></tr></tbody></table></figure>
<h4 id="只格式化自己修改的代码"><a href="#只格式化自己修改的代码" class="headerlink" title="只格式化自己修改的代码"></a>只格式化自己修改的代码</h4><p>　通过 <code>⌘⌥⇧L</code> 组合快捷键打开配置面板，选择 <code>Only VCS changed text</code> 后，再次使用 <code>⌘⌥L</code> 组合快捷键格式化代码，便只会影响本次修改的、尚未 commit 的代码了</p>
<p><img data-src="/picture/idea/idea_only_vcs_changed_text.png" alt="Only VCS changed text in Intellij IDEA"></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>™ 的截图）</center>

<h4 id="生成-SerialVersionUID"><a href="#生成-SerialVersionUID" class="headerlink" title="生成 SerialVersionUID"></a>生成 SerialVersionUID</h4><p>　安装 GenerateSerialVersionUID 插件后，在类文件中，使用 <code>⌘N</code> 组合快捷键，并选择 SerialVersionUID 菜单，即可生成类似如下的一行代码：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">90000066L</span>;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Typroa"><a href="#Typroa" class="headerlink" title="Typroa"></a>Typroa</h3><h4 id="支持-callout"><a href="#支持-callout" class="headerlink" title="支持 callout"></a>支持 callout</h4><p>　首先通过 <code>⌘,</code> 快速打开 Typroa 的控制面板，依次点击 <code>General</code> - <code>Open Theme Folder</code> 按钮，打开 <code>theme</code> 目录，并在该目录下新建 <code>base.user.css</code> 文件，填写如下内容：</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:'</span>]</span> {</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">6px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:'</span>]</span> <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> {</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:'</span>]</span> <span class="selector-tag">code</span> {</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:'</span>]</span>+<span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:'</span>]</span> {</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:default'</span>]</span> {</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#777</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:default'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:primary'</span>]</span> {</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#428bca</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:primary'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#428bca</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:success'</span>]</span> {</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#5cb85c</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:success'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5cb85c</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:danger'</span>]</span> {</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#d9534f</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:danger'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d9534f</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">'callout:warning'</span>]</span> {</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#f0ad4e</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:warning'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f0ad4e</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:info'</span>]</span> {</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#5bc0de</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style^=<span class="string">'callout:info'</span>]</span> <span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5bc0de</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　重启 Typroa 之后，即可使用 callout 功能：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"callout:default"</span>&gt;</span>default<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"callout:primary"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"callout:success"</span>&gt;</span>success<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"callout:warning"</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"callout:info"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>　效果如下：</p>
<p><img data-src="/picture/mac/mac_typroa_callout.png" alt="Markdown Callout in Typroa"></p>
<center>（对 <a href="https://typora.io/" target="_blank">Typroa</a>™ 的截图）</center>


<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><h4 id="Octotree-代码大纲"><a href="#Octotree-代码大纲" class="headerlink" title="Octotree 代码大纲"></a>Octotree 代码大纲</h4><p><img data-src="/picture/mac/mac_octotree.png" alt="Octotree"></p>
<center>（对 <a href="https://github.com/asdf2014" target="_blank">Github</a>™ 的截图）</center>

<h4 id="Isometric-Contributions-可视化"><a href="#Isometric-Contributions-可视化" class="headerlink" title="Isometric Contributions 可视化"></a>Isometric Contributions 可视化</h4><p><img data-src="/picture/mac/mac_asdf2014_on_isometric_contributions.png" alt="asdf2014 on Isometric Contributions"></p>
<center>（对 <a href="https://github.com/asdf2014" target="_blank">Github</a>™ 的截图）</center>

<h4 id="Your-Connection-is-not-private"><a href="#Your-Connection-is-not-private" class="headerlink" title="Your Connection is not private"></a>Your Connection is not private</h4><p>　输入 <code>thisisunsafe</code> 便可绕过 Chrome 的安全检查</p>
<h3 id="asciinema"><a href="#asciinema" class="headerlink" title="asciinema"></a><a href="https://github.com/asciinema/asciinema">asciinema</a></h3><h4 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install asciinema</span><br><span class="line">$ asciinema rec</span><br><span class="line"><span class="comment"># 录制成功后，exit 退出即可</span></span><br><span class="line"><span class="comment"># 支持保存在本地，或发布在 asciinema.org 网站上</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h4><p>　如果你担心发布在网上，存在隐私问题。你可以注册 ascinema 的账号，并设置录制内容是否公开（默认为 private）</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ asciinema rec</span><br><span class="line">$ <span class="built_in">cd</span> /tmp</span><br><span class="line">$ vim open.sh</span><br><span class="line">  open <span class="string">'https://yuzhouwan.com/'</span></span><br><span class="line">$ sh open.sh</span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="转-gif"><a href="#转-gif" class="headerlink" title="转 gif"></a><a href="https://github.com/asciinema/asciicast2gif">转 gif</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install imagemagick</span><br><span class="line">$ brew install gifsicle</span><br><span class="line">$ npm install --global asciicast2gif</span><br><span class="line">$ asciicast2gif https://asciinema.org/a/246879.json 246879.gif</span><br></pre></td></tr></tbody></table></figure>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><a href="https://asciinema.org/a/246879"><img data-src="https://asciinema.org/a/246879.svg" alt="Asciinema Example"></a></p>
<center>（利用 <a href="https://asciinema.org/a/246879" target="_blank">Asciinema</a>™ 录制而成）</center>


<h3 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h3><h4 id="使用-iTerm2-作为-Alfred-的默认命令行"><a href="#使用-iTerm2-作为-Alfred-的默认命令行" class="headerlink" title="使用 iTerm2 作为 Alfred 的默认命令行"></a><a href="https://github.com/vitorgalvao/custom-alfred-iterm-scripts">使用 iTerm2 作为 Alfred 的默认命令行</a></h4><p>　使用 ⌘, 组合快捷键后，进入 <code>Features</code> - <code>Terminal</code> - <code>Application</code>，选择 <code>Custom</code> 后，填入以下脚本：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-- For the latest version:</span><br><span class="line">-- https://github.com/vitorgalvao/custom-alfred-iterm-scripts</span><br><span class="line"></span><br><span class="line">-- Set this property to <span class="literal">true</span> to always open <span class="keyword">in</span> a new window</span><br><span class="line">property open_in_new_window : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">-- Handlers</span><br><span class="line">on new_window()</span><br><span class="line">	tell application <span class="string">"iTerm"</span> to create window with default profile</span><br><span class="line">end new_window</span><br><span class="line"></span><br><span class="line">on new_tab()</span><br><span class="line">	tell application <span class="string">"iTerm"</span> to tell the first window to create tab with default profile</span><br><span class="line">end new_tab</span><br><span class="line"></span><br><span class="line">on call_forward()</span><br><span class="line">	tell application <span class="string">"iTerm"</span> to activate</span><br><span class="line">end call_forward</span><br><span class="line"></span><br><span class="line">on is_running()</span><br><span class="line">	application <span class="string">"iTerm"</span> is running</span><br><span class="line">end is_running</span><br><span class="line"></span><br><span class="line">on has_windows()</span><br><span class="line">	<span class="keyword">if</span> not is_running() <span class="keyword">then</span> <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">	<span class="keyword">if</span> windows of application <span class="string">"iTerm"</span> is {} <span class="keyword">then</span> <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">	<span class="literal">true</span></span><br><span class="line">end has_windows</span><br><span class="line"></span><br><span class="line">on send_text(custom_text)</span><br><span class="line">	tell application <span class="string">"iTerm"</span> to tell the first window to tell current session to write text custom_text</span><br><span class="line">end send_text</span><br><span class="line"></span><br><span class="line">-- Main</span><br><span class="line">on alfred_script(query)</span><br><span class="line">	<span class="keyword">if</span> has_windows() <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">if</span> open_in_new_window <span class="keyword">then</span></span><br><span class="line">			new_window()</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			new_tab()</span><br><span class="line">		end <span class="keyword">if</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		-- If iTerm is not running and we tell it to create a new window, we get two</span><br><span class="line">		-- One from opening the application, and the other from the <span class="built_in">command</span></span><br><span class="line">		<span class="keyword">if</span> is_running() <span class="keyword">then</span></span><br><span class="line">			new_window()</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			call_forward()</span><br><span class="line">		end <span class="keyword">if</span></span><br><span class="line">	end <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">	-- Make sure a window exists before we <span class="built_in">continue</span>, or the write may fail</span><br><span class="line">	repeat until has_windows()</span><br><span class="line">		delay 0.01</span><br><span class="line">	end repeat</span><br><span class="line"></span><br><span class="line">	send_text(query)</span><br><span class="line">	call_forward()</span><br><span class="line">end alfred_script</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过如下命令，可以下载最新的 Custom Alfred iTerm Scripts 脚本，输出到粘贴板，详见：https://github.com/vitorgalvao/custom-alfred-iterm-scripts</span></span><br><span class="line">$ curl --silent <span class="string">'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript'</span> | pbcopy</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配合-iTerm2-完成免密登录"><a href="#配合-iTerm2-完成免密登录" class="headerlink" title="配合 iTerm2 完成免密登录"></a>配合 iTerm2 完成免密登录</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 生成秘钥</span></span><br><span class="line">$ ssh-keygen</span><br><span class="line"><span class="comment"># 拷贝至目标机器</span></span><br><span class="line">$ ssh-copy-id -i yuzhouwan@10.10.10.10</span><br><span class="line"><span class="comment"># 尝试免密登录</span></span><br><span class="line">$ ssh yuzhouwan@10.10.10.10</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置机器相关信息</span></span><br><span class="line">$ vim ~/.ssh/config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host dev</span><br><span class="line">    HostName 10.10.10.10</span><br><span class="line">    User yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在 Release 页面 https://github.com/deanishe/alfred-ssh/releases/tag/v0.8.0 下载最新的 alfred-ssh 并双击安装</span></span><br><span class="line">$ wget https://github.com/deanishe/alfred-ssh/releases/download/v0.8.0/Secure-SHell-0.8.0.alfredworkflow</span><br></pre></td></tr></tbody></table></figure>
<p>　在 iTerm2 中，使用 ⌘, 组合快捷键后，进入 <code>Preferences</code> - <code>Profiles</code> - <code>Profile Name</code> - <code>default</code> - <code>General</code> - <code>URL Schemes</code> - <code>Schemes handled</code>，随后选中 <code>ssh</code> 即可。实际效果，如下图所示：</p>
<p><img data-src="/picture/alfred/alfred_ssh_with_iterm2.png" alt="Alfred SSH with iTerm2"></p>
<center>（对 <a href="https://www.alfredapp.com/" target="_blank">Alfred</a>™ 的截图）</center>



<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="Mac-键盘符号"><a href="#Mac-键盘符号" class="headerlink" title="Mac 键盘符号"></a>Mac 键盘符号</h3><div class="table-container">
<table>
<thead>
<tr>
<th>键盘符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘</td>
<td>Command</td>
</tr>
<tr>
<td>⇧</td>
<td>Shift</td>
</tr>
<tr>
<td>⌥</td>
<td>Option</td>
</tr>
<tr>
<td>⌃</td>
<td>Control</td>
</tr>
<tr>
<td>↩︎</td>
<td>Return / Enter</td>
</tr>
<tr>
<td>⌫</td>
<td>Delete</td>
</tr>
<tr>
<td>⌦</td>
<td>向前删除键（Fn + Delete）</td>
</tr>
<tr>
<td>↑</td>
<td>上箭头</td>
</tr>
<tr>
<td>↓</td>
<td>下箭头</td>
</tr>
<tr>
<td>←</td>
<td>左箭头</td>
</tr>
<tr>
<td>→</td>
<td>右箭头</td>
</tr>
<tr>
<td>⇞</td>
<td>Page Up（Fn + ↑）</td>
</tr>
<tr>
<td>⇟</td>
<td>Page Down（Fn + ↓）</td>
</tr>
<tr>
<td>Fn + ←</td>
<td>Home</td>
</tr>
<tr>
<td>Fn + →</td>
<td>End</td>
</tr>
<tr>
<td>⇥</td>
<td>右制表符（Tab 键）</td>
</tr>
<tr>
<td>⇤</td>
<td>左制表符（Shift + Tab）</td>
</tr>
<tr>
<td>⎋</td>
<td>Escape（Esc）</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Mac-本身相关"><a href="#Mac-本身相关" class="headerlink" title="Mac 本身相关"></a>Mac 本身相关</h3><h4 id="访问隐藏目录"><a href="#访问隐藏目录" class="headerlink" title="访问隐藏目录"></a>访问隐藏目录</h4><p>　在 Finder 里面同时按 <code>Command + Shift + G</code> 即可输入隐藏目录，如 <code>/usr/bin/java</code></p>
<h3 id="Vim-相关"><a href="#Vim-相关" class="headerlink" title="Vim 相关"></a>Vim 相关</h3><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌃F</td>
<td>下翻页</td>
</tr>
<tr>
<td>⌃B</td>
<td>上翻页</td>
</tr>
<tr>
<td>⌃F</td>
<td>下翻页</td>
</tr>
<tr>
<td>⌃B</td>
<td>上翻页</td>
</tr>
<tr>
<td>⇧M</td>
<td>将光标移动的该页中部</td>
</tr>
<tr>
<td>GG</td>
<td>回到文件顶部</td>
</tr>
<tr>
<td>⇧G</td>
<td>回到文件底部</td>
</tr>
<tr>
<td>HJKL</td>
<td>移动光标（HL: 左右；JK: 上下）</td>
</tr>
</tbody>
</table>
</div>
<p>Tips: 更多 Vim 实用技巧 和 完整快捷键 详见《<a href="https://yuzhouwan.com/posts/15691">Linux 实战技巧</a>》的 <a href="https://yuzhouwan.com/posts/15691/#vim">vim</a> 和 <a href="https://yuzhouwan.com/posts/15691/#Blog">cheat sheet</a> 部分</p>
<h3 id="Alfred-相关"><a href="#Alfred-相关" class="headerlink" title="Alfred 相关"></a><a href="https://www.alfredapp.com/">Alfred</a> 相关</h3><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌥⌘C</td>
<td>展示粘贴板上历史命令、图片和文件列表</td>
</tr>
</tbody>
</table>
</div>
<h3 id="iTerm2-相关"><a href="#iTerm2-相关" class="headerlink" title="iTerm2 相关"></a>iTerm2 相关</h3><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘⇧I</td>
<td>开启同时向多窗口输入命令的功能</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Intellij-Idea-相关"><a href="#Intellij-Idea-相关" class="headerlink" title="Intellij Idea 相关"></a>Intellij Idea 相关</h3><h4 id="Editing（编辑）"><a href="#Editing（编辑）" class="headerlink" title="Editing（编辑）"></a>Editing（编辑）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌃Space</td>
<td>基本的代码补全（补全任何类、方法、变量）</td>
</tr>
<tr>
<td>⌃⇧Space</td>
<td>智能代码补全（过滤器方法列表和变量的预期类型）</td>
</tr>
<tr>
<td>⌘⇧↩</td>
<td>自动结束代码，行末自动添加分号</td>
</tr>
<tr>
<td>⌘P</td>
<td>显示方法的参数信息</td>
</tr>
<tr>
<td>⌃J</td>
<td>快速查看文档</td>
</tr>
<tr>
<td>⇧F1</td>
<td>查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</td>
</tr>
<tr>
<td>⌘+鼠标</td>
<td>显示简要信息</td>
</tr>
<tr>
<td>⌘F1</td>
<td>在错误或警告处显示具体描述信息</td>
</tr>
<tr>
<td>⌘N, ⌃↩</td>
<td><strong>生成代码</strong>（<code>getter</code>、<code>setter</code>、构造函数、<code>hashCode</code> / <code>equals</code> / <code>toString</code>）</td>
</tr>
<tr>
<td>⌃O</td>
<td>覆盖方法（重写父类方法）</td>
</tr>
<tr>
<td>⌃I</td>
<td>实现方法（实现接口中的方法）</td>
</tr>
<tr>
<td>⌘⌥T</td>
<td>包围代码（使用 <code>if..else</code>, <code>try..catch</code>, <code>for</code>, <code>synchronized</code> 等包围选中的代码）</td>
</tr>
<tr>
<td>⌘/</td>
<td>注释 / 取消注释与行注释</td>
</tr>
<tr>
<td>⌘⌥/</td>
<td>注释 / 取消注释与块注释</td>
</tr>
<tr>
<td>⌥↑</td>
<td>连续选中代码块</td>
</tr>
<tr>
<td>⌥↓</td>
<td>减少当前选中的代码块</td>
</tr>
<tr>
<td>⌃⇧Q</td>
<td>显示上下文信息</td>
</tr>
<tr>
<td>⌥↩</td>
<td>显示意向动作和快速修复代码</td>
</tr>
<tr>
<td>⌘⌥L</td>
<td>格式化代码</td>
</tr>
<tr>
<td>⌃⌥O</td>
<td>优化 <code>import</code></td>
</tr>
<tr>
<td>⌃⌥I</td>
<td>自动缩进线</td>
</tr>
<tr>
<td>⇥ / ⇧⇥</td>
<td>缩进代码 / 反缩进代码</td>
</tr>
<tr>
<td>⌘X</td>
<td>剪切当前行或选定的块到剪贴板</td>
</tr>
<tr>
<td>⌘C</td>
<td>复制当前行或选定的块到剪贴板</td>
</tr>
<tr>
<td>⌘V</td>
<td>从剪贴板粘贴</td>
</tr>
<tr>
<td>⌘⇧V</td>
<td><strong>从最近的缓冲区粘贴</strong></td>
</tr>
<tr>
<td>⌘D</td>
<td>复制当前行或选定的块</td>
</tr>
<tr>
<td>⌘⌫</td>
<td>删除当前行或选定的块的行</td>
</tr>
<tr>
<td>⌃⇧J</td>
<td>智能的将代码拼接成一行</td>
</tr>
<tr>
<td>⌘↩</td>
<td>智能的拆分拼接的行</td>
</tr>
<tr>
<td>⇧↩</td>
<td>开始新的一行</td>
</tr>
<tr>
<td>⌘⇧U</td>
<td>大小写切换</td>
</tr>
<tr>
<td>⌘⇧] / ⌘⇧[</td>
<td>选择直到代码块结束 / 开始</td>
</tr>
<tr>
<td>⌥⌦</td>
<td>删除到单词的末尾</td>
</tr>
<tr>
<td>⌥⌫</td>
<td>删除到单词的开头</td>
</tr>
<tr>
<td>⌘+ / ⌘-</td>
<td>展开 / 折叠代码块</td>
</tr>
<tr>
<td>⌘⇧+</td>
<td>展开所以代码块</td>
</tr>
<tr>
<td>⌘⇧-</td>
<td>折叠所有代码块</td>
</tr>
<tr>
<td>⌘W</td>
<td>关闭活动的编辑器选项卡</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Search-Replace（查询-替换）"><a href="#Search-Replace（查询-替换）" class="headerlink" title="Search / Replace（查询 / 替换）"></a>Search / Replace（查询 / 替换）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Double ⇧</td>
<td>查询任何东西</td>
</tr>
<tr>
<td>⌘F</td>
<td>文件内查找</td>
</tr>
<tr>
<td>⌘G</td>
<td>查找模式下，向下查找</td>
</tr>
<tr>
<td>⌘⇧G</td>
<td>查找模式下，向上查找</td>
</tr>
<tr>
<td>⌘R</td>
<td>文件内替换</td>
</tr>
<tr>
<td>⌘⇧F</td>
<td>全局查找（根据路径）</td>
</tr>
<tr>
<td>⌘⇧R</td>
<td>全局替换（根据路径）</td>
</tr>
<tr>
<td>⌘⇧S</td>
<td>查询结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</td>
</tr>
<tr>
<td>⌘⇧M</td>
<td>替换结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Usage-Search（使用查询）"><a href="#Usage-Search（使用查询）" class="headerlink" title="Usage Search（使用查询）"></a>Usage Search（使用查询）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌥F7 / ⌘F7</td>
<td>在文件中查找用法 / 在类中查找用法</td>
</tr>
<tr>
<td>⌘⇧F7</td>
<td>在文件中突出显示的用法</td>
</tr>
<tr>
<td>⌘⌥F7</td>
<td>显示用法</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Compile-and-Run（编译和运行）"><a href="#Compile-and-Run（编译和运行）" class="headerlink" title="Compile and Run（编译和运行）"></a>Compile and Run（编译和运行）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘F9</td>
<td>编译 Project</td>
</tr>
<tr>
<td>⌘⇧F9</td>
<td>编译选择的文件、包或模块</td>
</tr>
<tr>
<td>⌃⌥R</td>
<td>弹出 Run 的可选择菜单</td>
</tr>
<tr>
<td>⌃⌥D</td>
<td>弹出 Debug 的可选择菜单</td>
</tr>
<tr>
<td>⌃R</td>
<td>运行</td>
</tr>
<tr>
<td>⌃D</td>
<td>调试</td>
</tr>
<tr>
<td>⌃⇧R, ⌃⇧D</td>
<td>从编辑器运行上下文环境配置</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Debugging（调试）"><a href="#Debugging（调试）" class="headerlink" title="Debugging（调试）"></a>Debugging（调试）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>F8</td>
<td>进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F7</td>
<td>进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>⇧F7</td>
<td>智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td>⇧F8</td>
<td>跳出</td>
</tr>
<tr>
<td>⌥F9</td>
<td>运行到光标处，如果光标前有其他断点会进入到该断点</td>
</tr>
<tr>
<td>⌥F8</td>
<td>计算表达式（可以更改变量值使其生效）</td>
</tr>
<tr>
<td>⌘⌥R</td>
<td>恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>⌘F8</td>
<td>切换断点（若光标当前行有断点则取消断点，没有则加上断点）</td>
</tr>
<tr>
<td>⌘⇧F8</td>
<td>查看断点信息</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Navigation（导航）"><a href="#Navigation（导航）" class="headerlink" title="Navigation（导航）"></a>Navigation（导航）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘O</td>
<td>查找类文件</td>
</tr>
<tr>
<td>⌘F12</td>
<td>弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</td>
</tr>
<tr>
<td>⌘⇧O</td>
<td>查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠 /</td>
</tr>
<tr>
<td>⌘⌥O</td>
<td>前往指定的变量 / 方法</td>
</tr>
<tr>
<td>⌃← / ⌃→</td>
<td>左右切换打开的编辑 tab 页</td>
</tr>
<tr>
<td>F12</td>
<td>返回到前一个工具窗口</td>
</tr>
<tr>
<td>⎋</td>
<td>从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td>⇧⎋</td>
<td>隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</td>
</tr>
<tr>
<td>⌘⇧F4</td>
<td>关闭活动 run / messages / find / … 的 tab 页</td>
</tr>
<tr>
<td>⌘L</td>
<td>在当前文件跳转到某一行的指定处</td>
</tr>
<tr>
<td>⌘E</td>
<td>显示最近打开的文件记录列表</td>
</tr>
<tr>
<td>⌘⌥← / ⌘⌥→</td>
<td>退回 / 前进到上一个操作的地方</td>
</tr>
<tr>
<td>⌘⇧⌫</td>
<td>跳转到最后一个编辑的地方</td>
</tr>
<tr>
<td>⌥F1</td>
<td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择（如在代码编辑窗口可以选择显示该文件的 Finder）</td>
</tr>
<tr>
<td>⌘B / ⌘</td>
<td>鼠标点击 进入光标所在的方法 / 变量的接口或是定义处</td>
</tr>
<tr>
<td>⌘⌥B</td>
<td>跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td>⌥ Space, ⌘Y</td>
<td>快速打开光标所在方法、类的定义</td>
</tr>
<tr>
<td>⌃⇧B</td>
<td>跳转到类型声明处</td>
</tr>
<tr>
<td>⌘U</td>
<td>前往当前光标所在方法的父类的方法 / 接口定义</td>
</tr>
<tr>
<td>⌃↓ / ⌃↑</td>
<td>当前光标跳转到当前文件的前一个 / 后一个方法名位置</td>
</tr>
<tr>
<td>⌘] / ⌘[</td>
<td>移动光标到当前所在代码的花括号开始/结束位置</td>
</tr>
<tr>
<td>⌃H</td>
<td>显示当前类的层次结构</td>
</tr>
<tr>
<td>⌘⇧H</td>
<td>显示方法层次结构</td>
</tr>
<tr>
<td>⌃⌥H</td>
<td>显示调用层次结构</td>
</tr>
<tr>
<td>F2 / ⇧F2</td>
<td>跳转到下一个 / 上一个突出错误或警告的位置</td>
</tr>
<tr>
<td>F4 / ⌘↓</td>
<td>编辑 / 查看代码源</td>
</tr>
<tr>
<td>⌥ Home</td>
<td>显示到当前文件的导航条</td>
</tr>
<tr>
<td>F3</td>
<td>选中文件 / 文件夹 / 代码行，添加 / 取消书签</td>
</tr>
<tr>
<td>⌥F3</td>
<td>选中文件 / 文件夹 / 代码行，使用助记符添加 / 取消书签</td>
</tr>
<tr>
<td>⌃0…⌃9</td>
<td>定位到对应数值的书签位置</td>
</tr>
<tr>
<td>⌘F3</td>
<td>显示所有书签</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Refactoring（重构）"><a href="#Refactoring（重构）" class="headerlink" title="Refactoring（重构）"></a>Refactoring（重构）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>F5</td>
<td>复制文件到指定目录</td>
</tr>
<tr>
<td>F6</td>
<td>移动文件到指定目录</td>
</tr>
<tr>
<td>⌘⌫</td>
<td>在文件上为安全删除文件，弹出确认框</td>
</tr>
<tr>
<td>⇧F6</td>
<td>重命名文件</td>
</tr>
<tr>
<td>⌘F6</td>
<td><strong>更改签名</strong></td>
</tr>
<tr>
<td>⌘⌥N</td>
<td>一致性</td>
</tr>
<tr>
<td>⌘⌥M</td>
<td>将选中的代码提取为方法</td>
</tr>
<tr>
<td>⌘⌥V</td>
<td>提取变量</td>
</tr>
<tr>
<td>⌘⌥F</td>
<td>提取字段</td>
</tr>
<tr>
<td>⌘⌥C</td>
<td>提取常量</td>
</tr>
<tr>
<td>⌘⌥P</td>
<td>提取参数</td>
</tr>
</tbody>
</table>
</div>
<h4 id="VCS（版本控制）"><a href="#VCS（版本控制）" class="headerlink" title="VCS（版本控制）"></a>VCS（版本控制）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘K</td>
<td>提交代码到版本控制器</td>
</tr>
<tr>
<td>⌘T</td>
<td>从版本控制器更新代码</td>
</tr>
<tr>
<td>⌥⇧C</td>
<td>查看最近的变更记录</td>
</tr>
<tr>
<td>⌃C</td>
<td>快速弹出版本控制器操作面板</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Live-Templates（动态代码模板）"><a href="#Live-Templates（动态代码模板）" class="headerlink" title="Live Templates（动态代码模板）"></a>Live Templates（动态代码模板）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘⌥J</td>
<td>弹出模板选择窗口，将选定的代码使用动态模板包住</td>
</tr>
<tr>
<td>⌘J</td>
<td>插入自定义动态代码模板</td>
</tr>
</tbody>
</table>
</div>
<h4 id="General（通用）"><a href="#General（通用）" class="headerlink" title="General（通用）"></a>General（通用）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘1…⌘9</td>
<td>打开相应编号的工具窗口</td>
</tr>
<tr>
<td>⌘S</td>
<td>保存所有</td>
</tr>
<tr>
<td>⌘⌥Y</td>
<td>同步、刷新</td>
</tr>
<tr>
<td>⌃⌘F</td>
<td>切换全屏模式</td>
</tr>
<tr>
<td>⌘⇧F12</td>
<td>切换最大化编辑器</td>
</tr>
<tr>
<td>⌥⇧F</td>
<td>添加到收藏夹</td>
</tr>
<tr>
<td>⌥⇧I</td>
<td>检查当前文件与当前的配置文件</td>
</tr>
<tr>
<td>§⌃, ⌃`</td>
<td>快速切换当前的 scheme（切换主题、代码样式等）</td>
</tr>
<tr>
<td>⌘,</td>
<td>打开 IDEA 系统设置</td>
</tr>
<tr>
<td>⌘;</td>
<td>打开项目结构对话框</td>
</tr>
<tr>
<td>⇧⌘A</td>
<td>查找动作（可设置相关选项）</td>
</tr>
<tr>
<td>⌃⇥</td>
<td>编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上 delete，则是关闭对应选中的窗口）</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘⇧8</td>
<td>竖编辑模式</td>
</tr>
<tr>
<td>⌘`</td>
<td>项目之间的切换</td>
</tr>
<tr>
<td>⌥⇧U</td>
<td>装上 CamelCase 插件之后，切换变量的驼峰法命名</td>
</tr>
<tr>
<td>⌃⌘U</td>
<td>装上 Translation 插件之后，可以快速翻译</td>
</tr>
<tr>
<td>⌃⌘O</td>
<td>装上 Translation 插件之后，可以翻译并替换</td>
</tr>
<tr>
<td>⌥S</td>
<td>装上 OnlineSearch 插件之后，可以配置为该快捷键</td>
</tr>
<tr>
<td>⌘⌥⇧/</td>
<td>使用 2018.3 EAP   版本时候，开启 JVM Profile 功能</td>
</tr>
</tbody>
</table>
</div>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="Error-Unknown-command-services"><a href="#Error-Unknown-command-services" class="headerlink" title="Error: Unknown command: services"></a>Error: Unknown command: services</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew services start grafana</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Error: Unknown <span class="built_in">command</span>: services</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a><a href="https://apple.stackexchange.com/questions/150300/need-help-using-homebrew-services-command">解决</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew tap homebrew/services</span><br></pre></td></tr></tbody></table></figure>
<h3 id="升级-Catalina-系统后根目录下文件消失"><a href="#升级-Catalina-系统后根目录下文件消失" class="headerlink" title="升级 Catalina 系统后根目录下文件消失"></a>升级 Catalina 系统后根目录下文件消失</h3><h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><p>　已经被移动到 <code>/Users/Shared/Relocated Items/Security</code> 目录下了</p>
<h3 id="升级-Catalina-系统后根目录无法创建文件夹"><a href="#升级-Catalina-系统后根目录无法创建文件夹" class="headerlink" title="升级 Catalina 系统后根目录无法创建文件夹"></a>升级 Catalina 系统后根目录无法创建文件夹</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line">$ sudo mkdir yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mkdir: yuzhouwan: Read-only file system</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><p>　确保 <a href="https://support.apple.com/en-us/HT204899">SIP</a>（<strong>S</strong>ystem <strong>I</strong>ntegrity <strong>P</strong>rotection）关闭的情况下，给更目录赋予写入的权限即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ csrutil status</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">System Integrity Protection status: disabled.</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo mount -uw /</span><br><span class="line">$ sudo mkdir /yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<h3 id="删除雷蛇应用后，仍然显示雷蛇图标"><a href="#删除雷蛇应用后，仍然显示雷蛇图标" class="headerlink" title="删除雷蛇应用后，仍然显示雷蛇图标"></a>删除雷蛇应用后，仍然显示雷蛇图标</h3><h4 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ launchctl remove com.razer.rzupdater</span><br><span class="line">$ launchctl remove com.razerzone.rzdeviceengine</span><br><span class="line">$ sudo rm /Library/LaunchAgents/com.razer.rzupdater.plist</span><br><span class="line">$ sudo rm -rf /Library/Application\ Support/Razer</span><br></pre></td></tr></tbody></table></figure>
<h3 id="自带的-grep-不支持-P-参数"><a href="#自带的-grep-不支持-P-参数" class="headerlink" title="自带的 grep 不支持 -P 参数"></a>自带的 grep 不支持 -P 参数</h3><h4 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew install grep</span><br><span class="line">$ vim tmp</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">宇宙湾</span><br><span class="line">yuzhouwan.com</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/opt/grep/libexec/gnubin/grep -P <span class="string">'[\p{Han}]'</span> tmp</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">宇宙湾</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Version-value-must-be-a-string"><a href="#Version-value-must-be-a-string" class="headerlink" title="Version value must be a string"></a>Version value must be a string</h3><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew doctor</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">    11: from /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/brew.rb:23:<span class="keyword">in</span> `&lt;main&gt;<span class="string">'</span></span><br><span class="line"><span class="string">    10: from /usr/local/Homebrew/Library/Homebrew/brew.rb:23:in `require_relative'</span></span><br><span class="line">     9: from /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/global.rb:37:<span class="keyword">in</span> `&lt;top (required)&gt;<span class="string">'</span></span><br><span class="line"><span class="string">     8: from /usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'</span></span><br><span class="line">     7: from /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/vendor/portable-ruby/2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:<span class="keyword">in</span> `require<span class="string">'</span></span><br><span class="line"><span class="string">     6: from /usr/local/Homebrew/Library/Homebrew/os.rb:3:in `&lt;top (required)&gt;'</span></span><br><span class="line">     5: from /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/os.rb:21:<span class="keyword">in</span> `&lt;module:OS&gt;<span class="string">'</span></span><br><span class="line"><span class="string">     4: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:58:in `prerelease?'</span></span><br><span class="line">     3: from /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/os/mac.rb:24:<span class="keyword">in</span> `version<span class="string">'</span></span><br><span class="line"><span class="string">     2: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:24:in `new'</span></span><br><span class="line">     1: from /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/os/mac/version.rb:26:<span class="keyword">in</span> `initialize<span class="string">'</span></span><br><span class="line"><span class="string">/usr/local/Homebrew/Library/Homebrew/version.rb:368:in `initialize'</span>: Version value must be a string; got a NilClass () (TypeError)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ brew upgrade</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><ul>
<li><a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">What is the XY problem?</a></li>
<li><a href="https://mp.weixin.qq.com/s/fhqg1ntQoPYxC-5KDQk3jQ">为了效率，扎克伯格的 26 张 PPT</a></li>
<li><a href="https://xiaozhuanlan.com/Effective-Mac">Mac 高效开发指南</a></li>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9A%E7%B2%BE%E9%80%89MacApp/">程序员的 macOS 系列：精选 Mac App</a></li>
<li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/index.html">程序员的自我修养 - Mac 篇</a></li>
</ul>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><ul>
<li><a href="https://www.zhihu.com/topic/19591970/hot">Mac OS X 使用技巧</a></li>
<li><a href="https://macpaw.com/">CleanMyMac X</a></li>
<li><a href="https://wangchujiang.com/awesome-mac/">Awesome Mac</a></li>
</ul>
<h4 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h4><ul>
<li>DingTalk RC: <a href="https://download.alicdn.com/dingtalk-desktop/win_installer/RC/DingTalk_v3.3.4-RC.1.exe">win</a> &amp; <a href="https://download.alicdn.com/dingtalk-desktop/mac_dmg/RC/DingTalk_v3.3.4-RC.1.dmg">mac</a></li>
</ul>
<h4 id="iTerm2-1"><a href="#iTerm2-1" class="headerlink" title="iTerm2"></a>iTerm2</h4><ul>
<li><p><a href="https://www.jianshu.com/p/405956cdaca6">ITerm2 配置 - 让你的 mac 命令行更加丰富高效</a><br><img data-src="/picture/mac/mac_iterm2.png" alt="iTerm2"></p>
<center>（对 <a href="https://iterm2.com/" target="_blank">ITerm2</a>™ 的截图）</center></li>
<li><a href="http://bluebiu.com/blog/iterm2-ssh-session-idle.html">iTerm2 中 ssh 保持连接不断开</a></li>
</ul>
<h4 id="Jump-Desktop"><a href="#Jump-Desktop" class="headerlink" title="Jump Desktop"></a>Jump Desktop</h4><ul>
<li><a href="https://jumpdesktop.com/">Jump Desktop：连接远程桌面</a></li>
</ul>
<h4 id="Sublime-1"><a href="#Sublime-1" class="headerlink" title="Sublime"></a>Sublime</h4><ul>
<li><a href="https://github.com/sb2nov/mac-setup">Installing Development environment on macOS</a></li>
<li><a href="https://github.com/dzhibas/SublimePrettyJson">Prettify / Minify / Query / Goto / Validate / Lint JSON plugin for Sublime Text 2 &amp; 3</a></li>
<li><a href="https://www.jianshu.com/p/a50db1f77eb9">Sublime Text：Pretty Json 插件使用技巧</a></li>
</ul>
<h4 id="Chrome-1"><a href="#Chrome-1" class="headerlink" title="Chrome"></a>Chrome</h4><ul>
<li><a href="https://github.com/Mottie/GitHub-userscripts">Userscripts to add functionality to GitHub</a></li>
</ul>
<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul>
<li><a href="https://support.apple.com/zh-cn/HT204063">重置 Mac 上的 NVRAM 或 PRAM</a></li>
<li><a href="https://support.apple.com/zh-cn/HT207513">如何在 Mac 上使用夜览</a></li>
</ul>
<h3 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h3><ul>
<li><a href="http://www.bejson.com/">JSON 格式化</a></li>
<li><a href="http://tool.chinaz.com/Tools/unixtime.aspx">时间戳转换</a></li>
<li><a href="https://www.debuggex.com/">正则表达式校验</a></li>
<li><a href="https://vega.github.io/vega/examples/word-cloud/">词云生成</a></li>
<li><a href="https://www.w3schools.com/colors/colors_shades.asp">HTML Color Shades</a></li>
<li><a href="https://mermaid-js.github.io/mermaid-live-editor">Mermaid Live Editor</a></li>
</ul>
<h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><h4 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h4><ul>
<li><a href="https://pixabay.com/">Pixabay</a>：免费高质量的图片素材网站</li>
<li><a href="https://www.pexels.com/">Pexels</a>：每周定量更新，所有的图片都会显示详细的信息</li>
<li><a href="https://www.splitshire.com/">Splitshire</a>：免费高清摄影图片下载</li>
<li><a href="http://pngimg.com/">Pngimg</a>：PNG 格式的透明素材图</li>
<li><a href="https://www.zhihu.com/question/23169054">有哪些好的 PPT 素材网站，推荐下?</a></li>
</ul>
<h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><ul>
<li><a href="https://fontawesome.com/v4.7.0/icons/">Font Awesome gives you scalable vector icons that can instantly be customized</a></li>
<li><a href="https://simpleicons.org/">Simple Icons</a></li>
<li><a href="https://www.iconfont.cn/">Iconfont</a>：阿里巴巴矢量图库</li>
<li><a href="https://www.easyicon.net/">Easyicon</a></li>
<li><a href="http://www.iconninja.com/">Iconninja</a></li>
<li><a href="https://simpleicons.org/">Free SVG icons for popular brands</a></li>
</ul>
<h4 id="纹理背景"><a href="#纹理背景" class="headerlink" title="纹理背景"></a>纹理背景</h4><ul>
<li><a href="https://www.toptal.com/designers/subtlepatterns/">Subtle patterns</a></li>
</ul>
<h4 id="地图图表"><a href="#地图图表" class="headerlink" title="地图图表"></a>地图图表</h4><ul>
<li><a href="https://pixelmap.amcharts.com/">Pixel Map Generator</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>Mac</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm</title>
    <url>/posts/666/</url>
    <content><![CDATA[<h2 id="LeetCode-组队刷题活动"><a href="#LeetCode-组队刷题活动" class="headerlink" title="LeetCode 组队刷题活动"></a>LeetCode 组队刷题活动</h2><div class="note primary">组队刷 LeetCode</div>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h4><p>　代码仓库的坐标：<strong><a href="https://github.com/asdf2014/algorithm">asdf2014 / algorithm</a></strong></p>
<h4 id="报名途径"><a href="#报名途径" class="headerlink" title="报名途径"></a>报名途径</h4><p>　只需要在《<a href="https://yuzhouwan.com/posts/666/">Algorithm</a>》文末的评论区，或者在 <a href="https://github.com/asdf2014/gitment/issues/40">issues#40</a> 中留言，即可随时参与</p>
<div class="note success">留言内容的话，可以是任意的。另外，也可以说明下自己能接受的刷题频率、希望的选题策略，亦或者，对算法知识沉淀的模式有好的建议，都可以提出，不胜感激</div>

<h4 id="参与方式"><a href="#参与方式" class="headerlink" title="参与方式"></a>参与方式</h4><p>　每位参与的小伙伴，都会获得代码仓库的 <a href="https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/permission-levels-for-a-user-account-repository">Collaborator</a> 权限，可以自由地提交代码（不限制语种）。在 <code>/Codes/${你的 Github 账号名}</code> 目录下，每人都将拥有一个自己的代码库。留下 Github 名称后，将很快会收到邀请函，大家可以在 <a href="https://github.com/asdf2014/algorithm/invitations">asdf2014 - algorithm - invitations</a> 链接中认领（当然，也欢迎直接通过提交 Pull Request 参与进来）。随后，可以在任意目录下（不需要是空目录），使用如下命令，一键完成您的第一次代码提交：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">bash -c <span class="string">"<span class="subst">$(curl -L https://raw.githubusercontent.com/asdf2014/algorithm/master/first_commit.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="刷题频率"><a href="#刷题频率" class="headerlink" title="刷题频率"></a>刷题频率</h4><p>　考虑到可能大家的闲暇时间并不多，我们暂定刷题频率为“一周一题”</p>
<h4 id="选题策略"><a href="#选题策略" class="headerlink" title="选题策略"></a>选题策略</h4><p>　<a href="https://github.com/asdf2014/algorithm/blob/master/Picker/random_picker.py">选题机器人</a>会在每周五晚八点，自动地随机选定一个题目，当前题目点击<a href="https://github.com/asdf2014/algorithm#%E9%80%89%E9%A2%98%E7%AD%96%E7%95%A5">这里</a>查看。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>　操作 Git 时遇到问题的话，可以参考我的一篇博客《<a href="https://yuzhouwan.com/posts/30041/">Git 高级玩法</a>》</p>
<div class="note success">也可以直接在文章最后留言。目前，支持 Gitalk + Disqus 两种留言系统，以便更好地服务于国内和海外的小伙伴</div>

<p>　同时，为了大家更加方便地交流，也欢迎加入算法 QQ 群 <a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="/picture/algorithm/algorithm_qq_group_5366753.svg" alt=""></a> 或者 Gitter 聊天室 <a href="https://gitter.im/yuzhouwan/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img data-src="/picture/algorithm/algorithm_gitter_community.svg" alt=""></a></p>
<div class="note danger">但是，请不要在评论区讨论入群问题的答案，避免打广告的进入</div>

<p>　另外，因为大部分算法都会有很多实现思路，我们会尽可能地展现所有可能的解题方法。但为了文章的排版更加地紧凑，我们会将同一算法的不同实现，通过选项卡的形式展现。且默认展示的选项卡将会是最优解。这样的话，如果您想要快速阅读本文，则可以不用翻看其他的选项卡。实际效果如下：</p>
<div class="tabs" id="code"><ul class="nav-tabs"><li class="tab"><a href="#code-1">CODE 1</a></li><li class="tab"><a href="#code-2">CODE 2</a></li><li class="tab active"><a href="#code-3">CODE 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="code-1"><p><strong>迭代解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        sum_ = a + b</span><br><span class="line">        a = b</span><br><span class="line">        b = sum_</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="code-2"><p><strong>递归解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> solution(n - <span class="number">1</span>) + solution(n - <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane active" id="code-3"><p><strong>动态规划解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    cache = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n + <span class="number">1</span>)]</span><br><span class="line">    cache[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        cache[i] = cache[i - <span class="number">1</span>] + cache[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> cache[n]</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<span id="more"></span>
<h3 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h3><p>　截止目前为止，活跃的小伙伴数量：<a href="https://yuzhouwan.com/posts/666/"><img data-src="https://img.shields.io/github/contributors/asdf2014/algorithm" alt=""></a>，使用到的语言种类：<a href="https://yuzhouwan.com/posts/666/"><img data-src="https://img.shields.io/github/languages/count/asdf2014/algorithm" alt=""></a>，代码提交频率：<a href="https://yuzhouwan.com/posts/666/"><img data-src="https://img.shields.io/github/commit-activity/m/asdf2014/algorithm?cacheSeconds=3600" alt=""></a>，开源许可证：<a href="https://yuzhouwan.com/posts/666/"><img data-src="https://img.shields.io/github/license/asdf2014/algorithm" alt=""></a></p>
<h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>　排行榜的更新会在提交后自动执行，最新的榜单点击<a href="https://github.com/asdf2014/algorithm#%E6%8E%92%E8%A1%8C%E6%A6%9C">这里</a>查看。</p>
<div class="note info">下文将总结归纳大家讨论交流的内容，不断地沉淀解题过程中思考的点滴</div>



<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p><img data-src="/picture/algorithm/algorithm_comparison_computational_complexity.svg" alt="Algorithm Complexity"></p>
<center>（图片来源：<a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank">wikipedia.org</a>，已确认版权为 CC BY-SA 4.0 协议）</center>



<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">运行时间</th>
<th style="text-align:center">运行时间举例</th>
<th style="text-align:center">算法举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">常数时间</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">10</td>
<td style="text-align:center">判断一个二进制数的奇偶</td>
</tr>
<tr>
<td style="text-align:center">反阿克曼时间</td>
<td style="text-align:center">$O(\alpha (n))$</td>
<td style="text-align:center"></td>
<td style="text-align:center">并查集的单个操作的平摊时间</td>
</tr>
<tr>
<td style="text-align:center">迭代对数时间</td>
<td style="text-align:center">$O(\log ^{\ast}n)$</td>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/图着色问题">分布式圆环着色问题</a></td>
</tr>
<tr>
<td style="text-align:center">对数对数时间</td>
<td style="text-align:center">$O(\log \log n)$</td>
<td style="text-align:center"></td>
<td style="text-align:center">有界优先队列的单个操作</td>
</tr>
<tr>
<td style="text-align:center">对数时间</td>
<td style="text-align:center">$O(\log n)$</td>
<td style="text-align:center">$\log n$，$\log n^{2}$</td>
<td style="text-align:center">二分搜索</td>
</tr>
<tr>
<td style="text-align:center">幂对数时间</td>
<td style="text-align:center">$(\log n)^{O(1)}$</td>
<td style="text-align:center">$(\log n)^{2}$</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">幂时间（小于 1 次）</td>
<td style="text-align:center">$O(n^{c})$，$0&lt;c&lt;1$</td>
<td style="text-align:center">$n^{\frac {1}{2}}$，$n^{\frac {2}{3}}$</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/K-d树">K-d 树</a>的搜索操作</td>
</tr>
<tr>
<td style="text-align:center">线性时间</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$n$</td>
<td style="text-align:center">无序数组的搜索</td>
</tr>
<tr>
<td style="text-align:center">线性迭代对数时间</td>
<td style="text-align:center">$O(n\log ^ {\ast}n)$</td>
<td style="text-align:center"></td>
<td style="text-align:center">莱姆德·赛德尔的三角分割多边形算法</td>
</tr>
<tr>
<td style="text-align:center">线性对数时间</td>
<td style="text-align:center">$O(n\log n)$</td>
<td style="text-align:center">$n\log n$</td>
<td style="text-align:center">最快的比较排序</td>
</tr>
<tr>
<td style="text-align:center">二次时间</td>
<td style="text-align:center">$O(n^{2})$</td>
<td style="text-align:center">$n^{2}$</td>
<td style="text-align:center">冒泡排序、插入排序</td>
</tr>
<tr>
<td style="text-align:center">三次时间</td>
<td style="text-align:center">$O(n^{3})$</td>
<td style="text-align:center">$n^{3}$</td>
<td style="text-align:center">矩阵乘法的基本实现</td>
</tr>
<tr>
<td style="text-align:center">多项式时间</td>
<td style="text-align:center">$2^{O(\log n)}=n^{O(1)}$</td>
<td style="text-align:center">$n$，$n\log n$，$n^{10}$</td>
<td style="text-align:center">线性规划中的卡马卡算法，<a href="https://zh.wikipedia.org/wiki/AKS質數測試">AKS 质数测试</a></td>
</tr>
<tr>
<td style="text-align:center">准多项式时间</td>
<td style="text-align:center">$2^{(\log n)^{O(1)}}$</td>
<td style="text-align:center"></td>
<td style="text-align:center">关于有向斯坦纳树问题最著名的 $O(\log ^{2}n)$ 近似算法</td>
</tr>
<tr>
<td style="text-align:center">次指数时间（第一定义）</td>
<td style="text-align:center">$O(2^{n^{\epsilon }})$，ε &gt; 0</td>
<td style="text-align:center">$O(2^{(\log n)^{\log \log n}})$</td>
<td style="text-align:center">假设复杂性理论推测，BPP 包含在 SUBEXP 中</td>
</tr>
<tr>
<td style="text-align:center">次指数时间（第二定义）</td>
<td style="text-align:center">$2^{o(n)}$</td>
<td style="text-align:center">$2^{n^{\frac1{3}}}$</td>
<td style="text-align:center">用于<a href="https://zh.wikipedia.org/wiki/整数分解">整数分解</a>与图形同构问题的著名算法</td>
</tr>
<tr>
<td style="text-align:center">指数时间</td>
<td style="text-align:center">$2^{O(n)}$</td>
<td style="text-align:center">$1.1^n$，$10^n$</td>
<td style="text-align:center">使用动态规划解决<a href="https://zh.wikipedia.org/wiki/旅行推销员问题">旅行推销员问题</a></td>
</tr>
<tr>
<td style="text-align:center">阶乘时间</td>
<td style="text-align:center">$O(O!)$</td>
<td style="text-align:center">$n!$</td>
<td style="text-align:center">通过暴力搜索解决旅行推销员问题</td>
</tr>
<tr>
<td style="text-align:center">指数时间</td>
<td style="text-align:center">$2^{poly(n)}$</td>
<td style="text-align:center">$2^n, 2^{n^2}$</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">双重指数时间</td>
<td style="text-align:center">$2^{2^{poly(n)}}$</td>
<td style="text-align:center">$2^{2^n}$</td>
<td style="text-align:center">在预膨胀算术中决定一个给定描述的真实性</td>
</tr>
</tbody>
</table>
</div>
<center>（表格来源：<a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank">wikipedia.org</a>）</center>





<h2 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h2><h3 id="String-Matching"><a href="#String-Matching" class="headerlink" title="String Matching"></a>String Matching</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><h5 id="朴素算法（Naive-Algorithm）"><a href="#朴素算法（Naive-Algorithm）" class="headerlink" title="朴素算法（Naive Algorithm）"></a><a href="http://www.cnblogs.com/gaochundong/p/string_matching.html">朴素算法（Naive Algorithm）</a></h5><h5 id="Rabin-Karp-算法"><a href="#Rabin-Karp-算法" class="headerlink" title="Rabin-Karp 算法"></a>Rabin-Karp 算法</h5><h5 id="有限自动机算法（Finite-Automation）"><a href="#有限自动机算法（Finite-Automation）" class="headerlink" title="有限自动机算法（Finite Automation）"></a>有限自动机算法（Finite Automation）</h5><h5 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h5><p>　KMP，<a href="http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"><strong>K</strong>nuth-<strong>M</strong>orris-<strong>P</strong>ratt</a> 匹配<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">算法</a></p>
<h5 id="Boyer-Moore-算法"><a href="#Boyer-Moore-算法" class="headerlink" title="Boyer-Moore 算法"></a><a href="http://www.cnblogs.com/gaochundong/p/boyer_moore_string_matching_algorithm.html">Boyer-Moore 算法</a></h5><h5 id="Simon-算法"><a href="#Simon-算法" class="headerlink" title="Simon 算法"></a>Simon 算法</h5><h5 id="Colussi-算法"><a href="#Colussi-算法" class="headerlink" title="Colussi 算法"></a>Colussi 算法</h5><h5 id="Galil-Giancarlo-算法"><a href="#Galil-Giancarlo-算法" class="headerlink" title="Galil-Giancarlo 算法"></a>Galil-Giancarlo 算法</h5><h5 id="Apostolico-Crochemore-算法"><a href="#Apostolico-Crochemore-算法" class="headerlink" title="Apostolico-Crochemore 算法"></a>Apostolico-Crochemore 算法</h5><h5 id="Horspool-算法"><a href="#Horspool-算法" class="headerlink" title="Horspool 算法"></a>Horspool 算法</h5><h5 id="Sunday-算法"><a href="#Sunday-算法" class="headerlink" title="Sunday 算法"></a>Sunday 算法</h5><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="string-to-integer-atoi"><a href="#string-to-integer-atoi" class="headerlink" title="string-to-integer-atoi"></a><a href="https://leetcode.com/problems/string-to-integer-atoi/submissions/">string-to-integer-atoi</a></h5><div class="tabs" id="code8"><ul class="nav-tabs"><li class="tab active"><a href="#code8-1">CODE8 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code8-1"><p><strong>正则匹配解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">patten = <span class="string">'^(([+|-]\\d+)|\\d+)'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_integer_atoi</span>(<span class="params">s</span>):</span></span><br><span class="line">    match = re.search(patten, s.strip())</span><br><span class="line">    res = <span class="built_in">int</span>(match.group()) <span class="keyword">if</span> match <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">min</span>(res, <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>), -<span class="number">2</span> ** <span class="number">31</span>)</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="letter-combinations-of-a-phone-number"><a href="#letter-combinations-of-a-phone-number" class="headerlink" title="letter-combinations-of-a-phone-number"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">letter-combinations-of-a-phone-number</a></h5><div class="tabs" id="code17"><ul class="nav-tabs"><li class="tab active"><a href="#code17-1">CODE17 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code17-1"><p><strong>算术解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">chars = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letter_combinations_of_a_phone_number</span>(<span class="params">digits</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(digits) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(digits) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> letters(digits[<span class="number">0</span>])]</span><br><span class="line">    previous = letter_combinations_of_a_phone_number(digits[:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> [i + j <span class="keyword">for</span> i <span class="keyword">in</span> previous <span class="keyword">for</span> j <span class="keyword">in</span> letters(digits[-<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letters</span>(<span class="params">n</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span> <span class="keyword">or</span> n &gt; <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">elif</span> n &lt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> chars[(n - <span class="number">2</span>) * <span class="number">3</span> : (n - <span class="number">1</span>) * <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> chars[<span class="number">15</span>:<span class="number">19</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> chars[<span class="number">19</span>:<span class="number">22</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> chars[<span class="number">22</span>:<span class="number">26</span>]</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="valid-parentheses"><a href="#valid-parentheses" class="headerlink" title="valid-parentheses"></a><a href="https://leetcode.com/problems/valid-parentheses/">valid-parentheses</a></h5><div class="tabs" id="code20"><ul class="nav-tabs"><li class="tab active"><a href="#code20-1">CODE20 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code20-1"><p><strong>堆栈解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_parentheses</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(s) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> revert_pairs.values():</span><br><span class="line">            stack.append(c)</span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> revert_pairs:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> <span class="keyword">or</span> stack.pop() <span class="keyword">is</span> <span class="keyword">not</span> revert_pairs[c]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="zigzag-conversion"><a href="#zigzag-conversion" class="headerlink" title="zigzag-conversion"></a><a href="https://leetcode.com/problems/zigzag-conversion/">zigzag-conversion</a></h5><div class="tabs" id="code6"><ul class="nav-tabs"><li class="tab"><a href="#code6-1">CODE6 1</a></li><li class="tab active"><a href="#code6-2">CODE6 2</a></li></ul><div class="tab-content"><div class="tab-pane" id="code6-1"><p><strong>纯数学解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzag_conversion</span>(<span class="params">s, num_rows</span>):</span></span><br><span class="line">    s_len = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> s_len == <span class="number">0</span> <span class="keyword">or</span> num_rows &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> s_len &lt; <span class="number">3</span> <span class="keyword">or</span> num_rows == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    middle_num = num_rows - <span class="number">2</span></span><br><span class="line">    cycle_num = num_rows + middle_num</span><br><span class="line">    remain = s_len % cycle_num</span><br><span class="line">    x_total = (s_len // cycle_num) * (middle_num + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; remain &lt;= num_rows:</span><br><span class="line">        x_total += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> remain &gt; num_rows:</span><br><span class="line">        x_total += remain - num_rows + <span class="number">1</span></span><br><span class="line">    arr = [[<span class="string">""</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x_total)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_rows)]</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        cycle_times = count // cycle_num</span><br><span class="line">        remain = count % cycle_num</span><br><span class="line">        <span class="keyword">if</span> remain &lt; num_rows:</span><br><span class="line">            arr[remain][cycle_times * (middle_num + <span class="number">1</span>)] = c</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            arr[num_rows - (remain - (num_rows - <span class="number">1</span>)) - <span class="number">1</span>][ cycle_times * (middle_num + <span class="number">1</span>) + remain - num_rows + <span class="number">1</span> ] = c</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(<span class="built_in">str</span>(x) <span class="keyword">for</span> inner_arr <span class="keyword">in</span> arr <span class="keyword">for</span> x <span class="keyword">in</span> inner_arr)</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane active" id="code6-2"><p><strong>爬格子解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzag_conversion</span>(<span class="params">s, num_rows</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num_rows == <span class="number">1</span> <span class="keyword">or</span> num_rows &gt;= <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    res = [<span class="string">""</span>] * num_rows</span><br><span class="line">    index, step = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        res[index] += c</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> index == num_rows - <span class="number">1</span>:</span><br><span class="line">            step = -<span class="number">1</span></span><br><span class="line">        index += step</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(res)</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><h5 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h5><ul>
<li>《<a href="https://book.douban.com/subject/2038862/">柔性字符串匹配</a>》</li>
</ul>
<h3 id="Sorting-Algorithm"><a href="#Sorting-Algorithm" class="headerlink" title="Sorting Algorithm"></a>Sorting Algorithm</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>冒泡排序</strong></td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>选择排序</strong></td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>插入排序</strong></td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>堆排序</strong></td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>归并排序</strong></td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>快速排序</strong></td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n \log n)$</td>
<td style="text-align:center">$O(\log n)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>希尔排序</strong></td>
<td style="text-align:center">$O(n \log^2 n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>计数排序</strong></td>
<td style="text-align:center">$O(n + m)$</td>
<td style="text-align:center">$O(n + m)$</td>
<td style="text-align:center">$O(n + m)$</td>
<td style="text-align:center">$O(n + m)$</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center"><strong>基数排序</strong></td>
<td style="text-align:center">$O(k \times n)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(k \times n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>均按从小到大排列</li>
<li>k：数值中的“数位”个数</li>
<li>n：数据规模</li>
<li>m：数据的最大值减最小值</li>
</ul>
<h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">wikipedia 排序算法</a></li>
<li><a href="https://leetcode.com/tag/sort/">Leetcode Sort</a></li>
</ul>
<h3 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>　<strong>动态规划</strong>（<strong>DP</strong>，<strong>D</strong>ynamic <strong>P</strong>rogramming），是一种通过把原问题分解为相对简单的子问题，以求解复杂问题的方法</p>
<h4 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h4><h5 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h5><p>　用来描述该问题的子问题的解</p>
<h5 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h5><p>　状态和状态之间的关系式</p>
<p>　例如，可以将斐波那契数列表示为：</p>
<script type="math/tex; mode=display">
f(x) = 
\begin{cases}
0, x = 0 \\
1, x = 1 \\
f(x - 1) + f(x - 2), x \ge 2, x \in N
\end{cases}</script><h5 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h5><p>　每个阶段只有一个状态</p>
<h5 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h5><p>　每个阶段的最优状态，都是由上一个阶段的最优状态得到的</p>
<h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><p>　每个阶段的最优状态，是由之前所有阶段的状态的组合得到的</p>
<h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><p>　每个阶段的最优状态，可以从之前<strong>某个阶段</strong>的某个或某些状态<strong>直接得到</strong>，而<strong>不管</strong>之前这个状态是<strong>如何得到的</strong></p>
<h5 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h5><p>　每个阶段的最优状态，可以从之前某个阶段的某个或某些状态直接得到</p>
<h5 id="无后效性"><a href="#无后效性" class="headerlink" title="无后效性"></a>无后效性</h5><p>　不管之前这个状态是如何得到的</p>
<h4 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h4><h5 id="longest-palindromic-substring"><a href="#longest-palindromic-substring" class="headerlink" title="longest-palindromic-substring"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/">longest-palindromic-substring</a></h5><div class="tabs" id="code5"><ul class="nav-tabs"><li class="tab active"><a href="#code5-1">CODE5 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code5-1"><p><strong>S(n) = $O(1)$ 解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_palindromic_substring</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        odd = find(s, i, i)</span><br><span class="line">        even = find(s, i, i + <span class="number">1</span>)</span><br><span class="line">        res = <span class="built_in">max</span>(res, odd, even, key=<span class="built_in">len</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">s, left, right</span>):</span></span><br><span class="line">    <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">        left -= <span class="number">1</span></span><br><span class="line">        right += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s[left + <span class="number">1</span>:right]</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="regular-expression-matching"><a href="#regular-expression-matching" class="headerlink" title="regular-expression-matching"></a><a href="https://leetcode.com/problems/regular-expression-matching/">regular-expression-matching</a></h5><div class="tabs" id="code10"><ul class="nav-tabs"><li class="tab active"><a href="#code10-1">CODE10 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code10-1"><p><strong>动态规划解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regular_expression_matching</span>(<span class="params">s, p</span>):</span></span><br><span class="line">    dp = [[<span class="literal">False</span>] * (<span class="built_in">len</span>(s) + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p) + <span class="number">1</span>)]</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(p)):</span><br><span class="line">        dp[i + <span class="number">1</span>][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] <span class="keyword">and</span> p[i] == <span class="string">"*"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> p[i] == <span class="string">"*"</span>:</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i - <span class="number">1</span>][j + <span class="number">1</span>] <span class="keyword">or</span> dp[i][j + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> p[i - <span class="number">1</span>] == s[j] <span class="keyword">or</span> p[i - <span class="number">1</span>] == <span class="string">"."</span>:</span><br><span class="line">                    dp[i + <span class="number">1</span>][j + <span class="number">1</span>] |= dp[i + <span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] <span class="keyword">and</span> (p[i] == s[j] <span class="keyword">or</span> p[i] == <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="generate-parentheses"><a href="#generate-parentheses" class="headerlink" title="generate-parentheses"></a><a href="https://leetcode.com/problems/generate-parentheses/">generate-parentheses</a></h5><div class="tabs" id="code22"><ul class="nav-tabs"><li class="tab active"><a href="#code22-1">CODE22 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code22-1"><p><strong>动态规划解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_parentheses</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; [<span class="built_in">str</span>]:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    res = [[<span class="literal">None</span>], [<span class="string">"()"</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            tmp1 = res[j]</span><br><span class="line">            tmp2 = res[i - j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> t1 <span class="keyword">in</span> tmp1:</span><br><span class="line">                <span class="keyword">for</span> t2 <span class="keyword">in</span> tmp2:</span><br><span class="line">                    <span class="keyword">if</span> t1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        t1 = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">if</span> t2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        t2 = <span class="string">""</span></span><br><span class="line">                    tmp.append(<span class="string">"("</span> + t1 + <span class="string">")"</span> + t2)</span><br><span class="line">        res.append(tmp)</span><br><span class="line">    <span class="keyword">return</span> res[n]</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">wikipedia 动态规划</a></li>
<li><a href="https://www.zhihu.com/question/23995189">什么是动态规划？动态规划的意义是什么？</a></li>
<li><a href="https://leetcode.com/tag/dynamic-programming/">Leetcode Dynamic Programming</a></li>
</ul>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><h5 id="开放式寻址"><a href="#开放式寻址" class="headerlink" title="开放式寻址"></a><a href="https://en.wikipedia.org/wiki/Open_addressing">开放式寻址</a></h5><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B">线性探测</a>法</p>
<p>从发生冲突的地址起，依次判断下一个地址是否为空，直到碰到空闲的地址</p>
</li>
<li><p>直接定址法</p>
<p>取关键字 $k$ 或者 $k$ 的某个线性函数值（$a \cdot k + b$）作为哈希地址</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Quadratic_probing">二次探测</a>法</p>
<p>以关键字 $k$ 或者 $k$ 加上某个常数的平方（$k + 1^2$、$k + 2^2$、$k + 3^2$ $\dots$）作为哈希地址</p>
</li>
<li><p>伪随机数法</p>
<p>采用一个伪随机数当作哈希函数</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Double_hashing">双重哈希</a>法</p>
<p>双重哈希是用于开放寻址最好的方法之一，散列函数如下：</p>
<script type="math/tex; mode=display">h(i, k)=(h_1(k)+i \cdot h_2(k)) \mod \vert T \vert</script><p>为了能查找整个散列表，值 $h_2(k)$ 需要与表的大小 $T$ 互质。为确保这一条件成立，可采用以下两种方法</p>
<ul>
<li>取 $T$ 为 2 的幂，并设计一个总产生奇数的 $h_2$</li>
<li>取 $T$ 为质数，并设计一个总是产生较 $T$ 小的正整数的 $h_2$</li>
</ul>
</li>
</ul>
<h5 id="关键字分析"><a href="#关键字分析" class="headerlink" title="关键字分析"></a>关键字分析</h5><ul>
<li><p>数字分析法</p>
<p>提取关键字中，取值比较均匀的数字作为哈希地址</p>
</li>
<li><p>平方取中法</p>
<p>如果关键字各个部分的分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址</p>
</li>
<li><p>分段叠加法</p>
<p>按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果，即可作为该关键字的哈希地址</p>
</li>
</ul>
<h5 id="冲突转移"><a href="#冲突转移" class="headerlink" title="冲突转移"></a>冲突转移</h5><ul>
<li><p>拉链法</p>
<p>拉链法，又称链接地址法，是将哈希值相同的元素构成一个同义词的单链表</p>
</li>
<li><p>公共溢出区</p>
<p>将哈希表分为公共区和溢出区，当发生溢出时，将所有溢出数据统一写入到溢出区</p>
</li>
</ul>
<h4 id="实战-2"><a href="#实战-2" class="headerlink" title="实战"></a>实战</h4><h5 id="two-sum"><a href="#two-sum" class="headerlink" title="two-sum"></a><a href="https://leetcode.com/problems/two-sum/">two-sum</a></h5><div class="tabs" id="code1"><ul class="nav-tabs"><li class="tab active"><a href="#code1-1">CODE1 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code1-1"><p><strong>T(n) = S(n) = $O(n)$ 解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span>(<span class="params">nums, target</span>):</span></span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> nums_len &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    cache = {}</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums_len):</span><br><span class="line">        n = nums[i]</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> cache:</span><br><span class="line">            <span class="keyword">return</span> [cache[n], i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cache[target - n] = i</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h4 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://cyan4973.github.io/xxHash/">xxHash: an extremely fast non-cryptographic hash algorithm, working at speeds close to RAM limits</a></li>
</ul>
<h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><h4 id="种类-1"><a href="#种类-1" class="headerlink" title="种类"></a>种类</h4><h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><p><img data-src="/picture/algorithm/algorithm_singly_linked_list.svg" alt="单向链表"></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/File:Singly-linked-list.svg" target="_blank">wikipedia.org</a>，已确认无版权）</center>

<h6 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h6><p>　该方法常用于解决查找单向链表的中点、判断链表是否存在环等问题。大体思路便是，设计一快一慢两个指针，记做 <code>fast</code> 和 <code>slow</code>。同时，控制 <code>fast</code> 的速度是 <code>slow</code> 的两倍（如，<code>fast = fast.next.next; slow = slow.next</code>）。这样，可以保证当 <code>fast</code> 到达链表尾部的时候，<code>slow</code> 刚好在链表中间</p>
<h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p><img data-src="/picture/algorithm/algorithm_doubly_linked_list.svg" alt="双向链表"></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/File:Doubly-linked-list.svg" target="_blank">wikipedia.org</a>，已确认无版权）</center>

<h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><p><img data-src="/picture/algorithm/algorithm_circularly_linked_list.svg" alt="循环链表"></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/File:Circularly-linked-list.svg" target="_blank">wikipedia.org</a>，已确认无版权）</center>

<h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Linked list</th>
<th style="text-align:center">Array</th>
<th style="text-align:center">Dynamic array</th>
<th style="text-align:center">Balanced tree</th>
<th style="text-align:center">Random access list</th>
<th>Hashed array tree</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Indexing</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">$O(\log n)$</td>
<td style="text-align:center">$O(\log n)$</td>
<td>$O(1)$</td>
</tr>
<tr>
<td style="text-align:center">Insert/delete at beginning</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center"><code>N/A</code></td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(\log n)$</td>
<td style="text-align:center">$O(1)$</td>
<td>$O(n)$</td>
</tr>
<tr>
<td style="text-align:center">Insert/delete at end</td>
<td style="text-align:center">$O(1)$ when last element is known;<br>$O(n)$ when last element is unknown</td>
<td style="text-align:center"><code>N/A</code></td>
<td style="text-align:center">$O(1)$ <a href="https://en.wikipedia.org/wiki/Amortized_analysis">amortized</a></td>
<td style="text-align:center">$O(\log n)$</td>
<td style="text-align:center">$O(\log n)$ updating</td>
<td>$O(1)$ <a href="https://en.wikipedia.org/wiki/Amortized_analysis">amortized</a></td>
</tr>
<tr>
<td style="text-align:center">Insert/delete in middle</td>
<td style="text-align:center">search time + $O(1)$</td>
<td style="text-align:center"><code>N/A</code></td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(\log n)$</td>
<td style="text-align:center">$O(\log n)$ updating</td>
<td>$O(n)$</td>
</tr>
<tr>
<td style="text-align:center">Wasted space (average)</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center"><code>0</code></td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(n)$</td>
<td>$O(\sqrt{n})$</td>
</tr>
</tbody>
</table>
</div>
<center>（表格来源：<a href="https://en.wikipedia.org/wiki/Linked_list" target="_blank">wikipedia.org</a>）</center>



<h4 id="实战-3"><a href="#实战-3" class="headerlink" title="实战"></a>实战</h4><h5 id="add-two-numbers"><a href="#add-two-numbers" class="headerlink" title="add-two-numbers"></a><a href="https://leetcode.com/problems/add-two-numbers/">add-two-numbers</a></h5><div class="tabs" id="code2"><ul class="nav-tabs"><li class="tab active"><a href="#code2-1">CODE2 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code2-1"><p><strong>T(n) = $O(n)$ 解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_numbers</span>(<span class="params">left, right</span>):</span></span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    tmp = ListNode(<span class="number">0</span>)</span><br><span class="line">    root = tmp</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">or</span> right:</span><br><span class="line">        total = carry + left.val + right.val</span><br><span class="line">        left = left.<span class="built_in">next</span></span><br><span class="line">        right = right.<span class="built_in">next</span></span><br><span class="line">        carry = total // <span class="number">10</span></span><br><span class="line">        tmp.<span class="built_in">next</span> = ListNode(total % <span class="number">10</span>)</span><br><span class="line">        tmp = tmp.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> root.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="remove-nth-node-from-end-of-list"><a href="#remove-nth-node-from-end-of-list" class="headerlink" title="remove-nth-node-from-end-of-list"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">remove-nth-node-from-end-of-list</a></h5><div class="tabs" id="code19"><ul class="nav-tabs"><li class="tab active"><a href="#code19-1">CODE19 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code19-1"><p><strong>遍历解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_nth_node_from_end_of_list</span>(<span class="params">head: ListNode, n: <span class="built_in">int</span></span>) -&gt; ListNode:</span></span><br><span class="line">    tmp = head</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> tmp:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        tmp = tmp.<span class="built_in">next</span></span><br><span class="line">    n = count + <span class="number">1</span> - n</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">is</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> head.<span class="built_in">next</span></span><br><span class="line">    tmp = head</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>):</span><br><span class="line">        tmp = tmp.<span class="built_in">next</span></span><br><span class="line">    tmp.<span class="built_in">next</span> = tmp.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="merge-two-sorted-lists"><a href="#merge-two-sorted-lists" class="headerlink" title="merge-two-sorted-lists"></a><a href="https://leetcode.com/problems/merge-two-sorted-lists/">merge-two-sorted-lists</a></h5><div class="tabs" id="code21"><ul class="nav-tabs"><li class="tab active"><a href="#code21-1">CODE21 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code21-1"><p><strong>遍历解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_two_sorted_lists</span>(<span class="params">l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    root = tmp = ListNode(<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            tmp.<span class="built_in">next</span> = l1</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">elif</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            tmp.<span class="built_in">next</span> = l2</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                tmp.<span class="built_in">next</span> = l1</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.<span class="built_in">next</span> = l2</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">        tmp = tmp.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> root.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>　滑动窗口算法，主要用于解决数组或者字符串的子元素问题。它可以将嵌套的循环问题，转换为单循环问题，从而降低时间复杂度</p>
<h4 id="实战-4"><a href="#实战-4" class="headerlink" title="实战"></a>实战</h4><h5 id="longest-substring-without-repeating-characters"><a href="#longest-substring-without-repeating-characters" class="headerlink" title="longest-substring-without-repeating-characters"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">longest-substring-without-repeating-characters</a></h5><div class="tabs" id="code3"><ul class="nav-tabs"><li class="tab active"><a href="#code3-1">CODE3 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code3-1"><p><strong>T(n) = S(n) = $O(n)$ 解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_substring_without_repeating_characters</span>(<span class="params">s</span>):</span></span><br><span class="line">    begin = <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    cache = {}</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> cache <span class="keyword">and</span> begin &lt;= cache[c]:</span><br><span class="line">            begin = cache[c] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = <span class="built_in">max</span>(res, i - begin + <span class="number">1</span>)</span><br><span class="line">        cache[c] = i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="实战-5"><a href="#实战-5" class="headerlink" title="实战"></a>实战</h4><h5 id="reverse-integer"><a href="#reverse-integer" class="headerlink" title="reverse-integer"></a><a href="https://leetcode.com/problems/reverse-integer/">reverse-integer</a></h5><div class="tabs" id="code7"><ul class="nav-tabs"><li class="tab active"><a href="#code7-1">CODE7 1</a></li><li class="tab"><a href="#code7-2">CODE7 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code7-1"><p><strong>纯数学的方式</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_integer</span>(<span class="params">x</span>):</span></span><br><span class="line">    sign = (x &gt; <span class="number">0</span>) - (x &lt; <span class="number">0</span>)</span><br><span class="line">    x *= sign</span><br><span class="line">    size = <span class="built_in">len</span>(<span class="built_in">str</span>(x))</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, size + <span class="number">1</span>):</span><br><span class="line">        remaining = x % <span class="number">10</span></span><br><span class="line">        refactor = <span class="number">10</span> ** (size - i)</span><br><span class="line">        res += remaining * refactor</span><br><span class="line">        x //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> res &gt; <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> sign * res</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="code7-2"><p><strong>字符串切片</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_integer</span>(<span class="params">x</span>):</span></span><br><span class="line">    sign = (x &gt; <span class="number">0</span>) - (x &lt; <span class="number">0</span>)</span><br><span class="line">    res = <span class="built_in">int</span>(<span class="built_in">str</span>(x * sign)[::-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> sign * res * (res &lt; <span class="number">2</span> ** <span class="number">31</span>)</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="palindrome-number"><a href="#palindrome-number" class="headerlink" title="palindrome-number"></a><a href="https://leetcode.com/problems/palindrome-number/">palindrome-number</a></h5><div class="tabs" id="code9"><ul class="nav-tabs"><li class="tab"><a href="#code9-1">CODE9 1</a></li><li class="tab active"><a href="#code9-2">CODE9 2</a></li></ul><div class="tab-content"><div class="tab-pane" id="code9-1"><p><strong>纯数学的方式</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome_number</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    h, rev = x, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> h:</span><br><span class="line">        rev = rev * <span class="number">10</span> + h % <span class="number">10</span></span><br><span class="line">        h //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> rev == x</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane active" id="code9-2"><p><strong>字符串反转</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome_number</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">0</span> <span class="keyword">or</span> (x &gt; <span class="number">0</span>) <span class="keyword">and</span> <span class="built_in">int</span>(<span class="built_in">str</span>(x)[::-<span class="number">1</span>]) == x</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="roman-to-integer"><a href="#roman-to-integer" class="headerlink" title="roman-to-integer"></a><a href="https://leetcode.com/problems/roman-to-integer/">roman-to-integer</a></h5><div class="tabs" id="code13"><ul class="nav-tabs"><li class="tab active"><a href="#code13-1">CODE13 1</a></li><li class="tab"><a href="#code13-2">CODE13 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code13-1"><p><strong>纯数学的方式</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">d = {<span class="string">"I"</span>: <span class="number">1</span>, <span class="string">"V"</span>: <span class="number">5</span>, <span class="string">"X"</span>: <span class="number">10</span>, <span class="string">"L"</span>: <span class="number">50</span>, <span class="string">"C"</span>: <span class="number">100</span>, <span class="string">"D"</span>: <span class="number">500</span>, <span class="string">"M"</span>: <span class="number">1000</span>}</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roman_to_integer</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    high = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">reversed</span>(s):</span><br><span class="line">        now = d[c]</span><br><span class="line">        <span class="keyword">if</span> now &lt; high:</span><br><span class="line">            res -= now</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += now</span><br><span class="line">        high = <span class="built_in">max</span>(high, now)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="code13-2"><p><strong>字符串替换</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">d = {<span class="string">"I"</span>: <span class="number">1</span>, <span class="string">"V"</span>: <span class="number">5</span>, <span class="string">"X"</span>: <span class="number">10</span>, <span class="string">"L"</span>: <span class="number">50</span>, <span class="string">"C"</span>: <span class="number">100</span>, <span class="string">"D"</span>: <span class="number">500</span>, <span class="string">"M"</span>: <span class="number">1000</span>}</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roman_to_integer</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    s = s.replace(<span class="string">"IV"</span>, <span class="string">"IIII"</span>).replace(<span class="string">"IX"</span>, <span class="string">"VIIII"</span>)</span><br><span class="line">    s = s.replace(<span class="string">"XL"</span>, <span class="string">"XXXX"</span>).replace(<span class="string">"XC"</span>, <span class="string">"LXXXX"</span>)</span><br><span class="line">    s = s.replace(<span class="string">"CD"</span>, <span class="string">"CCCC"</span>).replace(<span class="string">"CM"</span>, <span class="string">"DCCCC"</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        res += d[c]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h5 id="3sum"><a href="#3sum" class="headerlink" title="3sum"></a><a href="https://leetcode.com/problems/3sum/">3sum</a></h5><div class="tabs" id="code15"><ul class="nav-tabs"><li class="tab active"><a href="#code15-1">CODE15 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code15-1"><p><strong>基于 2sum 的思路</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum3</span>(<span class="params">nums</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    nums.sort()</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums[:-<span class="number">2</span>]):</span><br><span class="line">        <span class="keyword">if</span> k &gt;= <span class="number">1</span> <span class="keyword">and</span> v == nums[k - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cache = {}</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums[k + <span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">                cache[-v - n] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = [v, -v - n, n]</span><br><span class="line">                <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                    res += [tmp]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h2 id="预测算法"><a href="#预测算法" class="headerlink" title="预测算法"></a>预测算法</h2><h3 id="简易平均法"><a href="#简易平均法" class="headerlink" title="简易平均法"></a>简易平均法</h3><h4 id="算术平均值"><a href="#算术平均值" class="headerlink" title="算术平均值"></a>算术平均值</h4><h4 id="加权平均值"><a href="#加权平均值" class="headerlink" title="加权平均值"></a>加权平均值</h4><script type="math/tex; mode=display">\frac{\sum^{n}_{i = 1}w_ix_i}{\sum^{n}_{i = 1}w_i}</script><h3 id="移动平均法"><a href="#移动平均法" class="headerlink" title="移动平均法"></a>移动平均法</h3><h3 id="指数平滑法"><a href="#指数平滑法" class="headerlink" title="指数平滑法"></a>指数平滑法</h3><h4 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://westerly-lzh.github.io/cn/2014/05/Exponential-Smoothing/">指数平滑</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-movavg-aggregation.html#%20_holt_winters">ElasticSearch Holt-Winters</a></li>
<li><a href="https://tech.meituan.com/order-holtwinter.html">外卖订单量预测异常报警模型实践</a></li>
<li><a href="https://blog.csdn.net/u010665216/article/details/78051192">Holt-Winters 模型原理分析及代码实现（python）</a></li>
<li><a href="http://www.cnblogs.com/kemaswill/archive/2013/04/01/2993583.html">时间序列挖掘 - 预测算法 - 三次指数平滑法（Holt-Winters）</a></li>
</ul>
<h3 id="线性回归法"><a href="#线性回归法" class="headerlink" title="线性回归法"></a>线性回归法</h3><h2 id="分类算法"><a href="#分类算法" class="headerlink" title="分类算法"></a>分类算法</h2><h3 id="贝叶斯（Bayes）"><a href="#贝叶斯（Bayes）" class="headerlink" title="贝叶斯（Bayes）"></a><a href="https://zh.wikipedia.org/wiki/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86">贝叶斯（Bayes）</a></h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><script type="math/tex; mode=display">P(B \mid A) = \frac{P(B)\,P(A \mid B)}{P(A)}</script><p>　其中，$P(A \mid B)$ 是在 $B$ 发生的情况下 $A$ 发生的可能性，称为 $A$ 的<a href="https://zh.wikipedia.org/wiki/%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87">后验概率</a>。相应的，$P(B \mid A)$ 则称为 $B$ 后验概率；$P(A)$ 是不考虑任何 $B$ 方面的因素下 $A$ 发生的可能性，称为 $A$ 的<a href="https://zh.wikipedia.org/wiki/%E5%85%88%E9%AA%8C%E6%A6%82%E7%8E%87">先验概率</a>（或<a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A6%82%E7%8E%87">边缘概率</a>）。相应的，$P(B)$ 则称为 $B$ 的先验概率</p>
<h4 id="种类-2"><a href="#种类-2" class="headerlink" title="种类"></a>种类</h4><h5 id="特征独立性"><a href="#特征独立性" class="headerlink" title="特征独立性"></a>特征独立性</h5><p>　按照特征之间<strong>独立性</strong>的强弱，可以分为 <a href="https://zhuanlan.zhihu.com/p/25097242">朴素贝叶斯</a>、半朴素贝叶斯、（一般的）贝叶斯 等</p>
<h5 id="分布情况"><a href="#分布情况" class="headerlink" title="分布情况"></a>分布情况</h5><p>　按照属性和特征的<strong>分布</strong>情况，又可以分为 高斯贝叶斯、多项式贝叶斯、伯努利贝叶斯 等</p>
<h5 id="离散程度"><a href="#离散程度" class="headerlink" title="离散程度"></a>离散程度</h5><p>　按照训练集的<strong>离散</strong>程度，还可以分为 离散型贝叶斯、连续型贝叶斯、混合型贝叶斯 等</p>
<h4 id="编码实战"><a href="#编码实战" class="headerlink" title="编码实战"></a>编码实战</h4><p>　The set <code>A</code> contains 30 <code>a</code> and 10 <code>b</code>, and the set <code>B</code> contains 20 <code>a</code> and 20 <code>b</code>, then what is the value of <code>P(A|a)</code>?</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">situations = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">priori_probability</span>(<span class="params">situation, probability</span>):</span></span><br><span class="line">    situations[situation] = probability  <span class="comment"># P(A), P(B)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">posterior_probability</span>(<span class="params">situation, probability</span>):</span></span><br><span class="line">    old_prob = situations[situation]</span><br><span class="line">    situations[situation] = old_prob * probability  <span class="comment"># P(A)P(a|A), P(B)P(a|B)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> situation <span class="keyword">in</span> situations.values():</span><br><span class="line">        count += situation  <span class="comment"># P(A)P(a|A) + P(B)P(a|B)</span></span><br><span class="line">    <span class="keyword">for</span> situation, probability <span class="keyword">in</span> situations.items():</span><br><span class="line">        <span class="comment"># P(A)P(a|A)/(P(A)P(a|A) + P(B)P(a|B)), P(B)P(a|B)/(P(A)P(a|A) + P(B)P(a|B))</span></span><br><span class="line">        situations[situation] = situations[situation] / count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prob</span>(<span class="params">hypothis</span>):</span></span><br><span class="line">    <span class="keyword">return</span> situations[hypothis]  <span class="comment"># P(A|a), P(B|a)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">priori_probability(<span class="string">'A'</span>, <span class="number">0.5</span>)  <span class="comment"># P(A)=1/2</span></span><br><span class="line">priori_probability(<span class="string">'B'</span>, <span class="number">0.5</span>)  <span class="comment"># P(B)=1/2</span></span><br><span class="line"></span><br><span class="line">posterior_probability(<span class="string">'A'</span>, <span class="number">0.75</span>)  <span class="comment"># P(a|A)=3/4</span></span><br><span class="line">posterior_probability(<span class="string">'B'</span>, <span class="number">0.5</span>)   <span class="comment"># P(a|B)=1/2</span></span><br><span class="line"></span><br><span class="line">normalize()</span><br><span class="line">prob = prob(<span class="string">'A'</span>)  <span class="comment"># P(A|a)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The probability of getting `a` that belongs to set `A`: %s'</span> % prob)</span><br><span class="line"><span class="comment"># P(a|A): 从 A 中获取 a</span></span><br><span class="line"><span class="comment"># P(A|a): 获取 a，并且 a 恰巧是属于 A 的</span></span><br><span class="line"><span class="comment"># 这两个描述的场景完全不同，对应的概率也因而不同</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>　当存在多个特征变量时，表达式可扩展为</p>
<script type="math/tex; mode=display">P(C \mid F_1,\dots,F_n) = \frac{P(C) \, P(F_1,\dots,F_n \mid C)}{P(F_1,\dots,F_n)} = \frac{1}{Z} P(C)\prod_{i=1}^n P(F_i \mid C)</script><p>　其中，$\frac{1}{Z}$ 是一个只与 $F_i$ 相关的缩放因子，且当特征变量的值固定时，$\frac{1}{Z}$ 为常量</p>
<h3 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h3><ul>
<li><a href="https://yuzhouwan.com/posts/42737/">感知机</a>追求最大程度正确划分，最小化错误，但相对容易造成过拟合</li>
<li>支持向量机追求在大致正确分类的同时，最大化 margin，一定程度上避免了过拟合。但是由于 SVM 是借助二次规划来求解支持向量，而求解二次规划将涉及 m 阶矩阵的计算（m 为样本的个数）。所以当 m 的数目很大时，该矩阵的存储将消耗大量的机器资源，且运算的时间成本也会很高</li>
</ul>
<h2 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h2><h3 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>　输入聚类个数 k，以及包含 n 个数据对象的数据库，输出满足方差最小标准 k 个聚类的一种算法</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li>从 n 个数据对象任意选择 k 个对象作为初始聚类中心</li>
<li>根据每个聚类对象的均值（中心对象），计算每个对象与这些中心对象的距离；并根据最小距离重新对相应对象进行划分</li>
<li>重新计算每个（有变化）聚类的均值（中心对象）</li>
<li>计算标准测度函数，当满足一定条件，如函数收敛时，则算法终止；如果条件不满足则回到第二步</li>
</ul>
<h2 id="基数估算"><a href="#基数估算" class="headerlink" title="基数估算"></a>基数估算</h2><h3 id="非概率算法"><a href="#非概率算法" class="headerlink" title="非概率算法"></a>非概率算法</h3><h4 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h4><h4 id="Roaring-Bitmap"><a href="#Roaring-Bitmap" class="headerlink" title="Roaring Bitmap"></a>Roaring Bitmap</h4><h4 id="Bloom-filter"><a href="#Bloom-filter" class="headerlink" title="Bloom filter"></a>Bloom filter</h4><h4 id="双层字典码"><a href="#双层字典码" class="headerlink" title="双层字典码"></a><a href="https://www.infoq.cn/article/2012%2F08%2Fpowerdrill-in-memory-column-stor">双层字典码</a></h4><h3 id="概率算法"><a href="#概率算法" class="headerlink" title="概率算法"></a>概率算法</h3><h4 id="Count-Mean-Min-Sketch"><a href="#Count-Mean-Min-Sketch" class="headerlink" title="Count-Mean-Min Sketch"></a><a href="https://www.cnblogs.com/fxjwind/p/3289221.html">Count-Mean-Min Sketch</a></h4><h4 id="LogLog-Counting"><a href="#LogLog-Counting" class="headerlink" title="LogLog Counting"></a>LogLog Counting</h4><h4 id="Linear-Counting"><a href="#Linear-Counting" class="headerlink" title="Linear Counting"></a>Linear Counting</h4><h4 id="LogLog-Counting-1"><a href="#LogLog-Counting-1" class="headerlink" title="LogLog Counting"></a>LogLog Counting</h4><h4 id="Adaptive-Counting"><a href="#Adaptive-Counting" class="headerlink" title="Adaptive Counting"></a>Adaptive Counting</h4><h4 id="HyperLogLog-Counting"><a href="#HyperLogLog-Counting" class="headerlink" title="HyperLogLog Counting"></a>HyperLogLog Counting</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">m = <span class="number">2</span> ^ b  <span class="comment"># with b in [4...16]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m == <span class="number">16</span>:</span><br><span class="line">    alpha = <span class="number">0.673</span></span><br><span class="line"><span class="keyword">elif</span> m == <span class="number">32</span>:</span><br><span class="line">    alpha = <span class="number">0.697</span></span><br><span class="line"><span class="keyword">elif</span> m == <span class="number">64</span>:</span><br><span class="line">    alpha = <span class="number">0.709</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    alpha = <span class="number">0.7213</span> / (<span class="number">1</span> + <span class="number">1.079</span> / m)</span><br><span class="line"></span><br><span class="line">registers = [<span class="number">0</span>] * m  <span class="comment"># initialize m registers to 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct the HLL structure</span></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> hashed(data):</span><br><span class="line">    register_index = <span class="number">1</span> + get_register_index(h, b)  <span class="comment"># binary address of the rightmost b bits</span></span><br><span class="line">    run_length = run_of_zeros(h, b)  <span class="comment"># length of the run of zeroes starting at bit b+1</span></span><br><span class="line">    registers[register_index] = <span class="built_in">max</span>(registers[register_index], run_length)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Determine the cardinality</span></span><br><span class="line">DV_est = alpha * m ^ <span class="number">2</span> * <span class="number">1</span> / <span class="built_in">sum</span>(<span class="number">2</span> ^ -register)  <span class="comment"># the DV estimate</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DV_est &lt; <span class="number">5</span> / <span class="number">2</span> * m:  <span class="comment"># small range correction</span></span><br><span class="line">    V = count_of_zero_registers(registers)  <span class="comment"># the number of registers equal to zero</span></span><br><span class="line">    <span class="keyword">if</span> V == <span class="number">0</span>:  <span class="comment"># if none of the registers are empty, use the HLL estimate</span></span><br><span class="line">        DV = DV_est</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        DV = m * log(m / V)  <span class="comment"># i.e. balls and bins correction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DV_est &lt;= (<span class="number">1</span> / <span class="number">30</span> * <span class="number">2</span> ^ <span class="number">32</span>):  <span class="comment"># intermediate range, no correction</span></span><br><span class="line">    DV = DV_est</span><br><span class="line"><span class="keyword">if</span> DV_est &gt; (<span class="number">1</span> / <span class="number">30</span> * <span class="number">2</span> ^ <span class="number">32</span>):  <span class="comment"># large range correction</span></span><br><span class="line">    DV = -<span class="number">2</span> ^ <span class="number">32</span> * log(<span class="number">1</span> - DV_est / <span class="number">2</span> ^ <span class="number">32</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog++"></a>HyperLogLog++</h4><h4 id="MinHash"><a href="#MinHash" class="headerlink" title="MinHash"></a>MinHash</h4><h4 id="HyperLogLog-amp-Inclusion-exculsion-principle"><a href="#HyperLogLog-amp-Inclusion-exculsion-principle" class="headerlink" title="HyperLogLog++ &amp; Inclusion-exculsion principle"></a>HyperLogLog++ &amp; Inclusion-exculsion principle</h4><h4 id="HyperLogLog-amp-MinHash"><a href="#HyperLogLog-amp-MinHash" class="headerlink" title="HyperLogLog++ &amp; MinHash"></a>HyperLogLog++ &amp; MinHash</h4><h3 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h3><h4 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h4><ul>
<li><a href="https://juejin.im/entry/59d2e6b46fb9a00a4c27370d">Bitmap 的原理和实现</a></li>
<li><a href="https://blog.csdn.net/yizishou/article/details/78365791">EWAHCompressedBitmap 数据结构及原理</a></li>
<li><a href="https://blog.csdn.net/yizishou/article/details/78342499">Roaring Bitmap 数据结构及原理</a></li>
<li><a href="https://www.pilosa.com/blog/range-encoded-bitmaps/">Using Bitmaps to Perform Range Queries</a></li>
<li><a href="https://colobu.com/2016/07/02/bloom-filter-for-scala/">JVM 上最快的 Bloom filter 实现</a></li>
<li><a href="http://shzhangji.com/cnblogs/2017/08/27/an-introduction-to-stream-lib-the-stream-processing-utilities/">实时计算工具库 stream-lib 使用指南</a></li>
<li><a href="http://blog.codinglabs.org/tag.html#HyperLogLogCounting">解读 Cardinality Estimation 算法</a></li>
<li><a href="http://content.research.neustar.biz/blog/hll.html">Sketch of the Day：HyperLogLog — Cornerstone of a Big Data Infrastructure</a></li>
<li><a href="http://content.research.neustar.biz/blog/runs.html">Sketch of the Day：Probabilistic Counting with Stochastic Averaging（PCSA）</a></li>
<li><a href="https://blog.csdn.net/u011489043/article/details/78727128">分布式缓存 Redis 之 HyperLogLog</a></li>
<li><a href="https://soulmachine.gitbooks.io/system-design/content/cn/bigdata/heavy-hitters.html">Top K 频繁项</a></li>
</ul>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><ul>
<li><a href="https://github.com/lemire/javaewah">A compressed alternative to the Java BitSet class</a></li>
<li><a href="https://github.com/RoaringBitmap/RoaringBitmap">RoaringBitmap：A better compressed bitset in Java</a></li>
<li><a href="https://datasketches.github.io/">Sketches Library from YAHOO</a></li>
<li><a href="https://github.com/addthis/stream-lib">Stream summarizer and cardinality estimator</a></li>
<li><a href="https://github.com/chaoslawful/ccard-lib#experiment">The following estimating results is calculated using bitmap with length of 2^16 (64k) bytes</a></li>
</ul>
<h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><p>　二分查找（<strong>B</strong>inary <strong>S</strong>earch，也称折半搜索、对数搜索），是一种在有序数组中查找某一特定元素的搜索算法</p>
<p><img data-src="/picture/algorithm/algorithm_binary_search.png" alt="Binary Search"></p>
<center>（图片来源：<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95#/media/File:Binary_search_into_array.png" target="_blank">wikipedia.org</a>，已确认无版权）</center>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">T(n) / S(n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">平均</td>
<td style="text-align:center">$O(\log n)$</td>
</tr>
<tr>
<td style="text-align:center">最优</td>
<td style="text-align:center">$O(1)$</td>
</tr>
<tr>
<td style="text-align:center">最坏</td>
<td style="text-align:center">$O(\log n)$</td>
</tr>
<tr>
<td style="text-align:center">最坏</td>
<td style="text-align:center">迭代：$O(1)$；递归：$O(\log n)$（无<a href="https://yuzhouwan.com/posts/27328/#尾递归">尾调用</a>消除）</td>
</tr>
</tbody>
</table>
</div>
<h4 id="实战-6"><a href="#实战-6" class="headerlink" title="实战"></a>实战</h4><h5 id="median-of-two-sorted-arrays"><a href="#median-of-two-sorted-arrays" class="headerlink" title="median-of-two-sorted-arrays"></a><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">median-of-two-sorted-arrays</a></h5><div class="tabs" id="code4"><ul class="nav-tabs"><li class="tab active"><a href="#code4-1">CODE4 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code4-1"><p><strong>Merge Sort 解</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">median_of_two_sorted_arrays</span>(<span class="params">nums1, nums2</span>):</span></span><br><span class="line">    nums = []</span><br><span class="line">    count1 = <span class="number">0</span></span><br><span class="line">    count2 = <span class="number">0</span></span><br><span class="line">    len1 = <span class="built_in">len</span>(nums1)</span><br><span class="line">    len2 = <span class="built_in">len</span>(nums2)</span><br><span class="line">    total_len = len1 + len2</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total_len):</span><br><span class="line">        <span class="keyword">if</span> count1 == len1:</span><br><span class="line">            nums.extend(nums2[count2::])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> count2 == len2:</span><br><span class="line">            nums.extend(nums1[count1::])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n1 = nums1[count1]</span><br><span class="line">        n2 = nums2[count2]</span><br><span class="line">        <span class="keyword">if</span> n1 &gt; n2:</span><br><span class="line">            nums.append(n2)</span><br><span class="line">            count2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums.append(n1)</span><br><span class="line">            count1 += <span class="number">1</span></span><br><span class="line">    middle = total_len // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> total_len % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (nums[middle - <span class="number">1</span>] + nums[middle]) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[middle]</span><br></pre></td></tr></tbody></table></figure></div></div></div>
<h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><h3 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h3><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h3><h4 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://www.zhihu.com/question/30527705">AVL 树，红黑树，B 树，B+ 树，Trie 树都分别应用在哪些现实场景中？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27700617">平衡二叉树、B 树、B+ 树、<code>B*</code> 树，理解其中一种你就都明白了</a></li>
<li><a href="https://blog.csdn.net/z702143700/article/details/49079107">二叉查找树、平衡二叉树、红黑树、B- / B+ 树 性能对比</a></li>
</ul>
<h3 id="SnapTreeMap"><a href="#SnapTreeMap" class="headerlink" title="SnapTreeMap"></a>SnapTreeMap</h3><h4 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://github.com/nbronson">nbronson</a> / <strong>snaptree</strong></li>
<li><a href="https://github.com/apache/druid/pull/6719">use SnapTreeMap instead of ConcurrentSkipListMap #6719</a></li>
<li><a href="https://www.datastax.com/dev/blog/cassandra-2-1-now-over-50-faster">Cassandra 2.1: now over 50% faster</a></li>
</ul>
<h3 id="LSM-tree"><a href="#LSM-tree" class="headerlink" title="LSM tree"></a>LSM tree</h3><h4 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://blog.csdn.net/Yaokai_AssultMaster/article/details/72877127">深入理解 HBase 的系统架构</a></li>
<li><a href="http://www.infoq.com/cn/articles/hbase-casestudy-facebook-messages">HBase 优化案例分析：Facebook Messages 系统问题与解决方案</a></li>
<li><a href="https://www.kancloud.cn/taobaomysql/monthly/67115">TokuDB 数据结构 Fractal-Trees 与 LSM-Trees 对比</a></li>
<li><a href="https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf">WiscKey: Separating Keys from Values in SSD-conscious Storage</a></li>
<li><a href="http://kernelmaker.github.io/Btree_LSM_FTI">B+ Tree、LSM、Fractal tree index 读写放大分析</a></li>
</ul>
<h3 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h3><h4 id="Tire-Tree-Double-Array-Aho-Corasick"><a href="#Tire-Tree-Double-Array-Aho-Corasick" class="headerlink" title="Tire Tree + Double Array + Aho-Corasick"></a>Tire Tree + Double Array + Aho-Corasick</h4><h5 id="参考-9"><a href="#参考-9" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://www.hankcs.com/program/java/tire-tree-participle.html">Trie 树分词</a></li>
<li><a href="http://www.hankcs.com/program/java/%e5%8f%8c%e6%95%b0%e7%bb%84trie%e6%a0%91doublearraytriejava%e5%ae%9e%e7%8e%b0.html">双数组 Trie 树（DoubleArrayTrie）Java 实现</a></li>
<li><a href="http://www.hankcs.com/program/algorithm/implementation-and-analysis-of-aho-corasick-algorithm-in-java.html">Aho-Corasick 算法的 Java 实现与分析</a></li>
<li><a href="http://www.hankcs.com/program/algorithm/aho-corasick-double-array-trie.html">Aho-Corasick 自动机结合 DoubleArrayTrie 极速多模式匹配</a></li>
</ul>
<h4 id="Patricia-Tree"><a href="#Patricia-Tree" class="headerlink" title="Patricia Tree"></a>Patricia Tree</h4><h4 id="SlimTire"><a href="#SlimTire" class="headerlink" title="SlimTire"></a>SlimTire</h4><h5 id="参考-10"><a href="#参考-10" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://openacid.github.io/">SlimTrie: 单机百亿文件的极致索引</a></li>
<li><a href="https://github.com/openacid">openacid</a> / <strong><a href="https://github.com/openacid/slim">slim</a></strong></li>
<li>wikipedia: <a href="https://zh.wikipedia.org/wiki/User:Drmingdrmer/%E6%B2%99%E7%9B%92">SlimTrie</a></li>
</ul>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="图计算"><a href="#图计算" class="headerlink" title="图计算"></a>图计算</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>　<strong>图计算</strong>是以<strong>图论</strong>为基础的对现实世界的一种<strong>图</strong>结构的抽象表达，以及在这种数据结构上的计算模式。通常，在图计算中，基本的数据结构表达就是：</p>
<p>　$G = (V, E, D)$，其中，V = vertex（顶点或者节点），E = edge（边），D = data（权重）</p>
<p>　比如说：对于一个消费者的原始购买行为，有两类节点：用户和产品，边就是购买行为，权重是边上的一个数据结构，可以是购买次数和最后购买时间。对于许多我们面临的物理世界的数据问题，都可以利用图结构的来抽象表达：比如社交网络，网页链接关系，用户传播网络，用户网络点击、浏览和购买行为，甚至消费者评论内容，内容分类标签，产品分类标签等等</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><h3 id="GPG"><a href="#GPG" class="headerlink" title="GPG"></a>GPG</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ brew install gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">$ <span class="built_in">export</span> GPG_TTY=$(tty)</span><br><span class="line">$ gpg --gen-key</span><br><span class="line">$ gpg --list-keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">$ git config --global user.signingkey xxx</span><br></pre></td></tr></tbody></table></figure>
<h2 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h2><h3 id="ZSTD"><a href="#ZSTD" class="headerlink" title="ZSTD"></a>ZSTD</h3><h4 id="参考-11"><a href="#参考-11" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://facebook.github.io/zstd/">Zstandard is a real-time compression algorithm, providing high compression ratios</a></li>
</ul>
<h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><h3 id="参考-12"><a href="#参考-12" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.65.7300&amp;rep=rep1&amp;type=pdf">A Genetic Selection Algorithm for OLAP Data Cubes</a></li>
<li><a href="https://arxiv.org/abs/1602.04613">Towards reducing the multidimensionality of OLAP cubes using the Evolutionary Algorithms and Factor Analysis Methods</a></li>
</ul>
<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>　详见，我的另一篇博客《<a href="https://yuzhouwan.com/posts/42737/">人工智能</a>》</p>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><div class="table-container">
<table>
<thead>
<tr>
<th>序号</th>
<th>标题</th>
<th>分类</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://leetcode.com/problems/two-sum/">1</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#two-sum">Two Sum</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Hash">Hash</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/add-two-numbers/">2</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#add-two-numbers">Add Two Numbers</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Linked-List">Linked List</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">3</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#longest-substring-without-repeating-characters">Longest Substring Without Repeating Characters</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Sliding-Window">Sliding Window</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">4</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#median-of-two-sorted-arrays">Median of Two Sorted Arrays</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Binary-Search">Binary Search</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/longest-palindromic-substring/">5</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#longest-palindromic-substring">Longest Palindromic Substring</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Dynamic-Programming">Dynamic Programming</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/zigzag-conversion/">6</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#zigzag-conversion">ZigZag Conversion</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/reverse-integer/">7</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#reverse-integer">Reverse Integer</a></td>
<td><a href="https://yuzhouwan.com/posts/4534/">Math</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/string-to-integer-atoi/">8</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#string-to-integer-atoi">String to Integer (atoi)</a></td>
<td><a href="https://yuzhouwan.com/posts/4534/">Math</a> &amp; <a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/palindrome-number/">9</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#palindrome-number">Palindrome Number</a></td>
<td><a href="https://yuzhouwan.com/posts/4534/">Math</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/regular-expression-matching/">10</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#regular-expression-matching">Regular Expression Matching</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a> &amp; <a href="https://yuzhouwan.com/posts/666/#Dynamic-Programming">Dynamic Programming</a> &amp; Backtracking</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/container-with-most-water/">11</a></td>
<td>Container With Most Water</td>
<td>Array &amp; Two Pointers</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/integer-to-roman/">12</a></td>
<td>Integer to Roman</td>
<td><a href="https://yuzhouwan.com/posts/4534/">Math</a> &amp; <a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/roman-to-integer/">13</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#roman-to-integer">Roman to Integer</a></td>
<td><a href="https://yuzhouwan.com/posts/4534/">Math</a> &amp; <a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/longest-common-prefix/">14</a></td>
<td>Longest Common Prefix</td>
<td><a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/3sum/">15</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#3sum">3Sum</a></td>
<td>Array &amp; Two Pointers</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/3sum-closest/">16</a></td>
<td>3Sum Closest</td>
<td>Array &amp; Two Pointers</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">17</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#letter-combinations-of-a-phone-number">Letter Combinations of a Phone Number</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a> &amp; Backtracking</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/4sum">18</a></td>
<td>4Sum</td>
<td>Array &amp; <a href="https://yuzhouwan.com/posts/666/#Hash">Hash Table</a> &amp; Two Pointers</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">19</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#remove-nth-node-from-end-of-list">Remove Nth Node From End of List</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Linked-List">Linked List</a> &amp; Two Pointers</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/valid-parentheses/">20</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#valid-parentheses">Valid Parentheses</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a> &amp; Stack</td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#merge-two-sorted-lists">Merge Two Sorted Lists</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#Linked-List">Linked List</a></td>
</tr>
<tr>
<td><a href="https://leetcode.com/problems/generate-parentheses/">22</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#generate-parentheses">Generate Parentheses</a></td>
<td><a href="https://yuzhouwan.com/posts/666/#String-Matching">String</a> &amp; <a href="https://yuzhouwan.com/posts/666/#Dynamic-Programming">Dynamic Programming</a> &amp; Backtracking</td>
</tr>
</tbody>
</table>
</div>
<p>Tips: 出于文章篇幅的考虑，更多题解详见：<a href="https://github.com/asdf2014/algorithm/tree/master/Codes/asdf2014">https://github.com/asdf2014/algorithm/tree/master/Codes/asdf2014</a></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Blog-1"><a href="#Blog-1" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="http://codecapsule.com/2012/01/18/how-to-implement-a-paper/">How to implement an algorithm from a scientific paper</a></li>
<li><a href="https://visualgo.net/zh">Visualgo：数据结构和算法动态可视化</a></li>
</ul>
<h3 id="Book-1"><a href="#Book-1" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Algorithms and Data Structures using Python</a></li>
<li><a href="https://www.amazon.com/Structures-Algorithms-Undergraduate-Computer-Science/dp/3319130714">Data Structures and Algorithms with Python</a></li>
<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/812656217X">Data Structures and Algorithms in Python</a></li>
<li><a href="https://github.com/tianyicui/pack">背包九讲</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="https://paperswithcode.com/sota">Paper with Code</a></li>
</ul>
<h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/MisterBooo/LeetCodeAnimation">用动画的形式呈现解 LeetCode 题目的思路</a></li>
</ul>
<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul>
<li><a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">在 IDEA 编辑器中安装 LeetCode 刷题插件</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Algorithm</tag>
        <tag>Git</tag>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Eagle 深度调研</title>
    <url>/posts/39683/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>　<a href="https://yuzhouwan.com/posts/39683/">Apache Eagle</a> 是一个<code>高度可扩展</code>的监控警报平台，采用了<code>设计灵活</code>的应用框架和<code>经过实践考验</code>的大数据技术，如 <a href="https://yuzhouwan.com/posts/26002/">Kafka</a>，<a href="https://yuzhouwan.com/posts/4735/">Spark</a> 和 <a href="https://yuzhouwan.com/posts/13977/">Storm</a>。它提供了丰富的大数据平台监控程序，例如 <a href="https://yuzhouwan.com/posts/60504/">HDFS</a> / <a href="https://yuzhouwan.com/posts/45888/">HBase</a> / YARN 服务<code>运行状况检查</code>，<code>JMX 指标</code>，<code>守护进程日志</code>，<code>审核日志</code> 和 <code>Yarn</code> 应用程序。外部 Eagle 开发人员可以<code>自定义应用</code>来监视其 NoSQL 数据库或 Web 服务器，可以自己决定是否共享到 <code>Eagle 应用程序存储库</code>。它还提供最先进的<code>警报引擎</code>来报告<code>安全漏洞</code>，<code>服务故障</code>和<code>应用程序异常</code>，由警报策略定义<code>高度可定制</code>。</p>
<h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>　管理一组<code>应用程序</code>实例，用来区别某些被多次安装的应用程序</p>
<h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>　应用程序（或监控应用程序）是 Apache Eagle 中的一级公民，它代表<code>端到端</code>的<code>监控</code> / <code>警报</code>解决方案，通常包含<code>监控源</code>入站，源的 <code>schema</code>规范，<code>警报策略</code>和 <code>仪表板定义</code></p>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>　Stream 是 Alert Engine 的输入，每个<code>应用程序</code>应该有自己的由开发人员定义的流。通常，流定义里面包含了一个类似 <code>POJO</code> 的结构。一旦定义完成，<code>应用程序</code>就有了将数据写入<code>Kafka</code> 的逻辑</p>
<span id="more"></span>
<h3 id="Data-Activity-Monitoring"><a href="#Data-Activity-Monitoring" class="headerlink" title="Data Activity Monitoring"></a>Data Activity Monitoring</h3><p>　内置监控应用程序，用于监控 <code>HDFS</code> / <code>HBase</code> / <code>Hive</code> 操作，并允许用户定义某些策略来实时检测<code>敏感数据访问</code>和<code>恶意数据操作</code></p>
<h3 id="Alert-Engine"><a href="#Alert-Engine" class="headerlink" title="Alert Engine"></a>Alert Engine</h3><p>　被所有其他<code>监控应用程序</code>所共享的特定<code>内置</code>应用程序，它从 Kafka 读取数据，并通过<code>实时应用策略</code>来处理数据，并<code>生成报警通知</code></p>
<h3 id="Policy"><a href="#Policy" class="headerlink" title="Policy"></a>Policy</h3><p>　Alert Engine 使用<code>规则</code>来匹配 Kafka 的数据输入（策略以 <a href="https://github.com/wso2/siddhi">SiddhiQL</a> 格式定义）</p>
<h3 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h3><p>　如果输入到 <code>Alert Engine</code> 的任何数据符合该策略，则 Alert Engine 将生成一条消息并通过<code>警报发布者（Alert Publisher）</code>进行发布。这些消息我们称之为警报</p>
<h3 id="Alert-Publisher"><a href="#Alert-Publisher" class="headerlink" title="Alert Publisher"></a>Alert Publisher</h3><p>　它会将<code>警报</code>发布到可以是 <code>SMTP 通道</code>、<code>Kafka 通道</code>、<code>Slack 通道</code>或 其他<code>存储系统的外部通道</code></p>
<h2 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h2><h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><p><img data-src="/picture/eagle/apache_eagle_eagle_overview.png" alt=""></p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a><a href="https://eagle.apache.org/docs/latest/underlying-design/">架构</a></h3><p><img data-src="/picture/eagle/apache_eagle_architecture.png" alt=""></p>
<h3 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h3><p><img data-src="/picture/eagle/apache_eagle_alert_engine.png" alt=""></p>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p><img data-src="/picture/eagle/apache_eagle_storage_engine.png" alt=""></p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="数据流接入和存储"><a href="#数据流接入和存储" class="headerlink" title="数据流接入和存储"></a>数据流接入和存储</h3><h4 id="Metrics-存储"><a href="#Metrics-存储" class="headerlink" title="Metrics 存储"></a>Metrics 存储</h4><ul>
<li>Eagle 为 HBase / RDMBS 提供了轻量级的 <code>ORM 框架</code>，支持使用 Java 注释便于定义<code>持久化数据模型</code></li>
<li>Eagle 在 NoSQL Model 上提供类似 SQL 的 REST 查询语言（List / Aggregation / Bucket / Rowkey / Rowkey  Query、Pagination、Sorting、Union、Join）</li>
<li>针对<code>时间序列数据</code>优化的 <a href="https://eagle.apache.org/docs/latest/underlying-design/#hbase-rowkey-design">Rowkey 设计</a>，针对<code>度量</code>/<code>实体</code>/<code>日志</code>等进行了优化，不同的存储类型</li>
</ul>
<h3 id="数据实时处理"><a href="#数据实时处理" class="headerlink" title="数据实时处理"></a>数据实时处理</h3><h4 id="流处理-API"><a href="#流处理-API" class="headerlink" title="流处理 API"></a>流处理 API</h4><p>　Eagle Alert Engine 是基于开源实时流处理框架的，如 Apache Storm 作为默认执行引擎，Apache Kafka 作为默认的<code>消息总线（Messaging Bus）</code></p>
<h4 id="告警框架"><a href="#告警框架" class="headerlink" title="告警框架"></a>告警框架</h4><ul>
<li>可伸缩的 Eagle 策略执行框架</li>
</ul>
<p>　　机器学习模块</p>
<ul>
<li>用户 Profile 离线训练以及异常监测架构</li>
</ul>
<p>　　核密度估计算法（Kernel Density Estimation）</p>
<ul>
<li>单一维度上用户行为直方图</li>
</ul>
<p>　　特征值分解算法（Eigen-Value Decomposition）</p>
<ul>
<li>展示重要的用户行为模式成分</li>
</ul>
<h3 id="Eagle-服务"><a href="#Eagle-服务" class="headerlink" title="Eagle 服务"></a>Eagle 服务</h3><h4 id="策略管理器"><a href="#策略管理器" class="headerlink" title="策略管理器"></a>策略管理器</h4><p>　Eagle 策略管理器 提供<code>交互友好的用户界面</code>和 <a href="https://eagle.apache.org/docs/latest/reference/#rest-apis">REST API</a> 供用户轻松地定义和管理策略<br>　Eagle 的用户界面 使得<code>策略的管理</code>、<code>敏感元数据的标识和导入</code>、<code>HDFS 或 Hive 的资源浏览</code>以及<code>预警仪表</code>等功能<br>　Eagle 策略引擎 默认支持 <code>WSO2 的 Siddhi CEP 引擎</code>和 <code>机器学习引擎</code>，以下是几个基于 <code>Siddi CEP</code> 的策略示例</p>
<h4 id="查询服务"><a href="#查询服务" class="headerlink" title="查询服务"></a>查询服务</h4><h5 id="单一事件执行策略（用户访问-Hive-中的敏感数据列）"><a href="#单一事件执行策略（用户访问-Hive-中的敏感数据列）" class="headerlink" title="单一事件执行策略（用户访问 Hive 中的敏感数据列）"></a>单一事件执行策略（用户访问 Hive 中的敏感数据列）</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hiveAccessLogStream[sensitivityType<span class="operator">=</span><span class="operator">=</span><span class="string">'PHONE_NUMBER'</span>] <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">insert</span> <span class="keyword">into</span> outputStream;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="基于窗口的策略（用户在-10-分钟内访问目录-tmp-private-多于-inverted-5-次）"><a href="#基于窗口的策略（用户在-10-分钟内访问目录-tmp-private-多于-inverted-5-次）" class="headerlink" title="基于窗口的策略（用户在 10 分钟内访问目录 /tmp/private 多于 inverted 5 次）"></a>基于窗口的策略（用户在 10 分钟内访问目录 /tmp/private 多于 inverted 5 次）</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">hdfsAuditLogEventStream[(src <span class="operator">=</span><span class="operator">=</span> <span class="string">'/tmp/private'</span>)]#window.externalTime(<span class="type">timestamp</span>,<span class="number">10</span> min) <span class="keyword">select</span> <span class="keyword">user</span>, <span class="built_in">count</span>(<span class="type">timestamp</span>) <span class="keyword">as</span> aggValue <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">user</span> <span class="keyword">having</span> aggValue <span class="operator">&gt;=</span> <span class="number">5</span> <span class="keyword">insert</span> <span class="keyword">into</span> outputStream;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><h3 id="数据活动监控"><a href="#数据活动监控" class="headerlink" title="数据活动监控"></a>数据活动监控</h3><p>　分析数据活动和提醒不安全访问是保护企业数据的基本要求。随着 Hadoop、Hive、Spark 技术的数据量<code>呈指数级增长</code>，了解<code>每个用户的数据活动</code>变得非常困难，更不用说每天在 <code>PB 级的数据流</code>中，<code>实时</code>地警告单个恶意事件<br>　保护企业数据从了解每个用户的数据活动开始。 Apache Eagle 已与许多流行的大数据平台集成，例如 Hadoop、Hive、Spark、Cassandra 等。Eagle 用户可以浏览<code>数据层次结构</code>，标记<code>敏感数据</code>，然后制定<code>全面的策略</code>，告警不安全的数据访问</p>
<h3 id="任务性能分析"><a href="#任务性能分析" class="headerlink" title="任务性能分析"></a>任务性能分析</h3><p>　运行 <code>MapReduce</code> 任务是人们用来分析 Hadoop 系统中数据的最流行的方式。分析<code>任务的性能</code>和<code>提供调优建议</code>对于 <code>Hadoop 系统稳定性</code>、<code>作业 SLA</code> 和 <code>资源使用情况</code>至关重要<br>　Eagle 通过两种方法来分析 <code>Job 的性能</code>。 首先，Eagle 定期用 <code>Yarn API</code> 为所有正在运行的作业<code>拍摄快照</code>；其次，Eagle 在作业完成后立即读取<code>作业生命周期事件</code>。通过这两种方法，Eagle 可以分析<code>单个 Job 的趋势</code>，<code>数据倾斜问题</code>，<code>失败原因</code>等。更进一步地，Eagle 可以通过考虑所有工作来分析整个 Hadoop 集群的性能</p>
<h3 id="集群性能分析"><a href="#集群性能分析" class="headerlink" title="集群性能分析"></a>集群性能分析</h3><p>　了解<code>为什么集群性能会下降</code>是至关重要的。那是因为最近一些<code>不正常的工作</code>被提交，还是存在大量的小文件，还是 <code>NameNode</code> 的性能降级了？<br>　Eagle 实时计算单个作业中每分钟的资源使用量，例如 CPU、内存、HDFS IO 字节、HDFS IO numOps 等，还可以收集 NameNode JMX 指标。将它们相关在一起，将有效地帮助系统管理员，找到集群缓慢的根本原因</p>
<h3 id="Ebay（2015）"><a href="#Ebay（2015）" class="headerlink" title="Ebay（2015）"></a>Ebay（2015）</h3><ul>
<li>Eagle 的数据行为监控系统已经部署到一个拥有 10000 多个节点的 Hadoop 集群之上，用以保护数百 PB 数据的安全</li>
<li>已针对 HDFS、Hive 等集群中的数据<code>内置了一些基础的安全策略</code>，并将不断引入更多的策略，以确保重要数据的绝对安全</li>
<li>Eagle 的策略涵盖多种模式，包括从访问模式、频繁访问数据集，预定义查询类型、Hive 表和列、HBase 表，以及基于机器学习模型生成的<code>用户 Profile</code> 相关的所有策略等</li>
<li>有广泛的策略来防止<code>数据的丢失</code>、数据被<code>拷贝到不安全地点</code>、<code>敏感数据被未授权区域访问</code>等</li>
<li>Eagle 策略定义上极大的<code>灵活性</code>和<code>扩展性</code>，使得未来可以轻易地继续扩展更多更复杂的策略，以支持更多<code>多元化</code>的用例场景</li>
</ul>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="高拓展性"><a href="#高拓展性" class="headerlink" title="高拓展性"></a>高拓展性</h4><p>　Apache Eagle 围绕 <code>application</code> 概念构建了其核心框架，<code>application</code> 本身包括用于<code>监视源数据收集</code>，<code>预处理</code>和<code>归一化</code>的逻辑。开发人员可以使用 Eagle 的应用程序框架轻松开发自己的<code>开箱（out-of-box）</code>监控应用程序，并部署到 Eagle 中</p>
<h4 id="可伸缩"><a href="#可伸缩" class="headerlink" title="可伸缩"></a>可伸缩</h4><p>　Eagle 核心团队选择了<code>经过考验的大数据技术</code>来构建其基本运行时，并应用可扩展内核，根据<code>数据流的吞吐量</code>以及<code>受监控应用程序的数量</code>进行自适应</p>
<h4 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h4><p>　基于 <code>Storm</code> 或 <code>Spark Streaming</code> 的计算引擎使我们能够将<code>策略</code>应用于<code>数据流</code>，并实时生成警报。确保能在<code>亚秒级别</code>的时间内产生告警，一旦综合多种因素确定为危险操作，立即采取措施进行阻止</p>
<h4 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h4><p>　用户可以自由<code>启用</code>或<code>禁用</code>监控应用程序，而无需重新启动服务。还可以动态<code>添加</code>/<code>删除</code>/<code>更改</code>其警报策略，而不会对底层运行时造成任何影响</p>
<h4 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h4><p>　用户可以通过选择相应的<code>监控应用程序</code>并为服务配置<code>少量</code>参数，在几分钟内实现对服务的监控</p>
<h4 id="无侵入性"><a href="#无侵入性" class="headerlink" title="无侵入性"></a>无侵入性</h4><p>　Apache Eagle 使用<code>开箱即用（out-of-box）</code>的应用程序来监控服务，不需要对现有服务进行任何更改</p>
<h4 id="用户Profile"><a href="#用户Profile" class="headerlink" title="用户Profile"></a>用户Profile</h4><p>　Eagle 内置提供基于<code>机器学习算法</code>，对监控平台中的用户行为习惯建立<code>用户 Profile</code>，实现实时地用户行为告警</p>
<h4 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h4><p>　Apache Eagle 一直都是根据开源的标准来进行开发的</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><h4 id="目前流行度较差"><a href="#目前流行度较差" class="headerlink" title="目前流行度较差"></a>目前流行度较差</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Watch</th>
<th>Star</th>
<th>Fork</th>
<th>Commit</th>
<th>Contributors</th>
<th>Current Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>53</td>
<td>291</td>
<td>158</td>
<td>1047</td>
<td>27</td>
<td>2018-6-1</td>
</tr>
</tbody>
</table>
</div>
<h4 id="稳定性略不足"><a href="#稳定性略不足" class="headerlink" title="稳定性略不足"></a>稳定性略不足</h4><p>　最新 release 版本为 <code>eagle-0.5.0</code>，刚从 <code>0.4.0-incubating</code> 版本中孵化出来</p>
<p>　单元测试覆盖率过低：<strong>39%</strong></p>
<p>　另外，CI 系统方面，目前只有 <code>Jenkins</code> 在用，而 <code>Travis</code> 并未真实在用，在 fork 的私有分支下开启后，发现每次 build 过程需要一小时之久</p>
<h4 id="代码质量相对较差"><a href="#代码质量相对较差" class="headerlink" title="代码质量相对较差"></a>代码质量相对较差</h4><p>　由于 <code>check-in</code> 系统的不完善，没有对 代码质量、代码风格、测试覆盖率 等方面进行考量（Apache Eagle 暂定在 <a href="https://cwiki.apache.org/confluence/display/EAG/Eagle+Version+0.5.0">v0.5.0</a> 之后进行完善）</p>
<h2 id="对-HBase-的支持度"><a href="#对-HBase-的支持度" class="headerlink" title="对 HBase 的支持度"></a>对 HBase 的支持度</h2><h3 id="比对表"><a href="#比对表" class="headerlink" title="比对表"></a>比对表</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0.4.0</td>
<td>只支持 用户行为分析</td>
</tr>
<tr>
<td><a href="https://cwiki.apache.org/confluence/display/EAG/Eagle+Version+0.5.0">v0.5.0</a></td>
<td>开始支持 JMX（Metric 不支持）、Add HBase master metric dashboard、Add HBase RegionServer metric dashboard、Integrate hbase metric to basic panel 等功能</td>
</tr>
</tbody>
</table>
</div>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://issues.apache.org/jira/browse/EAGLE-866">Refactor HBase JMX Metric with appropriate navigation path</a></li>
<li><a href="https://issues.apache.org/jira/browse/EAGLE-845">HBase JMX Monitoring Dashboard</a></li>
<li><a href="https://issues.apache.org/jira/browse/EAGLE-651">HBase JMX Metric Monitoring Application</a></li>
</ul>
<h2 id="Eagle-环境搭建"><a href="#Eagle-环境搭建" class="headerlink" title="Eagle 环境搭建"></a>Eagle 环境搭建</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="流式平台依赖"><a href="#流式平台依赖" class="headerlink" title="流式平台依赖"></a>流式平台依赖</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Version</th>
<th style="text-align:center">Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>Storm</td>
<td>0.9.3 or later</td>
<td style="text-align:center">0.9.7</td>
</tr>
<tr>
<td>Kafka</td>
<td>0.8.x or later</td>
<td style="text-align:center">kafka_2.11-0.10.1.1</td>
</tr>
<tr>
<td>Java</td>
<td>1.7.x</td>
<td style="text-align:center">jdk-1.7.0_80（v0.4 不支持 JDK1.8）</td>
</tr>
<tr>
<td>NPM</td>
<td>3.x</td>
<td style="text-align:center">3.10.10（On MAC OS try <code>brew install node</code>）</td>
</tr>
<tr>
<td>LogStash</td>
<td>2.3.4</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Maven</td>
<td>3.3.9</td>
</tr>
</tbody>
</table>
</div>
<h4 id="数据库依赖（Choose-one-of-them）"><a href="#数据库依赖（Choose-one-of-them）" class="headerlink" title="数据库依赖（Choose one of them）"></a>数据库依赖（Choose one of them）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Version</th>
<th style="text-align:center">Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>HBase</td>
<td>0.98 or later</td>
<td style="text-align:center">2.7.3 （Hadoop 2.6.x is required）</td>
</tr>
<tr>
<td>MySQL</td>
<td></td>
<td style="text-align:center">5.5.18（Eagle v0.4 建议使用 MySQL）</td>
</tr>
<tr>
<td>Derby</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h4 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Version</th>
<th style="text-align:center">Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hortonworks Sandbox</td>
<td>2.2.4</td>
</tr>
</tbody>
</table>
</div>
<h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h5 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加用户，并赋予其密码</span></span><br><span class="line">$ adduser eagle</span><br><span class="line">$ passwd eagle            <span class="comment"># ur password for eagle user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予用户可以 sudo 的权限</span></span><br><span class="line">$ chmod u+w /etc/sudoers</span><br><span class="line">$ vim /etc/sudoers</span><br><span class="line">  <span class="comment"># 找到 `root ALL=(ALL) ALL` 这行，并在下面添加 eagle 用户</span></span><br><span class="line">  eagle    ALL=(ALL)    ALL</span><br><span class="line">$ chmod u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 eagle 用户</span></span><br><span class="line">$ su - eagle</span><br></pre></td></tr></tbody></table></figure>
<h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/eagle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放软件目录 &amp; 安装目录 &amp; 日志目录</span></span><br><span class="line">$ mkdir install &amp;&amp; mkdir software &amp;&amp; mkdir logs</span><br></pre></td></tr></tbody></table></figure>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p>Download from <a href="http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm">jdk-7u80-linux-x64.rpm</a><br>（现在需要注册登录 Oracle 账户才可下载）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ chmod +x install/jdk-7u80-linux-x64.rpm</span><br><span class="line">$ sudo rpm -ivh install/jdk-7u80-linux-x64.rpm</span><br><span class="line">$ java -version</span><br><span class="line">  java version <span class="string">"1.7.0_80"</span></span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.7.0_80-b15)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">which</span> java</span><br><span class="line">  /usr/bin/java</span><br><span class="line"></span><br><span class="line">$ ln -s /usr/java/jdk1.7.0_80 software/jdk1.7.0_80</span><br><span class="line">$ ln -s /home/eagle/software/jdk1.7.0_80 software/java</span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line">  <span class="comment"># User specific environment and startup programs</span></span><br><span class="line">  JAVA_HOME=/home/eagle/software/java</span><br><span class="line">  CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">  PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME CLASSPATH PATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure>
<p>　如果需要清除之前的低版本 JDK，或者重装，可以参照（没有这个需求，可跳过）<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ rpm -qa | grep -E <span class="string">'jdk|java'</span></span><br><span class="line">  jdk-1.7.0_80-fcs.x86_64</span><br><span class="line"></span><br><span class="line">$ sudo rpm -e --nodeps jdk-1.7.0_80-fcs.x86_64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h5><h6 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ssh</span></span><br><span class="line">$ sudo yum install openssh-clients openssh-server -y</span><br><span class="line">$ ssh localhost</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh/</span><br><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">$ chmod 600 ./authorized_keys</span><br></pre></td></tr></tbody></table></figure>
<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/eagle/install/</span><br><span class="line">$ wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz</span><br><span class="line">$ wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz.mds</span><br><span class="line">$ head -n 6 hadoop-2.7.3.tar.gz.mds</span><br><span class="line">  hadoop-2.7.3.tar.gz:    MD5 = 34 55 BB 57 E4 B4 90 6B  BE A6 7B 58 CC A7 8F A8</span><br><span class="line">  hadoop-2.7.3.tar.gz:   SHA1 = B84B 8989 3426 9C68 753E  4E03 6D21 395E 5A4A B5B1</span><br><span class="line">  hadoop-2.7.3.tar.gz: RMD160 = 8FE4 A91E 8C67 2A33 C4E9  61FB 607A DBBD 1AE5 E03A</span><br><span class="line">  hadoop-2.7.3.tar.gz: SHA224 = 23AB1EAB B7648921 7101671C DCF9D774 7B84AD50</span><br><span class="line">                                6A74E300 AE6617FA</span><br><span class="line">  hadoop-2.7.3.tar.gz: SHA256 = D489DF38 08244B90 6EB38F4D 081BA49E 50C4603D</span><br><span class="line">$ md5sum hadoop-2.7.3.tar.gz | tr <span class="string">"a-z"</span> <span class="string">"A-Z"</span></span><br><span class="line">  3455BB57E4B4906BBEA67B58CCA78FA8  HADOOP-2.7.3.TAR.GZ</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 MD5 码一致后进行解压安装</span></span><br><span class="line">$ tar zxvf hadoop-2.7.3.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/</span><br><span class="line">$ ln -s hadoop-2.7.3/ hadoop</span><br><span class="line">$ <span class="built_in">cd</span> hadoop/</span><br><span class="line">$ bin/hadoop version</span><br><span class="line">  Hadoop 2.7.3</span><br><span class="line"><span class="comment"># Trouble Shooting</span></span><br><span class="line">$ mkdir -p ~/input</span><br><span class="line">$ rm -r ~/output</span><br><span class="line">$ cp etc/hadoop/*.xml ~/input</span><br><span class="line">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar grep ~/input ~/output <span class="string">'dfs[a-z.]+'</span></span><br><span class="line">$ cat  ~/output/*</span><br><span class="line">  1	dfsadmin</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="comment"># .bashrc</span></span><br><span class="line">  <span class="comment"># Source global definitions</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">          . /etc/bashrc</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="comment"># User specific aliases and functions</span></span><br><span class="line">  <span class="comment"># Hadoop Environment Variables</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_HOME=~/software/hadoop</span><br><span class="line">  <span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=~/software/java</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 也可以通过 vim ~/software/hadoop/etc/hadoop/hadoop-env.sh 进行配置</span></span><br><span class="line"></span><br><span class="line">$ mkdir -p ~/data/hadoop/tmp</span><br><span class="line">$ vim ~/software/hadoop/etc/hadoop/core-site.xml</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;file:/home/eagle/data/hadoop/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">$ vim ~/software/hadoop/etc/hadoop/hdfs-site.xml</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;file:/home/eagle/data/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;file:/home/eagle/data/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启审计日志</span></span><br><span class="line">$ vim ~/software/hadoop/etc/hadoop/hadoop-env.sh</span><br><span class="line">  <span class="comment"># export HADOOP_NAMENODE_OPTS="-Dhadoop.security.logger=${HADOOP_SECURITY_LOGGER:-INFO,RFAS} -Dhdfs.audit.logger=${HDFS_AUDIT_LOGGER:-INFO,NullAppender} $HADOOP_NAMENODE_OPTS"</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_NAMENODE_OPTS=<span class="string">"-Dhadoop.security.logger=<span class="variable">${HADOOP_SECURITY_LOGGER:-INFO,RFAS}</span> -Dhdfs.audit.logger=<span class="variable">${HDFS_AUDIT_LOGGER:-INFO,RFAAUDIT}</span> <span class="variable">$HADOOP_NAMENODE_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line">$ mkdir -p /home/eagle/logs/hadoop-hdfs/</span><br><span class="line">$ vim ~/software/hadoop/etc/hadoop/log4j.properties</span><br><span class="line">  <span class="comment"># log4j.appender.RFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log</span></span><br><span class="line">  log4j.appender.RFAAUDIT.File=/home/eagle/logs/hadoop-hdfs/hdfs-audit.log</span><br><span class="line">$ ps auxwww | grep NameNode | grep <span class="string">'hdfs.audit.logger'</span>  <span class="comment"># 检查是否生效</span></span><br><span class="line">$ tail -f ~/logs/hadoop-hdfs/hdfs-audit.log</span><br><span class="line"></span><br><span class="line">$ bin/hdfs namenode -format</span><br><span class="line">  17/04/07 16:27:17 INFO util.ExitUtil: Exiting with status 0</span><br></pre></td></tr></tbody></table></figure>
<h6 id="伪分布式"><a href="#伪分布式" class="headerlink" title="伪分布式"></a>伪分布式</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/hadoop/</span><br><span class="line">$ bin/hdfs dfs -mkdir -p /user/hadoop</span><br><span class="line"><span class="comment"># bin/hdfs dfs -rm -r /home    # 如果有脏数据，可以先清除</span></span><br><span class="line"><span class="comment"># bin/hdfs dfs -ls /user       # 执行 mkdir 命令后，检查是否成功</span></span><br><span class="line">$ bin/hdfs dfs -mkdir /user/hadoop/input</span><br><span class="line">$ bin/hdfs dfs -put etc/hadoop/*.xml /user/hadoop/input</span><br><span class="line">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep /user/hadoop/input /user/hadoop/output <span class="string">'dfs[a-z.]+'</span></span><br><span class="line"><span class="comment"># 查看输出目录</span></span><br><span class="line">$ bin/hdfs dfs -ls /user/hadoop/output/</span><br><span class="line">  -rw-r--r--   1 eagle supergroup          0 2017-04-10 10:26 /user/hadoop/output/_SUCCESS</span><br><span class="line">  -rw-r--r--   1 eagle supergroup         97 2017-04-10 10:26 /user/hadoop/output/part-r-00000</span><br><span class="line"><span class="comment"># 查看统计结果</span></span><br><span class="line">$ bin/hdfs dfs -cat /user/hadoop/output/part-r-00000</span><br><span class="line">  1    dfsadmin</span><br><span class="line">  1    dfs.replication</span><br><span class="line">  1    dfs.namenode.name.dir</span><br><span class="line">  1    dfs.namenode.http</span><br><span class="line">  1    dfs.datanode.data.dir</span><br><span class="line"><span class="comment"># 取回统计结果</span></span><br><span class="line">$ bin/hdfs dfs -get /user/hadoop/output ~/output</span><br><span class="line"><span class="comment"># cat ~/output/*                # 本地查看统计结果</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/hadoop/</span><br><span class="line">$ mv etc/hadoop/mapred-site.xml.template etc/hadoop/mapred-site.xml</span><br><span class="line">$ vim etc/hadoop/mapred-site.xml</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">$ vim etc/hadoop/yarn-site.xml</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 `NaneNode` 和 `DataNode` 守护进程</span></span><br><span class="line">$ sbin/start-dfs.sh</span><br><span class="line">$ jps -ml | grep -v jps</span><br><span class="line">  13196 org.apache.hadoop.hdfs.server.namenode.NameNode</span><br><span class="line">  13503 org.apache.hadoop.hdfs.server.namenode.SecondaryNameNode</span><br><span class="line">  13329 org.apache.hadoop.hdfs.server.datanode.DataNode</span><br><span class="line">  31639 org.apache.catalina.startup.Bootstrap start</span><br><span class="line">  13685 sun.tools.jps.Jps -ml</span><br><span class="line"><span class="comment"># 如果没有正常启动，可以在 `/home/eagle/software/hadoop-2.7.3/logs/hadoop-eagle-namenode-federation02.log` 中排查</span></span><br><span class="line"><span class="comment"># 正常启动后，可访问 http://eagle01:50071</span></span><br><span class="line"></span><br><span class="line">$ sbin/start-yarn.sh            <span class="comment"># 需要确保已经启动好 HDFS</span></span><br><span class="line"><span class="comment"># 开启历史服务器，可在 Web UI 中查看任务运行状况</span></span><br><span class="line">$ sbin/mr-jobhistory-daemon.sh start historyserver</span><br><span class="line">$ jps -ml | grep -v jps</span><br><span class="line">  3691 org.apache.hadoop.hdfs.server.namenode.NameNode</span><br><span class="line">  3995 org.apache.hadoop.hdfs.server.namenode.SecondaryNameNode</span><br><span class="line">  3821 org.apache.hadoop.hdfs.server.datanode.DataNode</span><br><span class="line">  4271 org.apache.hadoop.yarn.server.nodemanager.NodeManager</span><br><span class="line">  4175 org.apache.hadoop.yarn.server.resourcemanager.ResourceManager</span><br><span class="line">  4671 org.apache.hadoop.mapreduce.v2.hs.JobHistoryServer</span><br><span class="line">  31639 org.apache.catalina.startup.Bootstrap start</span><br><span class="line"><span class="comment"># 正常启动后，可访问 http://eagle01:8088</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="LogStash"><a href="#LogStash" class="headerlink" title="LogStash"></a>LogStash</h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址 https://www.elastic.co/downloads/past-releases/logstash-2-3-4</span></span><br><span class="line">$ tar zxvf logstash-2.3.4.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s logstash-2.3.4/ logstash</span><br><span class="line">$ <span class="built_in">cd</span> logstash</span><br><span class="line">$ bin/logstash-plugin list | grep output-kafka</span><br><span class="line">  logstash-output-kafka</span><br><span class="line"><span class="comment"># 如果没有默认安装，需要执行 `bin/logstash-plugin install logstash-output-kafka`</span></span><br><span class="line"><span class="comment"># 如需配置代理，则先执行 `export HTTP_PROXY=http://10.10.10.10:9999`</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir -p /home/eagle/logs/hadoop-hdfs</span><br><span class="line">$ mkdir -p /home/eagle/logs/logstash</span><br><span class="line">$ mkdir conf</span><br><span class="line">$ vim conf/hdfs-audit.conf</span><br><span class="line">  input {</span><br><span class="line">    file {</span><br><span class="line">      <span class="built_in">type</span> =&gt; <span class="string">"cdh-nn-audit"</span></span><br><span class="line">      <span class="comment"># 这里需要需要和 etc/hadoop/log4j.properties 中配置的 log4j.appender.RFAAUDIT.File 一致</span></span><br><span class="line">      path =&gt; <span class="string">"/home/eagle/logs/hadoop-hdfs/hdfs-audit.log"</span></span><br><span class="line">      start_position =&gt; end</span><br><span class="line">      sincedb_path =&gt; <span class="string">"/home/eagle/logs/logstash/logstash.log"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  filter{</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"cdh-nn-audit"</span> {</span><br><span class="line">      grok {</span><br><span class="line">        match =&gt; [<span class="string">"message"</span>, <span class="string">"ugi=(?&lt;user&gt;([\w\d\-]+))@|ugi=(?&lt;user&gt;([\w\d\-]+))/[\w\d\-.]+@|ugi=(?&lt;user&gt;([\w\d.\-_]+))[\s(]+"</span>]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  output {</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"cdh-nn-audit"</span> {</span><br><span class="line">        kafka {</span><br><span class="line">        codec =&gt; plain {</span><br><span class="line">          format =&gt; <span class="string">"%{message}"</span></span><br><span class="line">        }</span><br><span class="line">        bootstrap_servers =&gt; <span class="string">"localhost:9092"</span></span><br><span class="line">        topic_id =&gt; <span class="string">"hdfs_audit_log"</span></span><br><span class="line">        timeout_ms =&gt; 10000</span><br><span class="line">        retries =&gt; 3</span><br><span class="line">        client_id =&gt; <span class="string">"cdh-nn-audit"</span></span><br><span class="line">      }</span><br><span class="line">      <span class="comment"># stdout { codec =&gt; rubydebug }</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ nohup bin/logstash -f conf/hdfs-audit.conf &gt; ~/logs/logstash/hdfs-audit.log 2&gt;&amp;1 &amp;</span><br><span class="line">  Settings: Default pipeline workers: 2</span><br><span class="line">  Pipeline main started</span><br><span class="line">$ tail -f ~/logs/logstash/hdfs-audit.log</span><br></pre></td></tr></tbody></table></figure>
<h5 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h5><h6 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install/</span><br><span class="line">$ wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</span><br><span class="line"><span class="comment"># MD5 校验，参照上文 “Hadoop-安装” 部分</span></span><br><span class="line">$ tar zxvf zookeeper-3.4.10.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s zookeeper-3.4.10 zookeeper</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> zookeeper</span><br><span class="line">$ mkdir tmp</span><br><span class="line">$ cp conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class="line">$ mkdir -p /home/eagle/data/zookeeper</span><br><span class="line">$ mkdir -p /home/eagle/logs/zookeeper</span><br><span class="line">$ vim conf/zoo.cfg</span><br><span class="line">  dataDir=/home/eagle/data/zookeeper</span><br><span class="line">  dataLogDir=/home/eagle/logs/zookeeper</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/zkServer.sh start</span><br><span class="line">$ bin/zkServer.sh status</span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /home/eagle/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Mode: standalone</span><br><span class="line">$ bin/zkCli.sh</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h5><h6 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install/</span><br><span class="line">$ wget http://archive.apache.org/dist/storm/apache-storm-0.9.7/apache-storm-0.9.7.tar.gz</span><br><span class="line"><span class="comment"># MD5 校验，参照上文 “Hadoop-安装” 部分</span></span><br><span class="line">$ tar zxvf apache-storm-0.9.7.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s apache-storm-0.9.7 storm</span><br><span class="line">$ <span class="built_in">cd</span> storm</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">          . /etc/bashrc</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_HOME=~/software/hadoop</span><br><span class="line">  <span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line">  <span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=~/software/java</span><br><span class="line">  <span class="built_in">export</span> STORM_HOME=~/software/storm</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$STORM_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ storm version</span><br><span class="line">  0.9.7</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/storm.yaml</span><br><span class="line">  storm.zookeeper.servers:</span><br><span class="line">    - <span class="string">"127.0.0.1"</span></span><br><span class="line">  storm.zookeeper.port: 2181</span><br><span class="line">  nimbus.host: <span class="string">"127.0.0.1"</span></span><br><span class="line">  ui.host: 0.0.0.0</span><br><span class="line">  ui.port: 8081              <span class="comment"># default: 8080</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir -p ~/logs/storm</span><br><span class="line">$ nohup bin/storm nimbus &gt; ~/logs/storm/nimbus.log 2&gt;&amp;1 &amp;</span><br><span class="line">$ nohup bin/storm supervisor &gt; ~/logs/storm/supervisor.log 2&gt;&amp;1 &amp;</span><br><span class="line">$ nohup bin/storm ui &gt; ~/logs/storm/ui.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 查看 UI http://eagle01:8081/index.html</span></span><br><span class="line"></span><br><span class="line">$ jps -ml | grep -v jps</span><br><span class="line">  17557 backtype.storm.daemon.nimbus</span><br><span class="line">  17675 backtype.storm.daemon.supervisor</span><br><span class="line">  20403 backtype.storm.ui.core</span><br><span class="line">  17043 org.apache.zookeeper.server.quorum.QuorumPeerMain /home/eagle/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  3691 org.apache.hadoop.hdfs.server.namenode.NameNode</span><br><span class="line">  3995 org.apache.hadoop.hdfs.server.namenode.SecondaryNameNode</span><br><span class="line">  3821 org.apache.hadoop.hdfs.server.datanode.DataNode</span><br><span class="line">  4271 org.apache.hadoop.yarn.server.nodemanager.NodeManager</span><br><span class="line">  4175 org.apache.hadoop.yarn.server.resourcemanager.ResourceManager</span><br><span class="line">  4671 org.apache.hadoop.mapreduce.v2.hs.JobHistoryServer</span><br><span class="line">  15515 org.jruby.Main --1.9 /home/eagle/software/logstash/lib/bootstrap/environment.rb logstash/runner.rb agent -f conf/hdfs-audit.conf</span><br><span class="line">  7212 org.apache.catalina.startup.Bootstrap start</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">$ bin/storm jar examples/storm-starter/storm-starter-topologies-0.9.7.jar storm.starter.WordCountTopology | grep <span class="string">'Thread-[0-9]*-count'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h5><h6 id="Scala依赖"><a href="#Scala依赖" class="headerlink" title="Scala依赖"></a>Scala依赖</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install/</span><br><span class="line">$ wget https://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz --no-check-certificate</span><br><span class="line">$ tar zxvf scala-2.11.8.tgz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/</span><br><span class="line">$ ln -s scala-2.11.8/ scala</span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line">  JAVA_HOME=/home/eagle/software/java</span><br><span class="line">  SCALA_HOME=/home/eagle/software/scala</span><br><span class="line">  CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">  PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$SCALA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME CLASSPATH PATH</span><br><span class="line"></span><br><span class="line">$ bash ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure>
<h6 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install/</span><br><span class="line">$ wget http://archive.apache.org/dist/kafka/0.10.1.1/kafka_2.11-0.10.1.1.tgz</span><br><span class="line"><span class="comment"># MD5 校验，参照上文 “Hadoop-安装” 部分</span></span><br><span class="line">$ tar zxvf kafka_2.11-0.10.1.1.tgz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s kafka_2.11-0.10.1.1 kafka</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> kafka</span><br><span class="line">$ mkdir -p ~/logs/kafka</span><br><span class="line">$ vim config/zookeeper.properties</span><br><span class="line">  dataDir=/home/eagle/data/zookeeper</span><br><span class="line">  clientPort=2181</span><br><span class="line">  maxClientCnxns=0</span><br><span class="line"></span><br><span class="line">$ vim config/server.properties</span><br><span class="line">  log.dirs=/home/eagle/logs/kafka</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-4"><a href="#启动-4" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ nohup bin/kafka-server-start.sh config/server.properties &gt; ~/logs/kafka/kafka.server.log 2&gt;&amp;1 &amp;</span><br><span class="line">$ tail -f /home/eagle/software/hbase/logs/hbase-eagle-master-federation01.out</span><br><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic hdfs_audit_log</span><br><span class="line">  Created topic <span class="string">"hdfs_audit_log"</span>.</span><br><span class="line"></span><br><span class="line">$ bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line">  hdfs_audit_log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否能成功消费到 LogStash 发送的 audit 日志</span></span><br><span class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic hdfs_audit_log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 offset</span></span><br><span class="line">$ ~/software/zookeeper/bin/zkCli.sh</span><br><span class="line">  [zk: localhost:2181(CONNECTED) 19] get /consumers/console-consumer-51054/offsets/hdfs_audit_log/0 </span><br><span class="line">    0</span><br><span class="line">    cZxid = 0x396</span><br><span class="line">    ctime = Tue Apr 11 15:59:22 CST 2017</span><br><span class="line">    mZxid = 0x396</span><br><span class="line">    mtime = Tue Apr 11 15:59:22 CST 2017</span><br><span class="line">    pZxid = 0x396</span><br><span class="line">    cversion = 0</span><br><span class="line">    dataVersion = 0</span><br><span class="line">    aclVersion = 0</span><br><span class="line">    ephemeralOwner = 0x0</span><br><span class="line">    dataLength = 1</span><br><span class="line">    numChildren = 0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Eagle"><a href="#Eagle" class="headerlink" title="Eagle"></a>Eagle</h4><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> install</span><br><span class="line">$ wget http://archive.apache.org/dist/eagle/apache-eagle-0.4.0-incubating/apache-eagle-0.4.0-incubating-src.tar.gz</span><br><span class="line">$ tar zxvf apache-eagle-0.4.0-incubating-src.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> apache-eagle-0.4.0-incubating-src</span><br><span class="line">$ curl -O https://patch-diff.githubusercontent.com/raw/apache/eagle/pull/268.patch</span><br><span class="line">$ git apply 268.patch</span><br><span class="line">$ mvn clean package -T 1C -DskipTests</span><br><span class="line"><span class="comment"># build 成功之后，会得到一个 tar 包 eagle-assembly/target/apache-eagle-0.4.0-incubating-bin.tar.gz</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/eagle/install/</span><br><span class="line">$ tar zxvf apache-eagle-0.4.0-incubating-bin.tar.gz -C /home/eagle/software/</span><br><span class="line">$ <span class="built_in">cd</span> /home/eagle/software/</span><br><span class="line">$ ln -s apache-eagle-0.4.0-incubating/ eagle</span><br><span class="line">$ <span class="built_in">cd</span> eagle</span><br><span class="line">$ bin/eagle-service.sh start</span><br><span class="line">  Starting eagle service ...</span><br><span class="line">  Existing PID file found during start.</span><br><span class="line">  Removing/clearing stale PID file.</span><br><span class="line">  Eagle service started.</span><br><span class="line"><span class="comment"># 访问 http://eagle01:9099/eagle-service # default: admin/secret</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="配置-Eagle"><a href="#配置-Eagle" class="headerlink" title="配置 Eagle"></a><a href="https://eagle.apache.org/docs/latest/reference/#configuration">配置 Eagle</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/eagle</span><br><span class="line">$ vim bin/eagle-env.sh</span><br><span class="line">  <span class="comment"># set EAGLE_HOME</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_HOME=$(dirname <span class="variable">$0</span>)/..</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The java implementation to use. please use jdk 1.7 or later</span></span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=<span class="variable">${JAVA_HOME}</span></span><br><span class="line">  <span class="comment"># export JAVA_HOME=/usr/java/jdk1.7.0_80/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># nimbus.host, default is localhost</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_NIMBUS_HOST=localhost</span><br><span class="line"></span><br><span class="line">  <span class="comment"># EAGLE_SERVICE_HOST, default is `hostname -f`</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_SERVICE_HOST=localhost</span><br><span class="line"></span><br><span class="line">  <span class="comment"># EAGLE_SERVICE_PORT, default is 9099</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_SERVICE_PORT=9099</span><br><span class="line"></span><br><span class="line">  <span class="comment"># EAGLE_SERVICE_USER</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_SERVICE_USER=admin</span><br><span class="line"></span><br><span class="line">  <span class="comment"># EAGLE_SERVICE_PASSWORD</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_SERVICE_PASSWD=secret</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> EAGLE_CLASSPATH=<span class="variable">$EAGLE_HOME</span>/conf</span><br><span class="line">  <span class="comment"># Add eagle shared library jars</span></span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$EAGLE_HOME</span>/lib/share/*;<span class="keyword">do</span></span><br><span class="line">          EAGLE_CLASSPATH=<span class="variable">$EAGLE_CLASSPATH</span>:<span class="variable">$file</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Add eagle storm library jars</span></span><br><span class="line">  <span class="comment"># Separate out of share directory because of asm version conflict</span></span><br><span class="line">  <span class="built_in">export</span> EAGLE_STORM_CLASSPATH=<span class="variable">$EAGLE_CLASSPATH</span></span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$EAGLE_HOME</span>/lib/storm/*;<span class="keyword">do</span></span><br><span class="line">          EAGLE_STORM_CLASSPATH=<span class="variable">$EAGLE_STORM_CLASSPATH</span>:<span class="variable">$file</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ vim conf/eagle-scheduler.conf</span><br><span class="line">  <span class="comment">### scheduler propertise</span></span><br><span class="line">  appCommandLoaderEnabled = <span class="literal">false</span></span><br><span class="line">  appCommandLoaderIntervalSecs = 1</span><br><span class="line">  appHealthCheckIntervalSecs = 5</span><br><span class="line"></span><br><span class="line">  <span class="comment">### execution platform properties</span></span><br><span class="line">  envContextConfig.env = <span class="string">"storm"</span></span><br><span class="line">  envContextConfig.url = <span class="string">"http://localhost:8081"</span></span><br><span class="line">  envContextConfig.nimbusHost = <span class="string">"localhost"</span></span><br><span class="line">  envContextConfig.nimbusThriftPort = 6627</span><br><span class="line">  envContextConfig.jarFile = <span class="string">"/home/eagle/software/eagle/lib/topology/eagle-topology-0.4.0-incubating-assembly.jar"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">### default topology properties</span></span><br><span class="line">  eagleProps.mailHost = <span class="string">"mailHost.com"</span></span><br><span class="line">  eagleProps.mailSmtpPort = <span class="string">"25"</span></span><br><span class="line">  eagleProps.mailDebug = <span class="string">"true"</span></span><br><span class="line">  eagleProps.eagleService.host = <span class="string">"localhost"</span></span><br><span class="line">  eagleProps.eagleService.port = 9099</span><br><span class="line">  eagleProps.eagleService.username = <span class="string">"admin"</span></span><br><span class="line">  eagleProps.eagleService.password = <span class="string">"secret"</span></span><br><span class="line">  eagleProps.dataJoinPollIntervalSec = 30</span><br><span class="line"></span><br><span class="line">  dynamicConfigSource.enabled = <span class="literal">true</span></span><br><span class="line">  dynamicConfigSource.initDelayMillis = 0</span><br><span class="line">  dynamicConfigSource.delayMillis = 30000</span><br><span class="line"></span><br><span class="line">$ vim conf/sandbox-hdfsAuditLog-application.conf</span><br><span class="line">{</span><br><span class="line">  <span class="string">"envContextConfig"</span> : {</span><br><span class="line">    <span class="string">"env"</span> : <span class="string">"storm"</span>,</span><br><span class="line">    <span class="string">"mode"</span> : <span class="string">"cluster"</span>,</span><br><span class="line">    <span class="string">"topologyName"</span> : <span class="string">"sandbox-hdfsAuditLog-topology"</span>,</span><br><span class="line">    <span class="string">"stormConfigFile"</span> : <span class="string">"security-auditlog-storm.yaml"</span>,</span><br><span class="line">    <span class="string">"parallelismConfig"</span> : {</span><br><span class="line">      <span class="string">"kafkaMsgConsumer"</span> : 1,</span><br><span class="line">      <span class="string">"hdfsAuditLogAlertExecutor*"</span> : 1</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"dataSourceConfig"</span>: {</span><br><span class="line">    <span class="string">"topic"</span> : <span class="string">"hdfs_audit_log"</span>,</span><br><span class="line">    <span class="string">"zkConnection"</span> : <span class="string">"127.0.0.1:2181"</span>,</span><br><span class="line">    <span class="string">"brokerZkPath"</span> : <span class="string">"/brokers"</span>,</span><br><span class="line">    <span class="string">"zkConnectionTimeoutMS"</span> : 15000,</span><br><span class="line">    <span class="string">"fetchSize"</span> : 1048586,</span><br><span class="line">    <span class="string">"deserializerClass"</span> : <span class="string">"org.apache.eagle.security.auditlog.HdfsAuditLogKafkaDeserializer"</span>,</span><br><span class="line">    <span class="string">"transactionZKServers"</span> : <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"transactionZKPort"</span> : 2181,</span><br><span class="line">    <span class="string">"transactionZKRoot"</span> : <span class="string">"/consumers"</span>,</span><br><span class="line">    <span class="string">"consumerGroupId"</span> : <span class="string">"eagle.hdfsaudit.consumer"</span>,</span><br><span class="line">    <span class="string">"transactionStateUpdateMS"</span> : 2000</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"alertExecutorConfigs"</span> : {</span><br><span class="line">     <span class="string">"hdfsAuditLogAlertExecutor"</span> : {</span><br><span class="line">       <span class="string">"parallelism"</span> : 1,</span><br><span class="line">       <span class="string">"partitioner"</span> : <span class="string">"org.apache.eagle.policy.DefaultPolicyPartitioner"</span>,</span><br><span class="line">       <span class="string">"needValidation"</span> : <span class="string">"true"</span></span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"eagleProps"</span> : {</span><br><span class="line">    <span class="string">"site"</span> : <span class="string">"sandbox"</span>,</span><br><span class="line">    <span class="string">"application"</span>: <span class="string">"hdfsAuditLog"</span>,</span><br><span class="line">        <span class="string">"dataJoinPollIntervalSec"</span> : 30,</span><br><span class="line">    <span class="string">"mailHost"</span> : <span class="string">"mailHost.com"</span>,</span><br><span class="line">    <span class="string">"mailSmtpPort"</span>:<span class="string">"25"</span>,</span><br><span class="line">    <span class="string">"mailDebug"</span> : <span class="string">"true"</span>,</span><br><span class="line">    <span class="string">"eagleService"</span>: {</span><br><span class="line">      <span class="string">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="string">"port"</span>: 9099</span><br><span class="line">      <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">      <span class="string">"password"</span>: <span class="string">"secret"</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"dynamicConfigSource"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"initDelayMillis"</span> : 0,</span><br><span class="line">        <span class="string">"delayMillis"</span> : 30000</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="元数据存储"><a href="#元数据存储" class="headerlink" title="元数据存储"></a>元数据存储</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ su - mysql</span><br><span class="line">$ mysql -uroot -p -S /home/mysql/data/mysql.sock</span><br><span class="line">  create database eagle;</span><br><span class="line">  <span class="comment"># 用户创建 &amp; 赋权，详见下文 “踩过的坑 - MySQL” 部分</span></span><br><span class="line"></span><br><span class="line">$ su - eagle</span><br><span class="line">$ vim /home/eagle/software/eagle/conf/eagle-service.conf</span><br><span class="line">eagle {</span><br><span class="line">  service {</span><br><span class="line">    storage-type=<span class="string">"jdbc"</span></span><br><span class="line">    storage-adapter=<span class="string">"mysql"</span></span><br><span class="line">    storage-username=<span class="string">"eagle"</span></span><br><span class="line">    storage-password=eagle</span><br><span class="line">    storage-database=eagle</span><br><span class="line">    storage-connection-url=<span class="string">"jdbc:mysql://mysql01:3306/eagle"</span></span><br><span class="line">    storage-connection-props=<span class="string">"encoding=UTF-8"</span></span><br><span class="line">    storage-driver-class=<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">    storage-connection-max=30</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment"># eagle {</span></span><br><span class="line"><span class="comment">#   service {</span></span><br><span class="line"><span class="comment">#     storage-type="jdbc"</span></span><br><span class="line"><span class="comment">#     storage-adapter="derby"</span></span><br><span class="line"><span class="comment">#     storage-username="eagle"</span></span><br><span class="line"><span class="comment">#     storage-password=eagle</span></span><br><span class="line"><span class="comment">#     storage-database=eagle</span></span><br><span class="line"><span class="comment">#     storage-connection-url="jdbc:derby:/tmp/eagle-db-dev;create=true"</span></span><br><span class="line"><span class="comment">#     storage-connection-props="encoding=UTF-8"</span></span><br><span class="line"><span class="comment">#     storage-driver-class="org.apache.derby.jdbc.EmbeddedDriver"</span></span><br><span class="line"><span class="comment">#     storage-connection-max=8</span></span><br><span class="line"><span class="comment">#   }</span></span><br><span class="line"><span class="comment"># }</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="启动-5"><a href="#启动-5" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/eagle-service.sh start</span><br><span class="line">$ bin/eagle-service.sh status</span><br><span class="line">  Eagle service is running 17789</span><br><span class="line">$ bin/eagle-topology-init.sh</span><br><span class="line">$ bin/eagle-topology.sh start</span><br><span class="line">$ bin/eagle-topology.sh status</span><br><span class="line">  Checking topology sandbox-hdfsAuditLog-topology status ...</span><br><span class="line">  Topology is alive: sandbox-hdfsAuditLog-topology ACTIVE     7          1            18        </span><br><span class="line"><span class="comment"># 访问 http://eagle01:9099/eagle-service/ui/#/landing</span></span><br><span class="line"><span class="comment"># tail -f logs/eagle-service.out</span></span><br></pre></td></tr></tbody></table></figure>
<p>　至此大功告成~</p>
<p><img data-src="/picture/eagle/apache_eagle_sites_default.png" alt=""></p>
<h2 id="Eagle-高级玩法"><a href="#Eagle-高级玩法" class="headerlink" title="Eagle 高级玩法"></a>Eagle 高级玩法</h2><h3 id="HBase-Security-Log"><a href="#HBase-Security-Log" class="headerlink" title="HBase Security Log"></a>HBase Security Log</h3><h4 id="HBase-部署"><a href="#HBase-部署" class="headerlink" title="HBase 部署"></a>HBase 部署</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget http://archive.apache.org/dist/hbase/hbase-0.98.8/hbase-0.98.8-hadoop2-bin.tar.gz</span><br><span class="line">$ tar zxvf hbase-0.98.8-hadoop2-bin.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s hbase-0.98.8-hadoop2 hbase</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  HBASE_HOME=~/software/hbase</span><br><span class="line">  PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ hbase version</span><br><span class="line">  2017-04-14 16:19:24,992 INFO  [main] util.VersionInfo: HBase 0.98.8-hadoop2</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh 免密</span></span><br><span class="line">$ ssh-keygen -t dsa -P <span class="string">''</span> -f /home/eagle/.ssh/id_dsa</span><br><span class="line">$ <span class="built_in">cd</span> /home/eagle/.ssh</span><br><span class="line">$ cat id_rsa.pub &gt; authorized_keys</span><br><span class="line">$ scp /home/eagle/.ssh/authorized_keys eagle@eagle02:/home/eagle/.ssh/</span><br><span class="line">$ chmod 700 -R ~/.ssh</span><br><span class="line">$ chmod 600 ~/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 配置双向 ssh，则重复上述步骤</span></span><br><span class="line"></span><br><span class="line">$ vim conf/hbase-env.sh</span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=~/software/java</span><br><span class="line">  <span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">$ mkdir -p /home/eagle/data/hbase/tmp</span><br><span class="line">$ vim conf/hbase-site.sh</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hdfs://eagle01:9000/hbase&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.zookeeper.property.clientPort&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;2181&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;eagle01&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      <span class="comment"># 参考 `~/software/zookeeper/config/zookeeper.properties`</span></span><br><span class="line">      &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/home/eagle/data/zookeeper&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;zookeeper.znode.parent&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/hbase&lt;/value&gt; </span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/home/eagle/data/hbase/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="开启-Security-日志"><a href="#开启-Security-日志" class="headerlink" title="开启 Security 日志"></a>开启 Security 日志</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ su - hbase</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/hbase/</span><br><span class="line">$ vim conf/hbase-site.xml</span><br><span class="line">  <span class="comment"># 增加如下配置</span></span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.security.authentication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;simple&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.security.authorization&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.coprocessor.master.classes&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.hbase.security.access.AccessController&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.coprocessor.region.classes&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.hbase.security.access.AccessController&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.coprocessor.regionserver.classes&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.hbase.security.access.AccessController&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">$ sudo mkdir -p /opt/hbase/logs/security/</span><br><span class="line">$ sudo chown -R eagle:eagle /opt/hbase/</span><br><span class="line">$ vim conf/log4j.properties</span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Security audit appender</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  hbase.security.log.file=SecurityAuth.audit</span><br><span class="line">  hbase.security.log.maxfilesize=256MB</span><br><span class="line">  hbase.security.log.maxbackupindex=20</span><br><span class="line">  log4j.appender.RFAS=org.apache.log4j.RollingFileAppender</span><br><span class="line">  log4j.appender.RFAS.File=/opt/hbase/logs/security/security.log</span><br><span class="line">  log4j.appender.RFAS.MaxFileSize=<span class="variable">${hbase.security.log.maxfilesize}</span></span><br><span class="line">  log4j.appender.RFAS.MaxBackupIndex=<span class="variable">${hbase.security.log.maxbackupindex}</span></span><br><span class="line">  log4j.appender.RFAS.layout=org.apache.log4j.PatternLayout</span><br><span class="line">  log4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n</span><br><span class="line">  log4j.category.SecurityLogger=<span class="variable">${hbase.security.logger}</span></span><br><span class="line">  log4j.additivity.SecurityLogger=<span class="literal">false</span></span><br><span class="line">  log4j.logger.SecurityLogger.org.apache.hadoop.hbase.security.access.AccessController=TRACE</span><br><span class="line"></span><br><span class="line">$ bin/start-hbase.sh</span><br><span class="line">$ tail -f /opt/hbase/logs/security/security.log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 `hbase_security_log` topic</span></span><br><span class="line"><span class="comment"># 如果之前存在可以删除，bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic hbase_security_log（需要先在 config/server.properties 中配置 delete.topic.enable=true）</span></span><br><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic hbase_security_log</span><br><span class="line">  Created topic <span class="string">"hbase_security_log"</span>.</span><br><span class="line">$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic hbase_security_log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="LogStash-1"><a href="#LogStash-1" class="headerlink" title="LogStash"></a>LogStash</h4><h5 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h5><p>　参照上文 <code>Eagle环境搭建</code> - <code>LogStash</code> 部分</p>
<h5 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/logstash/</span><br><span class="line">$ mkdir -p /data03/hbase/logs/logstash</span><br><span class="line">$ vim conf/hbase-security.conf</span><br><span class="line">  input {</span><br><span class="line">    file {</span><br><span class="line">      <span class="built_in">type</span> =&gt; <span class="string">"hbase-security-log"</span></span><br><span class="line">      path =&gt; <span class="string">"/data03/hbase/logs/security/security.log"</span></span><br><span class="line">      start_position =&gt; end</span><br><span class="line">      sincedb_path =&gt; <span class="string">"/data03/hbase/logs/security/security_monitor.log"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  output {</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"hbase-security-log"</span> {</span><br><span class="line">      kafka {</span><br><span class="line">        codec =&gt; plain {</span><br><span class="line">          format =&gt; <span class="string">"%{message}"</span></span><br><span class="line">        }</span><br><span class="line">        bootstrap_servers =&gt; <span class="string">"eagle01:9092"</span></span><br><span class="line">        topic_id =&gt; <span class="string">"hbase_security_log"</span></span><br><span class="line">        timeout_ms =&gt; 10000</span><br><span class="line">        batch_size =&gt; 1000</span><br><span class="line">        retries =&gt; 3</span><br><span class="line">        client_id =&gt; <span class="string">"hbase-security-log"</span></span><br><span class="line">      }</span><br><span class="line">      <span class="comment"># stdout {codec =&gt; rubydebug}</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">$ nohup bin/logstash -f conf/hbase-security.conf &gt; /home/eagle/logs/logstash/hbase_security.log 2&gt;&amp;1 &amp;</span><br><span class="line">$ tail -f /data03/hbase/logs/logstash/hbase_security.log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Eagle-配置"><a href="#Eagle-配置" class="headerlink" title="Eagle 配置"></a>Eagle 配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/sandbox-hbaseSecurityLog-application.conf</span><br><span class="line">  <span class="string">"dataSourceConfig"</span>: {</span><br><span class="line">    <span class="string">"topic"</span> : <span class="string">"hbase_security_log"</span>,    <span class="comment"># 修改 topic</span></span><br><span class="line">    // ...</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Eagle-提交-Topology"><a href="#Eagle-提交-Topology" class="headerlink" title="Eagle 提交 Topology"></a>Eagle 提交 Topology</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># bin/eagle-topology.sh --topology sandbox-hbaseSecurityLog-topology --config conf/sandbox--application.conf start</span></span><br><span class="line">$ bin/eagle-topology.sh --main org.apache.eagle.security.hbase.HbaseAuditLogProcessorMain --config conf/sandbox-hbaseSecurityLog-application.conf start</span><br><span class="line">$ bin/eagle-topology.sh --topology sandbox-hbaseSecurityLog-topology status</span><br><span class="line">  Checking topology sandbox-hbaseSecurityLog-topology status ...</span><br><span class="line">  Topology is alive: sandbox-hbaseSecurityLog-topology ACTIVE     7          1            131</span><br><span class="line"><span class="comment"># 关闭 topology</span></span><br><span class="line">$ bin/eagle-topology.sh --topology sandbox-hbaseSecurityLog-topology stop</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置告警"><a href="#配置告警" class="headerlink" title="配置告警"></a>配置告警</h4><p>　在 <code>Site</code> 中配置好 HBase 的 <code>hbaseSecurityLog</code> <code>application</code> 之后，可以在 <code>Data Classification</code> 中看到如下界面<br><img data-src="/picture/eagle/apache_eagle_hbase_data_classification.png" alt=""><br>　之后，新建 <code>Policy</code><br><img data-src="/picture/eagle/apache_eagle_hbase_policy_detail.png" alt=""></p>
<p>参考</p>
<ul>
<li><a href="http://hbase.apache.org/1.1/book.html#_server_side_configuration_for_simple_user_access_operation">Server-side Configuration for Simple User Access Operation</a></li>
<li><a href="https://hbase.apache.org/book.html#security.example.config">Security Configuration Example</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/2.3/plugins-inputs-file.html">Input plugins » file</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/2.3/plugins-outputs-kafka.html">Output plugins » kafka</a></li>
<li><a href="https://eagle.apache.org/docs/tutorial/topologymanagement.html">Apache Eagle Topology Management</a></li>
</ul>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><h4 id="error-can’t-create-transaction-lock-on-var-lib-rpm-rpm-lock-Permission-denied"><a href="#error-can’t-create-transaction-lock-on-var-lib-rpm-rpm-lock-Permission-denied" class="headerlink" title="error: can’t create transaction lock on /var/lib/rpm/.rpm.lock (Permission denied)"></a>error: can’t create transaction lock on /var/lib/rpm/.rpm.lock (Permission denied)</h4><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>　增加 sudo<br>　同时，需要保证 user 是在 /etc/sudoers 中的</p>
<h5 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://unix.stackexchange.com/questions/125706/why-cant-i-install-packages-with-rpm-i-get-transaction-lock">why can not I install packages with rpm? I get “transaction lock”[closed]</a></li>
</ul>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="zookeeper-jar-3-4-6-2-2-0-0-2041-无法从-Maven-中央仓库下载到"><a href="#zookeeper-jar-3-4-6-2-2-0-0-2041-无法从-Maven-中央仓库下载到" class="headerlink" title="zookeeper:jar:3.4.6.2.2.0.0-2041 无法从 Maven 中央仓库下载到"></a><code>zookeeper:jar:3.4.6.2.2.0.0-2041</code> 无法从 Maven 中央仓库下载到</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>　后面小版本说明并不是官方提供的 release 版本，是由 hortonworks 之类的第三方平台提供</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mvn clean package -T 1C -DskipTests</span><br><span class="line"></span><br><span class="line">　Failed to execute goal on project eagle-log4jkafka: Could not resolve dependencies <span class="keyword">for</span> project org.apache.eagle:eagle-log4jkafka:jar:0.4.0-incubating: The following artifacts could not be resolved: org.apache.kafka:kafka_2.10:jar:0.8.1.2.2.0.0-2041, org.apache.zookeeper:zookeeper:jar:3.4.6.2.2.0.0-2041: Could not transfer artifact org.apache.kafka:kafka_2.10:jar:0.8.1.2.2.0.0-2041 from/to HDP Release Repository (http://repo.hortonworks.com/content/repositories/releases/): GET request of: org/apache/kafka/kafka_2.10/0.8.1.2.2.0.0-2041/kafka_2.10-0.8.1.2.2.0.0-2041.jar from HDP Release Repository failed: Connection reset -&gt; [Help 1]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h5><ul>
<li><p>检查是否是因为 Maven 没有配置代理</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Linux (bash)</span></span><br><span class="line">$ <span class="built_in">export</span> MAVEN_OPTS=<span class="string">"-DsocksProxyHost=&lt;proxy host&gt; -DsocksProxyPort=&lt;proxy port&gt;"</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">$ <span class="built_in">set</span> MAVEN_OPTS=<span class="string">"-DsocksProxyHost=&lt;proxy host&gt; -DsocksProxyPort=&lt;proxy port&gt;"</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Maven 中央仓库是否没有提供对应可下载的 Jar</p>
</li>
</ul>
<p>　　通过 <a href="https://mvnrepository.com/">mvnrepository.com</a> 进行查找，<a href="https://mvnrepository.com/artifact/org.apache.kafka/kafka_2.10/0.8.1.2.2.0.0-2041">kafka_2.10-0.8.1.2.2.0.0-2041.jar</a> 的确是存在可以下载，但是 <a href="https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper/3.4.6.2.2.0.0-2041">zookeeper_3.4.6.2.2.0.0-2041.jar</a> 并没有提供出来<br>　　Apache 官方提供的 <a href="http://archive.apache.org">archive.apache.org</a> 中，也只有标准的 <a href="http://archive.apache.org/dist/zookeeper/">Stable Release</a></p>
<ul>
<li>自己编译 zookeeper_3.4.6.2.2.0.0-2041.jar</li>
</ul>
<p>　　在 Hortonworks 的 github 分支中并没有提供源码，并且在 <a href="https://github.com/hortonworks/zookeeper-release/releases">Release</a> 中也找不到对应的版本</p>
<ul>
<li>直接用已经编译好的 Eagle</li>
</ul>
<p>　　<a href="http://archive.apache.org/dist/eagle/apache-eagle-0.4.0-incubating/">Apache Archive</a> 中提供了 apache-eagle-0.4.0-incubating-src.tar.gz 源码</p>
<ul>
<li>修改 hadoop.version 使得其依赖的 zookeeper 版本也跟着改变</li>
</ul>
<p>　　<code>-Dhadoop.version=&lt;hadoop version&gt; -Dhbase.version=&lt;hbase version&gt;</code><br>　　例如：<code>mvn clean package -T 1C -DskipTests -Dhadoop.version=2.7.3</code></p>
<p>　已提交 <a href="https://issues.apache.org/jira/browse/EAGLE-990">EAGLE-990</a>，欢迎参与讨论</p>
<h5 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://stackoverflow.com/questions/1251192/how-do-i-use-maven-through-a-proxy">How do I use Maven through a proxy?</a></li>
<li><a href="http://stackoverflow.com/questions/33130388/replace-maven-properties-in-pom-xml-via-command-line">Replace Maven properties in pom.xml via command line</a></li>
</ul>
<h4 id="maven-scala-plugin-版本过低"><a href="#maven-scala-plugin-版本过低" class="headerlink" title="maven-scala-plugin 版本过低"></a>maven-scala-plugin 版本过低</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.scala-tools:maven-scala-plugin:2.15.0:compile</span><br><span class="line"> (default) on project eagle-log4jkafka: wrap: org.apache.commons.exec.ExecuteExc</span><br><span class="line">eption: Process exited with an error: 1(Exit value: 1) -&gt; [Help 1]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim apache-eagle-0.4.0-incubating-src/pom.xml</span><br><span class="line">　&lt;!--&lt;maven-scala.version&gt;2.15.0&lt;/maven-scala.version&gt;--&gt;</span><br><span class="line">　&lt;maven-scala.version&gt;2.15.2&lt;/maven-scala.version&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="rt-jar-is-broken"><a href="#rt-jar-is-broken" class="headerlink" title="rt.jar is broken"></a>rt.jar is broken</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[ERROR] error: error <span class="keyword">while</span> loading AnnotatedElement, class file <span class="string">'D:\apps\Java\jd</span></span><br><span class="line"><span class="string">k1.8.0_111\jre\lib\rt.jar(java/lang/reflect/AnnotatedElement.class)'</span> is broken</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h5><p>　这个问题是因为 JDK 版本过高</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">$ <span class="built_in">set</span> JAVA_HOME=D:\apps\Java\jdk1.7.0_67</span><br><span class="line">$ <span class="built_in">set</span> MAVEN_HOME=D:\apps\maven\apache-maven-3.3.9</span><br><span class="line">$ <span class="built_in">set</span> PATH=%JAVA_HOME%\bin;%MAVEN_HOME%\bin;%PATH%</span><br><span class="line"><span class="comment"># set 命令只是临时改动，如需应用到系统变量，可以尝试 setx</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://stackoverflow.com/questions/26993101/switching-between-different-jdk-versions-in-windows">Switching between different JDK versions in Windows</a></li>
</ul>
<h4 id="eagle-webservice-编译失败"><a href="#eagle-webservice-编译失败" class="headerlink" title="eagle-webservice 编译失败"></a>eagle-webservice 编译失败</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.6.0:<span class="built_in">exec</span> (exec-ui-install) on project eagle-webservice: Command execution failed. Cannot run program <span class="string">"bash"</span> (<span class="keyword">in</span> directory <span class="string">"F:\eagle\apache-eagle-0.4.0-incubating-src\eagle-webservice"</span>): CreateProcess error=2, ????????? -&gt; [Help 1]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h5><p>　没有安装 NPM</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装完成后，设置环境变量</span></span><br><span class="line">$ <span class="built_in">set</span> NODE_HOME=D:\apps\nodejs\</span><br><span class="line">$ <span class="built_in">set</span> PATH=%NODE_HOME%;%PATH%</span><br></pre></td></tr></tbody></table></figure>
<h4 id="java-io-IOException-Cannot-run-program-“bash”"><a href="#java-io-IOException-Cannot-run-program-“bash”" class="headerlink" title="java.io.IOException: Cannot run program “bash”"></a>java.io.IOException: Cannot run program “bash”</h4><h5 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h5><p>　将 Git 的 bash.exe 目录配置到环境变量<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">set</span> PATH=D:\apps\Git\bin;%PATH%</span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://stackoverflow.com/questions/15135771/hudson-on-windows-error-java-io-ioexception-cannot-run-program-sh">Hudson on Windows - Error: java.io.IOException: Cannot run program <code>sh</code></a></li>
</ul>
<h4 id="Npm-fetch-失败"><a href="#Npm-fetch-失败" class="headerlink" title="Npm fetch 失败"></a>Npm fetch 失败</h4><h5 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h5><p>　检查是否配置好代理<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> proxy <span class="string">"http://10.19.110.55:8080/"</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry <span class="string">"https://registry.npm.taobao.org"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者修改配置</span></span><br><span class="line">$ vim C:\Users\BenedictJin\.npmrc</span><br><span class="line">  proxy=http://10.19.110.55:8080/</span><br><span class="line">  registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>　另外，如果 npm 调用了 bower 命令，仍然需要给 bower 进行代理设置<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ touch C:\Users\BenedictJin\.bowerrc</span><br><span class="line">$ vim C:\Users\BenedictJin\.bowerrc</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"directory"</span>: <span class="string">"bower_components"</span>,</span><br><span class="line">    <span class="string">"proxy"</span>: <span class="string">"http://10.19.110.55:8080/"</span>,</span><br><span class="line">    <span class="string">"https-proxy"</span>:<span class="string">"http://10.19.110.55:8080/"</span>,</span><br><span class="line">    <span class="string">"no-proxy"</span>:<span class="string">"*.yuzhouwan.com"</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p></p>
<div class="note info">默认镜像地址：https://registry.npmjs.com/</div>


<h4 id="application-conf-No-such-file-or-directory"><a href="#application-conf-No-such-file-or-directory" class="headerlink" title="application.conf: No such file or directory"></a>application.conf: No such file or directory</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/eagle-service.sh start</span><br><span class="line">cp: cannot create regular file `bin/../lib/tomcat/webapps/eagle-service/WEB-INF/classes/application.conf<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">cp: cannot create regular file `bin/../lib/tomcat/webapps/eagle-service/WEB-INF/classes/'</span>: No such file or directory</span><br><span class="line">cp: cannot create regular file `bin/../lib/tomcat/webapps/eagle-service/WEB-INF/classes/<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">Starting eagle service ...</span></span><br><span class="line"><span class="string">Eagle service started.</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h5><p>　可能是没有将 <code>apache-eagle-0.4.0-incubating-src\eagle-webservice\target</code> 中的 <code>eagle-service.war</code> 正常解压<br>　考虑将 <code>eagle-service</code> 拷贝到 <code>/home/eagle/software/eagle/lib/tomcat/webapps/</code> 中</p>
<h3 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h3><h4 id="Invalid-message-received-with-signature-18245"><a href="#Invalid-message-received-with-signature-18245" class="headerlink" title="Invalid message received with signature 18245"></a>Invalid message received with signature 18245</h4><h5 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 访问 http://eagle01:9099/eagle-service</span></span><br><span class="line">$ tail -f logs/eagle-service.2017-04-07.log</span><br><span class="line">  Apr 07, 2017 10:59:25 AM org.apache.coyote.ajp.AjpMessage processHeader</span><br><span class="line">SEVERE: Invalid message received with signature 18245</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /home/eagle/software/eagle/lib/tomcat/conf/server.xml</span><br><span class="line">  <span class="comment"># 如果这里没有指定 `AJP` 的 `address` 可访问地址，默认是所有机器都可访问，会报错安全问题，可以依据自己的需求配置好 `address` 来控制访问（这里因为是测试环境，直接绑定了 0.0.0.0 地址）</span></span><br><span class="line">  <span class="comment"># &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span></span><br><span class="line">  <span class="comment"># &lt;Connector port="9009" protocol="AJP/1.3" redirectPort="9443" /&gt;</span></span><br><span class="line">  &lt;Connector port=<span class="string">"9009"</span> protocol=<span class="string">"AJP/1.3"</span> address=<span class="string">"0.0.0.0"</span> redirectPort=<span class="string">"9443"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://www.mobibrw.com/2016/5480">Tomcat 7 使用 AJP 协议导致 AJP 端口被意外暴露给外网</a></li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="Host-eagle01-is-not-allowed-to-connect-to-this-MySQL-server"><a href="#Host-eagle01-is-not-allowed-to-connect-to-this-MySQL-server" class="headerlink" title="Host eagle01 is not allowed to connect to this MySQL server"></a>Host <code>eagle01</code> is not allowed to connect to this MySQL server</h4><h5 id="解决-9"><a href="#解决-9" class="headerlink" title="解决"></a>解决</h5><p>　远程连接 MySQL 服务实例的时候，如果当前主机没有响应权限，需要对其赋权</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ su - mysql</span><br><span class="line">$ mysql -uroot -p -S /home/mysql/data/mysql.sock</span><br><span class="line">  <span class="comment"># 允许用户 eagle 从 ip 为 192.168.1.30 的主机连接到 mysql 服务器的 eagle 数据库，并使用 eagle 作为密码</span></span><br><span class="line">  CREATE USER <span class="string">'eagle'</span>@<span class="string">'192.168.1.30'</span> IDENTIFIED BY <span class="string">'eagle'</span>;</span><br><span class="line">  GRANT ALL PRIVILEGES ON eagle.* TO <span class="string">'eagle'</span>@<span class="string">'192.168.1.30'</span> IDENTIFIED BY <span class="string">'eagle'</span> WITH GRANT OPTION;</span><br><span class="line">  FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://www.cnblogs.com/xyzdw/archive/2011/08/11/2135227.html">报错:1130-host … is not allowed to connect to this MySql server</a></li>
</ul>
<h4 id="Table-‘eagle-eagleapplicationdesc-eagleapplicationdesc’-doesn’t-exist"><a href="#Table-‘eagle-eagleapplicationdesc-eagleapplicationdesc’-doesn’t-exist" class="headerlink" title="Table ‘eagle.eagleapplicationdesc_eagleapplicationdesc’ doesn’t exist"></a>Table ‘eagle.eagleapplicationdesc_eagleapplicationdesc’ doesn’t exist</h4><h5 id="解决-10"><a href="#解决-10" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 现有的 19 张表</span></span><br><span class="line">$ show tables;</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| Tables_in_eagle                                   |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| alertexecutor_alertexecutor                       |</span><br><span class="line">| alertstream_alertstream                           |</span><br><span class="line">| eagle_metadata_generic_resource                   |</span><br><span class="line">| eagle_metadata_topologyoperation                  |</span><br><span class="line">| eagle_metric                                      |</span><br><span class="line">| eaglefeaturedesc_eaglefeaturedesc                 |</span><br><span class="line">| eaglesiteapplication_eaglesiteapplication         |</span><br><span class="line">| eaglesitedesc_eaglesitedesc                       |</span><br><span class="line">| filesensitivity_filesensitivity                   |</span><br><span class="line">| hbaseresourcesensitivity_hbaseresourcesensitivity |</span><br><span class="line">| hdfsusercommandpattern_hdfsusercommandpattern     |</span><br><span class="line">| hiveresourcesensitivity_hiveresourcesensitivity   |</span><br><span class="line">| ipzone_ipzone                                     |</span><br><span class="line">| mlmodel_mlmodel                                   |</span><br><span class="line">| oozieresourcesensitivity_oozieresourcesensitivity |</span><br><span class="line">| serviceaudit_serviceaudit                         |</span><br><span class="line">| unittest_entityut                                 |</span><br><span class="line">| unittest_testtsentity                             |</span><br><span class="line">| userprofile_schedule_command                      |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现 `eagle-examples/eagle-cassandra-example/bin/init.sh` 中存在该表</span></span><br><span class="line">$ cp eagle-examples/eagle-cassandra-example/bin/init.sh /home</span><br><span class="line"></span><br><span class="line">$ su - mysql</span><br><span class="line">$ mysql -uroot -p -S /home/mysql/data/mysql.sock</span><br><span class="line">  use eagle;</span><br><span class="line">  <span class="comment"># 创建 缺失的几张表</span></span><br><span class="line">  create table alertnotifications_alertnotifications(</span><br><span class="line">    `uuid` varchar(254) COLLATE utf8_bin NOT NULL,</span><br><span class="line">    `timestamp` bigint(20) DEFAULT NULL,</span><br><span class="line">    `notificationType` varchar(30000),</span><br><span class="line">    `enabled` tinyint(1) DEFAULT NULL,</span><br><span class="line">    `description` mediumtext,</span><br><span class="line">    `className` mediumtext,</span><br><span class="line">    `fields` mediumtext,</span><br><span class="line">    PRIMARY KEY (`uuid`),</span><br><span class="line">    UNIQUE KEY `uuid_UNIQUE` (`uuid`)</span><br><span class="line">  )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br><span class="line"></span><br><span class="line">  create table eagle_metadata_topologydescription(</span><br><span class="line">    `uuid` varchar(254) COLLATE utf8_bin NOT NULL,</span><br><span class="line">    `timestamp` bigint(20) DEFAULT NULL,</span><br><span class="line">    `topology` varchar(30000),</span><br><span class="line">    `description` mediumtext,</span><br><span class="line">    `exeClass` mediumtext,</span><br><span class="line">    `<span class="built_in">type</span>` mediumtext,</span><br><span class="line">    `version` mediumtext,</span><br><span class="line">    PRIMARY KEY (`uuid`),</span><br><span class="line">    UNIQUE KEY `uuid_UNIQUE` (`uuid`)</span><br><span class="line">  )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br><span class="line"></span><br><span class="line">  create table eagle_metadata_topologyexecution(</span><br><span class="line">    `uuid` varchar(254) COLLATE utf8_bin NOT NULL,</span><br><span class="line">    `timestamp` bigint(20) DEFAULT NULL,</span><br><span class="line">    site varchar(1024),</span><br><span class="line">    application varchar(1024),</span><br><span class="line">    topology varchar(1024),</span><br><span class="line">    environment varchar(1024),</span><br><span class="line">    status varchar(1024),</span><br><span class="line">    description varchar(1024),</span><br><span class="line">    lastmodifieddate bigint(20),</span><br><span class="line">    fullname varchar(1024),</span><br><span class="line">    url varchar(1024),</span><br><span class="line">    mode varchar(1024),</span><br><span class="line">    PRIMARY KEY (`uuid`),</span><br><span class="line">    UNIQUE KEY `uuid_UNIQUE` (`uuid`)</span><br><span class="line">  )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br><span class="line"></span><br><span class="line">  create table eagle_metric_dmeta(</span><br><span class="line">    `uuid` varchar(254) COLLATE utf8_bin NOT NULL,</span><br><span class="line">    `timestamp` bigint(20) DEFAULT NULL,</span><br><span class="line">    drillDownPaths mediumtext,</span><br><span class="line">    aggFunctions mediumtext,</span><br><span class="line">    defaultDownSamplingFunction mediumtext,</span><br><span class="line">    defaultAggregateFunction mediumtext,</span><br><span class="line">    resolutions mediumtext,</span><br><span class="line">    downSamplingFunctions mediumtext,</span><br><span class="line">    storeType mediumtext,</span><br><span class="line">    displayName mediumtext,</span><br><span class="line">    PRIMARY KEY (`uuid`),</span><br><span class="line">    UNIQUE KEY `uuid_UNIQUE` (`uuid`)</span><br><span class="line">  )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ZooKeeper-1"><a href="#ZooKeeper-1" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h3><h4 id="Error-contacting-service-It-is-probably-not-running"><a href="#Error-contacting-service-It-is-probably-not-running" class="headerlink" title="Error contacting service. It is probably not running."></a>Error contacting service. It is probably not running.</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过增加 `start-foreground` 参数来排查失败原因</span></span><br><span class="line">$ bin/zkServer.sh start-foreground</span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /home/eagle/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Error: Could not find or load main class org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line"><span class="comment"># /home/eagle/software/zookeeper/zookeeper-3.4.10.jar 的问题，重新下载，校验 md5 正确后，再次安装即可</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Hadoop-1"><a href="#Hadoop-1" class="headerlink" title="Hadoop"></a>Hadoop</h3><h4 id="端口冲突"><a href="#端口冲突" class="headerlink" title="端口冲突"></a>端口冲突</h4><h5 id="解决-11"><a href="#解决-11" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改默认端口（Hadoop 2.7.3）</span></span><br><span class="line">$ vim ~/software/hadoop/etc/hadoop/hdfs-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;0.0.0.0:50070&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://hadoop.apache.org/docs/r2.7.3/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">hadoop v2.7.3 hdfs-default.xml</a></li>
</ul>
<h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><h4 id="FAILED-LOOKUP-Can’t-get-master-address-from-ZooKeeper-znode-data-null"><a href="#FAILED-LOOKUP-Can’t-get-master-address-from-ZooKeeper-znode-data-null" class="headerlink" title="FAILED LOOKUP: Can’t get master address from ZooKeeper; znode data == null"></a>FAILED LOOKUP: Can’t get master address from ZooKeeper; znode data == null</h4><h5 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hbase(main):001:0&gt; zk_dump</span><br><span class="line">HBase is rooted at /hbase</span><br><span class="line">Active master address: &lt;&lt;<span class="string">FAILED LOOKUP: Can't get master address from ZooKeeper; znode data == null&gt;&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-12"><a href="#解决-12" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 </span></span><br><span class="line">/home/eagle/software/hbase/bin/../logs/hbase-eagle-master-federation01.out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否禁用了 HBase 自带的 ZooKeeper</span></span><br><span class="line">$ vim ~/software/hbase/conf/hbase-env.sh</span><br><span class="line">  <span class="comment"># Tell HBase whether it should manage it's own instance of ZooKeeper or not.</span></span><br><span class="line">  <span class="comment"># export HBASE_MANAGES_ZK=true</span></span><br><span class="line">  <span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否正确在 `zookeeper.znode.parent` `/hbase` 目录下创建节点</span></span><br><span class="line">$ ~/software/zookeeper/bin/zkCli.sh -server eagle01:2181</span><br><span class="line">　[zk: localhost:2181(CONNECTED) 0] ls /hbase</span><br><span class="line">　[recovering-regions, splitWAL, rs, backup-masters, region-in-transition, draining, table, table-lock]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="The-node-hbase-unsecure-is-not-in-ZooKeeper"><a href="#The-node-hbase-unsecure-is-not-in-ZooKeeper" class="headerlink" title="The node /hbase-unsecure is not in ZooKeeper"></a>The node /hbase-unsecure is not in ZooKeeper</h4><h5 id="解决-13"><a href="#解决-13" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/hbase-site.xml</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;zookeeper.znode.parent&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/hbase-unsecure&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Storm-1"><a href="#Storm-1" class="headerlink" title="Storm"></a>Storm</h3><h4 id="ResourceManager-unable-to-find-resource-‘templates-ALERT-DEFAULT-vm’-in-any-resource-loader"><a href="#ResourceManager-unable-to-find-resource-‘templates-ALERT-DEFAULT-vm’-in-any-resource-loader" class="headerlink" title="ResourceManager : unable to find resource ‘templates/ALERT_DEFAULT.vm’ in any resource loader"></a>ResourceManager : unable to find resource ‘templates/ALERT_DEFAULT.vm’ in any resource loader</h4><h5 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/software/storm/logs/worker-6703.log</span><br><span class="line">  2017-04-13T11:21:36.481+0800 o.a.velocity [ERROR] ResourceManager : unable to find resource <span class="string">'templates/ALERT_DEFAULT.vm'</span> <span class="keyword">in</span> any resource loader.</span><br><span class="line">  2017-04-13T11:21:36.487+0800 o.a.e.c.e.EagleMailClient [INFO] Send mail failed, got an AddressException: Illegal whitespace <span class="keyword">in</span> address</span><br><span class="line">  javax.mail.internet.AddressException: Illegal whitespace <span class="keyword">in</span> address</span><br><span class="line">          at javax.mail.internet.InternetAddress.checkAddress(InternetAddress.java:926) ~[stormjar.jar:na]</span><br><span class="line">          at javax.mail.internet.InternetAddress.parse(InternetAddress.java:819) ~[stormjar.jar:na]</span><br><span class="line">          at javax.mail.internet.InternetAddress.parse(InternetAddress.java:555) ~[stormjar.jar:na]</span><br><span class="line">          at javax.mail.internet.InternetAddress.&lt;init&gt;(InternetAddress.java:91) ~[stormjar.jar:na]</span><br><span class="line">          at org.apache.eagle.common.email.EagleMailClient._send(EagleMailClient.java:101) [stormjar.jar:na]</span><br><span class="line">          at org.apache.eagle.common.email.EagleMailClient.send(EagleMailClient.java:171) [stormjar.jar:na]</span><br><span class="line">          at org.apache.eagle.common.email.EagleMailClient.send(EagleMailClient.java:192) [stormjar.jar:na]</span><br><span class="line">          at org.apache.eagle.common.email.EagleMailClient.send(EagleMailClient.java:198) [stormjar.jar:na]</span><br><span class="line">          at org.apache.eagle.notification.email.AlertEmailSender.run(AlertEmailSender.java:162) [stormjar.jar:na]</span><br><span class="line">          at java.util.concurrent.Executors<span class="variable">$RunnableAdapter</span>.call(Executors.java:471) [na:1.7.0_80]</span><br><span class="line">          at java.util.concurrent.FutureTask.run(FutureTask.java:262) [na:1.7.0_80]</span><br><span class="line">          at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_80]</span><br><span class="line">          at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:615) [na:1.7.0_80]</span><br><span class="line">          at java.lang.Thread.run(Thread.java:745) [na:1.7.0_80]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-14"><a href="#解决-14" class="headerlink" title="解决"></a>解决</h5><p>　从编译好的 <code>eagle-core</code> 组件中，找到 <code>eagle-alert/eagle-alert-notification-plugin/target/classes</code> 目录，将 <code>ALERT_DEFAULT.vm</code> 文件 copy 到 部署环境的 <code>/home/eagle/software/eagle/lib/tomcat/webapps/eagle-service/templates</code> 目录下</p>
<h5 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://stackoverflow.com/questions/36180753/getting-velocity-error-unable-to-find-resource-error-vm-in-any-resource-loade">Getting velocity error “unable to find resource ‘error.vm’ in any resource loader.””</a></li>
</ul>
<h3 id="LogStash-2"><a href="#LogStash-2" class="headerlink" title="LogStash"></a>LogStash</h3><h4 id="ArgumentError-The-“sincedb-path”-argument-must-point-to-a-file-received-a-directory"><a href="#ArgumentError-The-“sincedb-path”-argument-must-point-to-a-file-received-a-directory" class="headerlink" title="ArgumentError: The “sincedb_path” argument must point to a file, received a directory"></a>ArgumentError: The “sincedb_path” argument must point to a file, received a directory</h4><h5 id="解决-15"><a href="#解决-15" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">修改 `sincedb_path` 为一个文件</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Commit-cannot-be-completed-since-the-group-has-already-rebalanced-and-assigned-the-partitions-to-another-member"><a href="#Commit-cannot-be-completed-since-the-group-has-already-rebalanced-and-assigned-the-partitions-to-another-member" class="headerlink" title="Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member"></a>Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member</h4><h5 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">WARN Auto offset commit failed <span class="keyword">for</span> group console-consumer-87542: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, <span class="built_in">which</span> typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned <span class="keyword">in</span> poll() with max.poll.records. (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-16"><a href="#解决-16" class="headerlink" title="解决"></a>解决</h5><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">kafka {</span><br><span class="line">  codec =&gt; plain { format =&gt; <span class="attr">"%{message}"</span> }</span><br><span class="line">  bootstrap_servers =&gt; <span class="string">"eagle01:9092"</span></span><br><span class="line">  topic_id =&gt; <span class="string">"hbase_security_log"</span></span><br><span class="line">  batch_size =&gt; <span class="string">"1000"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="参考-9"><a href="#参考-9" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://www.elastic.co/guide/en/logstash/2.3/plugins-outputs-kafka.html#plugins-outputs-kafka-batch_size">Output plugins » kafka - batch_size</a></li>
</ul>
<h3 id="Eagle-1"><a href="#Eagle-1" class="headerlink" title="Eagle"></a>Eagle</h3><h4 id="java-lang-Exception-Exception-When-browsing-Files-in-HDFS-Message-java-net-UnknownHostException-sandbox-hortonworks-com"><a href="#java-lang-Exception-Exception-When-browsing-Files-in-HDFS-Message-java-net-UnknownHostException-sandbox-hortonworks-com" class="headerlink" title="java.lang.Exception:  Exception When browsing Files in HDFS .. Message :  java.net.UnknownHostException: sandbox.hortonworks.com"></a>java.lang.Exception:  Exception When browsing Files in HDFS .. Message :  java.net.UnknownHostException: sandbox.hortonworks.com</h4><h5 id="解决-17"><a href="#解决-17" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/sandbox-hadoopjmx-pipeline.conf</span><br><span class="line">{</span><br><span class="line">  config {</span><br><span class="line">    envContextConfig {</span><br><span class="line">      <span class="string">"topologyName"</span> : <span class="string">"sandbox-hadoopjmx-pipeline"</span></span><br><span class="line">    }</span><br><span class="line">    eagleProps {</span><br><span class="line">      <span class="string">"site"</span> : <span class="string">"sandbox"</span></span><br><span class="line">      <span class="string">"application"</span>: <span class="string">"HADOOP"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  dataflow {</span><br><span class="line">    KafkaSource.hadoopNNJmxStream {</span><br><span class="line">      parallism = 1000</span><br><span class="line">      topic = <span class="string">"nn_jmx_metric_sandbox"</span></span><br><span class="line">      zkConnection = <span class="string">"localhost:2181"</span></span><br><span class="line">      zkConnectionTimeoutMS = 15000</span><br><span class="line">      consumerGroupId = <span class="string">"Consumer"</span></span><br><span class="line">      fetchSize = 1048586</span><br><span class="line">      transactionZKServers = <span class="string">"localhost"</span></span><br><span class="line">      transactionZKPort = 2181</span><br><span class="line">      transactionZKRoot = <span class="string">"/consumers"</span></span><br><span class="line">      transactionStateUpdateMS = 2000</span><br><span class="line">      deserializerClass = <span class="string">"org.apache.eagle.datastream.storm.JsonMessageDeserializer"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Alert.hadoopNNJmxStreamAlertExecutor {</span><br><span class="line">      upStreamNames = [hadoopNNJmxStream]</span><br><span class="line">      alertExecutorId = hadoopNNJmxStreamAlertExecutor</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    hadoopNNJmxStream -&gt; hadoopNNJmxStreamAlertExecutor{}</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment"># 修改其他配置 conf/sandbox-*</span></span><br><span class="line"><span class="comment"># 或者直接修改 /etc/hosts，添加 `127.0.0.1 sandbox.hortonworks.com`</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="sandbox-hortonworks-com-8020-failed-on-connection-exception"><a href="#sandbox-hortonworks-com-8020-failed-on-connection-exception" class="headerlink" title="sandbox.hortonworks.com:8020 failed on connection exception"></a>sandbox.hortonworks.com:8020 failed on connection exception</h4><h5 id="解决-18"><a href="#解决-18" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># http://eagle01:9099/eagle-service/ui/#/config/site</span></span><br><span class="line"><span class="comment"># 配置 Sites - Configuration - sandbox - Application - hdfsAuditLog</span></span><br><span class="line">classification.fs.defaultFS=hdfs://eagle01:9000</span><br><span class="line"><span class="comment"># 这里可以参考 core-site.xml 中的 fs.defaultFS 值</span></span><br><span class="line"><span class="comment"># 随后，`Save All`</span></span><br><span class="line"><span class="comment"># 访问 http://eagle01:9099/eagle-service/ui/#/classification/sensitivity，确认已生效</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Topology-with-name-sandbox-hdfsAuditLog-topology-already-exists-on-cluster"><a href="#Topology-with-name-sandbox-hdfsAuditLog-topology-already-exists-on-cluster" class="headerlink" title="Topology with name sandbox-hdfsAuditLog-topology already exists on cluster"></a>Topology with name <code>sandbox-hdfsAuditLog-topology</code> already exists on cluster</h4><h5 id="解决-19"><a href="#解决-19" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/eagle-topology.sh stop</span><br><span class="line"><span class="comment"># wait 30s(default) for `kill` command</span></span><br><span class="line">$ bin/eagle-topology.sh start</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Error-22-38-java-程序包-org-apache-eagle-service-hbase-不存在"><a href="#Error-22-38-java-程序包-org-apache-eagle-service-hbase-不存在" class="headerlink" title="Error:(22, 38) java: 程序包 org.apache.eagle.service.hbase 不存在"></a>Error:(22, 38) java: 程序包 org.apache.eagle.service.hbase 不存在</h4><h5 id="解决-20"><a href="#解决-20" class="headerlink" title="解决"></a>解决</h5><p>　本地运行单元测试 <code>TestHBaseWriteEntitiesPerformance</code> 的时候，报错 import 的某些包不存在</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 Intellij Idea 的 Maven 配置界面，Setting - Maven - Repositeries</span></span><br><span class="line"><span class="comment"># 发现 repo.hortonworks.com &amp; repo.maven.apache.org 两个中央仓库 Update 的状态为 `Error`</span></span><br><span class="line"><span class="comment"># 点击 Update 进行更新</span></span><br></pre></td></tr></tbody></table></figure>
<p>　这里可能需要设置 Maven 的 Proxy 代理，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/2254/#Maven-Proxy">Maven 高级玩法</a>》</p>
<h2 id="社区跟进"><a href="#社区跟进" class="headerlink" title="社区跟进"></a>社区跟进</h2><ul>
<li><a href="https://issues.apache.org/jira/browse/EAGLE-981?jql=project%20%3D%20EAGLE%20AND%20reporter%20in%20(%22benedict%20jin%22)">Issues</a></li>
<li><a href="https://github.com/apache/eagle/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aasdf2014%20">Pull Request</a></li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://eagle.apache.org/docs/quick-start.html">Eagle Quick Start</a></li>
<li><a href="https://github.com/apache/eagle/blob/master/docs/docs/getting-started.md">getting-started.md</a></li>
<li><a href="https://eagle.apache.org/docs/deployment-env.html">Eagle Deploy Environment</a></li>
<li><a href="https://eagle.apache.org/docs/hbase-data-activity-monitoring.html">HBase Data Activity Monitoring</a></li>
<li><a href="https://eagle.apache.org/docs/index.html">Apache Eagle Introduction</a></li>
<li><a href="https://eagle.apache.org/docs/latest/">Apache Eagle Document</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Storm</tag>
        <tag>Apache Kafka</tag>
        <tag>Apache Hadoop</tag>
        <tag>Apache ZooKeeper</tag>
        <tag>ElasticSearch</tag>
        <tag>Apache Eagle</tag>
        <tag>Apache HBase</tag>
        <tag>Apache Yarn</tag>
        <tag>LogStash</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Superset 二次开发</title>
    <url>/posts/743/</url>
    <content><![CDATA[<h2 id="Apache-Superset-是什么？"><a href="#Apache-Superset-是什么？" class="headerlink" title="Apache Superset 是什么？"></a>Apache Superset 是什么？</h2><blockquote>
<p><strong><a href="https://superset.apache.org/">Apache Superset</a></strong>™ is a modern data exploration and visualization platform.</p>
</blockquote>
<h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>　<a href="https://yuzhouwan.com/posts/43687/">Python</a> 几大著名 Web 框架之一，以其轻量级，高可扩展性而著名</p>
<ul>
<li><p>Jinja2<br>  模板引擎</p>
</li>
<li><p>Werkzeug<br>  WSGI 工具集</p>
</li>
</ul>
<h3 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h3><p>　Gunicorn 是一个开源的 Python WSGI HTTP 服务器，移植于 Ruby 的 Unicorn 项目的采用 pre-fork 模式的服务器</p>
<h4 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h4><p>　WSGI，即 Python <strong>W</strong>eb <strong>S</strong>erver <strong>G</strong>ateway <strong>I</strong>nterface，是专门用于 Python 应用程序或框架与 Web 服务器之间的一种接口，没有官方的实现，因为 WSGI 更像一个协议，只要遵照这些协议，WSGI 应用都可以在 任何服务器上运行，反之亦然</p>
<h4 id="Pre-Fork"><a href="#Pre-Fork" class="headerlink" title="Pre-Fork"></a>Pre-Fork</h4><p>　一个进程处理一个请求，基于 select 模型，所以最多一次创建 1024 个进程<br>　预先创建进程，pre-fork 采用的是预派生子进程方式，用子进程处理不同的请求，每个请求对应一个子进程，进程之间是彼此独立的<br>　一定程度上加快了进程的响应速度</p>
<span id="more"></span>
<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>　Django 是一个开放源代码的 Web 应用框架，由 Python 写成。采用了 MVC 的软件设计模式，使得开发复杂的、数据库驱动的网站变得简单<br>　Django 注重组件的重用性和”可插拔性”，敏捷开发和 DRY 法则（Do not Repeat Yourself）</p>
<p>　核心组件</p>
<ul>
<li>物件导向的映射器，用作数据模型（以 Python 类的形式定义）和 关联性数据库间的媒介</li>
<li>基于正则表达式的 URL 分发器</li>
<li>视图系统，用于处理请求</li>
<li>模板系统</li>
</ul>
<h3 id="PyDruid"><a href="#PyDruid" class="headerlink" title="PyDruid"></a>PyDruid</h3><p>　A Python connector for Druid<br>　Exposes a simple API to create, execute, and analyze Druid queries</p>
<h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><p>　Pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive</p>
<h3 id="SciPy"><a href="#SciPy" class="headerlink" title="SciPy"></a>SciPy</h3><p>　SciPy 是基于 Numpy 构建的一个集成了多种数学算法和方便的函数的 Python 模块</p>
<h3 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit-learn"></a>Scikit-learn</h3><p>　Machine Learning in Python</p>
<h3 id="D3-js"><a href="#D3-js" class="headerlink" title="D3.js"></a>D3.js</h3><p>　<a href="https://d3js.org/">D3.js</a> 是一个操纵数据的 JavaScript 库</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><h4 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux 2.6.32-431.el6.x86_64 <span class="comment">#1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">$ cat /proc/version</span><br><span class="line">Linux version 2.6.32-431.el6.x86_64 (mockbuild@c6b8.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) <span class="comment">#1 SMP Fri Nov 22 03:15:09 UTC 2013</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For Fedora and RHEL-derivatives</span></span><br><span class="line"><span class="comment"># [Doc]: Other System https://superset.apache.org/installation.html#os-dependencies</span></span><br><span class="line">$ sudo yum upgrade python-setuptools -y</span><br><span class="line">$ sudo yum install gcc libffi-devel python-devel python-pip python-wheel openssl-devel libsasl2-devel openldap-devel -y</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Machines"><a href="#Machines" class="headerlink" title="Machines"></a>Machines</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 外网（http://192.168.1.10:9097/）</span></span><br><span class="line">superset01		               192.168.1.10           Superset</span><br><span class="line">druid01		        	       192.168.1.11           Druid</span><br><span class="line">druid02		        	       192.168.1.12           MySQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster 配置</span></span><br><span class="line">Cluster                         druid cluster</span><br><span class="line">Coordinator Host                192.168.1.11</span><br><span class="line">Coordinator Port                8081</span><br><span class="line">Coordinator Endpoint            druid/coordinator/v1/metadata</span><br><span class="line">Broker Host                     192.168.1.13</span><br><span class="line">Broker Port                     8082</span><br><span class="line">Broker Endpoint                 druid/v2</span><br><span class="line">Cache Timeout                   86400				<span class="comment"># 1day: result_backend</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线上（http://192.168.2.10:9097）</span></span><br><span class="line">druid-prd01	                    192.168.2.10         Superset</span><br><span class="line">druid-prd02	                    192.168.2.11         Druid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster 配置</span></span><br><span class="line">Cluster                         druid cluster</span><br><span class="line">Coordinator Host                192.168.2.11</span><br><span class="line">Coordinator Port                8081</span><br><span class="line">Coordinator Endpoint            druid/coordinator/v1/metadata</span><br><span class="line">Broker Host                     192.168.2.13</span><br><span class="line">Broker Port                     8082</span><br><span class="line">Broker Endpoint                 druid/v2</span><br><span class="line">Cache Timeout                   86400                 <span class="comment"># 1day: result_backend</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Python-相关"><a href="#Python-相关" class="headerlink" title="Python 相关"></a>Python 相关</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">  Python 2.7.8</span><br><span class="line"></span><br><span class="line">[Note]: Superset is tested using Python 2.7 and Python 3.4+. Python 3 is the recommended version, Python 2.6 won<span class="string">'t be supported.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 升级 Python（stable: Python 2.7.12 | 3.4.5, lastest: Python 3.5.2 [2016/12/15]）</span></span><br><span class="line">https://www.python.org/downloads/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 python ftp 服务器中下载到，对应版本的 python</span></span><br><span class="line">$ wget http://python.org/ftp/python/2.7.12/Python-2.7.12.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ tar -zxvf Python-2.7.12.tgz</span><br><span class="line">$ <span class="built_in">cd</span> /root/software/Python-2.7.12</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"></span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/python27/ -al</span><br><span class="line"></span><br><span class="line">  drwxr-xr-x.  6 root root 4096 12月 15 14:22 .</span><br><span class="line">  drwxr-xr-x. 13 root root 4096 12月 15 14:20 ..</span><br><span class="line">  drwxr-xr-x.  2 root root 4096 12月 15 14:22 bin</span><br><span class="line">  drwxr-xr-x.  3 root root 4096 12月 15 14:21 include</span><br><span class="line">  drwxr-xr-x.  4 root root 4096 12月 15 14:22 lib</span><br><span class="line">  drwxr-xr-x.  3 root root 4096 12月 15 14:22 share</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖原来的 python6</span></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">  /usr/<span class="built_in">local</span>/bin/python</span><br><span class="line"><span class="comment"># mv /usr/bin/python /usr/bin/python_old</span></span><br><span class="line">$ mv /usr/<span class="built_in">local</span>/bin/python /usr/<span class="built_in">local</span>/bin/python_old</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python27/bin/python /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">$ python --version</span><br><span class="line">  Python 2.7.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 yum 引用的 python 版本为旧版 2.6 的 python</span></span><br><span class="line">$ vim /usr/bin/yum</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第一行修改为 python2.6</span></span><br><span class="line">  <span class="comment">#!/usr/bin/python2.6</span></span><br><span class="line"></span><br><span class="line">$ yum --version | sed <span class="string">'2,$d'</span></span><br><span class="line">  3.2.29</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Pip"><a href="#Pip" class="headerlink" title="Pip"></a>Pip</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip --version</span><br><span class="line">$ pip 9.0.1 from /usr/<span class="built_in">local</span>/lib/python2.7/site-packages (python 2.7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># upgrade setup tools and pip</span></span><br><span class="line">$ pip install --upgrade setuptools pip</span><br><span class="line"></span><br><span class="line"><span class="comment">## Offline 环境下安装 pip</span></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/setuptools#code-of-conduct 下载 setuptools-32.0.0.tar.gz</span></span><br><span class="line">$ tar zxvf setuptools-32.0.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> setuptools-32.0.0</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> setuptools-32.0.0</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/pip 下载 pip-9.0.1.tar.gz</span></span><br><span class="line">$ wget --no-check-certificate https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz<span class="comment">#md5=35f01da33009719497f01a4ba69d63c9</span></span><br><span class="line">$ tar zxvf pip-9.0.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pip-9.0.1</span><br><span class="line">$ python setup.py install</span><br><span class="line">  Installed /usr/<span class="built_in">local</span>/python27/lib/python2.7/site-packages/pip-9.0.1-py2.7.egg</span><br><span class="line">  Processing dependencies <span class="keyword">for</span> pip==9.0.1</span><br><span class="line">  Finished processing dependencies <span class="keyword">for</span> pip==9.0.1</span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">  pip 9.0.1 from /root/software/pip-9.0.1 (python 2.7)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a>Virtualenv</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtualenv is shipped in Python 3 as pyvenv</span></span><br><span class="line">$ virtualenv venv</span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment">## Offline 环境下安装 virtualenv</span></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/virtualenv#downloads 下载 virtualenv-15.1.0.tar.gz</span></span><br><span class="line">$ tar zxvf virtualenv-15.1.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> virtualenv-15.1.0</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line">$ virtualenv --version</span><br><span class="line">  15.1.0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Superset-相关"><a href="#Superset-相关" class="headerlink" title="Superset 相关"></a>Superset 相关</h3><h4 id="Superset-初始化"><a href="#Superset-初始化" class="headerlink" title="Superset 初始化"></a>Superset <a href="https://superset.incubator.apache.org/installation.html#making-your-own-build">初始化</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install superset</span><br><span class="line"></span><br><span class="line"><span class="comment">## Offline 环境下安装 superset</span></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/superset 下载 superset-0.15.0.tar.gz</span></span><br><span class="line">$ tar zxvf superset-0.15.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> superset-0.15.0</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an admin user</span></span><br><span class="line">$ fabmanager create-admin --app superset</span><br><span class="line"></span><br><span class="line">  Username [admin]:        <span class="comment"># login name</span></span><br><span class="line">  User first name [admin]: <span class="comment"># first name</span></span><br><span class="line">  User last name [user]:   <span class="comment"># lastname</span></span><br><span class="line">  Email [admin@fab.org]:   <span class="comment"># email, must unique</span></span><br><span class="line">  Password: </span><br><span class="line">  Repeat <span class="keyword">for</span> confirmation: </span><br><span class="line">  Error: the two entered values <span class="keyword">do</span> not match</span><br><span class="line">  Password:			 	<span class="comment">#superset</span></span><br><span class="line">  Repeat <span class="keyword">for</span> confirmation: <span class="comment">#superset</span></span><br><span class="line">  // ...</span><br><span class="line">  Recognized Database Authentications.</span><br><span class="line">  2016-12-14 17:53:40,945:INFO:flask_appbuilder.security.sqla.manager:Added user superset db upgrade</span><br><span class="line">  Admin User superset db upgrade created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the database</span></span><br><span class="line">$ superset db upgrade</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">  INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</span><br><span class="line">  INFO  [alembic.runtime.migration] Will assume transactional DDL.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load some data to play with</span></span><br><span class="line">$ superset load_examples</span><br><span class="line"></span><br><span class="line">  Loading examples into &lt;SQLA engine=u<span class="string">'sqlite:////root/.superset/superset.db'</span>&gt;</span><br><span class="line">  Creating default CSS templates</span><br><span class="line">  Loading energy related dataset</span><br><span class="line">  Creating table [wb_health_population] reference</span><br><span class="line">  2016-12-14 17:58:09,568:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:58:09,575:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line">  Loading [World Bank<span class="string">'s Health Nutrition and Population Stats]'</span></span><br><span class="line">  Creating table [wb_health_population] reference</span><br><span class="line">  2016-12-14 17:58:30,840:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:58:30,846:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create default roles and permissions</span></span><br><span class="line">$ superset init</span><br><span class="line"></span><br><span class="line">  Loading examples into &lt;SQLA engine=u<span class="string">'sqlite:////root/.superset/superset.db'</span>&gt;</span><br><span class="line">  Creating default CSS templates</span><br><span class="line">  Loading energy related dataset</span><br><span class="line">  Creating table [wb_health_population] reference</span><br><span class="line">  2016-12-14 17:58:09,568:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:58:09,575:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line">  Loading [World Bank<span class="string">'s Health Nutrition and Population Stats]</span></span><br><span class="line"><span class="string">  Creating table [wb_health_population] reference</span></span><br><span class="line"><span class="string">  2016-12-14 17:58:30,840:INFO:root:Creating database reference</span></span><br><span class="line"><span class="string">  2016-12-14 17:58:30,846:INFO:root:sqlite:////root/.superset/superset.db</span></span><br><span class="line"><span class="string">  Creating slices</span></span><br><span class="line"><span class="string">  Creating a World'</span>s Health Bank dashboard</span><br><span class="line">  Loading [Birth names]</span><br><span class="line">  Done loading table!</span><br><span class="line">  --------------------------------------------------------------------------------</span><br><span class="line">  Creating table [birth_names] reference</span><br><span class="line">  2016-12-14 17:58:52,276:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:58:52,280:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line">  Creating some slices</span><br><span class="line">  Creating a dashboard</span><br><span class="line">  Loading [Random time series data]</span><br><span class="line">  Done loading table!</span><br><span class="line">  --------------------------------------------------------------------------------</span><br><span class="line">  Creating table [random_time_series] reference</span><br><span class="line">  2016-12-14 17:58:53,953:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:58:53,957:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line">  Creating a slice</span><br><span class="line">  Loading [Random long/lat data]</span><br><span class="line">  Done loading table!</span><br><span class="line">  --------------------------------------------------------------------------------</span><br><span class="line">  Creating table reference</span><br><span class="line">  2016-12-14 17:59:09,732:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:59:09,736:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line">  Creating a slice</span><br><span class="line">  Loading [Multiformat time series]</span><br><span class="line">  Done loading table!</span><br><span class="line">  --------------------------------------------------------------------------------</span><br><span class="line">  Creating table [multiformat_time_series] reference</span><br><span class="line">  2016-12-14 17:59:10,421:INFO:root:Creating database reference</span><br><span class="line">  2016-12-14 17:59:10,426:INFO:root:sqlite:////root/.superset/superset.db</span><br><span class="line">  Creating some slices</span><br><span class="line">  Loading [Misc Charts] dashboard</span><br><span class="line">  Creating the dashboard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the web server on port 8088</span></span><br><span class="line">$ superset runserver -p 8088</span><br><span class="line"></span><br><span class="line"><span class="comment"># To start a development web server, use the -d switch</span></span><br><span class="line"><span class="comment"># superset runserver -d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Refresh Druid Datasource (after config it)</span></span><br><span class="line">$ superset refresh_druid</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Virtualenv-工作空间"><a href="#Virtualenv-工作空间" class="headerlink" title="Virtualenv 工作空间"></a>Virtualenv 工作空间</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># superset01 192.168.1.10</span></span><br><span class="line">$ <span class="built_in">cd</span> root</span><br><span class="line">$ virtualenv -p /usr/<span class="built_in">local</span>/bin/python --system-site-packages --always-copy superset</span><br><span class="line">$ <span class="built_in">source</span> superset/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 详见下文 `遇到的坑` - `安装 superset 需要下载依赖库` 部分</span></span><br><span class="line"><span class="comment"># 旧版</span></span><br><span class="line"><span class="comment"># pip install --download package -r requirements.txt</span></span><br><span class="line"><span class="comment"># 新版 (v19.0.3)</span></span><br><span class="line"><span class="comment"># pip download -d package -r requirements.txt</span></span><br><span class="line">$ pip install -r /root/requirements.txt</span><br><span class="line"></span><br><span class="line">$ superset runserver -a 0.0.0.0 -p 8088</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议使用 rsync，详见 `部署上线` 部分</span></span><br><span class="line">$ <span class="built_in">cd</span> /root</span><br><span class="line">$ tar zcvf virtualenv.tar.gz virtualenv/</span><br><span class="line">$ scp virtualenv.tar.gz root@192.168.1.13:/root/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.1.13</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/virtualenv/superset</span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br></pre></td></tr></tbody></table></figure>
<h4 id="VirtualenvWrapper"><a href="#VirtualenvWrapper" class="headerlink" title="VirtualenvWrapper"></a>VirtualenvWrapper</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## 【拓展】</span></span><br><span class="line"><span class="comment"># virtualenvwrapper 是 virtualenv 的扩展工具，可以方便的创建、删除、复制、切换不同的虚拟环境</span></span><br><span class="line">$ pip install virtualenvwrapper</span><br><span class="line">$ mkdir ~/workspaces</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="comment"># 增加</span></span><br><span class="line">  <span class="built_in">export</span> WORKON_HOME=~/virtualenv</span><br><span class="line">  <span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">$ mkvirtualenv --python=/usr/bin/python superset</span><br><span class="line">  Running virtualenv with interpreter /usr/bin/python</span><br><span class="line">  New python executable <span class="keyword">in</span> /root/virtualenv/superset/bin/python</span><br><span class="line">  Installing setuptools, pip, wheel...done.</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/predeactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/postdeactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/preactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/postactivate</span><br><span class="line">  virtualenvwrapper.user_scripts creating /root/virtualenv/superset/bin/get_env_details</span><br><span class="line">(superset) [root@superset01 virtualenv]<span class="comment"># </span></span><br><span class="line">(superset) [root@superset01 virtualenv]<span class="comment"># deactivate</span></span><br><span class="line"></span><br><span class="line">$ workon superset</span><br><span class="line">(superset) [root@superset01 virtualenv]<span class="comment"># lsvirtualenv -b</span></span><br><span class="line">superset</span><br></pre></td></tr></tbody></table></figure>
<h3 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h3><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># rsync 替换 scp 可以确保软链接 也能被 cp</span></span><br><span class="line">$ rsync -avuz -e ssh /home/superset/superset-0.15.4/ yuzhouwan@middle:/home/yuzhouwan/superset-0.15.4</span><br><span class="line"></span><br><span class="line">  //...</span><br><span class="line">  sent 142935894 bytes  received 180102 bytes  3920986.19 bytes/sec</span><br><span class="line">  total size is 359739823  speedup is 2.51</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 本机 和 目标机器 的 superset 目录下校验文件数量</span></span><br><span class="line">$ find | wc -l</span><br><span class="line">  10113</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复以上步骤，从跳板机 rsync 到线上机器</span></span><br><span class="line">$ rsync -avuz -e ssh /home/yuzhouwan/superset-0.15.4/ root@192.168.2.10:/home/superset/superset-0.15.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtualenv 创建依赖的 python</span></span><br><span class="line">$ rsync -avuz -e ssh /root/software yuzhouwan@middle:/home/yuzhouwan</span><br><span class="line">$ rsync -avuz -e ssh /home/yuzhouwan/software root@druid-prd01:/root</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/software</span><br><span class="line">$ tar zxvf Python-2.7.12.tgz</span><br><span class="line">$ <span class="built_in">cd</span> Python-2.7.12</span><br><span class="line"></span><br><span class="line">$ ./configure --prefix=/usr --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /		<span class="comment"># nessnary!!</span></span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br></pre></td></tr></tbody></table></figure>
<h4 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然软链接已经 rsync 过来了，但是 目标机器相关目录下，没有对应的 Python 的动态链接库</span></span><br><span class="line">$ file /root/superset/lib/python2.7/lib-dynload</span><br><span class="line"></span><br><span class="line">  /root/superset/lib/python2.7/lib-dynload: broken symbolic link to `/usr/<span class="built_in">local</span>/python27/lib/python2.7/lib-dynload`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要和联网环境中，创建 VirtualEnv 时的 Python 全局环境一致</span></span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27 --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line"></span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/python27/lib/python2.7/lib-dynload -sail</span><br></pre></td></tr></tbody></table></figure>
<h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">$ adduser superset</span><br><span class="line">$ <span class="built_in">cd</span> /home/superset</span><br><span class="line"><span class="comment"># 如果存在版本号，需要创建 软链接</span></span><br><span class="line">$ chown -R superset:superset superset-0.15.4</span><br><span class="line">$ ln -s superset-0.15.4 superset</span><br><span class="line"></span><br><span class="line">$ chown -h superset:superset superset</span><br><span class="line">$ su - superset</span><br></pre></td></tr></tbody></table></figure>
<h4 id="元数据存储"><a href="#元数据存储" class="headerlink" title="元数据存储"></a>元数据存储</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改数据库</span></span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/config.py</span><br><span class="line"></span><br><span class="line">  <span class="comment"># SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(DATA_DIR, 'superset.db')</span></span><br><span class="line">  SQLALCHEMY_DATABASE_URI = <span class="string">'mysql+pymysql://user:password@mysql01:3306/superset1?charset=utf8'</span></span><br><span class="line"></span><br><span class="line">$ mysql -hmysql01 -p3306 -uuser -ppassword</span><br><span class="line">&gt; use superset1;</span><br><span class="line">&gt; show tables;</span><br><span class="line">  +-------------------------+</span><br><span class="line">  | Tables_in_superset1     |</span><br><span class="line">  +-------------------------+</span><br><span class="line">  | ab_permission           |</span><br><span class="line">  | ...                     |</span><br><span class="line">  | url                     |</span><br><span class="line">  +-------------------------+</span><br><span class="line">  28 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -hmysql01 -p3306 -uuser -ppassword superset1 &gt; superset1.sql</span></span><br><span class="line">$ mysqldump -hmysql01 -p3306 -uuser -ppassword --single-transaction superset1 &gt; superset1.sql</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/superset/superset-0.15.4</span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br><span class="line">$ mkdir logs</span><br><span class="line">$ nohup superset runserver -a 0.0.0.0 -p 9097 2&gt;&amp;1 -w 4 &gt; logs/superset.log &amp;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="Windows-相关"><a href="#Windows-相关" class="headerlink" title="Windows 相关"></a>Windows 相关</h4><h5 id="Microsoft-Visual-C-9-0-is-required-Unable-to-find-vcvarsall-bat"><a href="#Microsoft-Visual-C-9-0-is-required-Unable-to-find-vcvarsall-bat" class="headerlink" title="Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat)"></a>Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat)</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><p>　error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from <code>http://aka.ms/vcpython27</code></p>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install wheel setuptools</span><br><span class="line"><span class="comment"># VCForPython27.msi 下载安装</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="‘openssl-opensslv-h’-No-such-file-or-directory"><a href="#‘openssl-opensslv-h’-No-such-file-or-directory" class="headerlink" title="‘openssl/opensslv.h’: No such file or directory"></a>‘openssl/opensslv.h’: No such file or directory</h5><h6 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># download openssl-0.9.8h-1-setup.exe from http://gnuwin32.sourceforge.net/packages/openssl.htm</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Cannot-open-include-file-‘stdint-h’-No-such-file-or-directory"><a href="#Cannot-open-include-file-‘stdint-h’-No-such-file-or-directory" class="headerlink" title="Cannot open include file: ‘stdint.h’: No such file or directory"></a>Cannot open include file: ‘stdint.h’: No such file or directory</h5><h6 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Microsoft Visual C++ 2015 Redistributable Update 3</span></span><br><span class="line"><span class="comment"># download vc_redist.x64.exe from https://www.microsoft.com/zh-CN/download/details.aspx?id=53840</span></span><br><span class="line">$ vim D:\apps\Python27\Lib\distutils\msvc9compiler.py</span><br><span class="line"></span><br><span class="line">  def get_build_version():</span><br><span class="line">    <span class="built_in">return</span> 9.0</span><br><span class="line">  def find_vcvarsall(version):</span><br><span class="line">    <span class="built_in">return</span> r<span class="string">'C:\Users\yuzhouwan\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat'</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> superset-0.15.4</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft 提供的 VCForPython27.msi 默认使用 VC2008，而 stdint.h 是从 VC2012 开始支持的</span></span><br><span class="line"><span class="comment"># 2014 年之后，VCForPython27.msi 便不再维护，决定尝试用 ubuntu or remote debug ...</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Python相关"><a href="#Python相关" class="headerlink" title="Python相关"></a>Python相关</h4><h5 id="Make-sure-that-you-use-the-correct-version-of-‘pip’"><a href="#Make-sure-that-you-use-the-correct-version-of-‘pip’" class="headerlink" title="Make sure that you use the correct version of ‘pip’"></a>Make sure that you use the correct version of ‘pip’</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Try to run this <span class="built_in">command</span> from the system terminal. Make sure that you use the correct version of <span class="string">'pip'</span> installed <span class="keyword">for</span> your Python interpreter located at <span class="string">'D:\apps\Python27\python.exe'</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 pip，下载 https://bootstrap.pypa.io/get-pip.py 安装文件</span></span><br><span class="line">$ python get-pip.py</span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">  pip 8.1.1 from d:\apps\python27\lib\site-packages (python 2.7)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="‘Connection-to-pypi-python-org-timed-out-connect-timeout-15-’"><a href="#‘Connection-to-pypi-python-org-timed-out-connect-timeout-15-’" class="headerlink" title="‘Connection to pypi.python.org timed out. (connect timeout=15)’"></a>‘Connection to pypi.python.org timed out. (connect timeout=15)’</h5><h6 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br><span class="line">  <span class="string">'Connection to pypi.python.org timed out. (connect timeout=15)'</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 proxy</span></span><br><span class="line">$ <span class="built_in">export</span> https_proxy=<span class="string">"http://10.10.10.10:8080"</span></span><br><span class="line">$ pip install --upgrade pip</span><br><span class="line">$ pip --version</span><br><span class="line">  pip 9.0.1 from d:\apps\python27\lib\site-packages (python 2.7)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="setup-py-failed-with-error-code-1"><a href="#setup-py-failed-with-error-code-1" class="headerlink" title="setup.py failed with error code 1"></a>setup.py failed with error code 1</h5><h6 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Command <span class="string">"d:\apps\python27\python.exe -u -c "</span>import setuptools, tokenize;__file__=<span class="string">'c:\\users\\yuzhouwan\\appdata\\local\\temp\\pip-build-zzbhrq\\sasl\\setup.py'</span>;f=getattr(tokenize, <span class="string">'open'</span>, open)(__file__);code=f.read().replace(<span class="string">'\r\n'</span>, <span class="string">'\n'</span>);f.close();<span class="built_in">exec</span>(compile(code, __file__, <span class="string">'exec'</span>))<span class="string">" install --record c:\users\yuzhouwan\appdata\local\temp\pip-erwavd-record\install-record.txt --single-version-externally-managed --compile"</span> failed with error code 1 <span class="keyword">in</span> c:\users\yuzhouwan\appdata\<span class="built_in">local</span>\temp\pip-build-zzbhrq\sasl\</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install --upgrade setuptools pip</span><br><span class="line">$ pip install superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download superset-0.15.4.tar.gz from https://pypi.python.org/pypi/superset</span></span><br><span class="line">$ tar zxvf superset-0.15.4.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> superset-0.15.4</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></tbody></table></figure>
<h2 id="基于-K8S-环境部署"><a href="#基于-K8S-环境部署" class="headerlink" title="基于 K8S 环境部署"></a>基于 <a href="https://yuzhouwan.com/posts/200919/">K8S</a> 环境部署</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ helm install superset stable/superset --version 1.1.11</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">NAME: superset</span><br><span class="line">LAST DEPLOYED: Mon Jul 19 08:45:33 2020</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">Superset can be accessed via port 9000 on the following DNS name from within your cluster:</span><br><span class="line">superset.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Initially you can login with username/password: admin/admin.</span><br><span class="line">WARNING: Persistence is DISABLED !</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it superset-65c7696586-lhwpp bash</span><br><span class="line">$ <span class="built_in">export</span> FLASK_APP=superset &amp;&amp; flask fab create-admin</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ <span class="built_in">kill</span> `ps -ef | grep 8088 | grep -v grep | awk <span class="string">'{print $2}'</span>`; <span class="built_in">export</span> POD_NAME=$(kubectl get pods | grep superset | awk <span class="string">'{print $1}'</span>) ; nohup kubectl port-forward <span class="variable">$POD_NAME</span> 8088:8088 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br><span class="line">$ open <span class="string">'http://localhost:8088/login/'</span></span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/superset/apache_superset_login.png" alt="Apache Superset Login"><br><img data-src="/picture/superset/apache_superset_dashboards.png" alt="Apache Superset Dashboards"></p>
<center>（对 <a href="https://superset.apache.org/" target="_blank">Apache Superset</a>™ 可视化页面的截图）</center>





<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/software</span><br><span class="line">$ tar zxvf Python-2.7.12.tgz</span><br><span class="line">$ <span class="built_in">cd</span> Python-2.7.12</span><br><span class="line"></span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27 --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line">$ python -V</span><br><span class="line">$ Python 2.7.12</span><br><span class="line"></span><br><span class="line">$ mv /usr/<span class="built_in">local</span>/bin/python /usr/<span class="built_in">local</span>/bin/python_bak</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python27/bin/python /usr/<span class="built_in">local</span>/bin/python</span><br></pre></td></tr></tbody></table></figure>
<h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root</span><br><span class="line">$ virtualenv -p /usr/<span class="built_in">local</span>/bin/python --system-site-packages env</span><br><span class="line">$ <span class="built_in">cd</span> env</span><br><span class="line">$ mkdir code</span><br></pre></td></tr></tbody></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">$ <span class="built_in">cd</span> E:\Github\super\env</span><br><span class="line">$ git init</span><br><span class="line">$ git remote add origin master https://github.com/asdf2014/superset.git</span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># SFTP</span></span><br><span class="line"><span class="comment"># 上传到 /root/env/code</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/env/code</span><br><span class="line">$ <span class="built_in">source</span> /root/env/bin/activate</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/env/code/superset/static</span><br><span class="line">$ mv assets assets_bak</span><br><span class="line">$ ln -s ../assets assets</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/env/code</span><br><span class="line">$ python setup.py develop</span><br><span class="line"></span><br><span class="line">  Finished processing dependencies <span class="keyword">for</span> superset==0.15.4</span><br><span class="line"></span><br><span class="line">$ pip freeze | grep superset</span><br><span class="line">  superset==0.15.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an admin user</span></span><br><span class="line">$ fabmanager create-admin --app superset</span><br><span class="line"></span><br><span class="line">  Username [admin]:        <span class="comment"># login name</span></span><br><span class="line">  User first name [admin]: <span class="comment"># first name</span></span><br><span class="line">  User last name [user]:   <span class="comment"># lastname</span></span><br><span class="line">  Email [admin@fab.org]:   <span class="comment"># email, must unique</span></span><br><span class="line">  Password: </span><br><span class="line">  Repeat <span class="keyword">for</span> confirmation: </span><br><span class="line">  Error: the two entered values <span class="keyword">do</span> not match</span><br><span class="line">  Password:			 	  <span class="comment">#superset</span></span><br><span class="line">  Repeat <span class="keyword">for</span> confirmation: <span class="comment">#superset</span></span><br><span class="line">  // ...</span><br><span class="line">  Recognized Database Authentications.</span><br><span class="line">  2016-12-14 17:53:40,945:INFO:flask_appbuilder.security.sqla.manager:Added user superset db upgrade</span><br><span class="line">  Admin User superset db upgrade created.</span><br><span class="line"></span><br><span class="line">$ superset db upgrade</span><br><span class="line">$ superset init</span><br><span class="line">$ superset load_examples</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># [Mac OS]</span></span><br><span class="line">$ sudo yum group install <span class="string">"Development Tools"</span> --<span class="built_in">setopt</span>=group_package_types=mandatory,default,optional --skip-broken -y</span><br><span class="line">$ sudo yum install curl git m4 ruby texinfo bzip2-devel curl-devel expat-devel ncurses-devel zlib-devel -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)"    # Do not run this as root!</span></span><br><span class="line">$ wget https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install --no-check-certificate</span><br><span class="line">$ mv install install.rb</span><br><span class="line">$ vim install.rb</span><br><span class="line"></span><br><span class="line">　<span class="comment"># abort "Don't run this as root!" if Process.uid == 0</span></span><br><span class="line"></span><br><span class="line">$ mkdir -p /root/.linuxbrew/bin</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">"/root/.linuxbrew/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line">$ ruby install.rb</span><br><span class="line"></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">　<span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.linuxbrew/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line">　<span class="built_in">export</span> MANPATH=<span class="string">"<span class="variable">$HOME</span>/.linuxbrew/share/man:<span class="variable">$MANPATH</span>"</span></span><br><span class="line">　<span class="built_in">export</span> INFOPATH=<span class="string">"<span class="variable">$HOME</span>/.linuxbrew/share/info:<span class="variable">$INFOPATH</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># [CentOS]</span></span><br><span class="line">$ yum install npm</span><br><span class="line">$ <span class="built_in">cd</span> /root/env/code/superset/assets	<span class="comment"># package.json</span></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># if visit https://github.com/jquery/jquery.git return timeout</span></span><br><span class="line">$ vim /etc/hosts</span><br><span class="line"></span><br><span class="line">　192.30.253.112 github.com</span><br><span class="line">　151.101.100.133 assets-cdn.github.com</span><br><span class="line">　192.30.253.117 api.github.com</span><br><span class="line">　192.30.253.121 codeload.github.com</span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/env/code</span><br><span class="line">$ chmod 777 *sh</span><br><span class="line">$ <span class="built_in">cd</span> /root/env/code/superset/bin</span><br><span class="line">$ chmod 777 superset</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/env/code</span><br><span class="line">$ bash run_tests.sh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="IDE-中远程开发"><a href="#IDE-中远程开发" class="headerlink" title="IDE 中远程开发"></a>IDE 中远程开发</h3><h4 id="Remote-Debug"><a href="#Remote-Debug" class="headerlink" title="Remote Debug"></a>Remote Debug</h4><p>　详见我的另一篇博客中 Remote Debug 部分：《<a href="https://yuzhouwan.com/posts/43687/#Remote-Debug">Python</a>》</p>
<h2 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h2><h3 id="Others-Category"><a href="#Others-Category" class="headerlink" title="Others Category"></a>Others Category</h3><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>　对 <a href="https://yuzhouwan.com/posts/45888/">HBase</a> 的 Region 层面进行聚合，group 出来的 Region 会很多，在 <code>DistributionPieViz</code> 中展示会很卡顿，而且不美观</p>
<h4 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h4><h5 id="增加-row-limit-可以排除-topN-之外的数据"><a href="#增加-row-limit-可以排除-topN-之外的数据" class="headerlink" title="增加 row_limit 可以排除 topN 之外的数据"></a>增加 row_limit 可以排除 topN 之外的数据</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/superset-0.15.4</span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/viz.py</span><br><span class="line"></span><br><span class="line">  fieldsets = ({</span><br><span class="line">    <span class="string">'label'</span>: None,</span><br><span class="line">    <span class="string">'fields'</span>: (</span><br><span class="line">      <span class="string">'metrics'</span>, <span class="string">'groupby'</span>,</span><br><span class="line">      <span class="string">'limit'</span>,</span><br><span class="line">      <span class="string">'pie_label_type'</span>,</span><br><span class="line">      (<span class="string">'donut'</span>, <span class="string">'show_legend'</span>),</span><br><span class="line">      <span class="string">'labels_outside'</span>,</span><br><span class="line">      <span class="string">'row_limit'</span>,</span><br><span class="line">    )</span><br><span class="line">  },)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="others-category-将-topN-之外的数据聚合"><a href="#others-category-将-topN-之外的数据聚合" class="headerlink" title="others_category 将 topN 之外的数据聚合"></a>others_category 将 topN 之外的数据聚合</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/superset-0.15.4</span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/viz.py</span><br><span class="line"></span><br><span class="line">  fieldsets = ({</span><br><span class="line">    <span class="string">'label'</span>: None,</span><br><span class="line">    <span class="string">'fields'</span>: (</span><br><span class="line">      <span class="string">'metrics'</span>, <span class="string">'groupby'</span>,</span><br><span class="line">      <span class="string">'limit'</span>,</span><br><span class="line">      <span class="string">'pie_label_type'</span>,</span><br><span class="line">      (<span class="string">'donut'</span>, <span class="string">'show_legend'</span>),</span><br><span class="line">      <span class="string">'labels_outside'</span>,</span><br><span class="line">      <span class="string">'row_limit'</span>,</span><br><span class="line">      <span class="string">'others_category'</span>,</span><br><span class="line">    )</span><br><span class="line">  },)</span><br><span class="line"></span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/forms.py</span><br><span class="line"></span><br><span class="line">  <span class="string">'others_category'</span>: (BetterBooleanField, {</span><br><span class="line">    <span class="string">"label"</span>: _(<span class="string">"Others category"</span>),</span><br><span class="line">    <span class="string">"default"</span>: True,</span><br><span class="line">    <span class="string">"description"</span>: _(<span class="string">"Aggregate data outside of topN into a single category"</span>)</span><br><span class="line">  }),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="comment"># Others 类别，没有被排在最后，而是重新又进行了一次排序</span></span><br><span class="line"><span class="comment"># "others_category": "y" 属性没有传递下来</span></span><br><span class="line"></span><br><span class="line">self.status = None</span><br><span class="line">self.error_message = None</span><br><span class="line">self.others_category = form_data.get(<span class="string">"others_category"</span>)</span><br><span class="line"></span><br><span class="line">top_n = 10</span><br><span class="line"><span class="keyword">if</span> top_n &gt; 0:</span><br><span class="line">df_head = df.head(top_n)</span><br><span class="line">df_tail = df.tail(len(df) - 10)</span><br><span class="line">other_metrics_sum = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(metrics) - 1):</span><br><span class="line">  metric = metrics[i]</span><br><span class="line">  other_metrics_sum[i] = df_tail[metric].sum()</span><br><span class="line">df_other = pd.DataFrame([[<span class="string">'Others'</span>, other_metrics_sum]], columns=df.columns)</span><br><span class="line">df = df_head.append(df_other, ignore_index=True)</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 已提 RP#2176 <a href="https://github.com/apache/superset/pull/2176">Aggregate data outside of topN into a single category</a></p>
<h3 id="Y-轴数据异常"><a href="#Y-轴数据异常" class="headerlink" title="Y 轴数据异常"></a>Y 轴数据异常</h3><h4 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h4><p>　Y 轴本应该是 0 的起点，变成 -997m 负数</p>
<h4 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h4><p>　已提 RP#2307 <a href="https://github.com/apache/superset/issues/2307">Some problem in Y Axis</a></p>
<h2 id="后期优化"><a href="#后期优化" class="headerlink" title="后期优化"></a>后期优化</h2><h3 id="MySQL-时区问题"><a href="#MySQL-时区问题" class="headerlink" title="MySQL 时区问题"></a>MySQL 时区问题</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ lib/python2.7/site-packages/superset/config.py</span><br><span class="line"></span><br><span class="line">　from dateutil import tz</span><br><span class="line"></span><br><span class="line">　<span class="comment"># Druid query timezone</span></span><br><span class="line">　<span class="comment"># tz.tzutc() : Using utc timezone</span></span><br><span class="line">　<span class="comment"># tz.tzlocal() : Using local timezone</span></span><br><span class="line">　<span class="comment"># other tz can be overridden by providing a local_config</span></span><br><span class="line">　DRUID_IS_ACTIVE = True</span><br><span class="line">　DRUID_TZ = tz.tzlocal()		<span class="comment"># +08:00</span></span><br><span class="line"></span><br><span class="line">　<span class="comment"># DRUID_TZ = tz.gettz('Asia/Shanghai')</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h5><p>　已提 RP#2143 <a href="https://github.com/apache/superset/pull/2143">Using the time zone with specific name for querying Druid</a></p>
<h4 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h4><h5 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">dttm.tz_convert(dttm.tzinfo._filename.split(<span class="string">'zoneinfo/'</span>)[<span class="number">1</span>]) - pytz.timezone(dttm.tzinfo._filename.split(<span class="string">'zoneinfo/'</span>)[<span class="number">1</span>]).localize(EPOCH)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-9"><a href="#解决-9" class="headerlink" title="解决"></a>解决</h5><p>　已提 RP#2370 <a href="https://github.com/apache/superset/pull/2370">Fix timezone issues in slices</a></p>
<h3 id="Superset-升级"><a href="#Superset-升级" class="headerlink" title="Superset 升级"></a>Superset 升级</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 直接利用 pip install 的方式进行升级</span></span><br><span class="line">$ pip freeze | grep superset</span><br><span class="line">$ superset==0.13.2</span><br><span class="line"></span><br><span class="line">$ pip install superset==-1</span><br><span class="line">  versions: 0.12.0, 0.13.0, 0.13.1, 0.13.2, 0.14.0, 0.14.1, 0.15.0, 0.15.1, 0.15.3, 0.15.4</span><br><span class="line"></span><br><span class="line">$ pip install superset==0.15.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现之前的配置数据 都消失了，需要做一些 config 的调整</span></span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/config.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(DATA_DIR, 'superset.db')</span></span><br><span class="line">  SQLALCHEMY_DATABASE_URI = <span class="string">'mysql+pymysql://root:root@192.168.1.12:3306/superset?charset=utf8'</span></span><br><span class="line"></span><br><span class="line">$ vim /root/superset-0.15.4/bin/activate</span><br><span class="line"></span><br><span class="line">  <span class="comment"># VIRTUAL_ENV="/root/superset"</span></span><br><span class="line">  VIRTUAL_ENV=<span class="string">"/root/superset-0.15.4"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># then could just run "superset runserver -a 0.0.0.0 -p 9097"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Unknown-column-‘datasources-filter-select-enabled’-in-‘field-list’"><a href="#Unknown-column-‘datasources-filter-select-enabled’-in-‘field-list’" class="headerlink" title="Unknown column ‘datasources.filter_select_enabled’ in ‘field list’"></a>Unknown column ‘datasources.filter_select_enabled’ in ‘field list’</h4><h5 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">InternalError: (pymysql.err.InternalError) (1054, u<span class="string">"Unknown column 'datasources.filter_select_enabled' in 'field list'"</span>) [SQL: u<span class="string">'SELECT datasources.created_on AS datasources_created_on, datasources.changed_on AS datasources_changed_on, datasources.id AS datasources_id, datasources.datasource_name AS datasources_datasource_name, datasources.is_featured AS datasources_is_featured, datasources.is_hidden AS datasources_is_hidden, datasources.filter_select_enabled AS datasources_filter_select_enabled, datasources.description AS datasources_description, datasources.default_endpoint AS datasources_default_endpoint, datasources.user_id AS datasources_user_id, datasources.cluster_name AS datasources_cluster_name, datasources.offset AS datasources_offset, datasources.cache_timeout AS datasources_cache_timeout, datasources.params AS datasources_params, datasources.perm AS datasources_perm, datasources.changed_by_fk AS datasources_changed_by_fk, datasources.created_by_fk AS datasources_created_by_fk \nFROM datasources \nWHERE datasources.datasource_name = %(datasource_name_1)s \n LIMIT %(param_1)s'</span>] [parameters: {u<span class="string">'param_1'</span>: 1, u<span class="string">'datasource_name_1'</span>: u<span class="string">'bi-dfp-oms-detail'</span>}]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-10"><a href="#解决-10" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ superset db upgrade</span><br><span class="line">$ superset refresh_druid</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Issues-with-Druid-timezones"><a href="#Issues-with-Druid-timezones" class="headerlink" title="Issues with Druid timezones"></a>Issues with Druid timezones</h4><h5 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h5><p>　Those methods that named tzutc and tzlocal in tz work for me…<br>　Oh no.. They are not working when i upgrade superset from v0.13.2 into v0.15.4, even if i try to use DRUID_TZ = tz.gettz(‘Asia/Shanghai’) :-(</p>
<p>　详见：<a href="https://github.com/apache/superset/issues/1369">Issues with Druid timezones #1369</a></p>
<h5 id="解决-11"><a href="#解决-11" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/superset-0.15.4</span><br><span class="line">$ ./bin/python -m pip freeze | grep superset</span><br><span class="line"></span><br><span class="line">  superset==0.13.2</span><br><span class="line"></span><br><span class="line">$ ./bin/python -m pip uninstall superset</span><br><span class="line">$ ./bin/python -m pip install superset==0.15.4</span><br><span class="line">$ ./bin/python -m pip freeze | grep superset</span><br><span class="line"></span><br><span class="line">  superset==0.15.4</span><br><span class="line"></span><br><span class="line">$ ./bin/python ./bin/easy_install lib/pycharm-debug.egg</span><br><span class="line"><span class="comment"># config remote python</span></span><br><span class="line"></span><br><span class="line">$ ./bin/python ./bin/superset runserver -a 0.0.0.0 -p 9097</span><br><span class="line"><span class="comment"># nohup ./bin/python ./bin/superset runserver -a 0.0.0.0 -p 9097 2&gt;&amp;1 &gt; logs/superset.log &amp;</span></span><br><span class="line"></span><br><span class="line">$ ./bin/python ./bin/superset db upgrade</span><br><span class="line">$ ./bin/python ./bin/superset refresh_druid</span><br></pre></td></tr></tbody></table></figure>
<h4 id="pydevd-无法进行-remote-debug"><a href="#pydevd-无法进行-remote-debug" class="headerlink" title="pydevd 无法进行 remote debug"></a>pydevd 无法进行 remote debug</h4><h5 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h5><p>　版本从 0.13.2 升级到 0.15.4，在 debug 的时候会启动两个进程（会导致 pydevd 无法进行 remote debug）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ps -ef | grep superset | grep -v grep</span><br><span class="line"></span><br><span class="line">  root     22567  1632 19 12:05 pts/0    00:00:03 ./bin/python ./bin/superset runserver -d -p 9097</span><br><span class="line">  root     22578 22567 24 12:05 pts/0    00:00:03 /root/superset-0.15.4/bin/python ./bin/superset runserver -d -p 9097</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-12"><a href="#解决-12" class="headerlink" title="解决"></a>解决</h5><h6 id="直接用-cli-py-启动-—not-ok"><a href="#直接用-cli-py-启动-—not-ok" class="headerlink" title="直接用 cli.py 启动    —not ok"></a>直接用 cli.py 启动    —not ok</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ./lib/python2.7/site-packages/superset/config.py</span><br><span class="line"></span><br><span class="line">  <span class="comment"># append</span></span><br><span class="line">  manager.run()</span><br><span class="line"></span><br><span class="line">$ ./bin/python ./lib/python2.7/site-packages/superset/cli.py runserver -a 0.0.0.0  -p 9097</span><br><span class="line"></span><br><span class="line">$ ps -ef | grep superset | grep -v grep</span><br><span class="line"></span><br><span class="line">  root     25238  1632 35 13:07 pts/0    00:00:03 ./bin/python ./lib/python2.7/site-packages/superset/cli.py runserver -d -p 9097</span><br><span class="line">  root     25247 25238 55 13:07 pts/0    00:00:03 /root/superset-0.15.4/bin/python ./lib/python2.7/site-packages/superset/cli.py runserver -d -p 9097</span><br></pre></td></tr></tbody></table></figure>
<h6 id="尝试解决-WARNING-werkzeug-Debugger-is-active-问题"><a href="#尝试解决-WARNING-werkzeug-Debugger-is-active-问题" class="headerlink" title="尝试解决 WARNING:werkzeug: * Debugger is active! 问题"></a>尝试解决 WARNING:werkzeug: * Debugger is active! 问题</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim lib/python2.7/site-packages/werkzeug/serving.py</span><br><span class="line"></span><br><span class="line">  class ThreadedWSGIServer(ThreadingMixIn, BaseWSGIServer):</span><br><span class="line"></span><br><span class="line">    <span class="string">""</span><span class="string">"A WSGI server that does threading."</span><span class="string">""</span></span><br><span class="line">    multithread = True</span><br><span class="line"></span><br><span class="line">$ vim lib/python2.7/site-packages/flask/app.py</span><br><span class="line"></span><br><span class="line">  options.setdefault(<span class="string">'use_reloader'</span>, self.debug)</span><br><span class="line"></span><br><span class="line">$ superset/__init__.py</span><br></pre></td></tr></tbody></table></figure>
<p>　已提 RP#2136 <a href="https://github.com/apache/superset/pull/2136">Fix werkzeug instance was created twice in Debug Mode</a></p>
<h3 id="Sqlite3-切换为-MySQL"><a href="#Sqlite3-切换为-MySQL" class="headerlink" title="Sqlite3 切换为 MySQL"></a>Sqlite3 切换为 MySQL</h3><h4 id="尝试-SQLite-自带的-dump-命令"><a href="#尝试-SQLite-自带的-dump-命令" class="headerlink" title="尝试 SQLite 自带的 dump 命令"></a>尝试 SQLite 自带的 dump 命令</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># superset01				192.168.1.10		Superset</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/.superset</span><br><span class="line">$ ll -sail</span><br><span class="line"></span><br><span class="line">  1285 43256 -rw-r--r--   1 root root 44288000 Jan 22 14:06 superset.db</span><br><span class="line"></span><br><span class="line">$ sqlite3 superset.db</span><br><span class="line">  sqlite&gt; .databases</span><br><span class="line">  seq  name             file                                                      </span><br><span class="line">  ---  ---------------  ----------------------------------------------------------</span><br><span class="line">  0    main             /root/.superset/superset.db</span><br><span class="line"></span><br><span class="line">  sqlite&gt; .tables</span><br><span class="line">  ab_permission            columns                  multiformat_time_series</span><br><span class="line">  ab_permission_view       css_templates            query                  </span><br><span class="line">  ab_permission_view_role  dashboard_slices         random_time_series     </span><br><span class="line">  ab_register_user         dashboard_user           slice_user             </span><br><span class="line">  ab_role                  dashboards               slices                 </span><br><span class="line">  ab_user                  datasources              sql_metrics            </span><br><span class="line">  ab_user_role             dbs                      table_columns          </span><br><span class="line">  ab_view_menu             energy_usage             tables                 </span><br><span class="line">  access_request           favstar                  url                    </span><br><span class="line">  alembic_version          logs                     wb_health_population   </span><br><span class="line">  birth_names              long_lat               </span><br><span class="line">  clusters                 metrics                </span><br><span class="line"></span><br><span class="line"><span class="comment"># not suit for mysql</span></span><br><span class="line"><span class="comment"># sqlite&gt; .output superset.sql</span></span><br><span class="line"><span class="comment"># sqlite&gt; .dump</span></span><br><span class="line"></span><br><span class="line">$ vim dump_for_mysql.py</span><br><span class="line"></span><br><span class="line">  <span class="comment"># https://github.com/EricHigdon/sqlite3tomysql</span></span><br><span class="line"></span><br><span class="line">$ sqlite3 superset.db .dump | python dump_for_mysql.py &gt; superset.sql</span><br><span class="line"></span><br><span class="line">$ ls -sail</span><br><span class="line"></span><br><span class="line">  1285 43256 -rw-r--r--   1 root root 44288000 Jan 22 14:06 superset.db</span><br><span class="line">  18631 76968 -rw-r--r--   1 root root 78812197 Jan 22 14:35 superset.sql</span><br><span class="line"></span><br><span class="line">$ vim superset.sql</span><br><span class="line"></span><br><span class="line">  id INTEGER NOT NULL, </span><br><span class="line">  <span class="comment"># 替换为 (主键) 自增长</span></span><br><span class="line">  id INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT, </span><br><span class="line"></span><br><span class="line">$ scp superset.sql root@192.168.1.12:/home/mysql</span><br></pre></td></tr></tbody></table></figure>
<h4 id="自己实现-sqlite3tomysql-py"><a href="#自己实现-sqlite3tomysql-py" class="headerlink" title="自己实现 sqlite3tomysql.py"></a>自己实现 sqlite3tomysql.py</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># druid02    192.168.1.12    MySQL</span></span><br><span class="line">$ ps -ef | grep mysql | grep -v druid | grep -v grep</span><br><span class="line"></span><br><span class="line">  mysql    11435  8530  0 14:13 pts/4    00:00:00 /bin/sh /home/mysql/bin/mysqld_safe --defaults-file=/home/mysql/my.cnf</span><br><span class="line">  mysql    12192 11435  0 14:13 pts/4    00:00:00 /home/mysql/bin/mysqld --defaults-file=/home/mysql/my.cnf --basedir=/home/mysql --datadir=/home/mysql/data --plugin-dir=/home/mysql/lib/mysql/plugin --log-error=/home/mysql/data/druid02.err --open-files-limit=8192 --pid-file=/home/mysql/data/druid02.pid --socket=/home/mysql/data/mysql.sock --port=3306</span><br><span class="line">  mysql    12223  8530  0 14:13 pts/4    00:00:00 mysql -uroot -p -S /home/mysql/data/mysql.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ su - mysql</span><br><span class="line">$ mysql -uroot -p -S /home/mysql/data/mysql.sock</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; create database superset;</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; use superset;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 sqlite3tomysql.py</span></span><br><span class="line">  mysql -uroot -p superset2 -S /home/mysql/data/mysql.sock  --default-character-set=utf8 &lt; superset.sql.schema.sql</span><br><span class="line">  mysql -uroot -p superset2 -S /home/mysql/data/mysql.sock  --default-character-set=utf8 &lt; superset.sql.data.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免表之间 外键依赖，可以在 mysql 命令行中，使用 source .superset.sql.schema.sql 的方式，多次批量导入</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="元数据存储-1"><a href="#元数据存储-1" class="headerlink" title="元数据存储"></a>元数据存储</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># superset01				192.168.1.10		Superset</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/superset</span><br><span class="line">$ find ./ -name config.py</span><br><span class="line">  ./lib/python2.7/site-packages/caravel/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/sqlalchemy/testing/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/pandas/core/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/superset/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/setuptools/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/numpy/distutils/<span class="built_in">command</span>/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/gunicorn/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/panoramix/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/flask/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/alembic/testing/config.py</span><br><span class="line">  ./lib/python2.7/site-packages/alembic/config.py</span><br><span class="line"></span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/config.py</span><br><span class="line">  <span class="comment"># SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(DATA_DIR, 'superset.db')</span></span><br><span class="line">  SQLALCHEMY_DATABASE_URI = <span class="string">'mysql+pymysql://root:root@192.168.1.12:3306/superset?charset=utf8'</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 先执行，一系列 superset 初始化工作</span></span><br><span class="line">$ nohup superset runserver -a 0.0.0.0 -p 9097 -w 4 2&gt;&amp;1 &gt; logs/superset.log &amp;</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 代码 &amp; 操作步骤，详见：<a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/yuzhouwan-hacker-python#convert-sqlite-into-mysql">Convert SQLite into MySQL</a></p>
<h3 id="参数调优"><a href="#参数调优" class="headerlink" title="参数调优"></a>参数调优</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 适当增加 gunicorn 的 worker 数量（default：2）</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/superset</span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br><span class="line">$ mkdir logs</span><br><span class="line">$ nohup ./bin/python ./bin/superset runserver -a 0.0.0.0 -p 9097 -w 4 2&gt;&amp;1 &gt; logs/superset.log &amp;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="ExtDeprecationWarning-Importing-flask-ext-cache-is-deprecated-use-flask-cache-instead"><a href="#ExtDeprecationWarning-Importing-flask-ext-cache-is-deprecated-use-flask-cache-instead" class="headerlink" title="ExtDeprecationWarning: Importing flask.ext.cache is deprecated, use flask_cache instead."></a>ExtDeprecationWarning: Importing flask.ext.cache is deprecated, use flask_cache instead.</h4><h5 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">(superset) [root@superset01 superset-0.15.4]<span class="comment"># ./bin/python ./lib/python2.7/site-packages/superset/cli.py runserver -d -p 9097</span></span><br><span class="line">/root/superset-0.15.4/lib/python2.7/site-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.script is deprecated, use flask_script instead.</span><br><span class="line">.format(x=modname), ExtDeprecationWarning</span><br><span class="line">/root/superset-0.15.4/lib/python2.7/site-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.sqlalchemy is deprecated, use flask_sqlalchemy instead.</span><br><span class="line">.format(x=modname), ExtDeprecationWarning</span><br><span class="line">/root/superset-0.15.4/lib/python2.7/site-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.sqlalchemy._compat is deprecated, use flask_sqlalchemy._compat instead.</span><br><span class="line">.format(x=modname), ExtDeprecationWarning</span><br><span class="line">/root/superset-0.15.4/lib/python2.7/site-packages/flask_cache/init.py:152: UserWarning: Flask-Cache: CACHE_TYPE is <span class="built_in">set</span> to null, caching is effectively disabled.</span><br><span class="line">warnings.warn(<span class="string">"Flask-Cache: CACHE_TYPE is set to null, "</span></span><br><span class="line">/root/superset-0.15.4/lib/python2.7/site-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.cache is deprecated, use flask_cache instead.</span><br><span class="line">.format(x=modname), ExtDeprecationWarning</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-13"><a href="#解决-13" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ./bin/superset</span><br><span class="line"></span><br><span class="line">  +import warnings</span><br><span class="line">  +from flask.exthook import ExtDeprecationWarning</span><br><span class="line">  +warnings.simplefilter(<span class="string">'ignore'</span>, ExtDeprecationWarning)</span><br><span class="line">  +</span><br><span class="line">  from superset.cli import manager</span><br></pre></td></tr></tbody></table></figure>
<p>　已提 RP#2138 <a href="https://github.com/apache/superset/pull/2138">Fix ExtDeprecationWarning</a></p>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="创建-user-时，需保证-email-的唯一性"><a href="#创建-user-时，需保证-email-的唯一性" class="headerlink" title="创建 user 时，需保证 email 的唯一性"></a>创建 user 时，需保证 email 的唯一性</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Recognized Database Authentications.</span><br><span class="line">2016-12-14 18:12:36,007:ERROR:flask_appbuilder.security.sqla.manager:Error adding new user to database. (sqlite3.IntegrityError) column email is not unique [SQL: u<span class="string">'INSERT INTO ab_user (first_name, last_name, username, password, active, email, last_login, login_count, fail_login_count, created_on, changed_on, created_by_fk, changed_by_fk) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'</span>] [parameters: (u<span class="string">'superset'</span>, u<span class="string">'yuzhouwan'</span>, u<span class="string">'superset'</span>, <span class="string">'pbkdf2:sha1:1000$e3imUMx0$83b38fb2a0f628d1379379bb353fc80697c435a1'</span>, 1, u<span class="string">'yuzhouwan@gmail.com'</span>, None, None, None, <span class="string">'2016-12-14 18:12:36.004721'</span>, <span class="string">'2016-12-14 18:12:36.004773'</span>, None, None)]</span><br><span class="line">No user created an error occured</span><br></pre></td></tr></tbody></table></figure>
<p>　使用 admin / admin 用户登录，进行修改</p>
<h3 id="缺少的依赖包"><a href="#缺少的依赖包" class="headerlink" title="缺少的依赖包"></a>缺少的依赖包</h3><h4 id="描述-12"><a href="#描述-12" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">RuntimeError: Compression requires the (missing) zlib module</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-14"><a href="#解决-14" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum install zlib</span><br><span class="line">$ yum install zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进到 python2.7 目录 重新编译安装，软链接不需要重建</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/software/Python-2.7.12</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进到 setup-tools 目录 重新安装</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/software/setuptools-32.0.0</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Python-无法装载模块（RedHat-Problem）"><a href="#Python-无法装载模块（RedHat-Problem）" class="headerlink" title="Python 无法装载模块（RedHat Problem）"></a>Python 无法装载模块（RedHat Problem）</h3><h4 id="pip-command-not-found"><a href="#pip-command-not-found" class="headerlink" title="pip: command not found"></a>pip: command not found</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 利用装载模块的方式 使用 pip</span></span><br><span class="line">$ python -m pip --version</span><br><span class="line">  pip 9.0.1 from /root/software/pip-9.0.1 (python 2.7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改命令别名</span></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 未生效可直接执行</span></span><br><span class="line">  <span class="built_in">alias</span> pip=<span class="string">'python -m pip'</span></span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">  pip 9.0.1 from /root/software/pip-9.0.1 (python 2.7)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="virtualenv-command-not-found"><a href="#virtualenv-command-not-found" class="headerlink" title="virtualenv: command not found"></a>virtualenv: command not found</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">alias</span> virtualenv=<span class="string">'python -m virtualenv'</span></span><br><span class="line"></span><br><span class="line">$ virtualenv --version</span><br><span class="line">  15.1.0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="安装-superset-需要下载依赖库"><a href="#安装-superset-需要下载依赖库" class="headerlink" title="安装 superset 需要下载依赖库"></a>安装 superset 需要下载依赖库</h3><h4 id="sasl-sasl-h：没有那个文件或目录"><a href="#sasl-sasl-h：没有那个文件或目录" class="headerlink" title="sasl/sasl.h：没有那个文件或目录"></a>sasl/sasl.h：没有那个文件或目录</h4><h5 id="描述-13"><a href="#描述-13" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gcc: error trying to <span class="built_in">exec</span> <span class="string">'cc1plus'</span>: execvp: 没有那个文件或目录</span><br><span class="line">error: <span class="built_in">command</span> <span class="string">'gcc'</span> failed with <span class="built_in">exit</span> status 1</span><br><span class="line"></span><br><span class="line">cc1plus: 警告：命令行选项 “-Wstrict-prototypes” 对 Ada/C/ObjC 是有效的，但对 C++ 无效</span><br><span class="line">在包含自 sasl/saslwrapper.cpp：254 的文件中:</span><br><span class="line">sasl/saslwrapper.h:22:23: 错误：sasl/sasl.h：没有那个文件或目录</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-15"><a href="#解决-15" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gcc -v</span><br><span class="line">  使用内建 specs。</span><br><span class="line">  目标：x86_64-redhat-linux</span><br><span class="line">  配置为：../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux</span><br><span class="line">  线程模型：posix</span><br><span class="line">  gcc 版本 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 g++</span></span><br><span class="line"><span class="comment"># g++是c++的编译器，安装好之后，gcc会自动寻找c++程序所需的编译环境，进而编译成功</span></span><br><span class="line"><span class="comment"># wget ftp://rpmfind.net/linux/centos/6.8/os/x86_64/Packages/gcc-c++-4.4.7-17.el6.x86_64.rpm (需要完全一致 gcc 4.4.7-4才行)</span></span><br><span class="line"><span class="comment"># http://rpm.pbone.net/index.php3/stat/4/idpl/25438297/dir/scientific_linux_6/com/gcc-c++-4.4.7-4.el6.x86_64.rpm.html</span></span><br><span class="line"><span class="comment"># http://rpm.pbone.net/index.php3/stat/4/idpl/25440518/dir/scientific_linux_6/com/libstdc++-devel-4.4.7-4.el6.x86_64.rpm.html</span></span><br><span class="line">$ rpm -ivh libstdc++-devel-4.4.7-4.el6.x86_64.rpm</span><br><span class="line">$ rpm -ivh gcc-c++-4.4.7-4.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">$ g++ -v</span><br><span class="line">  使用内建 specs。</span><br><span class="line">  目标：x86_64-redhat-linux</span><br><span class="line">  配置为：../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux</span><br><span class="line">  线程模型：posix</span><br><span class="line">  gcc 版本 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="命令行选项-Wstrict-prototypes-对-Ada-C-ObjC-是有效的，但对-C-无效"><a href="#命令行选项-Wstrict-prototypes-对-Ada-C-ObjC-是有效的，但对-C-无效" class="headerlink" title="命令行选项 -Wstrict-prototypes 对 Ada/C/ObjC 是有效的，但对 C++ 无效"></a>命令行选项 -Wstrict-prototypes 对 Ada/C/ObjC 是有效的，但对 C++ 无效</h4><h5 id="描述-14"><a href="#描述-14" class="headerlink" title="描述"></a>描述</h5><p>　cc1plus: 警告：命令行选项 “-Wstrict-prototypes” 对 Ada/C/ObjC 是有效的，但对 C++ 无效</p>
<h5 id="解决-16"><a href="#解决-16" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cmake 版本过低（这里是没有安装）</span></span><br><span class="line"><span class="comment"># https://cmake.org/ (stable: 3.6.3, lastest: 3.7.1, date: 2016/12/16)</span></span><br><span class="line"><span class="comment"># https://cmake.org/cmake/help/v3.6/</span></span><br><span class="line">$ wget --no-check-certificate  https://cmake.org/files/v3.6/cmake-3.6.3.tar.gz	<span class="comment"># To connect to cmake.org insecurely</span></span><br><span class="line">$ tar zxvf cmake-3.6.3.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> cmake-3.6.3</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ make</span><br><span class="line">$ gmake install</span><br><span class="line"></span><br><span class="line">$ cmake -version</span><br><span class="line">$ cmake version 3.6.3</span><br><span class="line">$ CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot (should)</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir virtualenv</span><br><span class="line">$ <span class="built_in">cd</span> virtualenv</span><br><span class="line">$ virtualenv env1</span><br><span class="line">$ virtualenv --python=/usr/bin/python env1</span><br><span class="line"></span><br><span class="line"><span class="comment"># new problem</span></span><br><span class="line"><span class="comment"># IOError: [Errno 40] Too many levels of symbolic links: '/root/virtualenv/env1/bin/python'</span></span><br><span class="line"><span class="comment"># 不能直接 rm -rf env1，需要用 rmvirtualenv 才行</span></span><br><span class="line">$ rmvirtualenv env1</span><br><span class="line">$ <span class="built_in">cd</span> env1</span><br><span class="line">$ <span class="built_in">source</span> bin/activate		   <span class="comment"># 退出 deactivate</span></span><br><span class="line">(env1) [root@edeppreapp01 env1] <span class="comment"># python -V</span></span><br><span class="line">  Python 2.7.12</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Could-not-find-a-version-that-satisfies-the-requirement-pytz-gt-dev"><a href="#Could-not-find-a-version-that-satisfies-the-requirement-pytz-gt-dev" class="headerlink" title="Could not find a version that satisfies the requirement pytz>dev"></a>Could not find a version that satisfies the requirement pytz&gt;dev</h4><h5 id="描述-15"><a href="#描述-15" class="headerlink" title="描述"></a>描述</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果一个一个依赖去安装 会很麻烦</span></span><br><span class="line">Could not find a version that satisfies the requirement pytz&gt;dev (from celery==3.1.23) (from versions: )</span><br><span class="line">Could not find a version that satisfies the requirement billiard&lt;3.4,&gt;=3.3.0.23 (from celery==3.1.23) (from versions: )</span><br><span class="line">No matching distribution found <span class="keyword">for</span> amqp&lt;2.0,&gt;=1.4.9 (from kombu==3.0.35)</span><br><span class="line">No matching distribution found <span class="keyword">for</span> anyjson&gt;=0.3.3 (from kombu==3.0.35)</span><br><span class="line">No matching distribution found <span class="keyword">for</span> kombu&lt;3.1,&gt;=3.0.34 (from celery==3.1.23)</span><br><span class="line">No matching distribution found <span class="keyword">for</span> celery==3.1.23 (from superset)</span><br><span class="line">Could not find suitable distribution <span class="keyword">for</span> Requirement.parse(<span class="string">'werkzeug==0.11.10'</span>)</span><br><span class="line">pip install thrift-0.9.3.tar.gz</span><br><span class="line">No matching distribution found <span class="keyword">for</span> six (from sasl==0.2.1)</span><br><span class="line">No matching distribution found <span class="keyword">for</span> sasl&gt;=0.2.1 (from thrift-sasl==0.2.1)</span><br><span class="line">No <span class="built_in">local</span> packages or working download links found <span class="keyword">for</span> thrift-sasl&gt;=0.2.1</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-17"><a href="#解决-17" class="headerlink" title="解决"></a>解决</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip list</span><br><span class="line">$ pip freeze &gt; requirements.txt</span><br><span class="line">$ mkdir packages</span><br><span class="line">$ pip install --download package -r requirements.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> packages</span><br><span class="line">$ scp celery-3.1.23-py2.py3-none-any.whl root@druid01:/root/software/packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># --find-links 可以在指定目录中，找到 superset 的相关依赖，依次安装好</span></span><br><span class="line">$ python -m pip install --no-index --find-links=packages superset <span class="comment"># -r requirements.txt</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="ImportError-No-module-named-ssl"><a href="#ImportError-No-module-named-ssl" class="headerlink" title="ImportError: No module named ssl"></a>ImportError: No module named ssl</h3><h4 id="解决-18"><a href="#解决-18" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 ssl</span></span><br><span class="line">$ yum install yum-downloadonly -y</span><br><span class="line"></span><br><span class="line">$ yum -y install ncurses ncurses-devel gcc-c++ libxml2-devel gd gd-devel libpng libpng-devel libjpeg libjpeg-devel libmcrypt libmcrypt-devel openldap-devel openldap-servers openldap-clients autoconf freetype-devel libtool-ltdl-devel openssl openssl-devel gcc automake autoconf libtool make --downloadonly --downloaddir=.</span><br><span class="line"></span><br><span class="line">$ yum -y install GeoIP gmp libevent libmcrypt libtidy libXpm libxslt mhash mysql mysql-server nfs-utils nginx perl-DBD-MySQL perl-DBI php php-common php-fpm php-gd php-mbstring php-mcrypt php-mhash php-mysql php-pdo php-xml t1lib --downloadonly --downloaddir=.</span><br><span class="line"></span><br><span class="line">$ rpm -Uvh --force --nodeps *.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译 Python</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/software/Python-2.7.12</span><br><span class="line">$ vim Modules/Setup.dist</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 取消注释</span></span><br><span class="line">  SSL=/usr/<span class="built_in">local</span>/ssl</span><br><span class="line">  _ssl _ssl.c \</span><br><span class="line">         -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \</span><br><span class="line">         -L$(SSL)/lib -lssl -lcrypto</span><br><span class="line"></span><br><span class="line">$ ./configure --enable-shared CFLAGS=-fPIC //--enable-shared option means to generate dynamic library libpython2.7.so.1.0</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Not work</span></span><br><span class="line">$ python --version</span><br><span class="line">  Python 2.7.12</span><br><span class="line"></span><br><span class="line">$ python</span><br><span class="line">Python 2.7.12 (default, Dec 19 2016, 10:58:27) </span><br><span class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt; Traceback (most recent call last):</span><br><span class="line">&gt;&gt;&gt; File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">&gt;&gt;&gt; File <span class="string">"/usr/local/lib/python2.7/ssl.py"</span>, line 97, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">&gt;&gt;&gt; import _ssl             <span class="comment"># if we can't import it, let the error propagate</span></span><br><span class="line">&gt;&gt;&gt; ImportError: No module named _ssl</span><br><span class="line">&gt;&gt;&gt; quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装缺少的 openssl-devel</span></span><br><span class="line">$ rpm -aq | grep openssl</span><br><span class="line">  openssl-1.0.1e-42.el6_7.4.x86_64</span><br><span class="line"></span><br><span class="line">$ yum install openssl-devel -y</span><br><span class="line"></span><br><span class="line">$ rpm -aq | grep openssl</span><br><span class="line">  openssl-1.0.1e-42.el6_7.4.x86_64</span><br><span class="line">  openssl-devel-1.0.1e-42.el6_7.4.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改 Setup 文件</span></span><br><span class="line">$ vim /root/software/Python-2.7.12/Modules/Setup</span><br><span class="line">  <span class="comment"># Socket module helper for socket(2)</span></span><br><span class="line">  _socket socketmodule.c timemodule.c</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Socket module helper for SSL support; you must comment out the other</span></span><br><span class="line">  <span class="comment"># socket line above, and possibly edit the SSL variable:</span></span><br><span class="line">  <span class="comment">#SSL=/usr/local/ssl</span></span><br><span class="line">  _ssl _ssl.c \</span><br><span class="line">  -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \</span><br><span class="line">  -L$(SSL)/lib -lssl -lcrypto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/software/Python-2.7.12</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">$ python</span><br><span class="line">Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/virtualenv/superset/bin</span><br><span class="line">[root@olap03-sit bin]<span class="comment"># python</span></span><br><span class="line">Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line"></span><br><span class="line">$ /root/virtualenv/superset/bin/python</span><br><span class="line">Python 2.7.12 (default, Dec 16 2016, 16:23:17) </span><br><span class="line">[GCC 4.4.6 20120305 (Red Hat 4.4.6-4)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt; Traceback (most recent call last):</span><br><span class="line">&gt;&gt;&gt; File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">&gt;&gt;&gt; File <span class="string">"/usr/local/python27/lib/python2.7/ssl.py"</span>, line 97, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">&gt;&gt;&gt; import _ssl             <span class="comment"># if we can't import it, let the error propagate</span></span><br><span class="line">&gt;&gt;&gt; ImportError: No module named _ssl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ mv /root/virtualenv/superset/bin/python /root/virtualenv/superset/bin/python_old</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/bin/python /root/virtualenv/superset/bin/</span><br><span class="line"></span><br><span class="line">$ ./python</span><br><span class="line">Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt; quit()</span><br><span class="line">&gt;&gt;&gt; [root@olap03-sit bin]<span class="comment"># </span></span><br><span class="line">&gt;&gt;&gt; [root@olap03-sit bin]<span class="comment"># </span></span><br><span class="line">&gt;&gt;&gt; [root@olap03-sit bin]<span class="comment"># pwd</span></span><br><span class="line">&gt;&gt;&gt; /root/virtualenv/superset/bin</span><br><span class="line">&gt;&gt;&gt; [root@olap03-sit bin]<span class="comment"># /root/virtualenv/superset/bin/python</span></span><br><span class="line">&gt;&gt;&gt; Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">&gt;&gt;&gt; [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">&gt;&gt;&gt; Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt; quit()</span><br><span class="line">&gt;&gt;&gt; [root@olap03-sit bin]<span class="comment"># python</span></span><br><span class="line">&gt;&gt;&gt; Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">&gt;&gt;&gt; [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">&gt;&gt;&gt; Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">source</span> bin/activate</span><br><span class="line">&gt;&gt;&gt; (superset) [root@olap03-sit superset]<span class="comment"># which python</span></span><br><span class="line">&gt;&gt;&gt; /root/virtualenv/superset/bin/python</span><br><span class="line">&gt;&gt;&gt; (superset) [root@olap03-sit superset]<span class="comment"># python</span></span><br><span class="line">&gt;&gt;&gt; Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">&gt;&gt;&gt; [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">&gt;&gt;&gt; Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt; quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ImportError: No module named gunicorn.app.base</span></span><br><span class="line">import gunicorn.app.base</span><br></pre></td></tr></tbody></table></figure>
<h3 id="python-error-while-loading-shared-libraries-libpython2-7-so-1-0"><a href="#python-error-while-loading-shared-libraries-libpython2-7-so-1-0" class="headerlink" title="python: error while loading shared libraries: libpython2.7.so.1.0"></a>python: error while loading shared libraries: libpython2.7.so.1.0</h3><h4 id="描述-16"><a href="#描述-16" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27 --enable-shared CFLAGS=-fPIC //--enable-shared option means to generate dynamic library libpython2.7.so.1.0</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ python -V</span><br><span class="line">  python: error <span class="keyword">while</span> loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-19"><a href="#解决-19" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum reinstall python-libs		--not work</span><br><span class="line"></span><br><span class="line">$ ll /usr/<span class="built_in">local</span>/python27/lib/libpython2.7.so.1.0		--not work</span><br><span class="line">$ vim /etc/ld.so.conf</span><br><span class="line">  include ld.so.conf.d/*.conf</span><br><span class="line">  include /usr/<span class="built_in">local</span>/Python2.7/lib</span><br><span class="line"></span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line">  /lib:</span><br><span class="line">  /lib64:</span><br><span class="line">  /usr/lib:</span><br><span class="line">  /usr/lib64:</span><br><span class="line">  /lib64/tls: (hwcap: 0x8000000000000000)</span><br><span class="line">  /usr/lib64/sse2: (hwcap: 0x0000000004000000)</span><br><span class="line">  /usr/lib64/tls: (hwcap: 0x8000000000000000)</span><br><span class="line"></span><br><span class="line">$ ./configure --prefix=/usr --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ImportError-No-module-named-pysqlite2"><a href="#ImportError-No-module-named-pysqlite2" class="headerlink" title="ImportError: No module named pysqlite2"></a>ImportError: No module named pysqlite2</h3><h4 id="解决-20"><a href="#解决-20" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /root/superset/lib/python2.7/site-packages/sqlalchemy/dialects/sqlite/pysqlite.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 sqlite3</span></span><br><span class="line">@classmethod</span><br><span class="line">def dbapi(cls):</span><br><span class="line">try:</span><br><span class="line">  <span class="comment"># 改为 from sqlite3 import dbapi2 as sqlite</span></span><br><span class="line">  from pysqlite2 import dbapi2 as sqlite</span><br><span class="line">except ImportError as e:</span><br><span class="line">  try:</span><br><span class="line">    from sqlite3 import dbapi2 as sqlite  <span class="comment"># try 2.5+ stdlib name.</span></span><br><span class="line">  except ImportError:</span><br><span class="line">    raise e</span><br><span class="line"><span class="built_in">return</span> sqlite</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redhat 5.3 环境下，要源代码安装 sqlite3，然后安装 python 才能有 _sqlite3.so 这个文件</span></span><br><span class="line">$ wget https://sqlite.org/snapshot/sqlite-snapshot-201612131847.tar.gz</span><br><span class="line">$ sqlite3 --version</span><br><span class="line">  3.6.20</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pip-is-configured-with-locations-that-require-TLS-SSL-however-the-ssl-module-in-Python-is-not-available"><a href="#pip-is-configured-with-locations-that-require-TLS-SSL-however-the-ssl-module-in-Python-is-not-available" class="headerlink" title="pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available."></a>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.</h3><h4 id="解决-21"><a href="#解决-21" class="headerlink" title="解决"></a>解决</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 清除所有的 alias 和 superset 源码中 python 路径的修改</span></span><br><span class="line">$ <span class="built_in">which</span> pip</span><br><span class="line">$ <span class="built_in">alias</span> pip=<span class="string">'python -m pip'</span></span><br><span class="line">$ /root/superset/bin/python</span><br><span class="line"></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line"><span class="comment"># alias pip='python -m pip'</span></span><br><span class="line"><span class="comment"># alias virtualenv='python -m virtualenv'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="comment"># export WORKON_HOME=~/virtualenv</span></span><br><span class="line"><span class="comment"># source /usr/local/bin/virtualenvwrapper.sh</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ deactivate</span><br><span class="line">$ yum install python-pip</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unalias</span> pip</span><br><span class="line">$ <span class="built_in">which</span> pip</span><br><span class="line">$ /usr/bin/pip</span><br><span class="line"></span><br><span class="line">$ superset runserver -a 0.0.0.0 -p 9999</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib/python2.7/site-packages</span><br><span class="line"></span><br><span class="line">$ python</span><br><span class="line">  Python 2.7.12 (default, Dec 19 2016, 11:08:33) </span><br><span class="line">  [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</span><br><span class="line">  Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">  &gt;&gt;&gt; import ssl</span><br><span class="line">  &gt;&gt;&gt; ssl</span><br><span class="line">  &lt;module <span class="string">'ssl'</span> from <span class="string">'/usr/local/lib/python2.7/ssl.pyc'</span>&gt;</span><br><span class="line">  &gt;&gt;&gt; quit()</span><br><span class="line"></span><br><span class="line">$ vim mypkpath.pth</span><br><span class="line">  /usr/<span class="built_in">local</span>/lib/python2.7</span><br><span class="line"></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">alias</span> python=/usr/<span class="built_in">local</span>/bin/python</span><br><span class="line">  <span class="built_in">alias</span> pip=/usr/bin/pip</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc		--not work（superset 的 py程序开头都有 <span class="comment">#!/root/superset/bin/python）</span></span><br><span class="line">$ vim /root/superset/bin/superset</span><br><span class="line">  <span class="comment">#!/usr/local/bin/python</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 利用 prefix 将 python 的第三方库安装到 /usr/lib 中</span></span><br><span class="line">$ ./configure --prefix=/usr --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Error-while-processing-cluster-‘druid-cluster’-sqlite3-Operational-Error-database-is-locked"><a href="#Error-while-processing-cluster-‘druid-cluster’-sqlite3-Operational-Error-database-is-locked" class="headerlink" title="Error while processing cluster ‘druid cluster’ (sqlite3. Operational Error) database is locked"></a>Error while processing cluster ‘druid cluster’ (sqlite3. Operational Error) database is locked</h3><h4 id="描述-17"><a href="#描述-17" class="headerlink" title="描述"></a>描述</h4><p>　[Web UI] Sources - Druid Clusters 配置 - Refresh Druid Metadata</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>　Web 中无法维持长连接，会超时</p>
<h4 id="解决-22"><a href="#解决-22" class="headerlink" title="解决"></a>解决</h4><p>　superset refresh_druid</p>
<p>Tips: 目前最新的 v0.22.1 版本中，已经解决了这个问题，可以在页面上直接点击 “Sources - Refresh Druid Metadata” 按钮，完成操作（2017-12-12）</p>
<h3 id="An-unknown-error-occurred-Status-0-Maybe-the-request-timed-out"><a href="#An-unknown-error-occurred-Status-0-Maybe-the-request-timed-out" class="headerlink" title="An unknown error occurred. (Status: 0) Maybe the request timed out?"></a>An unknown error occurred. (Status: 0) Maybe the request timed out?</h3><h4 id="描述-18"><a href="#描述-18" class="headerlink" title="描述"></a>描述</h4><p>　部分图标 无法正常显示</p>
<h4 id="解决-23"><a href="#解决-23" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 debug 模式，查看详细日志，定位问题</span></span><br><span class="line">$ vim ./lib/python2.7/site-packages/superset/config.py</span><br><span class="line"></span><br><span class="line">  <span class="comment"># DEBUG = False</span></span><br><span class="line">  DEBUG = True</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ImportError-No-module-named-pymysql"><a href="#ImportError-No-module-named-pymysql" class="headerlink" title="ImportError: No module named pymysql"></a>ImportError: No module named pymysql</h3><h4 id="解决-24"><a href="#解决-24" class="headerlink" title="解决"></a>解决</h4><p>　<code>pip install pymysql</code></p>
<h3 id="uHost-druid01-is-not-allowed-to-connect-to-this-MySQL-server"><a href="#uHost-druid01-is-not-allowed-to-connect-to-this-MySQL-server" class="headerlink" title="uHost druid01 is not allowed to connect to this MySQL server"></a>uHost druid01 is not allowed to connect to this MySQL server</h3><h4 id="描述-19"><a href="#描述-19" class="headerlink" title="描述"></a>描述</h4><p>　nohup superset runserver -a 0.0.0.0 -p 8888 2&gt;&amp;1 &amp;</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2017-01-22 16:36:53,013:ERROR:flask_appbuilder.security.sqla.manager:DB Creation and initialization failed: (pymysql.err.InternalError) (1130, u<span class="string">"Host 'druid01' is not allowed to connect to this MySQL server"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-25"><a href="#解决-25" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'druid01'</span> IDENTIFIED BY <span class="string">'root'</span> WITH GRANT OPTION;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Permission-for-Druid"><a href="#Permission-for-Druid" class="headerlink" title="Permission for Druid"></a>Permission for Druid</h3><h4 id="解决-26"><a href="#解决-26" class="headerlink" title="解决"></a>解决</h4><p>　增加新的数据源之后，需要 <code>superset init</code>，来更新 permission 相关的数据表</p>
<h3 id="Update-Druid-Cluster’s-Name"><a href="#Update-Druid-Cluster’s-Name" class="headerlink" title="Update Druid Cluster’s Name"></a>Update Druid Cluster’s Name</h3><h4 id="解决-27"><a href="#解决-27" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">alter table datasources drop FOREIGN KEY `datasources_ibfk_2`;</span><br><span class="line">update clusters <span class="built_in">set</span> cluster_name=<span class="string">'Druid Cluster'</span> <span class="built_in">where</span> cluster_name=<span class="string">'druid cluster'</span>;</span><br><span class="line">update datasources <span class="built_in">set</span> cluster_name =<span class="string">'Druid Cluster'</span> <span class="built_in">where</span> cluster_name =<span class="string">'druid cluster'</span>;</span><br><span class="line">alter table datasources add constraint  `datasources_ibfk_2`  FOREIGN KEY (`cluster_name`) REFERENCES `clusters` (`cluster_name`);</span><br><span class="line"><span class="comment"># show create table datasources; # troubleshooting</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="An-unexpected-error-occurred-“https-registry-yarnpkg-com-convert-source-map-ETIMEDOUT”"><a href="#An-unexpected-error-occurred-“https-registry-yarnpkg-com-convert-source-map-ETIMEDOUT”" class="headerlink" title="An unexpected error occurred: “https://registry.yarnpkg.com/convert-source-map: ETIMEDOUT”"></a>An unexpected error occurred: “<a href="https://registry.yarnpkg.com/convert-source-map">https://registry.yarnpkg.com/convert-source-map</a>: ETIMEDOUT”</h3><h4 id="描述-20"><a href="#描述-20" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn</span><br><span class="line">  yarn install v1.3.2</span><br><span class="line">  info No lockfile found.</span><br><span class="line">  [1/4] Resolving packages...</span><br><span class="line">  error An unexpected error occurred: <span class="string">"https://registry.yarnpkg.com/@vx%2fbounds: ETIMEDOUT"</span>.</span><br><span class="line">  info If you think this is a bug, please open a bug report with the information provided <span class="keyword">in</span> <span class="string">"/home/superset/software/incubator-superset-0.22.1/superset/assets/yarn-error.log"</span>.</span><br><span class="line">  info Visit https://yarnpkg.com/en/docs/cli/install <span class="keyword">for</span> documentation about this <span class="built_in">command</span>.</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-28"><a href="#解决-28" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 由于不知名的外星力量，需要先替换掉原始的 IP 地址</span></span><br><span class="line">$ vim /etc/hosts</span><br><span class="line">  104.16.59.173 registry.yarnpkg.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制网络并发量，减少 TIMEOUT 发生的可能</span></span><br><span class="line">$ yarn --network-concurrency 1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="社区跟进"><a href="#社区跟进" class="headerlink" title="社区跟进"></a>社区跟进</h2><ul>
<li><a href="https://github.com/apache/superset/issues?utf8=%E2%9C%93&amp;q=%20is%3Aissue%20author%3Aasdf2014%20">Issues</a></li>
<li><a href="https://github.com/apache/superset/pulls?utf8=%E2%9C%93&amp;q=%20is%3Apr%20author%3Aasdf2014%20">Pull Request</a></li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://superset.apache.org/installation.html#getting-started">Superset Doc</a></li>
<li><a href="http://docs.gunicorn.org/en/stable/install.html">Gunicorn Doc</a></li>
<li><a href="http://docs.jinkan.org/docs/flask/">Flask Doc</a></li>
<li><a href="http://jinja.pocoo.org/docs/2.9/">Jinja Doc</a></li>
<li><a href="https://www.djangoproject.com/">Django Doc</a></li>
<li><a href="https://pythonhosted.org/pydruid/">Welcome to pydruid´s documentation!</a></li>
<li><a href="http://pandas.pydata.org/">Python Data Analysis Library</a></li>
<li><a href="http://www.scipy.org/stackspec.html">The SciPy Stack specification</a></li>
<li><a href="http://scikit-learn.org/stable/">Scikit-learn</a></li>
<li><a href="http://pandas.pydata.org">Pandas Doc</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://spacewander.github.io/explore-flask-zh/index.html">《Flask之旅》</a></li>
<li><a href="http://es6.ruanyifeng.com/">《ECMAScript 6 入门》</a></li>
</ul>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><ul>
<li><a href="https://github.com/druid-io/pydruid#pydruid">pydruid (A Python connector for Druid)</a></li>
<li><a href="http://rpmfind.net/">rpmfind.net</a></li>
<li><a href="http://rpm.pbone.net/">rpm.pbone.net</a>  （better, download with <code>mirror.switch.ch</code>）</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Druid</tag>
        <tag>Apache Superset</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Presto：分布式 SQL 查询引擎</title>
    <url>/posts/200906/</url>
    <content><![CDATA[<h2 id="Presto-是什么？"><a href="#Presto-是什么？" class="headerlink" title="Presto 是什么？"></a>Presto 是什么？</h2><blockquote>
<p><strong>Presto</strong>™ (PrestoDB™) is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes.</p>
<p><strong>Presto</strong>™ (PrestoSQL™, a.k.a. Trino™) is a high performance, distributed SQL query engine for big data.</p>
</blockquote>
<div class="note success">下文将详细介绍二者的区别</div>



<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Coordinator"><a href="#Coordinator" class="headerlink" title="Coordinator"></a>Coordinator</h4><p>　负责管理 Worker 和 MetaStore 节点，以及接受客户端查询请求，并进行 SQL 的语法解析（Parser）、执行计划生成与优化（Planner）和查询任务的调度（Scheduler）</p>
<div class="note info">Coordinator 通过 RESTful 接口与 Client 和 Worker 交互</div>

<h4 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h4><p>　负责具体的查询计算和数据读写</p>
<h4 id="Discovery-Server"><a href="#Discovery-Server" class="headerlink" title="Discovery Server"></a>Discovery Server</h4><p>　负责发现集群的各个节点，用于节点间心跳监控</p>
<div class="note success">一般 Discovery Server 混布在 Coordinator 节点上，也支持单独部署</div>

<span id="more"></span>
<h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><h4 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h4><p>　负责访问不同的数据源，相当于访问数据库的驱动</p>
<h4 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h4><p>　负责记录 Schema 信息和 DataSource 的引用。Presto 中一个完整的表名通过 <code>&lt;Catalog&gt;.&lt;Schema&gt;.&lt;Table&gt;</code> 组合表示。例如 <code>hive.test_data.test</code>，则表示：</p>
<ul>
<li>Catalog 为 <code>hive</code></li>
<li>Schema 为 <code>test_data</code></li>
<li>Table 为 <code>test</code></li>
</ul>
<h4 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h4><p>　一种组织 Table 的方式</p>
<h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p>　等同于关系型数据库中表的概念</p>
<h3 id="查询模型"><a href="#查询模型" class="headerlink" title="查询模型"></a>查询模型</h3><h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><p>　兼容 ANSI 标准的 SQL 字符串</p>
<h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>　当 Presto 解析一条 SQL 语句时，会将其转换为 Query，并创建一个分布式 Query 执行计划</p>
<div class="note info">整个查询过程涉及 Stage、Task、Split、Connector 和 DataSource 等组件的协同工作</div>

<h4 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h4><p>　当 Presto 执行查询时，会进一步分为多个 Stage 阶段来执行</p>
<h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>　Stage 包含了一系列的 Task，而 Task 才是真正在 Worker 之上被执行的逻辑</p>
<h4 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h4><p>　Split 主要是为了拆分大规模数据集，以便 Task 在此之上执行</p>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>　Driver 是一系列运算实例，可以理解为是内存中的一组物理运算符</p>
<div class="note info">Task 可以包含一个或者多个并行的 Driver</div>

<h4 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h4><p>　Operator 可以消费（Consume）、转换（Transform）和生产（Produce）数据。例如，一个 Table Scan 从一个 Connector 中 fetch 数据，并生产数据以供给 Operator 消费</p>
<h4 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h4><p>　Exchanage 负责在 Presto 的节点之间，传输一个 Query 的不同 Stage 的数据。Task 可以生产数据到一个 output 缓存区，也可以通过 Exchange 客户端消费其他 Task 生产的数据</p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>Ad Hoc（即席查询，秒级或分钟级的查询响应）</li>
<li>比 Hive 快 10x 倍<ul>
<li>完全基于内存的并行计算</li>
<li>流水线</li>
<li>本地化计算</li>
<li>动态编译执行计划</li>
<li>内存规划</li>
<li>近似查询（类似于 <a href="https://github.com/sameeragarwal/blinkdb">BlinkDB</a>）</li>
<li><a href="https://yuzhouwan.com/posts/27328/">GC</a> 控制</li>
</ul>
</li>
<li>支持多种数据源（Hive、<a href="https://yuzhouwan.com/posts/5845/">Druid</a>、<a href="https://yuzhouwan.com/posts/26002/">Kafka</a>、<a href="https://yuzhouwan.com/posts/39683/#MySQL">MySQL</a>、MongoDB、<a href="https://yuzhouwan.com/posts/2129/">Redis</a>、<a href="https://yuzhouwan.com/posts/31915/#JMX">JMX</a>、<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC">ORC</a> 等）</li>
<li>Client 支持多种编程语言（<a href="https://yuzhouwan.com/posts/190413/">Java</a>、<a href="https://yuzhouwan.com/posts/43687/">Python</a>、Ruby、PHP、<a href="https://yuzhouwan.com/posts/23363/">Node.js</a> 等）</li>
<li>支持 JDBC / ODBC 连接</li>
<li>支持 Kerberos 认证</li>
<li>支持查询 LZO 压缩的数据</li>
<li>ANSI SQL（窗口函数、Join、聚合、复杂查询等）</li>
</ul>
<div class="note info">Ad Hoc（拉丁短语，英语直译为 for this）即席查询，用户根据实际需求，灵活地选择查询条件，系统生成相应的统计报表。与普通应用查询不同的是，普通应用查询需要通过编程定制开发</div>
<div class="note info">即席（jí xí），表示入席、就位、当场等含义</div>
<div class="note info">ANSI（American National Standards Institute）美国国家标准学会</div>

<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>不支持 SQL 的隐式类型转换，而 <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types">Hive 支持</a></li>
<li>不支持容错<br>查询请求会分发到多个 Worker 上，当任意一个 Worker 执行失败，Master 会感知到，并认为整个查询请求失败了。并且 Presto 并没有重试机制，所以需要业务端完成重试</li>
</ul>
<div class="note success">Presto 属于强数据类型，并不支持类型的隐式转换，所以无法进行不同数据类型之间的比较，例如 '2' &gt; 1 等。不过，在对应算子中增加新的语义行为即可支持。下文将介绍具体的编码过程</div>



<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img data-src="/picture/presto/presto_architecture.png" alt="Presto Architecture"></p>
<center>（图片来源：<a href="https://medium.com/@adirmashiach/facebook-prestodb-full-review-4ba59720a92" target="_blank">medium.com</a>™）</center>

<p><img data-src="/picture/presto/presto_architecture_with_sql.png" alt="Presto Architecture with SQL"></p>
<center>（图片来源：<a href="https://www.slideshare.net" target="_blank">slideshare.net</a>™）</center>

<div class="note info">从架构图可以看出，Presto 采用的是经典的 Master-Slave 模型</div>

<h3 id="SQL-执行流程图"><a href="#SQL-执行流程图" class="headerlink" title="SQL 执行流程图"></a>SQL 执行流程图</h3><p><img data-src="/picture/presto/presto_sql_execute.png" alt="Presto SQL Execute"></p>
<center>（图片来源：<a href="https://www.cnblogs.com/sorco/p/7060166.html" target="_blank">cnblogs.com</a>™）</center>

<h3 id="Connector-交互图"><a href="#Connector-交互图" class="headerlink" title="Connector 交互图"></a>Connector 交互图</h3><p><img data-src="/picture/presto/presto_connector.png" alt="Presto Connector"></p>
<center>（图片来源：<a href="https://www.slideshare.net" target="_blank">slideshare.net</a>™）</center>

<h3 id="交互时序图"><a href="#交互时序图" class="headerlink" title="交互时序图"></a>交互时序图</h3><pre class="mermaid">sequenceDiagram

participant Client
participant Coordinator
participant Worker
participant Connector
participant Discovery Server

Client -&gt;&gt;+ Coordinator : query
Coordinator -&gt;&gt;+ Worker : choose workers
Worker -&gt;&gt;- Coordinator : return worker list
Coordinator -&gt;&gt;+ Worker : send task
Worker -&gt;&gt;+ Connector : load data
Connector -&gt;&gt;- Worker : return data
Worker -&gt;&gt; Worker : execute task
Worker -&gt;&gt;- Coordinator : return result
Coordinator -&gt;&gt;- Client : return result
loop regularly
  Coordinator --&gt;&gt; Discovery Server : heart beat
  Worker --&gt;&gt; Discovery Server : heart beat
end</pre>

<div class="note info">其中，与 Discovery Server 的心跳并不参与到查询过程中</div>
<div class="note info">集群状态感知的时间间隔为 5s，具体细节详见 io.trino.metadata.DiscoveryNodeManager#startPollingNodeStates</div>

<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p><img data-src="/picture/presto/prestosql_memory_management.png" alt="Presto Memory Management"></p>
<center>（使用 WPS™ 绘制而成）</center>

<h3 id="Service-Discovery"><a href="#Service-Discovery" class="headerlink" title="Service Discovery"></a>Service Discovery</h3><p>　Presto 并不是由 Worker 主动发送心跳，而是 Discovery Server 定时探测节点是否存活。内部基于 <a href="https://github.com/airlift/discovery">Airlift</a> 框架来实现服务发现，通过 HTTP 协议进行通讯。在 <code>etc/config.properties</code> 文件中配置的 <code>discovery.uri</code> 参数，会透传给 Airlift 框架。如果，我们将 <code>discovery.uri</code> 参数，设置为 <code>http://127.0.0.1:9999</code>，则可以通过访问 <code>http://127.0.0.1:9999/v1/service</code> 地址，获取到所有注册的服务（包括服务类型、ID、通讯地址、服务所在的节点等信息），具体返回内容如下：</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"environment"</span>: <span class="string">"presto"</span>,</span><br><span class="line">  <span class="attr">"services"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"1f538ad9-e4b0-40a2-88a7-8e901b6d8ce6"</span>,</span><br><span class="line">      <span class="attr">"nodeId"</span>: <span class="string">"presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"presto-coordinator"</span>,</span><br><span class="line">      <span class="attr">"pool"</span>: <span class="string">"general"</span>,</span><br><span class="line">      <span class="attr">"location"</span>: <span class="string">"/presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: {</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://127.0.0.1:9999"</span>,</span><br><span class="line">        <span class="attr">"http-external"</span>: <span class="string">"http://127.0.0.1:9999"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"89a0bf46-a949-4d62-8c65-c6fb9afe1bb2"</span>,</span><br><span class="line">      <span class="attr">"nodeId"</span>: <span class="string">"presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"discovery"</span>,</span><br><span class="line">      <span class="attr">"pool"</span>: <span class="string">"general"</span>,</span><br><span class="line">      <span class="attr">"location"</span>: <span class="string">"/presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: {</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://127.0.0.1:9999"</span>,</span><br><span class="line">        <span class="attr">"http-external"</span>: <span class="string">"http://127.0.0.1:9999"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"253a93c3-ebe9-46cf-a0ee-41e7de56c620"</span>,</span><br><span class="line">      <span class="attr">"nodeId"</span>: <span class="string">"presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"presto"</span>,</span><br><span class="line">      <span class="attr">"pool"</span>: <span class="string">"general"</span>,</span><br><span class="line">      <span class="attr">"location"</span>: <span class="string">"/presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: {</span><br><span class="line">        <span class="attr">"node_version"</span>: <span class="string">"345"</span>,</span><br><span class="line">        <span class="attr">"coordinator"</span>: <span class="string">"true"</span>,</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://127.0.0.1:9999"</span>,</span><br><span class="line">        <span class="attr">"http-external"</span>: <span class="string">"http://127.0.0.1:9999"</span>,</span><br><span class="line">        <span class="attr">"connectorIds"</span>: <span class="string">"system,druid"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"0a9970f3-6717-4979-8f28-7f12c7bd7c75"</span>,</span><br><span class="line">      <span class="attr">"nodeId"</span>: <span class="string">"presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"jmx-http"</span>,</span><br><span class="line">      <span class="attr">"pool"</span>: <span class="string">"general"</span>,</span><br><span class="line">      <span class="attr">"location"</span>: <span class="string">"/presto_node_1"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: {</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://127.0.0.1:9999"</span>,</span><br><span class="line">        <span class="attr">"http-external"</span>: <span class="string">"http://127.0.0.1:9999"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">上述 IP 地址相关信息已脱敏</div>

<p>　更加具体地来说，是在 <code>HeartbeatFailureDetector</code> 类中启动了一个执行周期为 5s 的定时任务，不断地调用 <code>updateMonitoredServices</code> 方法，来更新集群的服务状态。另外，<code>DiscoveryNodeManager</code> 类中也会启动一个执行周期为 5s 的定时任务，不断地调用 <code>pollWorkers</code> 方法，来检查各个节点的状态。Node 的状态主要分为 active、inactive、shuttingDown 三种，以集合的形式保存在了 AllNodes 类中。后续再选择 Worker 的时候会判断是否存活，并通过 AllNodes#getActiveNodes 方法获取到 active 状态的 Node 集合。另外，我们可以访问 <code>http://localhost:9999/v1/info/state</code> 地址，来检查节点是否处于 active 状态。如果节点存活，则会返回 <code>"ACTIVE"</code> 字符串</p>
<h3 id="MPP"><a href="#MPP" class="headerlink" title="MPP"></a>MPP</h3><p>　Presto 采用 MPP（<strong>M</strong>assively <strong>P</strong>arallel <strong>P</strong>rocessing）大规模并行处理架构，来解决大量数据分析的场景。该架构的主要特征，如下：</p>
<ul>
<li>任务并行执行</li>
<li>分布式计算</li>
<li>Shared Nothing</li>
<li>横向扩展</li>
<li>数据分布式存储（本地化）</li>
</ul>
<h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>　Presto 采用 <a href="https://yuzhouwan.com/posts/190413/#SPI-解耦">SPI</a>（<strong>S</strong>ervice <strong>P</strong>rovider <strong>I</strong>nterface）服务提供发现机制，来插件化地支持多种数据源，以实现联邦查询（<a href="https://en.wikipedia.org/wiki/Federated_search">Federation Query</a>，指能够通过一条 SQL 查询，对处于完全不同的系统中的不同的数据库和模式，进行引用和使用）</p>
<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><pre class="mermaid">graph TD

Load(fa:fa-spinner Load)
Construct(fa:fa-puzzle-piece Construct)
PostConstruct(fa:fa-at PostConstruct)
Init(fa:fa-cog Init)
Service(fa:fa-database Service)
Destroy(fa:fa-times Destroy)
PreDestroy(fa:fa-at PreDestroy)
Unload(fa:fa-bomb Unload)

Load ==&gt; Construct
Construct ==&gt; PostConstruct
PostConstruct ==&gt; Init
Init ==&gt; Service
Service ==&gt; Destroy
Destroy ==&gt; PreDestroy
PreDestroy ==&gt; Unload

style PostConstruct fill:#0099FF
style PreDestroy fill:#0099FF</pre>





<h2 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h2><h3 id="Presto-vs-Apache-Hive"><a href="#Presto-vs-Apache-Hive" class="headerlink" title="Presto vs Apache Hive"></a>Presto vs Apache Hive</h3><h4 id="优势比较"><a href="#优势比较" class="headerlink" title="优势比较"></a>优势比较</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Presto</th>
<th style="text-align:center">Apache Hive</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>场景特征</strong></td>
<td style="text-align:center">交互式查询</td>
<td style="text-align:center">高吞吐</td>
</tr>
<tr>
<td style="text-align:center"><strong>Join</strong></td>
<td style="text-align:center">一个较大的事实表 + 多个较小的维度表</td>
<td style="text-align:center">事实表 + 事实表</td>
</tr>
<tr>
<td style="text-align:center"><strong>窗口函数</strong></td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center"><strong>SQL 标准化</strong></td>
<td style="text-align:center">ANSI SQL</td>
<td style="text-align:center">HiveQL</td>
</tr>
</tbody>
</table>
</div>
<h4 id="架构比较"><a href="#架构比较" class="headerlink" title="架构比较"></a>架构比较</h4><p><img data-src="/picture/presto/presto_vs_hive.png" alt="Presto vs Hive on Architecture"></p>
<center>（图片来源：<a href="https://blog.treasuredata.com/blog/2015/03/20/presto-versus-hive/" target="_blank">treasuredata.com</a>™）</center>

<h3 id="Presto-vs-Amazon-Athena"><a href="#Presto-vs-Amazon-Athena" class="headerlink" title="Presto vs Amazon Athena"></a>Presto vs Amazon Athena</h3><p>　本质上，Amazon Athena（雅典娜）是一款完全支持标准 SQL 的 Presto</p>
<h3 id="PrestoDB-vs-Trino"><a href="#PrestoDB-vs-Trino" class="headerlink" title="PrestoDB vs Trino"></a>PrestoDB vs Trino</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">PrestoDB</th>
<th style="text-align:center">Trino</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>研发主力</strong></td>
<td style="text-align:center">Facebook</td>
<td style="text-align:center">Martin、Dain 和 David</td>
</tr>
<tr>
<td style="text-align:center"><strong>通讯模式</strong></td>
<td style="text-align:center">支持 RESTful 和二进制</td>
<td style="text-align:center">仅支持 RESTful</td>
</tr>
<tr>
<td style="text-align:center"><strong>查询下推</strong></td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center"><strong>Connector 数量</strong></td>
<td style="text-align:center"><a href="https://prestodb.io/docs/current/connector.html">25</a></td>
<td style="text-align:center"><a href="https://trino.io/docs/current/connector.html">31</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>技术输出</strong></td>
<td style="text-align:center">博客</td>
<td style="text-align:center">博客 + 视频 + 书籍</td>
</tr>
<tr>
<td style="text-align:center"><strong>Slack 渠道</strong></td>
<td style="text-align:center"><a href="https://prestodb.slack.com/"><img data-src="https://img.shields.io/badge/slack-PrestoDB-3AC358?logo=slack" alt=""></a></td>
<td style="text-align:center"><a href="https://trino.slack.com/"><img data-src="https://img.shields.io/badge/slack-Trino-3AC358?logo=slack" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center"><strong>代码质量</strong></td>
<td style="text-align:center"><img data-src="https://img.shields.io/lgtm/grade/java/github/prestodb/presto" alt=""></td>
<td style="text-align:center"><img data-src="https://img.shields.io/lgtm/grade/java/github/trinodb/trino" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><strong>Contributor 数量</strong></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/contributors-anon/prestodb/presto" alt=""></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/contributors-anon/trinodb/trino" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><strong>待解决 Issues 数量</strong></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/issues/prestodb/presto" alt=""></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/issues/trinodb/trino" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><strong>活跃 PR 数量</strong></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/issues-pr/prestodb/presto" alt=""></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/issues-pr/trinodb/trino" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><strong>Commit 数量</strong></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/commits-since/prestodb/presto/0.215/master" alt=""></td>
<td style="text-align:center"><img data-src="https://img.shields.io/github/commits-since/trinodb/trino/0.215/master" alt=""></td>
</tr>
</tbody>
</table>
</div>
<div class="note info">比对表持续更新中...</div>
<div class="note info">PrestoDB 和 PrestoSQL 均开源于 2012 年，Martin、Dain 和 David 为主力研发</div>
<div class="note info">在 2019 年年初，三位主力研发基于 PrestoDB 0.215 版本，创建了 PrestoSQL 这个新项目</div>
<div class="note info">于 2020 年 12 月 27 日，Martin Traverso、Dain Sundstrom 和 David Phillips 宣布将 PrestoSQL 项目的名字正式更名为 Trino</div>





<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><div class="note info">这里我们以 Trino 为例，整体部署步骤与 PrestoDB 相似。不同的是，Trino 需要较新的 Java11，而 PrestoDB 仍然停留在 Java8</div>

<h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://repo1.maven.org/maven2/io/trino/trino-server/354/trino-server-354.tar.gz</span><br><span class="line">$ tar zxvf trino-server-354.tar.gz</span><br><span class="line">$ ln -s trino-server-354 trino</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> trino</span><br><span class="line">$ mkdir etc</span><br><span class="line">$ <span class="built_in">cd</span> etc</span><br><span class="line">$ touch node.properties jvm.config config.properties log.properties</span><br><span class="line">$ mkdir catalog</span><br><span class="line">$ touch catalog/jmx.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim catalog/jmx.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">connector.name</span>=<span class="string">jmx</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim config.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">coordinator</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">node-scheduler.include-coordinator</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">query.max-memory</span>=<span class="string">8GB</span></span><br><span class="line"><span class="meta">query.max-memory-per-node</span>=<span class="string">1GB</span></span><br><span class="line"><span class="meta">http-server.http.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="meta">discovery-server.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">discovery.uri</span>=<span class="string">http://127.0.0.1:9999</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">-server</span></span><br><span class="line"><span class="attr">-Xmx8G</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseG1GC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">G1HeapRegionSize=32M</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseGCOverheadLimit</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+ExplicitGCInvokesConcurrent</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+ExitOnOutOfMemoryError</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim node.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">node.environment</span>=<span class="string">trino</span></span><br><span class="line"><span class="meta">node.id</span>=<span class="string">trino_node_1</span></span><br><span class="line"><span class="meta">node.data-dir</span>=<span class="string">/Users/benedictjin/apps/trinoData</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim launcher</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.10.jdk/Contents/Home</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$JAVA_HOME:$PATH</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ bin/launcher start</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/launcher status</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动日志</span></span><br><span class="line">$ tail -f ~/apps/trinoData/var/<span class="built_in">log</span>/launcher.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行日志</span></span><br><span class="line">$ tail -f ~/apps/trinoData/var/<span class="built_in">log</span>/server.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求日志</span></span><br><span class="line">$ tail -f ~/apps/trinoData/var/<span class="built_in">log</span>/http-request.log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://repo1.maven.org/maven2/io/trino/trino-cli/354/trino-cli-354-executable.jar -O bin/trino</span><br><span class="line">$ chmod +x bin/trino</span><br><span class="line">$ bin/trino</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p><img data-src="/picture/presto/trino_standalone_ui.jpg" alt="Trino Standalone UI"></p>
<p><img data-src="/picture/presto/trino_query_details.jpg" alt="Trino Query Details"></p>
<center>（对 <a href="https://trino.io/" target="_blank">Trino</a>™ 的截图）</center>

<h4 id="开启-Debug-模式"><a href="#开启-Debug-模式" class="headerlink" title="开启 Debug 模式"></a>开启 Debug 模式</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/launcher restart</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Stopped 19181</span><br><span class="line">Started as 21861</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Docker-容器版"><a href="#Docker-容器版" class="headerlink" title="Docker 容器版"></a>Docker 容器版</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker pull trinodb/trino</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker run -p 8080:8080 --name trino trinodb/trino</span><br></pre></td></tr></tbody></table></figure>
<h4 id="客户端连接-1"><a href="#客户端连接-1" class="headerlink" title="客户端连接"></a>客户端连接</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it trino trino --catalog tpch --schema sf1</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trino:sf1&gt; show tables;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">  Table</span><br><span class="line">----------</span><br><span class="line"> customer</span><br><span class="line"> lineitem</span><br><span class="line"> nation</span><br><span class="line"> orders</span><br><span class="line"> part</span><br><span class="line"> partsupp</span><br><span class="line"> region</span><br><span class="line"> supplier</span><br><span class="line">(8 rows)</span><br><span class="line"></span><br><span class="line">Query 20210406_054755_00005_fqwgu, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.22 [8 rows, 158B] [35 rows/s, 705B/s]</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trino:sf1&gt; select * from customer <span class="built_in">limit</span> 3;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"> custkey |        name        |            address             | nationkey |      phone      | acctbal | mktsegment |</span><br><span class="line">---------+--------------------+--------------------------------+-----------+-----------------+---------+------------+---------------------------------------------</span><br><span class="line">       1 | Customer<span class="comment">#000000001 | IVhzIApeRb ot,c,E              |        15 | 25-989-741-2988 |  711.56 | BUILDING   | to the even, regular platelets. regular, iro</span></span><br><span class="line">       2 | Customer<span class="comment">#000000002 | XSTf4,NCwDVaWNe6tEgvwfmRchLXak |        13 | 23-768-687-3665 |  121.65 | AUTOMOBILE | l accounts. blithely ironic theodolites inte</span></span><br><span class="line">       3 | Customer<span class="comment">#000000003 | MG9kdTD2WBHm                   |         1 | 11-719-748-3364 | 7498.12 | AUTOMOBILE |  deposits eat slyly ironic, even instruction</span></span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">Query 20210406_054817_00006_fqwgu, FINISHED, 1 node</span><br><span class="line">Splits: 21 total, 20 <span class="keyword">done</span> (95.24%)</span><br><span class="line">2.02 [16.4K rows, 0B] [8.12K rows/s, 0B/s]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Kubernetes-集群版"><a href="#Kubernetes-集群版" class="headerlink" title="Kubernetes 集群版"></a>Kubernetes 集群版</h3><p>　详见，我的另一篇博客：<a href="https://yuzhouwan.com/posts/200926/#%E6%90%AD%E5%BB%BA-PrestoDB-%E9%9B%86%E7%BE%A4">Helm 实战</a></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="Example-HTTP-Connector"><a href="#Example-HTTP-Connector" class="headerlink" title="Example HTTP Connector"></a>Example HTTP Connector</h3><h4 id="配置-Catalog"><a href="#配置-Catalog" class="headerlink" title="配置 Catalog"></a>配置 Catalog</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/catalog/example-http.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">connector.name</span>=<span class="string">example-http</span></span><br><span class="line"><span class="meta">metadata-uri</span>=<span class="string">https://raw.githubusercontent.com/prestosql/presto/master/presto-example-http/src/test/resources/example-data/example-metadata.json</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="重启-Presto"><a href="#重启-Presto" class="headerlink" title="重启 Presto"></a>重启 Presto</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/launcher restart</span><br></pre></td></tr></tbody></table></figure>
<h4 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget -c https://repo1.maven.org/maven2/io/prestosql/presto-cli/345/presto-cli-345-executable.jar -O bin/presto</span><br><span class="line">$ chmod +x bin/presto</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/presto --server localhost:9999</span><br></pre></td></tr></tbody></table></figure>
<h4 id="显示-Catalog"><a href="#显示-Catalog" class="headerlink" title="显示 Catalog"></a>显示 Catalog</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ presto&gt; show catalogs;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">   Catalog</span><br><span class="line">--------------</span><br><span class="line"> druid</span><br><span class="line"> example-http</span><br><span class="line"> system</span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">Query 20200906_094341_00067_q49be, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.22 [0 rows, 0B] [0 rows/s, 0B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="显示-Schema"><a href="#显示-Schema" class="headerlink" title="显示 Schema"></a>显示 Schema</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ presto&gt; show schemas from <span class="string">"example-http"</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">       Schema</span><br><span class="line">--------------------</span><br><span class="line"> example</span><br><span class="line"> information_schema</span><br><span class="line"> tpch</span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">Query 20200906_094429_00069_q49be, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.22 [3 rows, 44B] [13 rows/s, 204B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="切换-Schema"><a href="#切换-Schema" class="headerlink" title="切换 Schema"></a>切换 Schema</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ presto&gt; use <span class="string">"example-http"</span>.example;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">USE</span><br></pre></td></tr></tbody></table></figure>
<h4 id="显示所有表"><a href="#显示所有表" class="headerlink" title="显示所有表"></a>显示所有表</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:example&gt; show tables;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">  Table</span><br><span class="line">---------</span><br><span class="line"> numbers</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Query 20200906_094445_00073_q49be, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.22 [1 rows, 24B] [4 rows/s, 112B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:example&gt; select * from numbers;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">  text  | value</span><br><span class="line">--------+-------</span><br><span class="line"> one    |     1</span><br><span class="line"> two    |     2</span><br><span class="line"> three  |     3</span><br><span class="line"> ten    |    10</span><br><span class="line"> eleven |    11</span><br><span class="line"> twelve |    12</span><br><span class="line">(6 rows)</span><br><span class="line"></span><br><span class="line">Query 20200906_094451_00074_q49be, FINISHED, 1 node</span><br><span class="line">Splits: 18 total, 18 <span class="keyword">done</span> (100.00%)</span><br><span class="line">1.69 [6 rows, 0B] [3 rows/s, 0B/s]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Apache-Druid-Connector"><a href="#Apache-Druid-Connector" class="headerlink" title="Apache Druid Connector"></a>Apache Druid Connector</h3><h4 id="配置-Catalog-1"><a href="#配置-Catalog-1" class="headerlink" title="配置 Catalog"></a>配置 Catalog</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/catalog/druid.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">connector.name</span>=<span class="string">druid</span></span><br><span class="line"><span class="meta">connection-url</span>=<span class="string">jdbc:avatica:remote:url=http://remote_druid_cluster:8082/druid/v2/sql/avatica/</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="开放-Broker-端口"><a href="#开放-Broker-端口" class="headerlink" title="开放 Broker 端口"></a>开放 Broker 端口</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> `ps -ef | grep 8082 | grep -v grep | awk <span class="string">'{print $2}'</span>`; <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=druid,release=`helm list | grep druid- | awk '{print <span class="variable">$1</span>}'`"</span> | grep broker | awk <span class="string">'{print $1}'</span>) ; nohup kubectl port-forward <span class="variable">$POD_NAME</span> 8082:8082 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="重启-Presto-1"><a href="#重启-Presto-1" class="headerlink" title="重启 Presto"></a>重启 Presto</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/launcher restart</span><br></pre></td></tr></tbody></table></figure>
<h4 id="下载客户端-1"><a href="#下载客户端-1" class="headerlink" title="下载客户端"></a>下载客户端</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget -c https://repo1.maven.org/maven2/io/prestosql/presto-cli/345/presto-cli-345-executable.jar -O bin/presto</span><br><span class="line">$ chmod +x bin/presto</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动客户端-1"><a href="#启动客户端-1" class="headerlink" title="启动客户端"></a>启动客户端</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/presto --catalog druid --server localhost:9999 --schema default</span><br></pre></td></tr></tbody></table></figure>
<h4 id="显示-Schema-1"><a href="#显示-Schema-1" class="headerlink" title="显示 Schema"></a>显示 Schema</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ presto:default&gt; show schemas;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">       Schema</span><br><span class="line">--------------------</span><br><span class="line"> druid</span><br><span class="line"> information_schema</span><br><span class="line">(2 rows)</span><br><span class="line"></span><br><span class="line">Query 20200906_094823_00079_q49be, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.22 [2 rows, 33B] [9 rows/s, 151B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ presto:default&gt; use druid;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">USE</span><br></pre></td></tr></tbody></table></figure>
<h4 id="显示所有表-1"><a href="#显示所有表-1" class="headerlink" title="显示所有表"></a>显示所有表</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:druid&gt; show tables;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">   Table</span><br><span class="line">-----------</span><br><span class="line"> wikipedia</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Query 20200906_083924_00017_pg9xm, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.29 [1 rows, 24B] [3 rows/s, 82B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:druid&gt; select * from wikipedia <span class="built_in">where</span> <span class="string">"cityName"</span> != <span class="string">''</span> order by <span class="string">"__time"</span> desc <span class="built_in">limit</span> 3;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">         __time          |    channel    | cityname |                                                            comment</span><br><span class="line">-------------------------+---------------+----------+--------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 2016-06-27 21:00:00.000 | <span class="comment">#en.wikipedia | Glasgow  | /* Presenters */Dan Neal Is Guest Presenting But Is Not A Main Stand In.</span></span><br><span class="line"> 2016-06-27 21:00:00.000 | <span class="comment">#en.wikipedia | Bothell  | /* BAMN */</span></span><br><span class="line"> 2016-06-27 21:00:00.000 | <span class="comment">#de.wikipedia | Pamplona | /* Fahrzeuge mit Wankelmotor */  new entries, actual vehicles, easy to check on the web, no reason to delete or blo</span></span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">Query 20200906_084953_00028_pg9xm, FINISHED, 1 node</span><br><span class="line">Splits: 18 total, 18 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.69 [1.53K rows, 0B] [2.22K rows/s, 0B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:druid&gt; describe wikipedia;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">      Column       |     Type     | Extra | Comment</span><br><span class="line">-------------------+--------------+-------+---------</span><br><span class="line"> __time            | timestamp(3) |       |</span><br><span class="line"> channel           | varchar      |       |</span><br><span class="line"> cityname          | varchar      |       |</span><br><span class="line"> comment           | varchar      |       |</span><br><span class="line"> count             | bigint       |       |</span><br><span class="line"> countryisocode    | varchar      |       |</span><br><span class="line"> countryname       | varchar      |       |</span><br><span class="line"> diffurl           | varchar      |       |</span><br><span class="line"> flags             | varchar      |       |</span><br><span class="line"> isanonymous       | varchar      |       |</span><br><span class="line"> isminor           | varchar      |       |</span><br><span class="line"> isnew             | varchar      |       |</span><br><span class="line"> isrobot           | varchar      |       |</span><br><span class="line"> isunpatrolled     | varchar      |       |</span><br><span class="line"> metrocode         | varchar      |       |</span><br><span class="line"> namespace         | varchar      |       |</span><br><span class="line"> page              | varchar      |       |</span><br><span class="line"> regionisocode     | varchar      |       |</span><br><span class="line"> regionname        | varchar      |       |</span><br><span class="line"> sum_added         | bigint       |       |</span><br><span class="line"> sum_commentlength | bigint       |       |</span><br><span class="line"> sum_deleted       | bigint       |       |</span><br><span class="line"> sum_delta         | bigint       |       |</span><br><span class="line"> sum_deltabucket   | bigint       |       |</span><br><span class="line"> user              | varchar      |       |</span><br><span class="line">(25 rows)</span><br><span class="line"></span><br><span class="line">Query 20200906_131047_00010_v7ekz, FINISHED, 1 node</span><br><span class="line">Splits: 19 total, 19 <span class="keyword">done</span> (100.00%)</span><br><span class="line">0.29 [25 rows, 1.68KB] [87 rows/s, 5.9KB/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:druid&gt; explain select * from wikipedia <span class="built_in">where</span> <span class="string">"cityName"</span> != <span class="string">''</span> order by <span class="string">"__time"</span> desc <span class="built_in">limit</span> 3;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Fragment <span class="number">0</span> [SINGLE]</span><br><span class="line">     Output layout: [__time, channel, cityname, comment, count, countryisocode, countryname, diffurl, flags, isanonymous, isminor, isnew, isrobot, isunpatrolled, metroco</span><br><span class="line">     Output partitioning: SINGLE []</span><br><span class="line">     Stage Execution Strategy: UNGROUPED_EXECUTION</span><br><span class="line">     Output[__time, channel, cityname, comment, count, countryisocode, countryname, diffurl, flags, isanonymous, isminor, isnew, isrobot, isunpatrolled, metrocode, names</span><br><span class="line">     │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar, fl</span><br><span class="line">     │   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}</span><br><span class="line">     └─ TopN[<span class="number">3</span> by (__time DESC_NULLS_LAST)]</span><br><span class="line">        │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar,</span><br><span class="line">        └─ LocalExchange[SINGLE] ()</span><br><span class="line">           │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varch</span><br><span class="line">           │   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}</span><br><span class="line">           └─ RemoteSource[<span class="number">1</span>]</span><br><span class="line">                  Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:va</span><br><span class="line"></span><br><span class="line"> Fragment <span class="number">1</span> [SOURCE]</span><br><span class="line">     Output layout: [__time, channel, cityname, comment, count, countryisocode, countryname, diffurl, flags, isanonymous, isminor, isnew, isrobot, isunpatrolled, metroco</span><br><span class="line">     Output partitioning: SINGLE []</span><br><span class="line">     Stage Execution Strategy: UNGROUPED_EXECUTION</span><br><span class="line">     TopNPartial[<span class="number">3</span> by (__time DESC_NULLS_LAST)]</span><br><span class="line">     │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar, fl</span><br><span class="line">     └─ TableScan[druid:druid.wikipedia druid.druid.wikipedia, grouped = <span class="keyword">false</span>]</span><br><span class="line">            Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar,</span><br><span class="line">            Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}</span><br><span class="line">            channel := channel:varchar:VARCHAR</span><br><span class="line">            flags := flags:varchar:VARCHAR</span><br><span class="line">            regionisocode := regionIsoCode:varchar:VARCHAR</span><br><span class="line">            isnew := isNew:varchar:VARCHAR</span><br><span class="line">            sum_deleted := sum_deleted:bigint:BIGINT</span><br><span class="line">            isunpatrolled := isUnpatrolled:varchar:VARCHAR</span><br><span class="line">            isminor := isMinor:varchar:VARCHAR</span><br><span class="line">            regionname := regionName:varchar:VARCHAR</span><br><span class="line">            isanonymous := isAnonymous:varchar:VARCHAR</span><br><span class="line">            sum_added := sum_added:bigint:BIGINT</span><br><span class="line">            sum_deltabucket := sum_deltaBucket:bigint:BIGINT</span><br><span class="line">            __time := __time:timestamp(<span class="number">3</span>):TIMESTAMP</span><br><span class="line">            diffurl := diffUrl:varchar:VARCHAR</span><br><span class="line">            isrobot := isRobot:varchar:VARCHAR</span><br><span class="line">            metrocode := metroCode:varchar:VARCHAR</span><br><span class="line">            cityname := cityName:varchar:VARCHAR</span><br><span class="line">            count := count:bigint:BIGINT</span><br><span class="line">            countryname := countryName:varchar:VARCHAR</span><br><span class="line">            countryisocode := countryIsoCode:varchar:VARCHAR</span><br><span class="line">            namespace := namespace:varchar:VARCHAR</span><br><span class="line">            comment := comment:varchar:VARCHAR</span><br><span class="line">            page := page:varchar:VARCHAR</span><br><span class="line">            sum_commentlength := sum_commentLength:bigint:BIGINT</span><br><span class="line">            user := user:varchar:VARCHAR</span><br><span class="line">            sum_delta := sum_delta:bigint:BIGINT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Query 20200906_113246_00048_pg9xm, FINISHED, <span class="number">1</span> node</span><br><span class="line">Splits: <span class="number">1</span> total, <span class="number">1</span> done (<span class="number">100.00</span>%)</span><br><span class="line"><span class="number">0.34</span> [<span class="number">0</span> rows, 0B] [<span class="number">0</span> rows/s, 0B/s]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Explain-Anaylze"><a href="#Explain-Anaylze" class="headerlink" title="Explain Anaylze"></a>Explain Anaylze</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">presto:druid&gt; explain analyze select * from wikipedia <span class="built_in">where</span> <span class="string">"cityName"</span> != <span class="string">''</span> order by <span class="string">"__time"</span> desc <span class="built_in">limit</span> 3;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Fragment <span class="number">1</span> [SINGLE]</span><br><span class="line">     CPU: <span class="number">3.</span>74ms, Scheduled: <span class="number">25.</span>39ms, Input: <span class="number">3</span> rows (<span class="number">1.</span>18kB); per task: avg.: <span class="number">3.00</span> std.dev.: <span class="number">0.00</span>, Output: <span class="number">3</span> rows (<span class="number">1.</span>18kB)</span><br><span class="line">     Output layout: [__time, channel, cityname, comment, count, countryisocode, countryname, diffurl, flags, isanonymous, isminor, isnew, isrobot, isunpatrolled, metroco</span><br><span class="line">     Output partitioning: SINGLE []</span><br><span class="line">     Stage Execution Strategy: UNGROUPED_EXECUTION</span><br><span class="line">     TopN[<span class="number">3</span> by (__time DESC_NULLS_LAST)]</span><br><span class="line">     │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar, fl</span><br><span class="line">     │   CPU: <span class="number">0.</span>00ns (<span class="number">0.00</span>%), Scheduled: <span class="number">7.</span>00ms (<span class="number">1.65</span>%), Output: <span class="number">3</span> rows (<span class="number">1.</span>18kB)</span><br><span class="line">     │   Input avg.: <span class="number">3.00</span> rows, Input std.dev.: <span class="number">0.00</span>%</span><br><span class="line">     └─ LocalExchange[SINGLE] ()</span><br><span class="line">        │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar,</span><br><span class="line">        │   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}</span><br><span class="line">        │   CPU: <span class="number">1.</span>00ms (<span class="number">2.78</span>%), Scheduled: <span class="number">2.</span>00ms (<span class="number">0.47</span>%), Output: <span class="number">3</span> rows (<span class="number">1.</span>18kB)</span><br><span class="line">        │   Input avg.: <span class="number">0.19</span> rows, Input std.dev.: <span class="number">387.30</span>%</span><br><span class="line">        └─ RemoteSource[<span class="number">2</span>]</span><br><span class="line">               Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varch</span><br><span class="line">               CPU: <span class="number">0.</span>00ns (<span class="number">0.00</span>%), Scheduled: <span class="number">0.</span>00ns (<span class="number">0.00</span>%), Output: <span class="number">3</span> rows (<span class="number">1.</span>18kB)</span><br><span class="line">               Input avg.: <span class="number">0.19</span> rows, Input std.dev.: <span class="number">387.30</span>%</span><br><span class="line"></span><br><span class="line"> Fragment <span class="number">2</span> [SOURCE]</span><br><span class="line">     CPU: <span class="number">35.</span>54ms, Scheduled: <span class="number">413.</span>99ms, Input: <span class="number">1533</span> rows (<span class="number">547.</span>77kB); per task: avg.: <span class="number">1533.00</span> std.dev.: <span class="number">0.00</span>, Output: <span class="number">3</span> rows (<span class="number">1.</span>18kB)</span><br><span class="line">     Output layout: [__time, channel, cityname, comment, count, countryisocode, countryname, diffurl, flags, isanonymous, isminor, isnew, isrobot, isunpatrolled, metroco</span><br><span class="line">     Output partitioning: SINGLE []</span><br><span class="line">     Stage Execution Strategy: UNGROUPED_EXECUTION</span><br><span class="line">     TopNPartial[<span class="number">3</span> by (__time DESC_NULLS_LAST)]</span><br><span class="line">     │   Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar, fl</span><br><span class="line">     │   CPU: <span class="number">2.</span>00ms (<span class="number">5.56</span>%), Scheduled: <span class="number">18.</span>00ms (<span class="number">4.26</span>%), Output: <span class="number">3</span> rows (<span class="number">1.</span>18kB)</span><br><span class="line">     │   Input avg.: <span class="number">1533.00</span> rows, Input std.dev.: <span class="number">0.00</span>%</span><br><span class="line">     └─ TableScan[druid:druid.wikipedia druid.druid.wikipedia, grouped = <span class="keyword">false</span>]</span><br><span class="line">            Layout: [__time:timestamp(<span class="number">3</span>), channel:varchar, cityname:varchar, comment:varchar, count:bigint, countryisocode:varchar, countryname:varchar, diffurl:varchar,</span><br><span class="line">            Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}</span><br><span class="line">            CPU: <span class="number">33.</span>00ms (<span class="number">91.67</span>%), Scheduled: <span class="number">396.</span>00ms (<span class="number">93.62</span>%), Output: <span class="number">1533</span> rows (<span class="number">547.</span>77kB)</span><br><span class="line">            Input avg.: <span class="number">1533.00</span> rows, Input std.dev.: <span class="number">0.00</span>%</span><br><span class="line">            channel := channel:varchar:VARCHAR</span><br><span class="line">            flags := flags:varchar:VARCHAR</span><br><span class="line">            regionisocode := regionIsoCode:varchar:VARCHAR</span><br><span class="line">            isnew := isNew:varchar:VARCHAR</span><br><span class="line">            sum_deleted := sum_deleted:bigint:BIGINT</span><br><span class="line">            isunpatrolled := isUnpatrolled:varchar:VARCHAR</span><br><span class="line">            isminor := isMinor:varchar:VARCHAR</span><br><span class="line">            regionname := regionName:varchar:VARCHAR</span><br><span class="line">            isanonymous := isAnonymous:varchar:VARCHAR</span><br><span class="line">            sum_added := sum_added:bigint:BIGINT</span><br><span class="line">            sum_deltabucket := sum_deltaBucket:bigint:BIGINT</span><br><span class="line">            __time := __time:timestamp(<span class="number">3</span>):TIMESTAMP</span><br><span class="line">            diffurl := diffUrl:varchar:VARCHAR</span><br><span class="line">            isrobot := isRobot:varchar:VARCHAR</span><br><span class="line">            metrocode := metroCode:varchar:VARCHAR</span><br><span class="line">            cityname := cityName:varchar:VARCHAR</span><br><span class="line">            count := count:bigint:BIGINT</span><br><span class="line">            countryname := countryName:varchar:VARCHAR</span><br><span class="line">            countryisocode := countryIsoCode:varchar:VARCHAR</span><br><span class="line">            namespace := namespace:varchar:VARCHAR</span><br><span class="line">            comment := comment:varchar:VARCHAR</span><br><span class="line">            page := page:varchar:VARCHAR</span><br><span class="line">            sum_commentlength := sum_commentLength:bigint:BIGINT</span><br><span class="line">            user := user:varchar:VARCHAR</span><br><span class="line">            sum_delta := sum_delta:bigint:BIGINT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Query 20200906_113431_00049_pg9xm, FINISHED, <span class="number">1</span> node</span><br><span class="line">Splits: <span class="number">35</span> total, <span class="number">35</span> done (<span class="number">100.00</span>%)</span><br><span class="line"><span class="number">5.76</span> [<span class="number">1.</span>53K rows, 0B] [<span class="number">266</span> rows/s, 0B/s]</span><br></pre></td></tr></tbody></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><div class="note info">鉴于诸多缘由，这里我们基于 PrestoSQL 进行分析</div>

<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">java version <span class="string">"11.0.9"</span> 2020-10-20 LTS</span><br><span class="line">Java(TM) SE Runtime Environment 18.9 (build 11.0.9+7-LTS)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.9+7-LTS, mixed mode)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 --single-branch --branch master https://github.com/prestosql/presto/</span><br><span class="line">$ <span class="built_in">cd</span> presto</span><br><span class="line">$ mvn clean install -T 1C -DskipTests -pl <span class="string">'!presto-docs'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><pre class="mermaid">sequenceDiagram

participant PrestoServer
participant Platform
participant Server
participant Logger
participant ImmutableList
participant ImmutableList.Builder
participant Bootstrap
participant ConfigurationLoader

participant Injector
participant LifeCycleManager
participant StaticCatalogStore
participant PluginManager

participant ConfigurationFactory
participant Elements
participant RecordingBinder
participant Module

participant System

participant AbstractConfigurationAwareModule
participant ServerConfig

participant ServerMainModule
participant CoordinatorModule
participant WorkerModule

participant LifeCycleModule
participant ConfigurationModule

participant Guice


PrestoServer -&gt;&gt; PrestoServer : main


opt check the version of java
PrestoServer -&gt;&gt;+ Platform : nullToEmpty
Platform -&gt;&gt;- PrestoServer : java.version
alt java.version &lt; 11
PrestoServer -&gt;&gt; System : exit(100)
end
end


PrestoServer -&gt;&gt;+ Server : new
Server -&gt;&gt;- PrestoServer : Server
PrestoServer -&gt;&gt; Server : start
Server -&gt;&gt; Server : doStart

Server -&gt;&gt;+ ImmutableList : builder
ImmutableList -&gt;&gt;- Server : ImmutableList.Builder


opt init modules
Server -&gt;&gt;+ ServerMainModule : new
ServerMainModule -&gt;&gt;- Server : ServerMainModule
end


Server -&gt;&gt; ImmutableList.Builder : add
Server -&gt;&gt; ImmutableList.Builder : build
ImmutableList.Builder -&gt;&gt; Server : ImmutableList
Server -&gt;&gt; Bootstrap : new
Bootstrap -&gt;&gt; Server : Bootstrap
Bootstrap -&gt;&gt;+ Bootstrap : initialize


opt config
Bootstrap -&gt;&gt;+ ConfigurationLoader : loadPropertiesFrom(configFile)
ConfigurationLoader -&gt;&gt;- Bootstrap : Map<string, string=""> requiredProperties
Bootstrap -&gt;&gt;+ ConfigurationLoader : getSystemProperties
ConfigurationLoader -&gt;&gt;+ System : getProperties
System -&gt;&gt;- ConfigurationLoader : Properties
ConfigurationLoader -&gt;&gt;- Bootstrap : Map<string, string=""> systemProperties

Bootstrap -&gt;&gt;+ ConfigurationFactory : new
ConfigurationFactory -&gt;&gt;- Bootstrap : ConfigurationFactory
end



opt install module by airlift
ConfigurationFactory -&gt;&gt; ConfigurationFactory : registerConfigurationClasses

ConfigurationFactory -&gt;&gt;+ Elements : getElements(modules)
Elements -&gt;&gt;+ RecordingBinder : new
RecordingBinder -&gt;&gt;- Elements : RecordingBinder
Elements -&gt;&gt; RecordingBinder : install(module)

opt setup modules, for example, ServerMainModule
Elements -&gt;&gt; Module : configure(binder)
Module -&gt;&gt; AbstractConfigurationAwareModule : setup
AbstractConfigurationAwareModule -&gt;&gt; ServerMainModule : setup
ServerMainModule -&gt;&gt;+ AbstractConfigurationAwareModule : buildConfigObject
AbstractConfigurationAwareModule -&gt;&gt;- ServerMainModule : ServerConfig
ServerMainModule -&gt;&gt;+ ServerConfig : isCoordinator
ServerConfig -&gt;&gt;- ServerMainModule : boolean

alt true
ServerMainModule -&gt;&gt;+ CoordinatorModule : new
CoordinatorModule -&gt;&gt;+ ServerMainModule : CoordinatorModule
else false
ServerMainModule -&gt;&gt;+ WorkerModule : new
WorkerModule -&gt;&gt;+ ServerMainModule : WorkerModule
end

ServerMainModule -&gt;&gt; AbstractConfigurationAwareModule : install
end

Elements -&gt;&gt;+ RecordingBinder : binder.elements
RecordingBinder -&gt;&gt;- Elements : List<element>
Elements -&gt;&gt;- ConfigurationFactory : List<element>


ConfigurationFactory -&gt;&gt; ConfigurationFactory : validateRegisteredConfigurationProvider
end




opt system modules
Bootstrap -&gt;&gt;+ LifeCycleModule : new
LifeCycleModule -&gt;&gt;- Bootstrap : LifeCycleModule
Bootstrap -&gt;&gt;+ ConfigurationModule : new
ConfigurationModule -&gt;&gt;- Bootstrap : ConfigurationModule
end

opt create the injector
Bootstrap -&gt;&gt;+ Guice : createInjector
Guice -&gt;&gt;- Bootstrap : Injector
end

opt create the life-cycle manager and start it
Bootstrap -&gt;&gt;+ Injector : getInstance
Injector -&gt;&gt;- Bootstrap : LifeCycleManager
Bootstrap -&gt;&gt; LifeCycleManager : start
end


Bootstrap -&gt;&gt;- Bootstrap : Injector


opt load resources
Server -&gt;&gt;+ Injector : getInstance(PluginManager.class)
Injector -&gt;&gt;- Server : PluginManager
Server -&gt;&gt; PluginManager : loadPlugins

Server -&gt;&gt;+ Injector : getInstance(StaticCatalogStore.class)
Injector -&gt;&gt;- Server : StaticCatalogStore
Server -&gt;&gt; StaticCatalogStore : loadCatalogs
end

Server -&gt;&gt; Logger : "======== SERVER STARTED ========"</element></element></string,></string,></pre>

<div class="note success">点击<a href="/picture/presto/prestosql_init.svg" target="_blank">这里</a>查看完整大图</div>
<div class="note info">出于渲染复杂度的考虑，在 Module 初始化阶段省略了 NodeModule、DiscoveryModule、HttpServerModule、JsonModule、JaxrsModule、MBeanModule、PrefixObjectNameGeneratorModule、JmxModule、JmxHttpModule、LogJmxModule、TraceTokenModule、EventModule、JsonEventModule、ServerSecurityModule、AccessControlModule、EventListenerModule、GracefulShutdownModule、WarningCollectorModule；在资源加载阶段省略了 AccessControlManager、PasswordAuthenticatorManager、EventListenerManager、GroupProviderManager、CertificateAuthenticatorManager、Announcer、ServerInfoResource、ResourceGroupManager、SessionPropertyDefaults</div>

<h3 id="请求链路"><a href="#请求链路" class="headerlink" title="请求链路"></a>请求链路</h3><pre class="mermaid">sequenceDiagram

participant Client
participant QueuedStatementResource
participant QueuedStatementResource.Query
participant QueuedStatementResource#queries
participant DispatchManager
participant QueuedStatementResource.Query
participant ExecutingStatementResource
participant ExecutingStatementResource#queries
participant io.prestosql.server.protocol.Query
participant Futures

opt send query to queue
Client -&gt;&gt;+ QueuedStatementResource : POST /v1/statement

QueuedStatementResource -&gt;&gt; QueuedStatementResource : postStatement

QueuedStatementResource -&gt;&gt;+ QueuedStatementResource.Query : new
QueuedStatementResource.Query -&gt;&gt;+ DispatchManager : createQueryId
DispatchManager -&gt;&gt;- QueuedStatementResource.Query : QueryId
QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource : QueuedStatementResource.Query

QueuedStatementResource -&gt;&gt; QueuedStatementResource#queries : put with queryId

QueuedStatementResource -&gt;&gt;+ QueuedStatementResource.Query : getQueryResults

QueuedStatementResource.Query -&gt;&gt;+ QueuedStatementResource.Query : createQueryResults
QueuedStatementResource.Query -&gt;&gt;+ QueuedStatementResource.Query : getNextUri
QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource.Query : URI (http://localhost:9999/v1/statement/queued/20200906_093843_00041_pg9xm/y3f077eadf2dca6425d56173bac9afea11161cdd0/1)
QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource.Query : QueryResults

QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource : QueryResults

QueuedStatementResource -&gt;&gt;+ Response : ok
Response -&gt;&gt;- QueuedStatementResource : Response

QueuedStatementResource -&gt;&gt;- Client : Response
end






opt get query from queue and dispatch it

Client -&gt;&gt; QueuedStatementResource : GET /v1/statement/queued/{queryId}/{slug}/{token}

QueuedStatementResource -&gt;&gt;+ QueuedStatementResource : getQuery
QueuedStatementResource -&gt;&gt;+ QueuedStatementResource#queries : get by queryId
QueuedStatementResource#queries -&gt;&gt;+ QueuedStatementResource : QueuedStatementResource.Query
QueuedStatementResource -&gt;&gt;- QueuedStatementResource : QueuedStatementResource.Query

opt wait for query to be dispatched, up to the wait timeout
QueuedStatementResource -&gt;&gt;+ QueuedStatementResource.Query : waitForDispatched
QueuedStatementResource.Query -&gt;&gt;+ DispatchManager : waitForDispatched
DispatchManager -&gt;&gt;- QueuedStatementResource.Query : ListenableFuture<!--?-->
QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource : ListenableFuture<!--?-->
end

opt when state changes, fetch the next result
QueuedStatementResource -&gt;&gt; QueuedStatementResource.Query : getQueryResults
QueuedStatementResource.Query -&gt;&gt; QueuedStatementResource.Query : createQueryResults
QueuedStatementResource.Query -&gt;&gt;+ QueuedStatementResource.Query : getNextUri
QueuedStatementResource.Query -&gt;&gt;+ QueuedStatementResource.Query : getRedirectUri
QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource.Query : URI (http://localhost:9999/v1/statement/executing/20200906_093843_00041_pg9xm/y714bd6e0605f3fdf63d1aac8d10aa92f4c81cf23/0)
QueuedStatementResource.Query -&gt;&gt;- QueuedStatementResource.Query : URI
QueuedStatementResource.Query -&gt;&gt; QueuedStatementResource : QueryResults

QueuedStatementResource -&gt;&gt;+ Futures : transform
Futures -&gt;&gt;- QueuedStatementResource : ListenableFuture<queryresults>
end

opt transform to Response
QueuedStatementResource -&gt;&gt;+ Response : ok
Response -&gt;&gt;- QueuedStatementResource : Response

QueuedStatementResource -&gt;&gt;+ Futures : transform
Futures -&gt;&gt;- QueuedStatementResource : ListenableFuture<response>
end

QueuedStatementResource -&gt;&gt; QueuedStatementResource : bindAsyncResponse
QueuedStatementResource -&gt;&gt; Client : Response

end





opt execute

Client -&gt;&gt;+ ExecutingStatementResource : GET /v1/statement/executing/{queryId}/{slug}/{token}

opt get or recreate query
ExecutingStatementResource -&gt;&gt; ExecutingStatementResource : getQueryResults
ExecutingStatementResource -&gt;&gt;+ ExecutingStatementResource#queries : get by queryId

alt exist
ExecutingStatementResource#queries -&gt;&gt;- ExecutingStatementResource : io.prestosql.server.protocol.Query
else not-exist
ExecutingStatementResource -&gt;&gt;+ io.prestosql.server.protocol.Query : create
io.prestosql.server.protocol.Query -&gt;&gt;- ExecutingStatementResource : io.prestosql.server.protocol.Query
ExecutingStatementResource -&gt;&gt;+ ExecutingStatementResource#queries : computeIfAbsent
ExecutingStatementResource#queries -&gt;&gt;- ExecutingStatementResource : io.prestosql.server.protocol.Query
end

end

opt result
ExecutingStatementResource -&gt;&gt; ExecutingStatementResource : asyncQueryResults
ExecutingStatementResource -&gt;&gt;+ io.prestosql.server.protocol.Query : waitForResults
io.prestosql.server.protocol.Query -&gt;&gt;- ExecutingStatementResource : ListenableFuture<queryresults>
ExecutingStatementResource -&gt;&gt;+ ExecutingStatementResource : toResponse
ExecutingStatementResource -&gt;&gt;- ExecutingStatementResource : Response
ExecutingStatementResource -&gt;&gt;+ Futures : transform
Futures -&gt;&gt;- ExecutingStatementResource : ListenableFuture<response>
ExecutingStatementResource -&gt;&gt; ExecutingStatementResource : bindAsyncResponse
end

end

ExecutingStatementResource -&gt;&gt;- Client : Response</response></queryresults></response></queryresults></pre>

<div class="note success">点击<a href="/picture/presto/prestosql_request.svg" target="_blank">这里</a>查看完整大图</div>
<div class="note info">PrestoSQL 内部通过 getNextUri 方法，不断地获取下阶段需要调用的接口，推动完成整个请求链路的流转</div>
<div class="note info">取消已提交查询的流程与之类似，这里便不赘述</div>
<div class="note info">出于渲染复杂度的考虑，更细节的 Session、Transaction、StateMachine、Scheduler 和 Task 等概念，并没有在流程中体现出</div>






<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="不支持类型的隐式转换"><a href="#不支持类型的隐式转换" class="headerlink" title="不支持类型的隐式转换"></a>不支持类型的隐式转换</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>　原本只支持数值类型之间的比较，例如 <code>2 &gt; 1</code>：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ScalarOperator(GREATER_THAN)</span></span><br><span class="line"><span class="meta">@SqlType(StandardTypes.BOOLEAN)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greaterThan</span><span class="params">(<span class="meta">@SqlType(StandardTypes.BIGINT)</span> <span class="keyword">long</span> left, <span class="meta">@SqlType(StandardTypes.BIGINT)</span> <span class="keyword">long</span> right)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> left &gt; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>　增加以下方法，以支持字符串与数值之间的比较，例如 <code>'2' &gt; 1</code>：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ScalarOperator(GREATER_THAN)</span></span><br><span class="line"><span class="meta">@SqlType(StandardTypes.BOOLEAN)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greaterThan</span><span class="params">(<span class="meta">@SqlType(StandardTypes.VARCHAR)</span> String left, <span class="meta">@SqlType(StandardTypes.BIGINT)</span> <span class="keyword">long</span> right)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> Long.parseLong(left) &gt; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">当然也可以显示地调用 cast 函数进行类型转换</div>

<h3 id="compiler-message-file-broken"><a href="#compiler-message-file-broken" class="headerlink" title="compiler message file broken"></a>compiler message file broken</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[INFO] --- maven-compiler-plugin:<span class="number">3.8</span><span class="number">.0</span>:testCompile (<span class="keyword">default</span>-testCompile) @ presto-main ---</span><br><span class="line">[INFO] Changes detected - recompiling the <span class="keyword">module</span>!</span><br><span class="line">[INFO] Compiling <span class="number">942</span> source files to /Users/benedictjin/code/prestosql/presto-main/target/test-classes</span><br><span class="line">compiler message file broken: key=compiler.misc.msg.bug arguments=<span class="number">11.0</span><span class="number">.5</span>, {<span class="number">1</span>}, {<span class="number">2</span>}, {<span class="number">3</span>}, {<span class="number">4</span>}, {<span class="number">5</span>}, {<span class="number">6</span>}, {<span class="number">7</span>}</span><br><span class="line">java.lang.NullPointerException</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitApply(Flow.java:<span class="number">1235</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:<span class="number">1634</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:<span class="number">49</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:<span class="number">398</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitVarDef(Flow.java:<span class="number">989</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:<span class="number">956</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:<span class="number">49</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:<span class="number">398</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:<span class="number">57</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitBlock(Flow.java:<span class="number">997</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:<span class="number">1020</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:<span class="number">49</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:<span class="number">398</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitMethodDef(Flow.java:<span class="number">964</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:<span class="number">866</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:<span class="number">49</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:<span class="number">398</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitClassDef(Flow.java:<span class="number">927</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:<span class="number">774</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:<span class="number">49</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:<span class="number">398</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.analyzeTree(Flow.java:<span class="number">1327</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.analyzeTree(Flow.java:<span class="number">1317</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.comp.Flow.analyzeTree(Flow.java:<span class="number">218</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:<span class="number">1401</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:<span class="number">1375</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:<span class="number">973</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$<span class="number">0</span>(JavacTaskImpl.java:<span class="number">104</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.handleExceptions(JavacTaskImpl.java:<span class="number">147</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:<span class="number">100</span>)</span><br><span class="line">    at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:<span class="number">94</span>)</span><br><span class="line">    at org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess(JavaxToolsCompiler.java:<span class="number">126</span>)</span><br><span class="line">    at org.codehaus.plexus.compiler.javac.JavacCompiler.performCompile(JavacCompiler.java:<span class="number">174</span>)</span><br><span class="line">    at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:<span class="number">1129</span>)</span><br><span class="line">    at org.apache.maven.plugin.compiler.TestCompilerMojo.execute(TestCompilerMojo.java:<span class="number">181</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call(MultiThreadedBuilder.java:<span class="number">190</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$<span class="number">1.</span>call(MultiThreadedBuilder.java:<span class="number">186</span>)</span><br><span class="line">    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">264</span>)</span><br><span class="line">    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">515</span>)</span><br><span class="line">    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">264</span>)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1128</span>)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">628</span>)</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:<span class="number">834</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>　低版本 JDK11 的已知 Bug，升级至当前最新的版本（JDK11.0.9+7-LTS）后解决，详见：JDK-8212586</p>
<h3 id="Terminating-due-to-java-lang-OutOfMemoryError-Java-heap-space"><a href="#Terminating-due-to-java-lang-OutOfMemoryError-Java-heap-space" class="headerlink" title="Terminating due to java.lang.OutOfMemoryError: Java heap space"></a>Terminating due to java.lang.OutOfMemoryError: Java heap space</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">-server</span></span><br><span class="line"><span class="attr">-Xmx128M</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseG1GC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">G1HeapRegionSize=4M</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseGCOverheadLimit</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+ExplicitGCInvokesConcurrent</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+ExitOnOutOfMemoryError</span></span><br><span class="line"><span class="meta">-agentlib</span>:<span class="string">jdwp=transport=dt_socket,server=y,suspend=n,address=5005</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><ul>
<li>Dump 内存占用的情况</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>定位出内存 OOM 的原因</p>
<p>通过 <a href="https://yuzhouwan.com/posts/190413/#MAT-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%EF%BC%88Memory-Analyzer-Tool%EF%BC%89">MAT</a> 工具分析发现是 System 的 ClassLoader 使用 <code>java.util.zip.ZipFile$Source</code> 加载 jar 包，并保存在堆内内存上，占用了 70% 多的内存资源。这是 JDK9 中做的一次改动，为了避免调用耗时的 JNI，以及 <a href="https://yuzhouwan.com/posts/15691/#mmap">MMap</a> 出现 Crash 的风险，详见：JDK-8145260</p>
</li>
<li><p>提高分配的内存大小</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">-Xmx256M</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info">内存分配：小于 128MB 时，无法启动；小于 256MB 时，GC 频繁；大于 256MB 时，平稳运行</div>

<h3 id="jmx-properties-does-not-contain-connector-name"><a href="#jmx-properties-does-not-contain-connector-name" class="headerlink" title="jmx.properties does not contain connector.name"></a>jmx.properties does not contain connector.name</h3><h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><p>　JMX Connector 的 <code>connector.name</code> 属于必填字段，给 jmx.properties 增加一行 <code>connector.name=jmx</code> 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim catalog/jmx.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">connector.name</span>=<span class="string">jmx</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="社区发展"><a href="#社区发展" class="headerlink" title="社区发展"></a>社区发展</h2><h3 id="Star-趋势"><a href="#Star-趋势" class="headerlink" title="Star 趋势"></a>Star 趋势</h3><p><img data-src="/picture/presto/presto_star_history.jpg" alt="Presto Star History"></p>
<center>（图片来源：<a href="https://star-history.t9t.io/#prestodb/presto&amp;apache/hive&amp;prestosql/presto" target="_blank">star-history.t9t.io</a>™ 官网）</center>

<h3 id="个人贡献"><a href="#个人贡献" class="headerlink" title="个人贡献"></a>个人贡献</h3><ul>
<li>Pull Request<ul>
<li><a href="https://github.com/prestodb/presto/pulls/asdf2014">PrestoDB</a></li>
<li><a href="https://github.com/trinodb/trino/pulls/asdf2014">Trino</a></li>
</ul>
</li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://trino.io/docs/current/connector/phoenix.html">PrestoSQL Phoenix Connector</a></li>
<li><a href="https://github.com/analysys/presto-hbase-connector">PrestoSQL HBase Connector</a></li>
<li><a href="https://github.com/airlift/airbase/blob/master/airbase-policy/src/main/resources/checkstyle/airbase-checks.xml">airbase-checks.xml</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li>Presto: The Definitive Guide</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>Apache Druid</tag>
        <tag>PrestoDB</tag>
        <tag>Apache Hive</tag>
        <tag>Python</tag>
        <tag>Presto</tag>
        <tag>PrestoSQL</tag>
        <tag>Trino</tag>
        <tag>MPP</tag>
        <tag>SPI</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎 ElasticSearch</title>
    <url>/posts/22654/</url>
    <content><![CDATA[<h2 id="ElasticSearch-是什么？"><a href="#ElasticSearch-是什么？" class="headerlink" title="ElasticSearch 是什么？"></a>ElasticSearch 是什么？</h2><p>　<a href="https://yuzhouwan.com/posts/22654/"><strong>ElasticSearch</strong></a>™ 是一款基于 Lucene 的搜索引擎，不但稳定、可靠、快速，同时具备良好的水平扩展能力</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>功能丰富，且开箱即用</li>
<li>横向可扩展性</li>
<li>分片机制更好地解决热点问题</li>
<li>多副本有效保证了高可用</li>
<li>精确的熔断器机制</li>
<li>社区庞大，生态完善</li>
</ul>
<h2 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h2><h3 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster 集群"></a>Cluster 集群</h3><p>　在一个分布式系统里面，可以通过多个 ElasticSearch 节点组成一个<strong>集群</strong>。集群中会动态选举出一个主节点，保证了 ElasticSearch 集群不存在单点故障<br>　在同一子网内，只需要将进程设置为相同的集群名，ElasticSearch 就会把这些集群名相同的进程自动组成一个集群。集群中各节点间的通讯和数据负载均衡，全部都由 ElasticSearch 自动管理</p>
<h3 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node 节点"></a>Node 节点</h3><p>　每一个 ElasticSearch 进程称为一个 <strong>Node 节点</strong>。在测试环境中，可以在一台服务器上运行多个 ElasticSearch 进程；但生产环境中，则建议每台服务器只运行一个 ElasticSearch 进程</p>
<h3 id="Index-索引"><a href="#Index-索引" class="headerlink" title="Index 索引"></a>Index 索引</h3><p>　ElasticSearch 中的索引是文档数据存储的地方，相当于是传统关系数据库中的 DataBase 概念。更多逻辑上的对应关系，如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Relational DB</th>
<th style="text-align:center">HBase</th>
<th style="text-align:center">ElasticSearch</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Database</td>
<td style="text-align:center">NameSpace</td>
<td style="text-align:center">Template</td>
<td style="text-align:center">一组索引的模板配置</td>
</tr>
<tr>
<td style="text-align:center">Table</td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Index</td>
<td style="text-align:center">索引</td>
</tr>
<tr>
<td style="text-align:center">Row</td>
<td style="text-align:center">RowKey</td>
<td style="text-align:center">Document</td>
<td style="text-align:center">文档，和 Lucene 概念一致</td>
</tr>
<tr>
<td style="text-align:center">Column + Value</td>
<td style="text-align:center">Cell</td>
<td style="text-align:center">Field</td>
<td style="text-align:center">如果将文档理解为 JSON，那么 Field 就是字段和值</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">Term</td>
<td style="text-align:center">检索的基本单位，相当于是文本中的一个词</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">Token</td>
<td style="text-align:center">Term 内容、类型，以及 Term 在文本中的起始及偏移</td>
</tr>
</tbody>
</table>
</div>
<div class="note info">目前最新的 ElasticSearch 7.x 版本里面已经废弃了 Type 的概念</div>

<span id="more"></span>
<h3 id="Shard-分片"><a href="#Shard-分片" class="headerlink" title="Shard 分片"></a>Shard 分片</h3><p>　ElasticSearch 会把一个索引拆分为多个更细粒度的索引，并称之为 Shard<br>　完成分片之后，就可以把各个 Shard 分配到不同的节点中去。同时，ElasticSearch 会确保两个相同的 Shard 不会同时存在于一个 Node 上</p>
<h3 id="Replica-副本"><a href="#Replica-副本" class="headerlink" title="Replica 副本"></a>Replica 副本</h3><p>　ElasticSearch 的每一个 Shard 分片都可以有多个<strong>副本</strong>，而每一个副本也都是分片的完整拷贝。如此设计的好处是，既可以提升查询速度，也能提高系统的容错性<br>　一旦 ElasticSearch 的某个节点数据损坏或者服务不可用的时候，那么就可以用其他节点来代替故障的节点，以达到高可用的目标</p>
<h3 id="Recovery-故障恢复"><a href="#Recovery-故障恢复" class="headerlink" title="Recovery 故障恢复"></a>Recovery 故障恢复</h3><p>　ElasticSearch 的 Recovery 代表的是<strong>数据恢复</strong>或者称之为<strong>数据重新分布</strong><br>　当 ElasticSearch 集群中，有节点加入或退出时，它会根据机器负载对索引分片进行重新分配</p>
<div class="note info">另外，当挂掉的节点再次重新启动的时候也会进行数据恢复</div>


<h3 id="River-数据源"><a href="#River-数据源" class="headerlink" title="River 数据源"></a>River 数据源</h3><p>　River 代表的是一个<strong>数据源</strong>，这也是同步数据到 ElasticSearch 的一个方法<br>　主要流程是读取 River 中的数据，再将其索引到 ElasticSearch 中，并以插件方式对外提供服务。官方支持的 River 类型有 <a href="https://github.com/elastic/elasticsearch-river-couchdb">CouchDB</a>、<a href="https://github.com/elastic/elasticsearch-river-rabbitmq">RabbitMQ</a>、<a href="https://github.com/elastic/elasticsearch-river-twitter">Twitter</a>、<a href="https://github.com/elastic/elasticsearch-river-wikipedia">Wikipedia</a> 等</p>
<h3 id="Gateway-时空门"><a href="#Gateway-时空门" class="headerlink" title="Gateway 时空门"></a>Gateway 时空门</h3><p>　Gateway 是 ElasticSearch 索引的<strong>持久化存储</strong>方式，ElasticSearch 默认会先把索引存放到内存中去，当内存满了的时候再持久化到硬盘里。之后，当 ElasticSearch 集群重启时，就会从 Gateway 中读取索引数据<br>　Gateway 支持多种存储媒介，包括本地文件系统（默认）、分布式文件系统、<a href="https://yuzhouwan.com/posts/60504/">HDFS</a> 和 S3 云存储服务 等</p>
<h3 id="discovery-zen-节点发现"><a href="#discovery-zen-节点发现" class="headerlink" title="discovery.zen 节点发现"></a>discovery.zen 节点发现</h3><p>　discovery.zen 是 ElasticSearch 的<strong>自动节点发现机制</strong>，支持基于配置（静态配置中设置的主机列表）与基于文件（定时加载外部文件中的主机列表）两种模式<br>　集群会以广播的方式去寻找存在的 Node 节点，然后再通过多播协议来进行节点之间的通信，同时也支持点对点（P2P，Point 2 Point）的交互操作</p>
<h3 id="Transport-通讯机制"><a href="#Transport-通讯机制" class="headerlink" title="Transport 通讯机制"></a>Transport 通讯机制</h3><p>　Transport 是 ElasticSearch 内部的节点或者集群与客户端之间的交互方式，默认会使用 TCP 协议完成通讯</p>
<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img data-src="/picture/es/es_architecture.png" alt="ElasticSearch Architecture"></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>





<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>　首先从官方的<a href="https://www.elastic.co/cn/downloads/elasticsearch">下载页面</a>上，找到适合自己操作系统的安装包（这里我们以 MacOS 为例）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.9.1-darwin-x86_64.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tar zxvf elasticsearch-7.9.1-darwin-x86_64.tar.gz</span><br><span class="line">$ ln -s elasticsearch-7.9.1 es</span><br><span class="line">$ <span class="built_in">cd</span> es</span><br></pre></td></tr></tbody></table></figure>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> ES_HOME=/apps/es</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ES_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ elasticsearch -version</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 -d 可以使得 ElasticSearch 进程在后台运行</span></span><br><span class="line">$ elasticsearch -d</span><br></pre></td></tr></tbody></table></figure>
<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'http://localhost:9200/_cluster/health'</span> | python -m json.tool</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span>: <span class="number">100.0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><h5 id="本地-Kibana"><a href="#本地-Kibana" class="headerlink" title="本地 Kibana"></a><a href="https://www.elastic.co/cn/downloads/kibana">本地 Kibana</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/kibana/kibana-7.9.1-darwin-x86_64.tar.gz</span><br><span class="line">$ tar zxvf kibana-7.9.1-darwin-x86_64.tar.gz</span><br><span class="line">$ ln -s kibana-7.9.1-darwin-x86_64 kibana</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ <span class="built_in">cd</span> kibana</span><br><span class="line">$ bin/kibana</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">$ open <span class="string">'http://localhost:5601'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Kubernetes-版"><a href="#Kubernetes-版" class="headerlink" title="Kubernetes 版"></a><a href="https://hub.helm.sh/charts/bitnami/elasticsearch">Kubernetes 版</a></h3><h4 id="安装-Helm-Charts"><a href="#安装-Helm-Charts" class="headerlink" title="安装 Helm Charts"></a>安装 Helm Charts</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">$ helm install my-release bitnami/elasticsearch</span><br></pre></td></tr></tbody></table></figure>
<h4 id="校验-1"><a href="#校验-1" class="headerlink" title="校验"></a>校验</h4><p><img data-src="/picture/es/elasticsearch_on_kubernetes_dashboard.png" alt="ElasticSearch on Kubernetes Dashboard"></p>
<center>（图片来源：对 <a href="https://github.com/kubernetes/dashboard" target="_blank">Kubernetes Dashboard</a>™ 的截图）</center>



<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl port-forward --namespace default svc/my-release-elasticsearch-coordinating-only 9200:9200 &amp;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可视化-1"><a href="#可视化-1" class="headerlink" title="可视化"></a>可视化</h4><h5 id="Kibana-on-Kubernetes"><a href="#Kibana-on-Kubernetes" class="headerlink" title="Kibana on Kubernetes"></a>Kibana on Kubernetes</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ helm repo add elastic https://helm.elastic.co</span><br><span class="line">$ helm install kibana elastic/kibana</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><div class="note success">以下介绍的内容均为 ElasticSearch 7.9.1 版本的用法</div>

<h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><h4 id="创建-Document"><a href="#创建-Document" class="headerlink" title="创建 Document"></a>创建 Document</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST yuzhouwan/_doc/</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"BenedictJin"</span>,</span><br><span class="line">  <span class="attr">"end_time"</span>: <span class="string">"2038-01-19T03:14:07"</span>,</span><br><span class="line">  <span class="attr">"github"</span>: <span class="string">"asdf2014"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"Uqs7tm4B6KBuNSr8fQM0"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指定-Document-ID"><a href="#指定-Document-ID" class="headerlink" title="指定 Document ID"></a>指定 Document ID</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST yuzhouwan/_doc/1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"BenedictJin"</span>,</span><br><span class="line">  <span class="attr">"end_time"</span>: <span class="string">"2038-01-19T03:14:07"</span>,</span><br><span class="line">  <span class="attr">"github"</span>: <span class="string">"asdf2014"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　再次写入相同 Doc ID 的记录后，会更新 <code>_version</code></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="匹配所有索引"><a href="#匹配所有索引" class="headerlink" title="匹配所有索引"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html">匹配所有索引</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET _search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"match_all"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指定索引"><a href="#指定索引" class="headerlink" title="指定索引"></a>指定索引</h4><h5 id="指定某一个索引"><a href="#指定某一个索引" class="headerlink" title="指定某一个索引"></a>指定某一个索引</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"hits"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: {</span><br><span class="line">      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"Uqs7tm4B6KBuNSr8fQM0"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: {</span><br><span class="line">          <span class="attr">"user"</span>: <span class="string">"BenedictJin"</span>,</span><br><span class="line">          <span class="attr">"end_time"</span>: <span class="string">"2038-01-19T03:14:07"</span>,</span><br><span class="line">          <span class="attr">"github"</span>: <span class="string">"asdf2014"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="指定多个索引"><a href="#指定多个索引" class="headerlink" title="指定多个索引"></a>指定多个索引</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan01,yuzhouwan02/_search</span><br></pre></td></tr></tbody></table></figure>
<h5 id="通配符匹配多个索引"><a href="#通配符匹配多个索引" class="headerlink" title="通配符匹配多个索引"></a>通配符匹配多个索引</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan*/_search</span><br></pre></td></tr></tbody></table></figure>
<h4 id="控制展示数量"><a href="#控制展示数量" class="headerlink" title="控制展示数量"></a>控制展示数量</h4><p>　由于默认只会展示 10 个匹配结果，所以需要设置 <code>size</code> 参数来调整</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search?size=100</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"match"</span>: {</span><br><span class="line">      <span class="attr">"pattern"</span>: <span class="string">"FLUSH"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"match"</span>: {</span><br><span class="line">      <span class="attr">"pattern"</span>: <span class="string">"FLUSH"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指定返回字段"><a href="#指定返回字段" class="headerlink" title="指定返回字段"></a>指定返回字段</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"_source"</span>: [</span><br><span class="line">    <span class="string">"message"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"match_all"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html">范围查询</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"range"</span>: {</span><br><span class="line">      <span class="attr">"CREATETIME"</span>: {</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="string">"1496246400000"</span>,</span><br><span class="line">        <span class="attr">"lt"</span>: <span class="string">"1498838400000"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><h5 id="Group-Count"><a href="#Group-Count" class="headerlink" title="Group Count"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html">Group Count</a></h5><p>　对 <code>end_time</code> 字段进行 group 分组，再进行 count 计数，并过滤</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: {</span><br><span class="line">    <span class="attr">"group_by_link"</span>: {</span><br><span class="line">      <span class="attr">"terms"</span>: {</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"end_time"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">100</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"aggs"</span>: {</span><br><span class="line">        <span class="attr">"sales_bucket_filter"</span>: {</span><br><span class="line">          <span class="attr">"bucket_selector"</span>: {</span><br><span class="line">            <span class="attr">"buckets_path"</span>: {</span><br><span class="line">              <span class="attr">"the_doc_count"</span>: <span class="string">"_count"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"script"</span>: <span class="string">"params.the_doc_count == 1"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"hits"</span>: {</span><br><span class="line">    <span class="attr">"total"</span>: {</span><br><span class="line">      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"aggregations"</span>: {</span><br><span class="line">    <span class="attr">"group_by_link"</span>: {</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">2147483647000</span>,</span><br><span class="line">          <span class="attr">"key_as_string"</span>: <span class="string">"2038-01-19T03:14:07.000Z"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h4><h5 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST yuzhouwan/_doc/</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"BenedictJin"</span>,</span><br><span class="line">  <span class="attr">"end_time"</span>: <span class="string">"2038-01-19T03:14:07"</span>,</span><br><span class="line">  <span class="attr">"github"</span>: <span class="string">"asdf2014"</span>,</span><br><span class="line">  <span class="attr">"follower"</span>: [</span><br><span class="line">    <span class="string">"f1"</span>,</span><br><span class="line">    <span class="string">"f2"</span>,</span><br><span class="line">    <span class="string">"f3"</span></span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">过滤查询之前，需要修改 mapping，给 follower 字段增加 "fielddata": true 属性</div>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GET /yuzhouwan/_search</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"bool"</span>: {</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"range"</span>: {</span><br><span class="line">            <span class="attr">"end_time"</span>: {</span><br><span class="line">              <span class="attr">"gte"</span>: <span class="string">"1514960000000"</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filter"</span>: {</span><br><span class="line">        <span class="attr">"script"</span>: {</span><br><span class="line">          <span class="attr">"script"</span>: {</span><br><span class="line">            <span class="attr">"source"</span>: <span class="string">"doc['follower'].length == 3"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">删除数据</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST yuzhouwan/_delete_by_query</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"match"</span>: {</span><br><span class="line">      <span class="attr">"github"</span> : <span class="string">"asdf2014"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html">清理缓存</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看缓存情况</span></span><br><span class="line">GET /_stats/fielddata?fields=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理某一个索引的缓存</span></span><br><span class="line">POST /yuzhouwan/_cache/clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理全部索引的缓存</span></span><br><span class="line">POST /_cache/clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定缓存类型</span></span><br><span class="line">POST /yuzhouwan/_cache/clear?fielddata=<span class="literal">true</span>  </span><br><span class="line">POST /yuzhouwan/_cache/clear?query=<span class="literal">true</span>      </span><br><span class="line">POST /yuzhouwan/_cache/clear?request=<span class="literal">true</span>    </span><br></pre></td></tr></tbody></table></figure>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="获取索引"><a href="#获取索引" class="headerlink" title="获取索引"></a>获取索引</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有索引</span></span><br><span class="line">GET /_cat/indices</span><br><span class="line"><span class="comment"># 指定查看某一个索引</span></span><br><span class="line">GET /_cat/indices/yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yellow open yuzhouwan jslqKujdSUu6LTymB3Lq9A 1 1 1 0 10kb 10kb</span><br></pre></td></tr></tbody></table></figure>
<h4 id="获取-Mapping"><a href="#获取-Mapping" class="headerlink" title="获取 Mapping"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">获取</a> Mapping</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取指定索引的 mapping</span></span><br><span class="line">GET /yuzhouwan/_mapping</span><br><span class="line">GET /yuzhouwan_day_20160527/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有索引的 mapping</span></span><br><span class="line">GET /_all/_mapping</span><br><span class="line">GET /_mapping</span><br></pre></td></tr></tbody></table></figure>
<h4 id="更新-Mapping"><a href="#更新-Mapping" class="headerlink" title="更新 Mapping"></a>更新 Mapping</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT /yuzhouwan/_mapping</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"properties"</span>: {</span><br><span class="line">    <span class="attr">"end_time"</span>: {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"follower"</span>: {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: {</span><br><span class="line">        <span class="attr">"keyword"</span>: {</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">          <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"github"</span>: {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: {</span><br><span class="line">        <span class="attr">"keyword"</span>: {</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">          <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"star_num"</span>: {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"user"</span>: {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: {</span><br><span class="line">        <span class="attr">"keyword"</span>: {</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">          <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="自动创建索引"><a href="#自动创建索引" class="headerlink" title="自动创建索引"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-creation">自动创建索引</a></h4><p>　默认的，<code>action.auto_create_index</code> 参数为 <code>true</code>，意味着任何索引都可以随着数据写入而被自动创建。反之，如果设置为 <code>false</code> 这不允许任何的索引被自动创建</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT _cluster/settings</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"persistent"</span>: {</span><br><span class="line">    <span class="attr">"action.auto_create_index"</span>: <span class="string">"false"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　<code>+*day*,-*</code> 意味着除了满足 <code>*day*</code> 正则表达式的索引，不允许其他任何索引的自动创建</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT _cluster/settings</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"persistent"</span>: {</span><br><span class="line">    <span class="attr">"action.auto_create_index"</span>: <span class="string">"+*day*,-*"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">可以用于控制只允许按天新建索引</div>



<h4 id="TimeZone"><a href="#TimeZone" class="headerlink" title="TimeZone"></a>TimeZone</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim attack_alarm.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"query"</span>: {</span><br><span class="line">    <span class="attr">"bool"</span>: {</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"match"</span>: {</span><br><span class="line">            <span class="attr">"customerId"</span>: {</span><br><span class="line">              <span class="attr">"query"</span>: <span class="string">"69"</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"range"</span>: {</span><br><span class="line">            <span class="attr">"startTime"</span>: {</span><br><span class="line">              <span class="attr">"from"</span>: <span class="string">"2016-09-20 00:00:00,000"</span>,</span><br><span class="line">              <span class="attr">"to"</span>: <span class="string">"2016-09-20 17:47:57,887"</span>,</span><br><span class="line">              <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss,SSS"</span>,</span><br><span class="line">              <span class="attr">"include_lower"</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">"include_upper"</span>: <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XPOST -H <span class="string">'Content-Type: application/json'</span> http://localhost:9200/yuzhouwan_201609/attack_alarm/_search -d @attack_alarm.json</span><br></pre></td></tr></tbody></table></figure>
<p>　如果在构建 date 字段相关的查询是，可以直接传入 <code>yyyy-MM-dd HH:mm:ss,SSS</code> 格式的字符串，避免 <code>+08:00</code> 时区带来的困扰。也可以在程序中，将日期中的 local 时区去掉，从而使得日期和 ElasticSearch 本身的默认时区 <code>+00:00</code> 一致，具体写法如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">QueryBuilders.rangeQuery(params.get(<span class="string">"timeField"</span>))</span><br><span class="line">    .format(<span class="string">"yyyy-MM-dd HH:mm:ss,SSS"</span>)</span><br><span class="line">    .gte(<span class="string">"2016-09-20 00:00:00,000"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Hot-warm"><a href="#Hot-warm" class="headerlink" title="Hot-warm"></a>Hot-warm</h4><p>　ElasticSearch 5.x 引入的新特性，可以通过 <code>node.attr.box_type</code> 参数，将 ElasticSearch 集群中部分高资源的节点配置为 <code>hot</code>，以存放需要频繁访问的数据，再将部分低资源的节点配置为 <code>warm</code>，以存放大量低频访问的数据。随后，在摄入业务数据的时候，可以通过设置 Index 索引的 <code>index.routing.allocation.require.box_type</code> 配置项，来指定数据具体存放在 <code>hot</code> 还是 <code>warm</code> 节点上。默认，可以将 Index 设置为 <code>hot</code>，在满足一定条件后，手动或通过 <a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html">Curator</a> 工具自动将冷数据设置为 <code>warm</code></p>
<div class="note info">可以通过 rollover 查看 Index 中最早写入的一条数据距今已经过去多久、最大的文档数和磁盘空间大小</div>



<h4 id="合并索引"><a href="#合并索引" class="headerlink" title="合并索引"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">合并索引</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST _reindex</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"source"</span>: {</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"yuzhouwan_by_day_20200101*"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"dest"</span>: {</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"yuzhouwan_by_month_20200101"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="合并-Segment"><a href="#合并-Segment" class="headerlink" title="合并 Segment"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">合并 Segment</a></h4><p>　通过合并 Shard 下的 Segment 数量来解决小文件的问题，具体命令如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定某一个索引</span></span><br><span class="line">POST /yuzhouwan_by_month_20200101/_forcemerge</span><br><span class="line"><span class="comment"># 指定某一组索引</span></span><br><span class="line">POST /yuzhouwan_by_day_20200101*/_forcemerge</span><br><span class="line"><span class="comment"># 针对所有索引</span></span><br><span class="line">POST /_forcemerge</span><br><span class="line"><span class="comment"># 通过 max_num_segments 参数控制合并后的 Segment 数量</span></span><br><span class="line">POST /_forcemerge?max_num_segments=1</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Shrink"><a href="#Shrink" class="headerlink" title="Shrink"></a>Shrink</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>　ElasticSearch 5.x 引入的新特性，可以将一个索引中的 Shard 分片进行合并。而且其利用了操作系统的硬链接，使得该操作的完成可以控制在毫秒级。当然，如果操作系统不支持硬链接的话，则仍然需要拷贝 Segment 文件</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST /yuzhouwan_source_index/_shrink/yuzhouwan_target_index</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"settings"</span>: {</span><br><span class="line">    <span class="attr">"index.number_of_replicas"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"index.codec"</span>: <span class="string">"best_compression"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"aliases"</span>: {</span><br><span class="line">    <span class="attr">"my_search_indices"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-apis.html">Rollup</a></h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>　ElasticSearch 6.6 引入的新特性，可以通过启动 Rollup 任务的形式，对现有的 Index 索引进行 Rollup，以生成预聚合的新索引</p>
<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><h6 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT _rollup/job/yuzhouwan</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="comment">// 匹配 Index</span></span><br><span class="line">  <span class="attr">"index_pattern"</span>: <span class="string">"yuzhouwan-*"</span>,</span><br><span class="line">  <span class="comment">// Rollup 后生成的 Index</span></span><br><span class="line">  <span class="attr">"rollup_index"</span>: <span class="string">"yuzhouwan_rollup"</span>,</span><br><span class="line">  <span class="comment">// 执行周期</span></span><br><span class="line">  <span class="attr">"cron"</span>: <span class="string">"*/30 * * * * ?"</span>,</span><br><span class="line">  <span class="comment">// 批处理的大小</span></span><br><span class="line">  <span class="attr">"page_size"</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">"groups"</span>: {</span><br><span class="line">    <span class="comment">// 基于时间戳字段</span></span><br><span class="line">    <span class="comment">// Rollup 的时间粒度</span></span><br><span class="line">    <span class="comment">// 延迟 7 天后进行 Rollup，避免乱序数据无法被处理</span></span><br><span class="line">    <span class="attr">"date_histogram"</span>: {</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"timestamp"</span>,</span><br><span class="line">      <span class="attr">"fixed_interval"</span>: <span class="string">"1h"</span>,</span><br><span class="line">      <span class="attr">"delay"</span>: <span class="string">"7d"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 聚合的维度</span></span><br><span class="line">    <span class="attr">"terms"</span>: {</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"node"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 聚合的度量，以及具体的聚合操作</span></span><br><span class="line">  <span class="attr">"metrics"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"temperature"</span>,</span><br><span class="line">      <span class="attr">"metrics"</span>: [</span><br><span class="line">        <span class="string">"min"</span>,</span><br><span class="line">        <span class="string">"max"</span>,</span><br><span class="line">        <span class="string">"sum"</span></span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"voltage"</span>,</span><br><span class="line">      <span class="attr">"metrics"</span>: [</span><br><span class="line">        <span class="string">"avg"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h6><ul>
<li>测试数据集</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT _template/yuzhouwan_by_hour</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"index_patterns"</span>: [</span><br><span class="line">    <span class="string">"yuzhouwan_by_hour_*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"settings"</span>: {</span><br><span class="line">    <span class="attr">"index"</span>: {</span><br><span class="line">      <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"mappings"</span>: {</span><br><span class="line">    <span class="attr">"_source"</span>: {</span><br><span class="line">      <span class="attr">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"properties"</span>: {</span><br><span class="line">      <span class="attr">"user"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"date"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"url"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"object"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST yuzhouwan_by_hour_2020020200/_doc/1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"asdf2014"</span>,</span><br><span class="line">  <span class="attr">"date"</span>: <span class="string">"2020-02-02T00:00:00Z"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: {</span><br><span class="line">    <span class="attr">"base"</span>: <span class="string">"/"</span>,</span><br><span class="line">    <span class="attr">"param"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">POST yuzhouwan_by_hour_2020020201/_doc/1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"asdf2014"</span>,</span><br><span class="line">  <span class="attr">"date"</span>: <span class="string">"2020-02-02T01:00:00Z"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: {</span><br><span class="line">    <span class="attr">"base"</span>: <span class="string">"/index"</span>,</span><br><span class="line">    <span class="attr">"param"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>设置 Rollup 任务的名称，选择哪些 Index 被 Rollup，以及指定被 Rollup 后的新 Index 名称</li>
</ul>
<p><img data-src="/picture/es/es_rollup_1.png" alt=""></p>
<ul>
<li>设置执行周期、批处理的大小、延迟多久执行</li>
</ul>
<p><img data-src="/picture/es/es_rollup_2.png" alt=""></p>
<ul>
<li>指定时间维度和 Rollup 的聚合粒度</li>
</ul>
<p><img data-src="/picture/es/es_rollup_3.png" alt=""></p>
<ul>
<li>选择会被聚合查询的字段</li>
</ul>
<p><img data-src="/picture/es/es_rollup_4.png" alt=""></p>
<ul>
<li>选择会被用来作为直方图展示的数值型字段</li>
</ul>
<p><img data-src="/picture/es/es_rollup_5.png" alt=""></p>
<ul>
<li>选择 Rollup 的时候，需要做预聚合计算的字段</li>
</ul>
<p><img data-src="/picture/es/es_rollup_6.png" alt=""></p>
<ul>
<li>最终配置完成</li>
</ul>
<p><img data-src="/picture/es/es_rollup_7.png" alt=""></p>
<ul>
<li>查看 Rollup 任务列表</li>
</ul>
<p><img data-src="/picture/es/es_rollup_8.png" alt=""></p>
<ul>
<li>启停 Rollup 任务</li>
</ul>
<p><img data-src="/picture/es/es_rollup_9.png" alt=""></p>
<ul>
<li>等价于通过命令行配置 Rollup 任务</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"config"</span>: {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"rollup"</span>,</span><br><span class="line">    <span class="attr">"index_pattern"</span>: <span class="string">"yuzhouwan_by_hour_20200202*"</span>,</span><br><span class="line">    <span class="attr">"rollup_index"</span>: <span class="string">"yuzhouwan_by_day_20200202"</span>,</span><br><span class="line">    <span class="attr">"cron"</span>: <span class="string">"0 0 0 * * ?"</span>,</span><br><span class="line">    <span class="attr">"groups"</span>: {</span><br><span class="line">      <span class="attr">"date_histogram"</span>: {</span><br><span class="line">        <span class="attr">"fixed_interval"</span>: <span class="string">"60m"</span>,</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"date"</span>,</span><br><span class="line">        <span class="attr">"delay"</span>: <span class="string">"1d"</span>,</span><br><span class="line">        <span class="attr">"time_zone"</span>: <span class="string">"UTC"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"terms"</span>: {</span><br><span class="line">        <span class="attr">"fields"</span>: [</span><br><span class="line">          <span class="string">"user"</span>,</span><br><span class="line">          <span class="string">"url.base.keyword"</span></span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"metrics"</span>: [],</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="string">"20s"</span>,</span><br><span class="line">    <span class="attr">"page_size"</span>: <span class="number">1000</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"status"</span>: {</span><br><span class="line">    <span class="attr">"job_state"</span>: <span class="string">"started"</span>,</span><br><span class="line">    <span class="attr">"upgraded_doc_id"</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"stats"</span>: {</span><br><span class="line">    <span class="attr">"pages_processed"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"documents_processed"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"rollups_indexed"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"trigger_count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index_time_in_ms"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index_total"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index_failures"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"search_time_in_ms"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"search_total"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"search_failures"</span>: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h5><p>　截止到 ElasticSearch 7.9.1 版本，也只支持对 Date、Histogram 和 Terms 三种字段类型进行 Rollup 操作，且聚合算子也只有 max、min、sum、avg 和 count <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-put-job.html">五种</a></p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html">创建模板</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim template_yuzhouwan_day.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"index_patterns"</span>: [</span><br><span class="line">    <span class="string">"monitor_log_day_*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"settings"</span>: {</span><br><span class="line">    <span class="attr">"index"</span>: {</span><br><span class="line">      <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"mappings"</span>: {</span><br><span class="line">    <span class="attr">"_source"</span>: {</span><br><span class="line">      <span class="attr">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"properties"</span>: {</span><br><span class="line">      <span class="attr">"ip"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"requestLength"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"spendMs"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"attributes"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"object"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"time"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss||strict_date_optional_time||epoch_millis"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XPUT -H <span class="string">'Content-Type: application/json'</span> localhost:9200/_template/template_yuzhouwan_day -d @template_yuzhouwan_day.json</span><br></pre></td></tr></tbody></table></figure>
<h4 id="获取模板"><a href="#获取模板" class="headerlink" title="获取模板"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-template.html">获取模板</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XGET localhost:9200/_template/template_yuzhouwan_day</span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除模板"><a href="#删除模板" class="headerlink" title="删除模板"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-template.html">删除模板</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XDELETE localhost:9200/_template/template_yuzhouwan_day</span><br></pre></td></tr></tbody></table></figure>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/current/installation.html">插件</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/elasticsearch-plugin install analysis-icu</span><br><span class="line">  -&gt; Downloading analysis-icu from elastic</span><br><span class="line">  [=================================================] 100%</span><br><span class="line">  -&gt; Installed analysis-icu</span><br></pre></td></tr></tbody></table></figure>
<h3 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'http://localhost:9200/_nodes/stats/_all'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="熔断机制"><a href="#熔断机制" class="headerlink" title="熔断机制"></a>熔断机制</h3><p>　ElasticSearch 熔断器在接收到请求后，会评估出可能耗费的内存大小，如果超过了单机所能处理的最大内存限制时，就会拒绝请求，并返回异常。熔断机制通过一个总控熔断器和多个子类熔断器（字段数据加载、聚合请求计算需要的内存、请求本身的大小、加载后未释放的 Lucene Segment，以及内联脚本编译次数），对内存消耗进行控制，避免了 OOM 问题。相关的配置均属于集群层面，所以我们可以通过修改 <code>config/elasticsearch.yml</code> 配置文件或者调用 <code>PUT /_cluster/settings</code> 接口中进行设置</p>
<h3 id="基于磁盘容量的负载均衡"><a href="#基于磁盘容量的负载均衡" class="headerlink" title="基于磁盘容量的负载均衡"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/disk-allocator.html">基于磁盘容量的负载均衡</a></h3><p>　ElasticSearch 在决定是向某一个节点分配新的 Shard，还是主动从该节点重新分配 Shard 之前，会先考虑节点上的可用磁盘空间。该特性通过 <code>cluster.routing.allocation.disk.threshold_enabled</code> 参数进行控制，默认是开启的。相关行为主要通过三个阀值进行控制：当磁盘使用率达到 <code>85%</code> 的时候，就不再往该节点分配新的 Shard；当磁盘使用率达到 <code>90%</code> 的时候，将触发负载均衡，将 Shard 重定向到其他空闲节点上；而当磁盘使用率达到 <code>95%</code> 的时候，将会给所有的索引加上 read-only 的锁。此时，数据将无法写入，需要显示地将 <code>index.blocks.read_only_allow_delete</code> 参数设置为 <code>false</code> 才可以解除只读锁。具体的操作方法，详见下文 “踩过的坑 - blocked by: [FORBIDDEN/12/index read-only / allow delete (api)]”</p>
<h2 id="整合其他框架"><a href="#整合其他框架" class="headerlink" title="整合其他框架"></a>整合其他框架</h2><h3 id="ElasticSearch-Kafka-整合"><a href="#ElasticSearch-Kafka-整合" class="headerlink" title="ElasticSearch + Kafka 整合"></a>ElasticSearch + Kafka 整合</h3><p>　详见：我的另一篇博客《<a href="https://yuzhouwan.com/posts/26002/#Kafka-2-ElasticSearch">Apache Kafka 分布式消息队列框架</a>》</p>
<h3 id="ElasticSearch-Flume-整合"><a href="#ElasticSearch-Flume-整合" class="headerlink" title="ElasticSearch + Flume 整合"></a>ElasticSearch + Flume 整合</h3><p>　详见：Flume <a href="https://flume.apache.org/FlumeUserGuide.html#elasticsearchsink">官网文档</a></p>
<h3 id="ElasticSearch-IK-中文分词"><a href="#ElasticSearch-IK-中文分词" class="headerlink" title="ElasticSearch + IK 中文分词"></a>ElasticSearch + IK 中文分词</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>　详见：IK <a href="https://github.com/medcl/elasticsearch-analysis-ik">官网文档</a></p>
<h4 id="中文分词器比对表"><a href="#中文分词器比对表" class="headerlink" title="中文分词器比对表"></a>中文分词器比对表</h4><div class="table-container">
<table>
<thead>
<tr>
<th>分词器</th>
<th>分词粒度</th>
<th>出错情况</th>
<th>支持处理字符</th>
<th>新词识别</th>
<th>词性标注</th>
<th>认证方法</th>
<th>接口</th>
</tr>
</thead>
<tbody>
<tr>
<td>BosonNLP</td>
<td>多选择</td>
<td>无</td>
<td>识别繁体字</td>
<td>有</td>
<td>有</td>
<td>Token</td>
<td>RESTful</td>
</tr>
<tr>
<td>IKAnalyzer</td>
<td>多选择</td>
<td>无</td>
<td>兼容韩文日文</td>
<td>有</td>
<td>无</td>
<td>无</td>
<td>Jar</td>
</tr>
<tr>
<td>NLPIR</td>
<td>多选择</td>
<td>中文间隔符</td>
<td>未知</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>多语言接口</td>
</tr>
<tr>
<td>SCWS</td>
<td>多选择</td>
<td>无</td>
<td>未知</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>PHP、Cli</td>
</tr>
<tr>
<td>结巴分词</td>
<td>多选择</td>
<td>无</td>
<td>识别繁体字</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>Python</td>
</tr>
<tr>
<td>盘古分词</td>
<td>多选择</td>
<td>无</td>
<td>识别繁体字</td>
<td>有</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>庖丁解牛</td>
<td>多选择</td>
<td>无</td>
<td>是</td>
<td>有</td>
<td>无</td>
<td>无</td>
<td>Jar</td>
</tr>
<tr>
<td>搜狗分词</td>
<td>小</td>
<td>字符长度过大</td>
<td>识别繁体字</td>
<td>未知</td>
<td>有</td>
<td>无</td>
<td>上传文档</td>
</tr>
<tr>
<td>腾讯文智</td>
<td>小</td>
<td>空白字符</td>
<td>未知</td>
<td>有</td>
<td>中文词性</td>
<td>Signature</td>
<td>RESTful</td>
</tr>
<tr>
<td>新浪云</td>
<td>大</td>
<td>无</td>
<td>未知</td>
<td>有</td>
<td>有</td>
<td>创建仓库</td>
<td>RESTful</td>
</tr>
<tr>
<td>语言云</td>
<td>适中</td>
<td>无</td>
<td>识别繁体字</td>
<td>有</td>
<td>有</td>
<td>Token</td>
<td>RESTful</td>
</tr>
</tbody>
</table>
</div>
<h2 id="技术内幕"><a href="#技术内幕" class="headerlink" title="技术内幕"></a>技术内幕</h2><h3 id="ElasticSearch-和-Lucene-的本质是什么，为什么会选型-ElasticSearch？"><a href="#ElasticSearch-和-Lucene-的本质是什么，为什么会选型-ElasticSearch？" class="headerlink" title="ElasticSearch 和 Lucene 的本质是什么，为什么会选型 ElasticSearch？"></a>ElasticSearch 和 Lucene 的本质是什么，为什么会选型 ElasticSearch？</h3><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>　Lucene 是基于 Java 的全文检索库，而 ElasticSearch 是一款功能丰富的分布式搜索引擎</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><h5 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h5><p>　需要为分布式、高可用性和实时写入（索引建立 -&gt; 可检索）等特性，进行额外的编码工作</p>
<h5 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h5><p>　具备分布式、实时分发、实时搜索、易用性（Multi-tenancy 多租户 / Gateway 备份）、高可用性（各节点组成对等的网络结构，方便故障转移）等特性</p>
<h4 id="进一步思考"><a href="#进一步思考" class="headerlink" title="进一步思考"></a>进一步思考</h4><h5 id="Solr、Lucene-作为全文检索系统，和-ElasticSearch-这种搜索引擎又有什么本质的区别？"><a href="#Solr、Lucene-作为全文检索系统，和-ElasticSearch-这种搜索引擎又有什么本质的区别？" class="headerlink" title="Solr、Lucene 作为全文检索系统，和 ElasticSearch 这种搜索引擎又有什么本质的区别？"></a>Solr、Lucene 作为全文检索系统，和 ElasticSearch 这种搜索引擎又有什么本质的区别？</h5><p>　<strong>搜索引擎</strong>，包含网页数据的快速采集、海量数据的索引和存储、搜索结果的相关性排序、搜索效率的毫秒级要求、分布式处理和负载均衡、自然语言的理解技术 等等</p>
<p>　<strong>全文检索</strong>，即文本全文检索，包括信息的存储、组织、表现、查询、存取等各个方面，其核心为文本信息的索引和检索</p>
<h3 id="为什么-ElasticSearch-集群使用-Hash-路由，而不是-Paxos，这两个算法有什么区别，各自最适的应用场景在哪里？"><a href="#为什么-ElasticSearch-集群使用-Hash-路由，而不是-Paxos，这两个算法有什么区别，各自最适的应用场景在哪里？" class="headerlink" title="为什么 ElasticSearch 集群使用 Hash 路由，而不是 Paxos，这两个算法有什么区别，各自最适的应用场景在哪里？"></a>为什么 ElasticSearch 集群使用 Hash 路由，而不是 Paxos，这两个算法有什么区别，各自最适的应用场景在哪里？</h3><p>　Hash 路由，主要用于解决数据均衡分布的问题。而 Paxos 主要用于保证分布式数据副本的一致性</p>
<p>　ElasticSearch 中的 Hash Router 会对每次请求的 <code>_id</code> 属性（即 Document ID，默认的 ElasticSearch 会自动为每一个 Document 分配一个长度为 20 的 UUID 字符串，也可以指定其他的字段）进行 Hash 操作，再对 Shard 数量进行取模</p>
<p>　实际上，二者根本不是一个层面上的概念，更应该拿 ElasticSearch 的 Gossip + Bully 选举机制来和 Paxos 进行比较。下文会有对 Gossip + Bully 选主算法的详细说明，这里就多介绍了</p>
<p>（更多相关内容详见，我的另外两篇博客《<a href="https://yuzhouwan.com/posts/54206/">大数据生态圈的一致性算法</a>》和《<a href="https://yuzhouwan.com/posts/31915/">ZooKeeper 原理与优化</a>》）</p>
<h3 id="ElasticSearch-倒排索引的原理"><a href="#ElasticSearch-倒排索引的原理" class="headerlink" title="ElasticSearch 倒排索引的原理"></a>ElasticSearch 倒排索引的原理</h3><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p>　已经有太多的书和博客来介绍，这里就不班门弄斧了，就简单画个图来帮助理解“倒排索引”的流程吧</p>
<p><img data-src="/picture/es/es_reverted_index.png" alt="Elasticsearch Reverted Index"></p>
<center>（利用 <a href="https://products.office.com/en-us/visio/visio-online" target="_blank">Visio</a>™ 绘制而成）</center>



<h3 id="Lucene-4-实现的-DocValues-特性，为什么可以加速聚合运算？"><a href="#Lucene-4-实现的-DocValues-特性，为什么可以加速聚合运算？" class="headerlink" title="Lucene 4 实现的 DocValues 特性，为什么可以加速聚合运算？"></a>Lucene 4 实现的 DocValues 特性，为什么可以加速聚合运算？</h3><h4 id="DocValues-是什么？"><a href="#DocValues-是什么？" class="headerlink" title="DocValues 是什么？"></a>DocValues 是什么？</h4><p>　Lucene 在构建倒排索引时，额外建立的一个有序的、基于 Document -&gt; Field Value 的映射列表</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul>
<li>对字段进行排序或聚合</li>
<li>某些过滤，比如地理位置过滤</li>
<li>某些与字段相关的脚本计算</li>
</ul>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>　可以通过 <code>doc_values</code> 字段控制 DocValues 特性是否开启。默认地，会对除了 <code>analyzed strings</code> 之外的所有字段启用（即数字、地理坐标、日期、IP 和  <code>not_analyzed</code> 字符类型）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT yuzhouwan_index</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"mappings"</span>: {</span><br><span class="line">    <span class="attr">"yuzhouwan_type"</span>: {</span><br><span class="line">      <span class="attr">"properties"</span>: {</span><br><span class="line">        <span class="attr">"blog"</span>: {</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span>,</span><br><span class="line">          <span class="attr">"doc_values"</span>: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>　倒排索引建立的是 KeyWord -&gt; Document 的映射关系，以便在文本检索时，通过类似 Hash 算法，来快速定位到 KeyWord，再从索引中获取到包含该 KeyWord 的 Document ID 集合。虽然，该方法保证了高效的检索，但在对数据做聚合运算时，却需要将所有出现了 KeyWord 的 Document 加载到内存中，很容易导致进程的内存溢出问题</p>
<p>　针对该问题，DocValues 便应运而生了。其会对开启了该特性的字段，额外构建一个 Document -&gt; Field Value 的正排索引。此时，聚合操作的流程就变成了，先找到 KeyWord 的 Document，再从 DocValues 中加载 Document 对应的 Filed Value 到内存中进行运算即可。同时，如果 Field Value 占用的内存远小于节点的可用内存，则会自动常驻在内存中，进而保证了性能；反之，则会序列化到磁盘中，避免出现 OOM 问题。另外，因为其列式存储的特性，使得压缩效率也很高</p>
<h4 id="进一步思考-1"><a href="#进一步思考-1" class="headerlink" title="进一步思考"></a>进一步思考</h4><h5 id="设置-stored-”true”-属性同样会构建正排索引，它和-DocValues-又有何不同？"><a href="#设置-stored-”true”-属性同样会构建正排索引，它和-DocValues-又有何不同？" class="headerlink" title="设置 stored=”true” 属性同样会构建正排索引，它和 DocValues 又有何不同？"></a>设置 stored=”true” 属性同样会构建正排索引，它和 DocValues 又有何不同？</h5><p>　主要区别在于，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-store.html">前者</a>是行式存储，而<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/doc-values.html">后者</a>是列式存储；且前者直接存储字段原始值，而后者会进行分词</p>
<h3 id="ElasticSearch-5-0-内核迁移为-Lucene-6-x，是如何利用-Block-K-d-Tree-来解决-深度分页-问题？"><a href="#ElasticSearch-5-0-内核迁移为-Lucene-6-x，是如何利用-Block-K-d-Tree-来解决-深度分页-问题？" class="headerlink" title="ElasticSearch 5.0 内核迁移为 Lucene 6.x，是如何利用 Block K-d Tree 来解决 深度分页 问题？"></a>ElasticSearch 5.0 内核迁移为 Lucene 6.x，是如何利用 Block K-d Tree 来解决 深度分页 问题？</h3><h4 id="ElasticSearch-2-x-现状"><a href="#ElasticSearch-2-x-现状" class="headerlink" title="ElasticSearch 2.x 现状"></a>ElasticSearch 2.x 现状</h4><p>　使用 form + size 或者 scroll 的方式效率很低</p>
<h4 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h4><p>　K-d Tree，利用 <strong>方差 + 中位数</strong> 分割数据入 <strong>二叉树</strong>，再利用 <strong>二叉查找 + 递归溯源</strong> 的方式来查找数据。而 Block K-d Tree 则是一组 K-d Tree，解决了多维空间数据搜索，较高的空间利用率，高性能的查询和更新。使得 ElasticSearch 处理数值型数据和高维数据的性能提高了约 30%，同时存储空间大小节约了约 60%</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>　在搜索过程中，N 个节点、K 维 的 K-d Tree 最坏的时间复杂度为：$T_{worst} = O(K*N^{1-\frac{1}{K}})$，所以其无法很好地处理高维数据；</p>
<p>　而 Block K-d Tree 虽然在插入性能方面比 K-d Tree 提升了几个数量级，但是如果系统使用的是非 SSD 硬盘，则可能会出现严重的毛刺现象</p>
<h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><div class="note success">源码分析是基于 ElasticSearch 7.9.1 和 Lucene 8.6.2 版本进行的</div>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><a href="https://yuzhouwan.com/posts/190816/">环境搭建</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Lucene</span></span><br><span class="line">$ ant ivy-bootstrap</span><br><span class="line">$ ant idea</span><br><span class="line"></span><br><span class="line"><span class="comment"># ElasticSearch</span></span><br><span class="line">$ ./gradlew clean</span><br><span class="line">$ ./gradlew idea</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果遇到未完全下载等问题，可以通过执行 rm -rf ~/.ivy2/cache 清理缓存的命令来解决</div>



<h3 id="Lucene-1"><a href="#Lucene-1" class="headerlink" title="Lucene"></a>Lucene</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h5><p>　在 Lucene 中一个索引是放在一个文件夹中的，同一文件夹中的所有的文件构成一个 Lucene 索引</p>
<h5 id="段（Segment）"><a href="#段（Segment）" class="headerlink" title="段（Segment）"></a>段（Segment）</h5><p>　一个索引可以包含多个段，段与段之间是独立的，添加新文档可以生成新的段，不同的段可以进行合并。从文件名来看，<code>_0</code>、<code>_1</code> 或者 <code>_N</code> 开头的一组文件用于表示属于某一个段，<code>segments.gen</code> 和 <code>segments_N</code> 文件则保存了 Segment 相关的元数据信息</p>
<h5 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h5><p>　文档是创建索引的基本单位，不同的文档会保存在不同的段中，即一个段可以包含多个文档。新写入的文档会单独保存在一个新生成的段中，在随后的段合并操作中，不同的文档才合并到同一个 Segment 中</p>
<h5 id="域（Field）"><a href="#域（Field）" class="headerlink" title="域（Field）"></a>域（Field）</h5><p>　一个文档包含不同类型的信息，分别存在不同的域中，也就是文档的字段</p>
<h5 id="词典（Term-Directory）"><a href="#词典（Term-Directory）" class="headerlink" title="词典（Term Directory）"></a>词典（Term Directory）</h5><p>　字段内容经过分词、归一化、还原词根等处理之后，得到的所有单词的集合</p>
<h5 id="词（Term）"><a href="#词（Term）" class="headerlink" title="词（Term）"></a>词（Term）</h5><p>　词是索引的最小单位，本质上是词法分析和语言处理后的一个字符串</p>
<div class="note info">包含关系（一对多）依次是：Index &gt; Segment &gt; Document &gt; Field &gt; Term Directory &gt; Term</div>



<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h5 id="下载-Lucene"><a href="#下载-Lucene" class="headerlink" title="下载 Lucene"></a><a href="https://lucene.apache.org/core/downloads.html">下载 Lucene</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget http://mirrors.tuna.tsinghua.edu.cn/apache/lucene/java/8.6.2/lucene-8.6.2.tgz</span><br><span class="line">$ tar zxvf lucene-8.6.2.tgz</span><br><span class="line">$ ln -s lucene-8.6.2 lucene</span><br><span class="line">$ <span class="built_in">cd</span> lucene</span><br></pre></td></tr></tbody></table></figure>
<h5 id="构造需要被索引的数据"><a href="#构造需要被索引的数据" class="headerlink" title="构造需要被索引的数据"></a>构造需要被索引的数据</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim blog.txt</span><br><span class="line">  google.com</span><br><span class="line">  yuzhouwan.com</span><br></pre></td></tr></tbody></table></figure>
<h5 id="创建索引文件"><a href="#创建索引文件" class="headerlink" title="创建索引文件"></a>创建索引文件</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ java -classpath <span class="string">'demo/lucene-demo-8.6.2.jar:core/lucene-core-8.6.2.jar'</span> org.apache.lucene.demo.IndexFiles -docs blog.txt</span><br><span class="line">  Indexing to directory <span class="string">'index'</span>...</span><br><span class="line">  adding blog.txt</span><br><span class="line">  368 total milliseconds</span><br></pre></td></tr></tbody></table></figure>
<h5 id="检索文件"><a href="#检索文件" class="headerlink" title="检索文件"></a>检索文件</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ java -classpath <span class="string">'demo/lucene-demo-8.6.2.jar:core/lucene-core-8.6.2.jar:queryparser/lucene-queryparser-8.6.2.jar'</span> org.apache.lucene.demo.SearchFiles</span><br><span class="line">  Enter query:</span><br><span class="line">  blog</span><br><span class="line">  Searching <span class="keyword">for</span>: blog</span><br><span class="line">  0 total matching documents</span><br><span class="line"></span><br><span class="line">  Enter query:</span><br><span class="line">  yuzhouwan</span><br><span class="line">  Searching <span class="keyword">for</span>: yuzhouwan</span><br><span class="line">  0 total matching documents</span><br><span class="line"></span><br><span class="line">  Enter query:</span><br><span class="line">  yuzhouwan.com</span><br><span class="line">  Searching <span class="keyword">for</span>: yuzhouwan.com</span><br><span class="line">  1 total matching documents</span><br><span class="line">  1. blog.txt</span><br></pre></td></tr></tbody></table></figure>
<h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tree -L 2 index</span><br><span class="line">  index</span><br><span class="line">  ├── _0.cfe</span><br><span class="line">  ├── _0.cfs</span><br><span class="line">  ├── _0.si</span><br><span class="line">  ├── segments_1</span><br><span class="line">  └── write.lock</span><br></pre></td></tr></tbody></table></figure>
<h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// index</span></span><br><span class="line"><span class="keyword">try</span> (Directory index = <span class="keyword">new</span> NIOFSDirectory(Paths.get(<span class="string">"/tmp/index"</span>))) {</span><br><span class="line">    <span class="comment">// add</span></span><br><span class="line">    <span class="keyword">try</span> (IndexWriter writer = <span class="keyword">new</span> IndexWriter(index, <span class="keyword">new</span> IndexWriterConfig(<span class="keyword">new</span> StandardAnalyzer()))) {</span><br><span class="line">        Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">        doc.add(<span class="keyword">new</span> TextField(<span class="string">"blog"</span>, <span class="string">"yuzhouwan.com"</span>, Field.Store.YES));</span><br><span class="line">        doc.add(<span class="keyword">new</span> StringField(<span class="string">"github"</span>, <span class="string">"asdf2014"</span>, Field.Store.YES));</span><br><span class="line">        writer.addDocument(doc);</span><br><span class="line">        writer.commit();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// search</span></span><br><span class="line">    <span class="keyword">try</span> (DirectoryReader reader = DirectoryReader.open(index)) {</span><br><span class="line">        IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">        QueryParser parser = <span class="keyword">new</span> QueryParser(<span class="string">"blog"</span>, <span class="keyword">new</span> StandardAnalyzer());</span><br><span class="line">        Query query = parser.parse(<span class="string">"yuzhouwan.com"</span>);</span><br><span class="line">        ScoreDoc[] hits = searcher.search(query, <span class="number">1000</span>).scoreDocs;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc hit : hits) {</span><br><span class="line">            Document hitDoc = searcher.doc(hit.doc);</span><br><span class="line">            System.out.println(hitDoc.get(<span class="string">"blog"</span>));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-lucene/src/main/java/com/yuzhouwan/bigdata/lucene/LuceneExample.java">here</a>.</p>
<h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">文件后缀</th>
<th style="text-align:center">简要描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/index/SegmentInfos.html"><code>Segments File</code></a></td>
<td style="text-align:center">segments_N</td>
<td style="text-align:center">Stores information about a commit point</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene84/package-summary.html#Lock_File"><code>Lock File</code></a></td>
<td style="text-align:center">write.lock</td>
<td style="text-align:center">The Write lock prevents multiple IndexWriters from writing to the same file.</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat.html"><code>Segment Info</code></a></td>
<td style="text-align:center">.si</td>
<td style="text-align:center">Stores metadata about a segment</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat.html"><code>Compound File</code></a></td>
<td style="text-align:center">.cfs、.cfe</td>
<td style="text-align:center">An optional “virtual” file consisting of all the other index files for systems that frequently run out of file handles.</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat.html"><code>Fields</code></a></td>
<td style="text-align:center">.fnm</td>
<td style="text-align:center">Stores information about the fields</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.html"><code>Field Index</code></a></td>
<td style="text-align:center">.fdx</td>
<td style="text-align:center">Contains pointers to field data</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.html"><code>Field Data</code></a></td>
<td style="text-align:center">.fdt</td>
<td style="text-align:center">The stored fields for documents</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat.html"><code>Term Dictionary</code></a></td>
<td style="text-align:center">.tim</td>
<td style="text-align:center">The term dictionary, stores term info</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat.html"><code>Term Index</code></a></td>
<td style="text-align:center">.tip</td>
<td style="text-align:center">The index into the Term Dictionary</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat.html"><code>Frequencies</code></a></td>
<td style="text-align:center">.doc</td>
<td style="text-align:center">Contains the list of docs which contain each term along with frequency</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat.html"><code>Positions</code></a></td>
<td style="text-align:center">.pos</td>
<td style="text-align:center">Stores position information about where a term occurs in the index</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat.html"><code>Payloads</code></a></td>
<td style="text-align:center">.pay</td>
<td style="text-align:center">Stores additional per-position metadata information such as character offsets and user payloads</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene80/Lucene80NormsFormat.html"><code>Norms</code></a></td>
<td style="text-align:center">.nvd、.nvm</td>
<td style="text-align:center">Encodes length and boost factors for docs and fields</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat.html"><code>Per-Document Values</code></a></td>
<td style="text-align:center">.dvd、.dvm</td>
<td style="text-align:center">Encodes additional scoring factors or other per-document information.</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50TermVectorsFormat.html"><code>Term Vector Index</code></a></td>
<td style="text-align:center">.tvx</td>
<td style="text-align:center">Stores offset into the document data file</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50TermVectorsFormat.html"><code>Term Vector Data</code></a></td>
<td style="text-align:center">.tvd</td>
<td style="text-align:center">Contains term vector data.</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat.html"><code>Live Documents</code></a></td>
<td style="text-align:center">.liv</td>
<td style="text-align:center">Info about what documents are live</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene86/Lucene86PointsFormat.html"><code>Point values</code></a></td>
<td style="text-align:center">.dii、.dim</td>
<td style="text-align:center">Holds indexed points, if any</td>
</tr>
</tbody>
</table>
</div>
<center>（表格来源：<a href="https://lucene.apache.org/core/8_6_2/core/org/apache/lucene/codecs/lucene86/package-summary.html" target="_blank">lucene.apache.org</a> 官方文档）</center>

<h5 id="正排索引"><a href="#正排索引" class="headerlink" title="正排索引"></a>正排索引</h5><ul>
<li><code>segments_N</code> 保存了此 Index 包含多少个 Segment，每个 Segment 包含多少 Document</li>
<li><code>.fnm</code> 保存了此 Segment 包含了多少个 Field，每个 Field 的名称及索引方式</li>
<li><code>.fdx</code> 和 <code>.fdt</code> 保存了此 Segment 包含的所有 Document，各个 Document 包含了哪些 Field，以及每个 Field 保存了哪些信息</li>
<li><code>.tvx</code> 和 <code>.tvd</code> 保存了此 Segment 包含多少 Document，各个 Document 包含了多少 Field，每个 Field 包含了多少 Term，每个 Term 字符串的位置信息等</li>
</ul>
<h5 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h5><ul>
<li><p><code>.tim</code> 保存了 Term Directory，并以字典序保存 Term，方便进行高效的二分查找（ $O(\log_2^n)$） </p>
</li>
<li><p><code>.tip</code> 保存了 Term 到 Term Directory 的倒排索引。这里使用的数据结构是 FST（<strong>F</strong>inite <strong>S</strong>tate <strong>T</strong>ransducers，有限状态传感器），构建了一个 Term 的前缀树，不仅压缩了存储空间，还提高了查询速度（ $O(len(str))$） </p>
<p><img data-src="/picture/lucene/lucene_term_directory_inverted_index.png" alt="Term to Term Directory Inverted Index"></p>
<center>（图片来源：easynosql.com™，该网站已故障，侵删谢谢）</center>
</li>
<li><p><code>.doc</code> 保存了倒排表（即每个 Term 到 Document ID 的列表），同时也保存了 Document 中 Term 出现的频率</p>
</li>
</ul>
<h5 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h5><ul>
<li><code>.pos</code> 保存了倒排表中每个 Term，以及在 Document 中的位置</li>
<li><code>.nvd</code> 和 <code>.nvm</code> 保存 Field 得分信息</li>
</ul>
<h5 id="列式存储"><a href="#列式存储" class="headerlink" title="列式存储"></a>列式存储</h5><ul>
<li><code>.dvd</code> 和 <code>.dvm</code> 保存 DocValues 信息，用以加速聚合排序等查询</li>
</ul>
<div class="note info">其中，`.fdx`、`.tip` 和 `.dvm` 文件会被加载于内存中，以确保集群的高效运作；如果 `.liv` 文件不存在，则表示没有需要被删除的 Document</div>






<h4 id="Document-模块"><a href="#Document-模块" class="headerlink" title="Document 模块"></a>Document 模块</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>　定义 Document 和各种相关的数据类型</p>
<h5 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.apache.lucene.document.<strong>Document</strong></p>
<p>由 Field 组成的文档记录的</p>
</li>
<li><p>org.apache.lucene.document.<strong>Field</strong></p>
<p>Document 中的一个字段</p>
</li>
</ul>
<h4 id="Codecs-模块"><a href="#Codecs-模块" class="headerlink" title="Codecs 模块"></a>Codecs 模块</h4><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><p>　基础数据结构和编码压缩算法的实现，包括 skipList，docValue 等</p>
<h4 id="Analysis-模块"><a href="#Analysis-模块" class="headerlink" title="Analysis 模块"></a>Analysis 模块</h4><h5 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h5><p>　词法分析，并输出索引的最小单位 Term</p>
<h5 id="主体-1"><a href="#主体-1" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.apache.lucene.analysis.<strong>Analyzer</strong></p>
<p>分析器会对内容进行过滤，分词，转换等，把过滤之后的数据交给 IndexWriter 进行索引</p>
</li>
</ul>
<h4 id="Index-模块"><a href="#Index-模块" class="headerlink" title="Index 模块"></a>Index 模块</h4><h5 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h5><p>　创建索引</p>
<h5 id="主体-2"><a href="#主体-2" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.apache.lucene.index.<strong>IndexWriter</strong></p>
<p>索引写操作的核心类</p>
<ul>
<li><p>addDocument</p>
<p>将 Document 添加到索引中</p>
</li>
<li><p>updateDocument</p>
<p>更新 Document，等同于 delete by term + add document 两个操作的组合，并确保了其原子性</p>
</li>
<li><p>deleteDocument</p>
<p>删除 Document，支持 delete by term 和 delete by query</p>
</li>
<li><p>prepareCommit</p>
<p>二阶段提交的第一步</p>
</li>
<li><p>commit</p>
<p>二阶段提交的第二步，成功之后会生成一个 segment_N 文件新的 N 值，也只有 commit 成功之后，数据才可以被检索到</p>
</li>
<li><p>rollback</p>
<p>prepareCommit 或者 commit 任何一个操作失败之后，都会回滚到提交前的状态</p>
</li>
<li><p>maybeMerge</p>
<p>触发一次 MergePolicy 的执行，不满足条件的情况下，并不会执行 merge 操作</p>
</li>
<li><p>forceMerge</p>
<p>强制触发一次 merge 操作</p>
</li>
</ul>
</li>
<li><p>org.apache.lucene.index.<strong>SegmentInfos</strong></p>
<ul>
<li><p>getLastCommitGeneration(org.apache.lucene.store.Directory)</p>
<p>获取索引目录下最近一次的 commit 号，以定位最大的 segment_N 文件</p>
</li>
</ul>
</li>
<li><p>org.apache.lucene.index.<strong>Term</strong></p>
<p>Term 是文本检索的基本单元，一个 Term 由 KeyValue 组成，Key 为需要检索的字段名称，Value 为字段的值</p>
</li>
</ul>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul>
<li><p>wait_for_active_shards</p>
<p>集群中至少有多少存活的 Shard 才执行写入操作，可以设置为 <code>all</code> 表示需要主 Shard 和所有的副 Shard 均存活才执行写操作，默认值：<code>1</code>（即只需要主 Shard 存活即可写入）</p>
</li>
</ul>
<h4 id="Store-模块"><a href="#Store-模块" class="headerlink" title="Store 模块"></a>Store 模块</h4><h5 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h5><p>　读写索引</p>
<h5 id="主体-3"><a href="#主体-3" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.apache.lucene.store.<strong>Directory</strong></p>
<p>IndexWriter 通过获取 Directory 的一个具体实现，在 Directory 指向的位置中操作索引</p>
<ul>
<li><p>FSDirectory</p>
<p>表示一个存储在文件系统中的索引的位置</p>
</li>
<li><p>ByteBuffersDirectory</p>
<p>表示一个存储在内存当中的索引的位置</p>
</li>
</ul>
</li>
</ul>
<h4 id="Parser-模块"><a href="#Parser-模块" class="headerlink" title="Parser 模块"></a>Parser 模块</h4><h5 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h5><p>　查询的语法分析</p>
<h4 id="Search-模块"><a href="#Search-模块" class="headerlink" title="Search 模块"></a>Search 模块</h4><h5 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h5><p>　搜索索引</p>
<h5 id="主体-4"><a href="#主体-4" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.apache.lucene.search.<strong>IndexSearcher</strong></p>
<p>以只读的方式打开一个索引，并进行检索</p>
<ul>
<li><p>search</p>
<p>从索引中检索 Document</p>
</li>
</ul>
</li>
<li><p>org.apache.lucene.search.<strong>Query</strong></p>
<p>封装查询请求</p>
<ul>
<li><p>TermQuery</p>
<p>最基本的 Term 查询</p>
</li>
<li><p>BooleanQuery</p>
<p>可以组合多个查询条件</p>
</li>
<li><p>PointRangeQuery</p>
<p>数值区间查询，可以通过 <code>IntPoint#newRangeQuery</code>、<code>LongPoint#newRangeQuery</code>、<code>FloatPoint#newRangeQuery</code> 和 <code>DoublePoint#newRangeQuery</code> 等方式进行创建</p>
</li>
<li><p>PrefixQuery</p>
<p>前缀查询</p>
</li>
<li><p>FuzzyQuery</p>
<p>模糊查询</p>
</li>
<li><p>WildcardQuery</p>
<p>通配符查询</p>
</li>
<li><p>RegexpQuery</p>
<p>正则表达式查询</p>
</li>
<li><p>MultiFieldQueryParser</p>
<p>多值查询</p>
</li>
<li><p>TopDocs</p>
<p>TopN 查询</p>
</li>
</ul>
</li>
</ul>
<h4 id="Similarity-模块"><a href="#Similarity-模块" class="headerlink" title="Similarity 模块"></a>Similarity 模块</h4><h5 id="功能-7"><a href="#功能-7" class="headerlink" title="功能"></a>功能</h5><p>　相关度打分</p>
<h4 id="Geo-模块"><a href="#Geo-模块" class="headerlink" title="Geo 模块"></a>Geo 模块</h4><h5 id="功能-8"><a href="#功能-8" class="headerlink" title="功能"></a>功能</h5><p>　空间查询</p>
<h3 id="ElasticSearch-1"><a href="#ElasticSearch-1" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><h4 id="Transport-模块"><a href="#Transport-模块" class="headerlink" title="Transport 模块"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-transport.html">Transport</a> 模块</h4><h5 id="功能-9"><a href="#功能-9" class="headerlink" title="功能"></a>功能</h5><p>　保障了集群内各节点之间可以进行网络通讯</p>
<h5 id="主体-5"><a href="#主体-5" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.elasticsearch.cli.<strong>Command</strong>#main</p>
</li>
<li><p>org.elasticsearch.cli.<strong>EnvironmentAwareCommand</strong>#execute</p>
</li>
<li><p>org.elasticsearch.bootstrap.<strong>Elasticsearch</strong>#execute</p>
</li>
<li><p>org.elasticsearch.bootstrap.<strong>Bootstrap</strong></p>
</li>
<li><p>org.elasticsearch.node.<strong>Node</strong></p>
</li>
<li><p>org.elasticsearch.transport.<strong>TransportService</strong></p>
<ul>
<li><p>connectToNode</p>
<p>连接集群中的其他 Node 节点</p>
</li>
<li><p>sendRequest</p>
<p>发送请求</p>
</li>
<li><p>registerRequestHandler</p>
<p>注册 TransportRequestHandler，用于处理接收到的请求</p>
</li>
</ul>
</li>
<li><p>org.elasticsearch.transport.<strong>Transport</strong></p>
</li>
<li><p>org.elasticsearch.transport.netty4.<strong>Netty4Transport</strong>（transport-netty4 模块）</p>
</li>
<li><p>org.elasticsearch.transport.netty4.<strong>Netty4MessageChannelHandler</strong></p>
</li>
</ul>
<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><ul>
<li><p>transport.port</p>
<p>Transport 服务绑定的端口范围，默认值为 <code>9300-9400</code></p>
</li>
<li><p>transport.type</p>
<p>控制 Transport 通讯时的网络类型，默认值为 <code>netty4</code></p>
</li>
<li><p>transport.compress</p>
<p>控制是否针对 Request 请求和 Response 返回结果进行压缩，默认值为 <code>false</code></p>
</li>
</ul>
<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>　Command 完成 ElasticSearch 进程的启动，随后依次初始化 Bootstrap、Node、Transport 和 TransportService 并启动。节点间通讯的消息处理，最终由 Netty4MessageChannelHandler 进行处理。该 Handler 的注册操作，则会在 Netty4Transport 中完成</p>
<h4 id="Zen-Discovery-模块"><a href="#Zen-Discovery-模块" class="headerlink" title="Zen Discovery 模块"></a>Zen Discovery 模块</h4><h5 id="功能-10"><a href="#功能-10" class="headerlink" title="功能"></a>功能</h5><p>　可以让 ElasticSearch 节点自动互相发现，并组成一个集群，且能通过选举机制找到一个 Master 节点</p>
<h5 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h5><ul>
<li><p>node.master</p>
<p>如果设置为 true，则可以参与到 Master 选举过程中，默认值为 <code>true</code></p>
</li>
<li><p>node.data</p>
<p>如果设置为 true，则可以存储数据，并处理与数据相关的 CRUD、查询和聚合等操作，默认值为 <code>true</code></p>
<p>排列组合 <code>node.master</code> 和 <code>node.data</code> 这两个参数的结果，如下表所示：</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">data: true</th>
<th style="text-align:center">data: false</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>master: true</strong></td>
<td style="text-align:center">既是种子节点，又是数据节点</td>
<td style="text-align:center">单纯的种子节点</td>
</tr>
<tr>
<td style="text-align:center"><strong>master: false</strong></td>
<td style="text-align:center">单纯的数据节点</td>
<td style="text-align:center">最简单的协调节点</td>
</tr>
</tbody>
</table>
</div>
  <div class="note info">其中，协调节点负责查询时的数据收集、合并以及聚合等操作。默认的，ElasticSearch 集群中所有节点都是协调节点。其实严格来说，除了 node.master 和 node.data 设置为 false，还需要将 node.ingest 也设置为 false 之后，才能算纯粹的 Coordinating 节点</div>

<ul>
<li><p>node.ingest</p>
<p>如果设置为 true，则可以创建一个 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/pipeline.html">ingest pipeline</a> 任务，对未被索引到 Index 之前的 Document 数据进行预处理，例如设置某一些字段值或者增加一个新字段（如记录摄入时间的新字段）。考虑到可能会增加机器的负载，生产环境中，最好将 Master 节点和 Node 节点上的这个功能关闭，默认值为 <code>true</code></p>
</li>
<li><p>xpack.ml.enabled</p>
<p>如果设置为 true，则可以处理 ElasticSearch 机器学习的接口请求，默认值为 <code>true</code></p>
</li>
<li><p>node.ml</p>
<p>如果设置为 true，则可以运行机器学习相关的任务，默认值为 <code>true</code></p>
</li>
<li><p>discovery.seed_hosts</p>
<p>提供一组可以成为 Master 的种子节点的 IP 地址，如果未指定端口号，将会自动使用 <code>transport.port</code> 的配置值（默认 9300）</p>
</li>
<li><p>discovery.seed_providers</p>
<p>另一种提供种子节点 IP 地址的方式，指定一个存放 IP 地址的文件，可以动态加载，避免集群扩缩容时需要重启 ElasticSearch 进程的问题</p>
</li>
<li><p>discovery.find_peers_interval</p>
<p>Discovery 机制的周期频率，默认值为 <code>1s</code></p>
</li>
</ul>
<h5 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h5><p>　ElasticSearch 将集群内的节点分为了四种类型，分别是 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#master-node">Master-eligible node</a>、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#data-node">Data node</a>、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html">Ingest node</a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#ml-node">Machine learning node</a>。Master 选举只会在 Master-eligible 种子节点之间进行，触发条件为：</p>
<ol>
<li>当前 Master-eligible 节点不是 Master 节点</li>
<li>当前 Master-eligible 节点与其它的节点通信后发现不存在 Master</li>
</ol>
<p>　发起 <a href="https://yuzhouwan.com/posts/22654/#Gossip">Gossip</a> + <a href="https://yuzhouwan.com/posts/22654/#Bully">Bully</a> 的选举流程：</p>
<ol>
<li>寻找 clusterStateVersion 比自己高的 Master-eligible 的节点，向其发送选票</li>
<li>如果 clusterStatrVersion 一样，则计算自己能找到的 Master-eligible 节点中（包括自己）ID 最小的一个节点，向该节点发送选票</li>
<li>如果一个节点收到过半的选票，并且它也向自己投票了，那么该节点成为 Master 节点</li>
</ol>
<p>　成功从 Master-eligible 节点中选举出 Master 节点之后，那么这个 Master 节点将会负责集群（集群信息、集群健康、集群状态、集群配置、所有分片、节点关闭、集群路由）和索引（索引的创建与删除、索引 Template 和 Mapping 的创建删除与更新、索引 Warmer 创建删除与获取、索引的打开与关闭）相关的所有请求</p>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><h6 id="Bully"><a href="#Bully" class="headerlink" title="Bully"></a>Bully</h6><p>　Bully 算法会假定所有节点都有一个惟一的 ID，并可以依据 ID 对集群内节点进行排序，而拥有最高 ID 的那个节点则会成为 Master 节点</p>
<h6 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a>Gossip</h6><p>　Gossip 本质上就是一个并行的图广度优先遍历搜索算法，可以借助一个动图来直观感受一下：</p>
<p><img data-src="/picture/es/es_grossip.gif" alt="Gossip"></p>
<center>（图片来源：jianshu.com™，已联系作者，获得授权。不过最近发现该文章已下线，侵删谢谢）</center>

<h6 id="单播-vs-组播-vs-广播"><a href="#单播-vs-组播-vs-广播" class="headerlink" title="单播 vs 组播 vs 广播"></a>单播 vs 组播 vs 广播</h6><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">网络模型</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">单播（unicast）</td>
<td style="text-align:center"><img data-src="/picture/es/es_unicast.svg"></td>
<td style="text-align:center">点对点通讯可以保证低响应延迟</td>
<td style="text-align:center">服务端流量消耗较大</td>
</tr>
<tr>
<td style="text-align:center">组播（multicast）</td>
<td style="text-align:center"><img data-src="/picture/es/es_multicast.svg"></td>
<td style="text-align:center">共享数据流可以减少带宽负载</td>
<td style="text-align:center">无纠错机制，发生丢包或错包之后，很难弥补</td>
</tr>
<tr>
<td style="text-align:center">广播（broadcast）</td>
<td style="text-align:center"><img data-src="/picture/es/es_broadcast.svg"></td>
<td style="text-align:center">网络设备简单可以减少布网和维护的成本</td>
<td style="text-align:center">无法提供定制化服务，且客户端的网络带宽将成为瓶颈</td>
</tr>
</tbody>
</table>
</div>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/Unicast" target="_blank">wikipedia.org</a>™，已确认无版权）</center>



<h4 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h4><h5 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h5><p>　因为 ElasticSearch 内所有节点都默认属于 Coordinating 节点，这意味着每个节点都有能力处理任何一种请求</p>
<p><img data-src="/picture/es/es_write_1.png" alt="ElasticSearch Write"></p>
<center>（图片来源：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/how-primary-and-replica-shards-interact.html" target="_blank">ElasticSearch</a>™ 官方文档）</center>

<p>　这里我们以单 Index、两 Shard、三 Replication、三 Node 的 ElasticSearch 集群为例</p>
<p><img data-src="/picture/es/es_write_2.png" alt="ElasticSearch Write"></p>
<center>（图片来源：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-write.html" target="_blank">ElasticSearch</a>™ 官方文档）</center>

<ol>
<li>客户端向 <code>NODE 1</code> 发送新建、索引或者删除请求</li>
<li>节点使用 Document 的 <code>_id</code> 确定 Document 属于 Shard 0。请求会被转发到 <code>NODE 3</code>，因为分片 0 的主分片目前被分配在 <code>NODE 3</code> 上</li>
<li><code>NODE 3</code> 在主分片上面执行请求。如果成功了，它将请求并行转发到 <code>NODE 1</code> 和 <code>NODE 2</code> 的副本分片上。一旦所有的副本分片都成功返回，<code>Node 3</code> 将向协调节点报告成功，随后协调节点再向客户端反馈请求成功</li>
</ol>
<p>　而内部持久化到磁盘的流程和 <a href="https://yuzhouwan.com/posts/45888/">HBase</a> 很像，所以还可以借鉴 HBase 的概念进行理解：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>HBase</th>
<th>ElasticSearch</th>
</tr>
</thead>
<tbody>
<tr>
<td>MemStore</td>
<td>IndexBuffer</td>
</tr>
<tr>
<td>HFile</td>
<td>Segment</td>
</tr>
<tr>
<td>WAL</td>
<td>Translog</td>
</tr>
<tr>
<td>Compaction</td>
<td>Merge</td>
</tr>
</tbody>
</table>
</div>
<p>　写入的数据都会先存放在 Buffer 中，以保证写入的效率。之后，每隔一段时间（默认 5s，最小 100ms），ElasticSearch 会批量将 Buffer 中的数据，Sync 到磁盘上的 Segment 中。此时，Segment 处于打开状态，可以被查询检索到。而为了确保数据不会丢失，ElasticSearch 会将每一个事务操作都记录到 Translog 中。每次 Sync 操作只会清空 Buffer 中的数据，并不会清空 Translog 中的事务日志。只有写入一段时间后，进行全量 Sync 操作的时候，才会将 Translog 清空（默认是 Translog 达到 512M 或者 12 小时之后）</p>
<p><img data-src="/picture/es/es_write_3.png" alt="ElasticSearch Flush"></p>
<center>（图片来源：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/merge-process.html" target="_blank">ElasticSearch</a>™ 官方文档）</center>



<h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><h5 id="流程-3"><a href="#流程-3" class="headerlink" title="流程"></a>流程</h5><p>　和数据写入不同的是，数据查询是可以在主分片或者其任意副本分片上，完成文档检索的。同时，为了保证负载均衡，每次请求的时候，还会轮询地去查询副本分片</p>
<p><img data-src="/picture/es/es_read.png" alt="ElasticSearch Read"></p>
<center>（图片来源：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-read.html" target="_blank">ElasticSearch</a>™ 官方文档）</center>

<p>　这里我们仍然以单 Index、两 Shard、三 Replication、三 Node 的 ElasticSearch 集群为例</p>
<ol>
<li>客户端向 <code>NODE 1</code> 发送查询请求</li>
<li>节点使用 Document 的 <code>_id</code> 来确定 Document 属于 Shard <code>0</code>。而所有节点上都存在着 Shard <code>0</code> 的副本分片。这种情况下，它将请求转发到 <code>NODE 2</code> </li>
<li><code>NODE 2</code> 将文档返回给 <code>NODE 1</code>，然后将文档返回给客户端</li>
</ol>
<div class="note info">可以通过 index.queries.cache.enabled 参数，来控制是否对查询结果进行缓存，默认是开启的</div>




<h4 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h4><h5 id="流程-4"><a href="#流程-4" class="headerlink" title="流程"></a>流程</h5><p>　为了避免 Segment 小文件过多，ElasticSearch 会定时进行 Segment 合并操作。因为段合并需要消耗大量的磁盘 IO 和 CPU，所以为了不影响正常的集群运行，ElasticSearch 会进行严格的限流，默认 20MB/s</p>
<p><img data-src="/picture/es/es_segment_merge_before.png" alt="Before ElasticSearch Segment Merge"></p>
<p><img data-src="/picture/es/es_segment_merge_after.png" alt="After ElasticSearch Segment Merge"></p>
<center>（图片来源：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/merge-process.html" target="_blank">ElasticSearch</a>™ 官方文档）</center>



<h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html">熔断器</a></h4><h5 id="功能-11"><a href="#功能-11" class="headerlink" title="功能"></a>功能</h5><p>　熔断器（Circuit Breaker）用于防止 OOM 异常，以增强集群稳定性。更多介绍，详见上文 “使用技巧 - 熔断机制” 小节</p>
<h5 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h5><h6 id="Parent-Circuit-Breaker"><a href="#Parent-Circuit-Breaker" class="headerlink" title="Parent Circuit Breaker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html#parent-circuit-breaker">Parent Circuit Breaker</a></h6><ul>
<li><p>indices.breaker.total.use_real_memory</p>
<p>是否通过 <code>ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed()</code> 的方式获取更加精准的内存使用指标，默认值为 <code>true</code></p>
</li>
<li><p>indices.breaker.total.limit</p>
<p>父熔断器限制内存使用的比例，默认值为 <code>70%</code>（上一个参数 <code>use_real_memory</code> 为 <code>false</code>） 或 <code>95%</code>（反之为 <code>true</code>）</p>
</li>
</ul>
<h6 id="Field-Data-Circuit-Breaker"><a href="#Field-Data-Circuit-Breaker" class="headerlink" title="Field Data Circuit Breaker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html#fielddata-circuit-breaker">Field Data Circuit Breaker</a></h6><ul>
<li><p>indices.breaker.fielddata.limit</p>
<p>字段数据熔断器，限制内存中加载的 Field 只能占到总内存的比例，默认值为 <code>40%</code></p>
</li>
<li><p>indices.breaker.fielddata.overhead</p>
<p>用来和字段数据估计值相乘的常数，默认值为 <code>1.03</code></p>
</li>
</ul>
<h6 id="Request-Circuit-Breaker"><a href="#Request-Circuit-Breaker" class="headerlink" title="Request Circuit Breaker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html#request-circuit-breaker">Request Circuit Breaker</a></h6><ul>
<li><p>indices.breaker.request.limit</p>
<p>请求熔断器，主要限制的是请求在执行过程中的可能会消耗的内存（例如，用于在请求期间计算聚合的内存），默认值为 <code>60%</code></p>
</li>
<li><p>indices.breaker.request.overhead</p>
<p>用来和请求内存消耗的估计值相乘的常数，默认值为 <code>1</code></p>
</li>
</ul>
<h6 id="In-Flight-Requests-Circuit-Breaker"><a href="#In-Flight-Requests-Circuit-Breaker" class="headerlink" title="In Flight Requests Circuit Breaker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html#in-flight-circuit-breaker">In Flight Requests Circuit Breaker</a></h6><ul>
<li><p>network.breaker.inflight_requests.limit</p>
<p>飞行中请求熔断器，则是作用于尚未开始执行的请求，主要限制的是，请求本身的内容长度，会在 HTTP 层面上对所有当前活跃的传入请求的内存大小进行限制，默认值为 <code>100%</code>（这意味着可能会在父熔断器允许的范围内将内存耗尽）</p>
</li>
<li><p>network.breaker.inflight_requests.overhead</p>
<p>用来和飞行中请求内存消耗的估计值相乘的常数，默认值为 <code>2</code></p>
</li>
</ul>
<h6 id="Accounting-Requests-Circuit-Breaker"><a href="#Accounting-Requests-Circuit-Breaker" class="headerlink" title="Accounting Requests Circuit Breaker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html#accounting-circuit-breaker">Accounting Requests Circuit Breaker</a></h6><ul>
<li><p>indices.breaker.accounting.limit</p>
<p>计费熔断器，限制的是请求完成时，未被释放的内容的内存大小（例如，Lucene 段内存等），默认值为 <code>100%</code>（这意味着可能会在父熔断器允许的范围内将内存耗尽）</p>
</li>
<li><p>indices.breaker.accounting.overhead</p>
<p>用来和计费熔断器的估计值相乘的常数，默认值为 <code>1</code></p>
</li>
</ul>
<h6 id="Script-Compilation-Circuit-Breaker"><a href="#Script-Compilation-Circuit-Breaker" class="headerlink" title="Script Compilation Circuit Breaker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html#script-compilation-circuit-breaker">Script Compilation Circuit Breaker</a></h6><ul>
<li><p>script.max_compilations_rate</p>
<p>脚本编译熔断器，限制的是一段时间内的内联脚本编译次数，默认值为 <code>75/5m</code></p>
</li>
</ul>
<h5 id="主体-6"><a href="#主体-6" class="headerlink" title="主体"></a>主体</h5><ul>
<li><p>org.elasticsearch.common.breaker.<strong>CircuitBreaker</strong></p>
<p>最上层的接口，定义了除脚本编译熔断器（ScriptService）之外的所有内置的 Breaker：</p>
<ul>
<li><code>PARENT</code></li>
<li><code>FIELDDATA</code></li>
<li><code>REQUEST</code></li>
<li><code>IN_FLIGHT_REQUESTS</code></li>
<li><code>ACCOUNTING</code></li>
</ul>
<p>和相应的类型：</p>
<ul>
<li><p><code>MEMORY</code></p>
<p>子熔断器</p>
</li>
<li><p><code>PARENT</code></p>
<p>父熔断器</p>
</li>
<li><p><code>NOOP</code></p>
<p>不会触发任何熔断行为的熔断器</p>
</li>
</ul>
<p>以及 Breaker 相关的行为：</p>
<ul>
<li><code>addEstimateBytesAndMaybeBreak</code></li>
<li><code>addWithoutBreaking</code></li>
<li><code>getUsed</code></li>
<li><code>getLimit</code></li>
<li><code>getOverhead</code></li>
<li><code>getTrippedCount</code></li>
<li><code>getName</code></li>
<li><code>getDurability</code></li>
</ul>
</li>
<li><p>org.elasticsearch.common.breaker.<strong>ChildMemoryCircuitBreaker</strong></p>
</li>
<li><p>org.elasticsearch.indices.breaker.<strong>HierarchyCircuitBreakerService</strong></p>
<ul>
<li><p><code>#breakers</code></p>
<p>记录所有的 Breaker，即 <code>&lt;熔断器名称，CircuitBreaker 实例&gt;</code></p>
</li>
<li><p><code>checkParentLimit</code></p>
<p>检查父熔断器是否已跳闸</p>
</li>
<li><p><code>registerBreaker</code></p>
<p>注册熔断器（支持注册自定义的熔断器，如果自定义的熔断器名称和已存在的熔断器的名称相同，将会覆盖掉已存在的熔断器）</p>
</li>
</ul>
</li>
<li><p>org.elasticsearch.indices.breaker.<strong>BreakerSettings</strong></p>
<ul>
<li><p><code>#name</code></p>
<p>熔断器的名称</p>
</li>
<li><p><code>#limitBytes</code></p>
<p>阀值</p>
</li>
<li><p><code>#overhead</code></p>
<p>计算内存消耗时的因子</p>
</li>
<li><p><code>#type</code></p>
<p>熔断器的类型</p>
</li>
</ul>
</li>
</ul>
<h4 id="Rollup-1"><a href="#Rollup-1" class="headerlink" title="Rollup"></a>Rollup</h4><h5 id="主体-7"><a href="#主体-7" class="headerlink" title="主体"></a>主体</h5><ul>
<li>org.elasticsearch.xpack.rollup.<strong>Rollup</strong></li>
<li>org.elasticsearch.xpack.rollup.job.<strong>RollupJobTask</strong></li>
<li>org.elasticsearch.xpack.rollup.job.RollupJobTask.<strong>RollupJobPersistentTasksExecutor</strong></li>
</ul>
<h5 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h5><pre class="mermaid">sequenceDiagram

participant User

participant TransportPutRollupJobAction
participant RollupJob
participant PersistentTasksService
participant ElasticsearchClient
participant AbstractClient
participant OriginSettingClient
participant ActionListener

User -&gt;&gt;+ TransportPutRollupJobAction : masterOperation
TransportPutRollupJobAction -&gt;&gt; TransportPutRollupJobAction : createRollupJob
TransportPutRollupJobAction -&gt;&gt;+ RollupJob : &lt;&lt; new &gt;&gt;
RollupJob --&gt;&gt;- TransportPutRollupJobAction : Instance
TransportPutRollupJobAction -&gt;&gt; TransportPutRollupJobAction : createIndex
TransportPutRollupJobAction -&gt;&gt;+ TransportPutRollupJobAction : startPersistentTask
TransportPutRollupJobAction -&gt;&gt; PersistentTasksService : sendStartRequest
PersistentTasksService -&gt;&gt;+ PersistentTasksService : execute
PersistentTasksService -&gt;&gt;+ ElasticsearchClient : execute
ElasticsearchClient -&gt;&gt;+ AbstractClient : doExecute
AbstractClient -&gt;&gt;+ OriginSettingClient : doExecute
OriginSettingClient --&gt;&gt;- AbstractClient : done
AbstractClient --&gt;&gt;- ElasticsearchClient : done
ElasticsearchClient --&gt;&gt;- PersistentTasksService : done
PersistentTasksService -&gt;&gt; PersistentTasksService : waitForPersistentTaskCondition
PersistentTasksService -&gt;&gt;+ ActionListener : onResponse | onFailure | onTimeout
ActionListener --&gt;&gt;- PersistentTasksService : done
PersistentTasksService --&gt;&gt;- TransportPutRollupJobAction : done
TransportPutRollupJobAction --&gt;&gt;- User : done</pre>







<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="Unknown-Analyzer-type-org-ElasticSearch-index-analysis-IkAnalyzerProvider-for-ik"><a href="#Unknown-Analyzer-type-org-ElasticSearch-index-analysis-IkAnalyzerProvider-for-ik" class="headerlink" title="Unknown Analyzer type [org.ElasticSearch.index.analysis.IkAnalyzerProvider] for [ik]"></a>Unknown Analyzer type [org.ElasticSearch.index.analysis.IkAnalyzerProvider] for [ik]</h3><p>　属于配置的问题，需注意 ElasticSearch 和 IK 中文分词插件的版本，不同的版本中支持的配置项也会不一样</p>
<h3 id="The-number-of-object-passed-must-be-even-but-was-1"><a href="#The-number-of-object-passed-must-be-even-but-was-1" class="headerlink" title="The number of object passed must be even but was [1]"></a>The number of object passed must be even but was [1]</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 建议不使用 JSON.toJSONString，而是自己在 POJO 中拼装 Map&lt;String, Object&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">toJSON</span><span class="params">()</span> </span>{</span><br><span class="line">  HashMap&lt;String, Object&gt; json = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  json.put(<span class="string">"systemName"</span>, systemName);</span><br><span class="line">  json.put(<span class="string">"ip"</span>, ip);</span><br><span class="line">  json.put(<span class="string">"path"</span>, path);</span><br><span class="line">  json.put(<span class="string">"time"</span>, time);</span><br><span class="line">  json.put(<span class="string">"message"</span>, message);</span><br><span class="line">  <span class="keyword">return</span> json;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">(ElasticsearchSinkFunction&lt;HBaseServerLog&gt;) (element, ctx, indexer) -&gt; {</span><br><span class="line">  _log.debug(<span class="string">"Message: {} in ES Sink"</span>, element);</span><br><span class="line">  <span class="keyword">if</span> (element == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  indexer.add(indexRequest()</span><br><span class="line">         .index(HBASE_SERVER_LOG_INDEX_NAME)</span><br><span class="line">         .type(HBASE_SERVER_LOG_TYPE_NAME)</span><br><span class="line">         .source(element.toJSON()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="blocked-by-FORBIDDEN-12-index-read-only-allow-delete-api"><a href="#blocked-by-FORBIDDEN-12-index-read-only-allow-delete-api" class="headerlink" title="blocked by: [FORBIDDEN/12/index read-only / allow delete (api)]"></a>blocked by: [FORBIDDEN/12/index read-only / allow delete (api)]</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PUT _settings</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"index"</span>: {</span><br><span class="line">    <span class="attr">"blocks"</span>: {</span><br><span class="line">      <span class="attr">"read_only_allow_delete"</span>: <span class="string">"false"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">从 ElasticSearch 7.4.0 版本开始，支持在磁盘水位下降后，自动释放索引的 read-only 锁</div>



<h3 id="Docker-中无法开启-bootstrap-memory-lock-参数"><a href="#Docker-中无法开启-bootstrap-memory-lock-参数" class="headerlink" title="Docker 中无法开启 bootstrap.memory_lock 参数"></a>Docker 中无法开启 bootstrap.memory_lock 参数</h3><p>　非容器环境下，在 limits.conf 文件中增加 memlock 相关的配置即可（这里了的 admin 是 ElasticSearch 运行的用户，可以根据实际情况更换）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ su -</span><br><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line">  admin soft memlock unlimited</span><br><span class="line">  admin hard memlock unlimited</span><br></pre></td></tr></tbody></table></figure>
<p>　容器环境下，则需要用如下方式进行修改：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ grep locked /proc/$(ps --no-headers -o pid -C dockerd | tr -d <span class="string">' '</span>)/limits</span><br><span class="line">  Max locked memory         65536                65536                bytes</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">"[Service]\nLimitMEMLOCK=infinity"</span> | SYSTEMD_EDITOR=tee systemctl edit docker.service</span><br><span class="line">  [Service]</span><br><span class="line">  LimitMEMLOCK=infinity</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br><span class="line"></span><br><span class="line">$ grep locked /proc/$(ps --no-headers -o pid -C dockerd | tr -d <span class="string">' '</span>)/limits</span><br><span class="line">  Max locked memory         unlimited            unlimited            bytes</span><br></pre></td></tr></tbody></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><h4 id="Lucene-2"><a href="#Lucene-2" class="headerlink" title="Lucene"></a>Lucene</h4><ul>
<li><a href="https://lucene.apache.org/core/8_6_2/changes/Changes.html">Lucene 8.6.2 Release Notes</a></li>
<li><a href="http://lucene.apache.org/core/8_6_2/demo/overview-summary.html">Lucene 8.6.2 demo API</a></li>
<li><a href="https://github.com/apache/lucene-solr/blob/master/README.md#building-lucenesolr">Building Lucene</a></li>
<li><a href="https://lucene.apache.org/solr/guide/6_6/docvalues.html">Lucene: DocValues</a></li>
</ul>
<h4 id="ElasticSearch-2"><a href="#ElasticSearch-2" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><ul>
<li><a href="https://www.elastic.co/products/elasticsearch/features">Elasticsearch features</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html">Elasticsearch Reference</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-limitations.html">SQL Limitations</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html">Breaking changes in 7.0</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">Field datatypes</a></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">主分类</th>
<th style="text-align:center">子分类</th>
<th style="text-align:center">字段类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">核心类型</td>
<td style="text-align:center">字符串类型</td>
<td style="text-align:center">text / keyword</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">整数类型</td>
<td style="text-align:center">long /integer / short / byte</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">浮点类型</td>
<td style="text-align:center">double / float / half_float / scaled_float</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">逻辑类型</td>
<td style="text-align:center">boolean</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">日期类型</td>
<td style="text-align:center">date</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">范围类型</td>
<td style="text-align:center">integer_range / float_range / long_range / double_range / date_range</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">二进制类型</td>
<td style="text-align:center">binary</td>
</tr>
<tr>
<td style="text-align:center">复合类型</td>
<td style="text-align:center">对象类型</td>
<td style="text-align:center">object</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">嵌套类型</td>
<td style="text-align:center">nested</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">数组类型</td>
<td style="text-align:center">不存在数组类型，所有的字段都有存储多个相同类型的字段值</td>
</tr>
<tr>
<td style="text-align:center">地理类型</td>
<td style="text-align:center">地理坐标类型</td>
<td style="text-align:center">geo_point</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">地理地图</td>
<td style="text-align:center">geo_shape</td>
</tr>
<tr>
<td style="text-align:center">特殊类型</td>
<td style="text-align:center">IP 类型</td>
<td style="text-align:center">ip</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">范围类型</td>
<td style="text-align:center">completion</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">令牌计数类型</td>
<td style="text-align:center">token_count</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">存储索引的 Hash 值类型</td>
<td style="text-align:center">murmur3</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">抽取类型</td>
<td style="text-align:center">percolator</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/doc-values.html">ElasticSearch: doc_values</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-apis.html">Rollup APIs</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-agg-limitations.html">Rollup aggregation limitations</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack-rollup.html">Rolling up historical data</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/tune-for-indexing-speed.html">Tune for indexing speed</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/apache/lucene-solr">Lucene</a></li>
<li><a href="https://github.com/opendistro-for-elasticsearch/security">Open Distro for Elasticsearch Security</a></li>
<li><a href="https://github.com/elastic/elasticsearch-formal-models">Formal models of core Elasticsearch algorithms</a></li>
<li><a href="https://github.com/elastic/elasticsearch/pull/46169">Fix G1 GC default IHOP</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="https://cs.nyu.edu/~mohri/pub/fla.pdf">Weighted Finite-State Transducer Algorithms</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://www.amazon.com/Mastering-ElasticSearch-Rafal-Kuc/dp/178328143X">Mastering ElasticSearch</a></li>
<li><a href="https://www.amazon.com/Monitoring-ElasticSearch-Dan-Noble/dp/1784397806">Monitoring ElasticSearch</a></li>
<li><a href="https://www.amazon.com/ElasticSearch-Cookbook-Second-Alberto-Paro/dp/1783554835">ElasticSearch Cookbook, 2nd Edition</a></li>
<li><a href="https://www.amazon.com/Elasticsearch-Action-Radu-Gheorghe/dp/1617291625">Elasticsearch in Action</a></li>
<li><a href="https://www.amazon.com/ElasticSearch-Indexing-Huseyin-Akdogan/dp/1783987022">Elasticsearch Indexing</a></li>
<li><a href="https://www.amazon.com/ElasticSearch-Server-Second-Rafal-Kuc/dp/1783980524">Elasticsearch Server, 2nd Edition</a></li>
<li><a href="https://www.amazon.com/Elasticsearch-Definitive-Distributed-Real-Time-Analytics/dp/1449358543">Elasticsearch：The Definitive Guide</a></li>
</ul>
<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul>
<li><a href="https://home.apache.org/~mikemccand/geobench.html">Lucene Geo benchmarks</a></li>
<li><a href="https://elasticsearch-benchmarks.elastic.co/">ElasticSearch Benchmark</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Java</tag>
        <tag>Helm</tag>
        <tag>ElasticSearch</tag>
        <tag>Lucene</tag>
        <tag>Kafka</tag>
        <tag>Flume</tag>
        <tag>HBase</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能</title>
    <url>/posts/42737/</url>
    <content><![CDATA[<h2 id="什么是人工智能"><a href="#什么是人工智能" class="headerlink" title="什么是人工智能"></a>什么是人工智能</h2><p>　<strong>人工智能</strong>（<strong>A</strong>rtificial <strong>I</strong>ntelligence, <strong>AI</strong>）亦称<strong>机器智能</strong>，是指由人工制造出来的系统所表现出来的智能。 — <a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">wikipedia.org</a></p>
<p>　从 深蓝到 <a href="https://arxiv.org/pdf/1712.01815.pdf">AlphaZero</a>，人工智能的智力水平、普适性、学习能力 正在以爆炸式地速度快速发展；<br>　从 棋类到 医学，人工智能开始在各类应用领域，都在大展身手；<br>　从 CPU / GPU 到 <a href="https://cloud.google.com/blog/big-data/2017/05/an-in-depth-look-at-googles-first-tensor-processing-unit-tpu">TPU</a>，人工智能的计算能力正向着无法穷举的极限不断逼近 …</p>
<p>　但是，我们并不浮躁，踏踏实实地点亮 AI 知识树的每个枝叶，才是我们每位富有科学精神的人所应该做的</p>
<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>　我们将分为三块对 AI 进行诠释</p>
<p>　首先，将介绍人工智能的<strong>主流思想</strong>和<strong>实用技巧</strong>，通过一些耳熟能详的<a href="https://yuzhouwan.com/posts/4534/">有趣定理</a>，我们可以对人工智能有些直观、初步的认识；随后，言归正传，我们将开始接触 AI 领域的几大<strong>理论支柱</strong>，由浅入深地学习 <a href="https://yuzhouwan.com/posts/42737/#统计学">统计学</a>、<a href="https://yuzhouwan.com/posts/42737/#微积分">微积分</a>、<a href="https://yuzhouwan.com/posts/42737/#线性代数">线性代数</a>、<a href="https://yuzhouwan.com/posts/42737/#概率论">概率论</a> 等知识体系；最后，落地到实践，我们需要紧跟人工智能的<strong>技术发展前沿</strong>，对重大的突破性项目进行了解、学习，以及运用。如此，对人工智能领域进行横向分层，可以很方便地找到我们学习的突破点</p>
<p>　不过，出于文章编排的考虑，可能部分编码就要放在其他博文中了，如有不便，还望见谅（<a href="https://yuzhouwan.com/posts/43687/#Python-第三方库">Python</a>、Prolog、R、<a href="https://yuzhouwan.com/posts/27328/">Java</a>）。本文持续更新中，若有不妥之处，还请不吝赐教哈 (^o^)/</p>
<h2 id="主流思想"><a href="#主流思想" class="headerlink" title="主流思想"></a>主流思想</h2><h3 id="演绎法-amp-溯因法-amp-归纳法"><a href="#演绎法-amp-溯因法-amp-归纳法" class="headerlink" title="演绎法 &amp; 溯因法 &amp; 归纳法"></a>演绎法 &amp; 溯因法 &amp; 归纳法</h3><p><img data-src="/picture/ai/ai_cause_rule_effect.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>



<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="Occam-剃刀原理"><a href="#Occam-剃刀原理" class="headerlink" title="Occam 剃刀原理"></a>Occam 剃刀原理</h3><p>　<strong>奥卡姆剃刀</strong>（Occam´s Razor），意为<strong>简约之法</strong>，是由 14 世纪<a href="https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E5%AD%A6">逻辑学</a>家、<a href="https://zh.wikipedia.org/wiki/%E8%81%96%E6%96%B9%E6%BF%9F%E5%90%84%E6%9C%83">圣方济各会</a><a href="https://zh.wikipedia.org/wiki/%E4%BF%AE%E5%A3%AB">修士</a><a href="https://zh.wikipedia.org/wiki/%E5%A5%A5%E5%8D%A1%E5%A7%86%E7%9A%84%E5%A8%81%E5%BB%89">奥卡姆的威廉</a>提出的一个解决问题的法则，即<code>"切勿浪费较多资源，去做'用较少的资源，同样可以做好'的事情"</code>，相同思想见于郑板桥的<strong>删繁就简三秋树</strong></p>
<span id="more"></span>
<p>　在机器学习中的解释，就是 <code>在所有可能选择的模型中，能够很好地解释已知数据且十分简单的才是最好的模型</code>。并由此引入了<strong><a href="https://www.zhihu.com/question/20924039">正则化</a></strong>的理念。<a href="http://www.cnblogs.com/jianxinzhou/p/4083921.html">正则化</a>方法的思想是，处理最优化函数问题时，在目标函数中加入对参数的<strong>约束惩罚项</strong>，从而达到<strong>简化模型</strong>的目的。其中，<a href="http://blog.csdn.net/zouxy09/article/details/24971995">L0，L1 和 L2</a> <a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E6%95%B0">范数</a> 指的就是三种不同惩罚函数的形式，用数学公式来表达就是 $L_p$ = $\mid\mid\beta\mid\mid_p$ = $(\mid \beta_1 \mid ^p + \mid \beta_2 \mid^p$ $+ \ldots +$ $\mid\,\beta_n \mid^p)^{\frac1p}$</p>
<ul>
<li><strong>L0 范数</strong> 是指向量中非 0 元素的个数（如果我们用 L0 范数来规则化一个参数矩阵 W 的话，就是希望 W 的大部分元素都是 0，即让参数矩阵 W 是稀疏的）</li>
<li><strong>L1 范数</strong> 是指向量中各系数绝对值之和（又称为 <a href="http://blog.csdn.net/zouxy09/article/details/24971995">LASSO</a>）</li>
<li><strong>L2 范数</strong> 是指向量中各系数平方和的平方根（在计量经济学里面，它又被称为 <a href="http://www.ics.uci.edu/~welling/teaching/KernelsICS273B/Kernel-Ridge.pdf">岭回归</a>）</li>
</ul>
<h3 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h3><p>　<strong>大数定律</strong>又称大数法则、大数律，是描述相当多次数重复实验的结果的定律。根据这个定律知道，样本数量越多，则其平均就越趋近<a href="https://zh.wikipedia.org/wiki/%E6%9C%9F%E6%9C%9B%E5%80%BC">期望值</a></p>
<p>　在概率论中，细分为<strong>弱大数定律</strong>和<strong>强大数定律</strong></p>
<h4 id="前要定义"><a href="#前要定义" class="headerlink" title="前要定义"></a>前要定义</h4><p>　独立同分布的随机变量序列：$X_1, X_2, \dots, X_n$</p>
<p>　样本均值：$M_n = \frac{ \sum_{i=1}^nX_i }n$</p>
<p>　当样本量很大的时候，从 $X$ 抽取的样本平均值：$E[X]$（可得，$E[M_n] = \mu$）</p>
<p>　设在某一试验中，$A$ 是一个事件，满足条件 $P(A) &gt; 0$，又设 $X$ 和 $Y$ 是在同一个试验中的两个随机变量。若 $X$ 和 $Y$ 相互独立，则 $var(X + Y) =$ $var(X) + var(Y)$（可得，$var(M_n) = \frac{ \sigma^2 }n$）</p>
<h4 id="弱大数定律"><a href="#弱大数定律" class="headerlink" title="弱大数定律"></a>弱大数定律</h4><p>　设 $X_1, X_2, \dots, X_n$ 独立同分布，其公共分布的均值为 $\mu$，则对任意的 $\epsilon \gt 0$，当 $n \to +\infty$ 时，$P(\mid M_n - \mu \mid \ge \epsilon) = $ $P(\mid \frac{ \sum_{i=1}^n{X_i} }n - \mu\,\mid$ $ \ge \epsilon) \to 0$</p>
<p>　<strong>弱大数定律</strong>出给的结论是，$M_n$ 落在 $[\mu - \epsilon, \mu + \epsilon]$ 区间（即 $\mu$ 的 $\epsilon$ 邻域）内的概率会非常大（也可以表述为 “$M_n$ 收敛于 $\mu$”）。同时可以看出，随着 $n$ 值的增大，$M_n$ 落在 $\mu$ 邻域内的概率也会变大</p>
<h4 id="强大数定律"><a href="#强大数定律" class="headerlink" title="强大数定律"></a>强大数定律</h4><p>　设 $X_1, X_2, \dots, X_n$ 是均值为 $\mu$ 的独立同分布随机变量序列，则样本均值 $M_n$ 以概率 $1$ 收敛于 $\mu$，即 $P(\lim_{n \to +\infty}M_n = \mu) = 1$</p>
<p>　在无穷序列中，弱大数定律无法给出到底存在多少元素显著性偏离了 $\mu$。而利用<strong>强大数定律</strong>则可得出，$M_n$ 以概率 $1$（即几乎处处）收敛于 $\mu$ 的结论，意味着对于任何 $\epsilon \gt 0$，偏离 $\mid M_n - \mu\mid$ 超过 $\epsilon$ 的元素只会存在有限多个</p>
<h2 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h2><h3 id="什么是统计学"><a href="#什么是统计学" class="headerlink" title="什么是统计学"></a>什么是统计学</h3><p>　统计学（Statistics）是一套用以<strong>收集数据</strong>、<strong>分析数据</strong>和<strong>由数据得出结论</strong>的概念、原则和方法。  — <a href="http://www.swarthmore.edu/SocSci/cwareha1/iversen.html">Gudmund R.Iversen</a></p>
<h3 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h3><h4 id="随机性-amp-规律性"><a href="#随机性-amp-规律性" class="headerlink" title="随机性 &amp; 规律性"></a>随机性 &amp; 规律性</h4><p>　随机性，指不能预测某一特定事件的结果<br>　规律性，指从大量的收集数据中发现的模式</p>
<p>　可以说，统计就是在<strong>随机性</strong>中寻找<strong>规律性</strong></p>
<h3 id="数据集描述"><a href="#数据集描述" class="headerlink" title="数据集描述"></a>数据集描述</h3><h4 id="数据分布中心"><a href="#数据分布中心" class="headerlink" title="数据分布中心"></a>数据分布中心</h4><h5 id="均值（Mean）"><a href="#均值（Mean）" class="headerlink" title="均值（Mean）"></a><a href="https://www.zybuluo.com/spiritnotes/note/297176">均值</a>（Mean）</h5><p>　算术平均值：$\mu = \frac{ \Sigma X }N$ 或 $\bar x = \frac{ \sum_{i=1}^n X_i }n$</p>
<h5 id="中位数（Median）"><a href="#中位数（Median）" class="headerlink" title="中位数（Median）"></a>中位数（Median）</h5><p>　高偏斜分布（存在异常值）的情况下，中位数则能更好地反映数据的集中趋势</p>
<h5 id="众数（Mode）"><a href="#众数（Mode）" class="headerlink" title="众数（Mode）"></a>众数（Mode）</h5><p>　平均分布的情况下，则无法得出众数</p>
<p>　另外，在正太分布的数据集中，均值、中位数、众数均相等</p>
<h4 id="稳健统计"><a href="#稳健统计" class="headerlink" title="稳健统计"></a>稳健统计</h4><h5 id="值域（Range）"><a href="#值域（Range）" class="headerlink" title="值域（Range）"></a><a href="https://zh.wikipedia.org/zh-hans/%E5%80%BC%E5%9F%9F">值域</a>（Range）</h5><p>　函数的<strong>值域</strong>（Range）是由定义域中一切<strong>元素</strong>所能产生的所有函数值的<strong>集合</strong>（也被称为<strong>函数的像</strong>）</p>
<h5 id="四分位数（Quartile）"><a href="#四分位数（Quartile）" class="headerlink" title="四分位数（Quartile）"></a>四分位数（Quartile）</h5><p>　<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E8%AE%A1%E5%AD%A6">统计学</a>中<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E4%BD%8D%E6%95%B0">分位数</a>的一种，即把所有数值由小到大排列并分成四等份，处于三个分割点位置的数值就是四分位数</p>
<p>　数学表达式：$L_p = n \frac{ p }{100}$，其中，$p$ 为四分位的百分比值，$n$ 为样本总量</p>
<h5 id="四分位距（IQR-Interquartile-Range）"><a href="#四分位距（IQR-Interquartile-Range）" class="headerlink" title="四分位距（IQR, Interquartile Range）"></a><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E4%BD%8D%E8%B7%9D">四分位距</a>（IQR, <strong>I</strong>nter<strong>q</strong>uartile <strong>R</strong>ange）</h5><p>　第三<a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0">四分位数</a>和第一四分位数的差距，即 $Q_3 - Q_1$</p>
<p>　可以使用 $Q_1-1.5 \cdot IQR$ 和 $Q_3+1.5 \cdot IQR$ 区间，来判断离群值（Outlier）</p>
<p><img data-src="/picture/ai/ai_boxplot_vs_pdf.png" alt=""></p>
<center>（图片来源：<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83" target="_blank">wikipedia.org</a>™，已确认版权为 CC BY 2.5 协议）</center>




<h5 id="四分位差（QD-Quartile-Deviation）"><a href="#四分位差（QD-Quartile-Deviation）" class="headerlink" title="四分位差（QD, Quartile Deviation）"></a>四分位差（QD, <strong>Q</strong>uartile <strong>D</strong>eviation）</h5><p>　四分位差是指 $Q_1$ 和 $Q_3$ 的差距，即 $QD = Q_3 - Q_1$（这里单独提出来，是因为旧版教材中的公式为 $QD = \frac{ Q_3 - Q_1 }2$）</p>
<h4 id="偏差"><a href="#偏差" class="headerlink" title="偏差"></a>偏差</h4><h5 id="离均差（Deviation-from-Average）"><a href="#离均差（Deviation-from-Average）" class="headerlink" title="离均差（Deviation from Average）"></a>离均差（Deviation from Average）</h5><p>　$x_i - \bar x$</p>
<h5 id="平均偏差（Average-Deviation）"><a href="#平均偏差（Average-Deviation）" class="headerlink" title="平均偏差（Average Deviation）"></a>平均偏差（Average Deviation）</h5><p>　$\frac{ \sum_{i = 1}^n (x_i - \bar x) }n$</p>
<h5 id="标准偏差（Standard-Deviation）"><a href="#标准偏差（Standard-Deviation）" class="headerlink" title="标准偏差（Standard Deviation）"></a>标准偏差（Standard Deviation）</h5><p>　标准差的概念，由<a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%B0%94%C2%B7%E7%9A%AE%E5%B0%94%E9%80%8A">卡尔·皮尔逊</a>引入到概率统计中，是测量<strong>离散程度</strong>最为常用的方法。公式是 $\sigma = \sqrt{\frac{ \sum_{i=1}^n(x_i - \bar x)^2 }n}$ = $\sqrt{\frac{ (x_1 - \bar x)^2 + (x_2 - \bar x)^2 + \ldots + (x_i - \bar x)^2 }n}$。该方法避免了负值的出现，并且能够保证得到的结果，具备和被测量数据一样的度量单位，方便进行比对</p>
<p>　标准差还可以用于判断数据集是否属于<a href="https://zh.wikipedia.org/wiki/%E5%B8%B8%E6%85%8B%E5%88%86%E4%BD%88">正态分布</a>。若其符合正态概率分布，则如下图所示，约<strong>68.3%</strong> 的数值会分布在距离 平均值$\bar x$ 的 1个 标准差$\sigma$ 范围之内，约<strong>95.4%</strong> 的数值分布在距离 平均值$\bar x$ 的 2个 标准差$\sigma$ 范围之内，以及 约<strong>99.73%</strong> 的数值分布在距离 平均值$\bar x$ 的 3个 标准差$\sigma$ 范围之内。这一现象我们称之为 “<strong>68-95-99.7法则</strong>” 或 “<strong>经验法则</strong>”</p>
<p><img data-src="/picture/ai/ai_standard_deviation_diagram.png" alt=""></p>
<center>（图片来源：<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83" target="_blank">wikipedia.org</a>™，已确认无版权）</center>

<h5 id="贝塞尔校正"><a href="#贝塞尔校正" class="headerlink" title="贝塞尔校正"></a>贝塞尔校正</h5><p>　又因为样本抽选的数据，很容易落入平均值附近，导致低估了整体数据集的偏差。因此引入了贝塞尔校正，使得标准差的值变大，来更好地表达<strong>样本标准差</strong>（<strong>S</strong>ample <strong>S</strong>tandard <strong>D</strong>eviation）</p>
<p>　$s = \sqrt {\frac{ \sum_{i=1}^n(x_i - \bar x)^2 }{n - 1}}$</p>
<h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>　<strong><a href="https://zh.wikipedia.org/zh-hans/迴歸分析">回归分析</a></strong>（<strong>R</strong>egression <strong>A</strong>nalysis）是一种确定两种或多个变量间相互依赖的定量关系的统计分析方法</p>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>　包括未知参数 $\beta$（表示一个标量或者向量）、自变量 $X$ 和 因变量 $Y$<br>　回归模型则是将三者关联起来，表示为 $Y \approx f(X, \beta)$</p>
<h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><h5 id="分类方式"><a href="#分类方式" class="headerlink" title="分类方式"></a>分类方式</h5><p>　按照涉及的变量的多少，分为<strong>一元</strong>回归和<strong>多元</strong>回归分析<br>　按照因变量的多少，分为<strong>简单</strong>回归分析和<strong>多重</strong>回归分析<br>　按照自变量和因变量之间的关系类型，分为<strong>线性</strong>回归分析和<strong>非线性</strong>回归分析</p>
<h5 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h5><h6 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h6><p>　如果在回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为<strong>一元线性回归分析</strong></p>
<h6 id="多重线性回归"><a href="#多重线性回归" class="headerlink" title="多重线性回归"></a>多重线性回归</h6><p>　如果回归分析中包括两个或两个以上的自变量，且自变量之间存在线性相关，则称为<strong>多重线性回归分析</strong></p>
<h6 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h6><p>　<strong>多元线性回归</strong>可表示为 $Y = a + b_1 X_1 + b_2 X_2 + e$，其中 $a$ 表示截距，$b$ 表示直线的斜率，$e$ 是误差项。多元线性回归可以根据给定的预测变量 $s$ 来预测目标变量的值</p>
<h2 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="增量"><a href="#增量" class="headerlink" title="增量"></a>增量</h4><p>　点 $(x_1, y_1)$ 移动到 点 $(x_2, y_2)$，其坐标的<strong>增量</strong>为 $\Delta x = x_2 - x_1$ 和 $\Delta y = y_2 - y_1$</p>
<h4 id="平行线-amp-垂直线"><a href="#平行线-amp-垂直线" class="headerlink" title="平行线 &amp; 垂直线"></a>平行线 &amp; 垂直线</h4><p>　斜率 $m$ = $\frac{ \Delta y }{ \Delta x }$，直线 $L_1$ 和 $L_2$ 的斜率分别记作 $m_1$ 和 $m_2$<br>　如果 $m_1 = m_2$，则 $L_1$ 与 $L_2$ <strong>平行</strong>或重合，记作 $L_1 \mid \mid L_2$；如果 $m_1m_2 = -1$，则两者互相<strong>垂直</strong>，记作 $L_1$ ⊥ $L_2$</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>　<strong>函数</strong>是将一个对象转化为另一个对象的规则 $f$。函数必须要给每个有效输入指定唯一的输出。这里我们输入的集合 $x$ 称之为<strong>定义域</strong>、输出的集合 $f(x)$ 称之为<strong>值域</strong></p>
<h5 id="常用集合"><a href="#常用集合" class="headerlink" title="常用集合"></a>常用集合</h5><p>　$Z$ 整数集，$N$ 非负数集，$Q$ 有理数集</p>
<h5 id="常用函数的定义域和值域"><a href="#常用函数的定义域和值域" class="headerlink" title="常用函数的定义域和值域"></a>常用函数的定义域和值域</h5><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>定义域</th>
<th>值域</th>
<th>图形</th>
</tr>
</thead>
<tbody>
<tr>
<td>$y = \frac{ 1 }{ x }$</td>
<td>$(-\infty, +\infty)$</td>
<td>$(-\infty, 0) \,\bigcup\, (0, +\infty)$</td>
<td><img data-src="/picture/ai/ai_math_1_of_x.png" alt=""></td>
</tr>
<tr>
<td>$y = \sqrt{x}$</td>
<td>$[0, +\infty)$</td>
<td>$[0, +\infty)$</td>
<td><img data-src="/picture/ai/ai_math_sqrt_x.png" alt=""></td>
</tr>
<tr>
<td>$y = x$</td>
<td>$(-\infty, +\infty)$</td>
<td>$(-\infty, +\infty)$</td>
<td><img data-src="/picture/ai/ai_math_x.png" alt=""></td>
</tr>
<tr>
<td>$y = x^2$</td>
<td>$(-\infty, +\infty)$</td>
<td>$[0, +\infty)$</td>
<td><img data-src="/picture/ai/ai_math_x_2.png" alt=""></td>
</tr>
<tr>
<td>$y = \sin(x)$</td>
<td>$(-\infty, +\infty)$</td>
<td>$[-1, 1]$</td>
<td><img data-src="/picture/ai/ai_math_sin_x.png" alt=""></td>
</tr>
<tr>
<td>$y = \cos(x)$</td>
<td>$(-\infty, +\infty)$</td>
<td>$[-1, 1]$</td>
<td><img data-src="/picture/ai/ai_math_cos_x.png" alt=""></td>
</tr>
<tr>
<td>$y = \tan(x)$</td>
<td>$(-\frac{ \pi }{ 2 } + 2k\pi,$ $\frac{ \pi }{ 2 } + 2k\pi)$, $k \in Z$</td>
<td>$(-\infty, +\infty)$</td>
<td><img data-src="/picture/ai/ai_math_tan_x.png" alt=""></td>
</tr>
</tbody>
</table>
</div>
<center>（使用 <a href="https://www.intmath.com/functions-and-graphs/graphs-using-svg.php" target="_blank">intmath.com</a> 绘制而成）</center>




<h4 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h4><p>　对于 $y = f(x)$，如果将其逆转变换后，仍然满足 $f(x) = y$，则称新函数为 $f$ 的<strong>反函数</strong>，并记作 $f^{-1}$</p>
<h4 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h4><p>　$f(x) = h(g(x)) = h \circ g$</p>
<h4 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h4><h5 id="奇函数"><a href="#奇函数" class="headerlink" title="奇函数"></a>奇函数</h5><p>　$f(x) = -f(-x)$</p>
<h5 id="偶函数"><a href="#偶函数" class="headerlink" title="偶函数"></a>偶函数</h5><p>　$f(x) = f(-x)$</p>
<h4 id="线性函数"><a href="#线性函数" class="headerlink" title="线性函数"></a>线性函数</h4><p>　$f(x) = mx + b$</p>
<h5 id="点斜式"><a href="#点斜式" class="headerlink" title="点斜式"></a>点斜式</h5><p>　直线通过一个点 $(x_0, y_0)$，斜率为 $m$，则方程可表示为 $y - y_0 = m (x - x_0)$<br>　直线通过两个点 $(x_1, y_1)$ 和 $(x_2, y_2)$，则斜率为 $m$ = $\frac{ y_2 - y_1 }{ x_2 - x_1 }$ = $\frac{ \Delta y }{ \Delta x }$，则方程式表示为 $y - y_1$= $\frac{ \Delta y }{ \Delta x }$ $(x - x_1)$<br>　已知斜率 $m$ 和截距 $b$，可以直接求得直线方程式 $y = m(x - 0) + b = mx + b$</p>
<h4 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h4><p>　$p(x)$ = $a_nx^n + \ldots + a_2x^2 + a_1x + a_0$</p>
<h4 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h4><p>　<strong>二次函数</strong>是一个最高次为 $2$ 的多项式，表示为 $p(x) = ax^2 + bx + c$</p>
<p>　依据 $\Delta = b^2 - 4ac$ 判别式，可知：</p>
<ul>
<li>当 $\Delta \gt 0$ 时，$p(x)$ 有<strong>两个不同解</strong>，且解为 $\frac{ -b \pm \sqrt{b^2 - 4ac} }{ 2a }$；</li>
<li>当 $\Delta = 0$ 时，$p(x)$ 有两个相同的解，即<strong>只有一个解</strong>；</li>
<li>当 $\Delta \lt 0$ 时，$p(x)$ <strong>无解</strong></li>
</ul>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><h6 id="求解-3x-2-5x-7-0"><a href="#求解-3x-2-5x-7-0" class="headerlink" title="求解 $3x^2 -5x + 7 = 0$"></a>求解 $3x^2 -5x + 7 = 0$</h6><p>　因为 $\Delta = (-5)^2 - 4 \cdot 3 \cdot 7$ $= -59 \lt 0$，所有该方程无解</p>
<p>　可以将方程拆解组合，进行证明：</p>
<script type="math/tex; mode=display">
3(x^2 - \frac{ 5 }3x + \frac{ 7 }3) = 0</script><script type="math/tex; mode=display">
x^2 - \frac{ 5 }3x + \frac{ 7 }3 = 0</script><script type="math/tex; mode=display">
x^2 - \frac{ 5 }3x + \frac{ 25 }{ 36 } + \frac{ 7 }3 - \frac{ 25 }{ 36 } = 0</script><script type="math/tex; mode=display">
(x - \frac{ 5 }6)^2 + \frac{ 59 }{ 36 } = 0</script><script type="math/tex; mode=display">
(x - \frac{ 5 }6)^2 = - \frac{ 59 }{ 36 }</script><p>　可见等式左边是恒为非负数的，因此，是不可能存在 $x$ 使等式成立的，即方程无解</p>
<h4 id="有理函数"><a href="#有理函数" class="headerlink" title="有理函数"></a>有理函数</h4><p>　若 $p$ 和 $q$ 均为多项式，则形如 $\frac{ p(x) }{ q(x) }$ 的函数，我们称之为 <strong>有理函数</strong></p>
<h4 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h4><p>　$y = a^x$</p>
<h4 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h4><p>　将 指数函数 以 $y = x$ 做镜像，则得到 $y = \log_a(x)$ 指数函数</p>
<h4 id="带绝对值的函数"><a href="#带绝对值的函数" class="headerlink" title="带绝对值的函数"></a>带绝对值的函数</h4><script type="math/tex; mode=display">
f(|x|) = 
\begin{cases}
f(x), x \geq 0 \\
f(-x), x \lt 0
\end{cases}</script><h3 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h3><h4 id="分数求导"><a href="#分数求导" class="headerlink" title="分数求导"></a>分数求导</h4><p>　$f(x) = \frac{ g(x) }{ h(x) }$ 的导数为 $f^\prime(x) = \frac{ g^\prime(x)h(x)-h^\prime(x)g(x) }{ h(x)^2 }$</p>
<h4 id="复合函数求导"><a href="#复合函数求导" class="headerlink" title="复合函数求导"></a><a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99">复合函数</a>求导</h4><p>　$(f \circ g)(x)$ 的导数为 $(f \circ g)^\prime(x) = f^\prime(g(x))g^\prime(x)$</p>
<h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><h5 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h5><p>　以点 $x_0$ 为中心的任何开区间，称之为点 $x_0$ 的邻域，记做 $U(x_0)$</p>
<ul>
<li><p>$\delta$ 邻域</p>
<p>设 $\delta$ 为正数，则称开区间 $(x_0 - \delta, \, x_0 + \delta)$ 为点 $x_0$ 的 $\delta$ 邻域，记做 $U(x_0, \, \delta)$ = $\{x \mid x_0 - \delta \lt x \lt x_0 + \delta\}$。其中，点 $x_0$ 称为邻域的中心，$\delta$ 为邻域的半径</p>
</li>
<li><p>$\delta$ 去心邻域</p>
<p>$\mathring{U}(x_0, \delta)$ = $\{ x \mid 0 \lt \mid x - x_0 \mid \lt \delta \}$</p>
</li>
</ul>
<ul>
<li><p>二维 $\delta$ 邻域</p>
<p>设 $P_0(x_0, \, y_0)$ 为 $xOy$ 平面上的一个点，$\delta$ 为某个正数，与点 $P_0(x_0, \, y_0)$ 距离小于 $\delta$ 的点 $P(x, \, y)$ 的全体，称之为点 $P_0$ 的 $\delta$ 邻域，记做 $U(P_0, \delta)$ = $\{ x \mid \sqrt{(x - x_0)^2 + (y - y_0)^2} \lt \delta \}$</p>
</li>
</ul>
<h5 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h5><p>　设函数 $f(x)$ 在点 $x_0$ 的某一去心邻域内有定义，若存在常数 $A$，对于任意给定的 $\epsilon \gt 0$（无论 $\epsilon$ 有多小），总存在正数 $\delta$，使得当 $0 \lt \mid x - x_0 \mid \lt \delta$ 时，对应函数的值 $f(x)$ 都满足不等式 $\mid f(x) - A \mid \lt \epsilon$，则 $A$ 就叫做函数 $f(x)$ 当 $x \to x_0$ 的极限，记做 $\lim_{x \to x_0}f(x)=A$，或 $f(x) \to A$（当 $x \to x_0$）</p>
<p>　换一种说法是，$\lim_{x \to x_0}f(x) = A \Leftrightarrow \forall \epsilon \gt 0$，$\exists \delta \gt 0$，当 $0 \lt \mid x - x_0 \mid \lt \delta$ 时，$\mid f(x) - A \mid \lt \epsilon$</p>
<h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a><a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">行列式</a></h4><p>　<strong>行列式</strong>（<strong>D</strong>eterminant）是数学中的一个将 $n \cdot n$ 的矩阵 $A$ 映射到一个<a href="https://zh.wikipedia.org/wiki/%E7%B4%94%E9%87%8F">标量</a>的函数，记作 $det(A)$ 或 $\mid A \mid$。行列式可以看做是有向面积或体积的概念，在欧几里得空间中的推广。或者说，在 $n$ 维欧几里得空间中，行列式描述的是一个<strong>线性变换</strong>对体积所造成的影响</p>
<h4 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h4><p>　<strong>单位矩阵</strong> 是主对角线为 $1$，其余元素为 $0$ 的方形矩阵，记作 $I$ 或 $E$</p>
<p>$I_n = \begin{bmatrix} 1 &amp; 0 &amp; \cdots &amp; 0 \\ 0 &amp; 1 &amp; \cdots &amp; 0 \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; 0 &amp; \cdots &amp; 1 \\ \end{bmatrix}$</p>
<h4 id="初等矩阵"><a href="#初等矩阵" class="headerlink" title="初等矩阵"></a>初等矩阵</h4><p>　<strong>初等矩阵</strong>（又称为<strong>基本矩阵</strong>）是由一个 $n$ 阶单位矩阵 $E$，经过一次<strong>初等行列变换</strong>所得的矩阵。我们称之为 $n$ 阶初等矩阵</p>
<h4 id="增广矩阵"><a href="#增广矩阵" class="headerlink" title="增广矩阵"></a><a href="https://zh.wikipedia.org/zh-hans/%E5%A2%9E%E5%B9%BF%E7%9F%A9%E9%98%B5">增广矩阵</a></h4><p>　<strong>增广矩阵</strong>是由系数矩阵的右边，添上线性方程组等号右边的常数列 得到的矩阵<br>　方程 $AX=b$ 系数矩阵为 $A$，常数列为 $b$，则它的增广矩阵表示为 $(A \mid b)$，形式如下</p>
<script type="math/tex; mode=display">
(A \mid b) = 
\left[
\begin{array}{cc|c}
1 & 0 & 1 \\
0 & 1 & 1
\end{array}
\right]</script><p>　通过对增广矩阵进行初等行变换，可判断线性方程组是否有解，以及化简原方程组，方便求解</p>
<h3 id="实用技巧-1"><a href="#实用技巧-1" class="headerlink" title="实用技巧"></a>实用技巧</h3><h4 id="消元法"><a href="#消元法" class="headerlink" title="消元法"></a>消元法</h4><h4 id="高斯-约当（Gauss-Jordan）消元法"><a href="#高斯-约当（Gauss-Jordan）消元法" class="headerlink" title="高斯-约当（Gauss-Jordan）消元法"></a><a href="https://zh.wikipedia.org/zh-hans/%E9%AB%98%E6%96%AF-%E8%8B%A5%E7%88%BE%E7%95%B6%E6%B6%88%E5%85%83%E6%B3%95">高斯-约当</a>（Gauss-Jordan）消元法</h4><p>　直接上一个例子，会比较直观一些</p>
<script type="math/tex; mode=display">
\left[
\begin{array}{ccc|c}
3 & 7 & 1 & 1 \\
1 & 1 & -6 & 0 \\
2 & 6 & 7 & 1
\end{array}
\right]</script><script type="math/tex; mode=display">
\require{AMScd}\begin{CD}
@>{R_1 - R_2 - R_3, \, R_1 \longleftrightarrow R_3}>>
\end{CD}</script><script type="math/tex; mode=display">
\left[
\begin{array}{ccc|c}
2 & 6 & 7 & 1 \\
1 & 1 & -6 & 0 \\
0 & 0 & 0 & 0
\end{array}
\right]</script><script type="math/tex; mode=display">
\require{AMScd}\begin{CD}
@>{R_1 \longleftrightarrow R_2, \, R_2 - 2R_1, \, 1/4R_2}>>
\end{CD}</script><script type="math/tex; mode=display">
\left[
\begin{array}{ccc|c}
1 & 1 & -6 & 0 \\
0 & 1 & 19/4 & 1/4 \\
0 & 0 & 0 & 0
\end{array}
\right]</script><script type="math/tex; mode=display">
\require{AMScd}\begin{CD}
@>{R_1 - R_2}>>
\end{CD}</script><script type="math/tex; mode=display">
\left[
\begin{array}{ccc|c}
1 & 0 & -43/4 & -1/4 \\
0 & 1 & 19/4 & 1/4 \\
0 & 0 & 0 & 0
\end{array}
\right]</script><p>　化简到上三角形式方程组后，就可以一眼看出，当自由列取值为 $0$ 时，能得到一个特解：</p>
<script type="math/tex; mode=display">
\left[
\begin{matrix}
-1/4 \\
1/4 \\
0
\end{matrix}
\right]</script><h4 id="克拉默法则（Gramer´s-Rule）"><a href="#克拉默法则（Gramer´s-Rule）" class="headerlink" title="克拉默法则（Gramer´s Rule）"></a><a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E8%90%8A%E5%A7%86%E6%B3%95%E5%89%87">克拉默法则</a>（Gramer´s Rule）</h4><script type="math/tex; mode=display">
给定 \, f(x) = 
\begin{cases}
a_{11}x_1 + a_{12}x_2 = b_1 \\
a_{21}x_1 + a_{22}x_2 = b_2
\end{cases} 方程组，</script><p>　可以通过消元代入法，得到 $x_1 = \frac{ b_1a_{22} - b_2a_{12} }{a_{11}a_{22} - a_{12}a_{21}}$，$x_2 = \frac{b_2a_{11} - b_1a_{21}}{a_{11}a_{22} - a_{12}a_{21}}$，换成行列式表达式形式，则可表示为</p>
<script type="math/tex; mode=display">
x_1 = 
\frac{
  \begin{vmatrix}
  b_1 & a_{12} \\
  b_2 & a_{22}
\end{vmatrix}}
{
  \begin{vmatrix}
  a_{11} & a_{12} \\
  a_{21} & a_{22}
  \end{vmatrix}
}，
x_2 = 
\frac{
  \begin{vmatrix}
  a_{11} & b_1 \\
  b_{21} & b_2
\end{vmatrix}}
{
  \begin{vmatrix}
  a_{11} & a_{12} \\
  a_{21} & a_{22}
  \end{vmatrix}
}</script><h2 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>　将一些研究对象放在一起，形成<strong>集合</strong>，而这些对象就称为集合的元素</p>
<h3 id="概率模型"><a href="#概率模型" class="headerlink" title="概率模型"></a>概率模型</h3><p>　<strong>概率模型</strong>是对不确定现象的一种数学描述</p>
<h4 id="主要构成"><a href="#主要构成" class="headerlink" title="主要构成"></a>主要构成</h4><h5 id="样本空间"><a href="#样本空间" class="headerlink" title="样本空间"></a>样本空间</h5><p>　用 $\Omega$ 表示一个试验中所有可能结果的集合</p>
<h5 id="概率律"><a href="#概率律" class="headerlink" title="概率律"></a>概率律</h5><p>　用一个非负数 $P(A)$ 表示某一个事件 $A$ 在试验结果中出现的概率</p>
<h6 id="公理"><a href="#公理" class="headerlink" title="公理"></a>公理</h6><ul>
<li><strong>非负性</strong><br>对于一切事件 $A$，满足 $P(A) \geq 0$</li>
<li><strong>可加性</strong><br>对于 $A_1, A_2, \ldots, A_n$ 互不相交的集合，满足 $P(A_1 \bigcup A_2 \bigcup \ldots \bigcup A_n)$ = $P(A_1) + P(A_2) + \ldots + P(A_n)$</li>
<li><strong>归一化</strong><br>$P(\Omega) = 1$<br>综合推导，可得 $P(\emptyset)$ = $1- P(\Omega) + P(\emptyset)$ = $1 - P(\Omega \bigcup \emptyset)$ = $1 - P(\Omega) = 0$</li>
</ul>
<h6 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h6><ul>
<li>若 $A \subset B$，则 $P(A) \leq P(B)$</li>
<li>$P(A \bigcup B)$ = $P(A) + P(B) - P(A \bigcap B)$</li>
<li>$P(A \bigcup B)$ $\leq$ $P(A) + P(B)$</li>
<li>由上式推广，可得 $P(A_1 \bigcup A_2 \bigcup \ldots \bigcup A_n)$ $\leq \sum_{i=1}^nP(A_i)$</li>
<li>$P(A \bigcup B \bigcup C)$ = $P(A) + P(A^c \bigcap B)$ $+ P(A^c \bigcap B^c \bigcap C)$</li>
</ul>
<h2 id="技术发展史"><a href="#技术发展史" class="headerlink" title="技术发展史"></a>技术发展史</h2><h3 id="机器学习发展总图"><a href="#机器学习发展总图" class="headerlink" title="机器学习发展总图"></a>机器学习发展总图</h3><div class="note info">To be continued...</div>



<h3 id="深度学习发展总图"><a href="#深度学习发展总图" class="headerlink" title="深度学习发展总图"></a>深度学习发展总图</h3><pre class="mermaid">graph TD
start[Start] --&gt; nerve_cell(生物神经元)
nerve_cell --&gt; mp_model(MP 模型)
mp_model --&gt; weight{自主学习权重}
weight --&gt; |No| non_perceptron[参数权重需要人为设定]
weight --&gt; |Yes| perceptron(感知器)
perceptron --&gt; bp{BP 反向传播}
bp --&gt; |No| non_mlp[无法解决最简单的线性不可分问题]
bp --&gt; |Yes| mlp(多层感知器)
mlp --&gt; pre_train{预训练 + 激活函数}
pre_train --&gt; |No| no_dnn[局部最优解 + 指数梯度衰减]
pre_train --&gt; |Yes| dnn(深度神经网络)
dnn --&gt; kernal{卷积核}
kernal --&gt; |No| non_cnn[过拟合 + 运算时间成本高]
kernal --&gt; |Yes| cnn(卷积神经网络)
cnn --&gt; directed{神经元间链成有向图}
directed --&gt; |No| non_rnn[无法对事件序列建模]
directed --&gt; |Yes| rnn(递归神经网络)
rnn --&gt; cell{细胞状态}
cell --&gt; |No| non_lstm[无法捕获间隔太长的事件间关系]
cell --&gt; |Yes| lstm(长短期记忆网络)
lstm --&gt; e[End?]</pre>



<h4 id="麦卡洛克-皮茨神经元模型（McCulloch-Pitts-Neuron-Model）"><a href="#麦卡洛克-皮茨神经元模型（McCulloch-Pitts-Neuron-Model）" class="headerlink" title="麦卡洛克-皮茨神经元模型（McCulloch - Pitts Neuron Model）"></a>麦卡洛克-皮茨神经元模型（McCulloch - Pitts Neuron Model）</h4><p>　<strong>麦卡洛克-皮茨神经元模型</strong>（<strong>M</strong>cCulloch - <strong>P</strong>itts Neuron <strong>Model</strong>）是模仿生物学神经元功能的简单线性模型，由心理学家 Warren McCulloch 和 数学家 Walter Pitts 在 1943 年提出。该模型针对输入的 $x_1, x_2, \dots, x_n$，分别赋予不同的权重 $w_1, w_2, \dots, w_n$，形成 $f(x, w) = \sum_{i = 1}^nx_iw_i$ 检验函数用以模仿生物神经元的<strong>膜电位</strong>，再通过 $o_j(t + 1)$ = $f\{[\sum_{i=1}^nw_{ij}x_i(t)] - T_j\}$ 模仿在每个 $t$ 时刻<strong>神经元细胞的输出</strong>（信号空间的求和与神经元阀值 $T_j$ 差值的正负），完成分类。同时 MP 模型也存在不足之处，即权重需要人为给定，一旦权重分配不合理，将无法得出期望的分类结果</p>
<h4 id="感知器（Perceptron）"><a href="#感知器（Perceptron）" class="headerlink" title="感知器（Perceptron）"></a>感知器（<a href="https://zh.wikipedia.org/wiki/%E6%84%9F%E7%9F%A5%E5%99%A8">Perceptron</a>）</h4><p>　<strong>感知器</strong>（<strong>P</strong>erceptron）是 Frank Rosenblatt 在 1957 年就职于 Cornell 航空实验室（Cornell Aeronautical Laboratory）时所发明的一种<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">人工神经网络</a>。它可以被视为一种最简单形式的<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">前馈神经网络</a>，是一种二元<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8">线性分类器</a>。感知器，解决了 MP 模型的无法自主学习的问题，成为第一个能根据每个类别的输入样本来学习权重的模型。此外，Frank Rosenblatt 给出了相应的感知器学习算法，常用的有 感知器学习、最小二乘法和梯度下降法。譬如，感知器利用梯度下降法对损失函数进行极小化，求出可将训练数据进行线性划分的分离超平面，从而求得感知器模型。感知器也被称为 单层人工神经网络，以区别于较复杂的<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA">多层感知器</a>（<strong>M</strong>ulti<strong>l</strong>ayer <strong>P</strong>erceptron）。尽管结构简单，感知器却能学习并解决相当复杂的问题。不过，感知器存在本质上的缺陷，就是无法处理<a href="http://blog.csdn.net/puqutogether/article/details/41309745">线性不可分</a>问题</p>
<h4 id="多层感知器（MLP-Multilayer-Perceptron）"><a href="#多层感知器（MLP-Multilayer-Perceptron）" class="headerlink" title="多层感知器（MLP, Multilayer Perceptron）"></a>多层感知器（MLP, Multilayer Perceptron）</h4><p>　<strong>多层感知器</strong>（<strong>MLP</strong>, <strong>M</strong>ulti<strong>l</strong>ayer <strong>P</strong>erceptron）是一种<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">前馈神经网络</a>（Feedforward Neural Network），映射一组输入向量到一组输出向量。MLP 可以被看作是一个有向图，由多个的节点层所组成，每一层都全连接到下一层。除了输入节点，每个节点都是一个带有非线性<a href="https://zh.wikipedia.org/wiki/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0">激活函数</a>的神经元（或称处理单元）。另外，MLP 是（单层）<a href="https://zh.wikipedia.org/wiki/%E6%84%9F%E7%9F%A5%E5%99%A8">感知器</a>的推广，摆脱了早期离散传输函数的束缚，使用 激活函数（Sigmoid / Tanh / ReLU / …）模拟神经元对激励的响应，在训练算法上则使用<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95">反向传播算法</a>，解决了感知器不能对<a href="https://www.zhihu.com/question/27210162">线性不可分</a>数据进行处理的问题</p>
<h4 id="深度神经网络（DNN-Deep-Neural-Networks）"><a href="#深度神经网络（DNN-Deep-Neural-Networks）" class="headerlink" title="深度神经网络（DNN, Deep Neural Networks）"></a>深度神经网络（<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0#.E6.B7.B1.E5.BA.A6.E7.A5.9E.E7.BB.8F.E7.BD.91.E7.BB.9C">DNN</a>, Deep Neural Networks）</h4><p>　<strong>深度神经网络</strong>（<strong>DNN</strong>, <strong>D</strong>eep <strong>N</strong>eural <strong>N</strong>etworks）是一种<a href="https://zh.wikipedia.org/wiki/%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B">判别模型</a>，可以使用<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95">反向传播算法</a>进行训练。DNN 通过 “预训练” 和 “ReLU、Maxout 等激活函数” 解决了 多层感知器 中的 “局部最优解” 和 “<a href="http://www.cnblogs.com/maybe2030/p/6336896.html#_label2">梯度衰减</a>” 问题。不过，与其他神经网络模型类似，如果仅仅是简单地训练，深度神经网络可能会存在很多问题。常见的两类问题是<a href="https://zh.wikipedia.org/wiki/%E8%BF%87%E6%8B%9F%E5%90%88">过拟合</a>（Overfiting）和过长的运算时间</p>
<p>　因为增加了隐藏层，会使得模型对训练数据中较为罕见的依赖关系进行建模，所以深度神经网络很容易出现<strong>过拟合</strong>现象。对此，可以利用 <strong>稀疏</strong>（$L_1$ 正则化）或者 <strong>权重递减</strong>（$L_2$ 正则化） 等方法在训练过程中减少过拟合现象。另外，还有一种叫做丢弃法（Dropout）的正则化方法，即在训练中随机<strong>丢弃一部分隐层单元</strong>，来避免对较为罕见的依赖进行建模</p>
<p>　<strong>反向传播算法</strong>和<strong>梯度下降法</strong>由于其实现简单，并且相比其他方法，能够收敛到更好的局部最优值，因而成为神经网络训练的通行方法。但是，这些方法的计算代价很高，尤其是在训练 DNN 时，因为其规模（即层数和每层的节点数）、学习率、初始权重等众多参数都需要考虑。考虑到<strong>时间代价</strong>，想要扫描所有的参数是不可行的，因而考虑将多个训练样本组合进行 <strong>小批量训练</strong>（mini-batching），而非每次只使用一个样本进行训练，从而加速模型训练。而最显著地速度提升来自 GPU，因为矩阵和向量计算非常适合使用 GPU 实现。但使用大规模集群进行 DNN 训练仍然存在瓶颈，因而在并行化方面仍有很大的提升空间</p>
<h4 id="卷积神经网络（CNN-Convolutional-Neural-Network）"><a href="#卷积神经网络（CNN-Convolutional-Neural-Network）" class="headerlink" title="卷积神经网络（CNN, Convolutional Neural Network）"></a>卷积神经网络（CNN, Convolutional Neural Network）</h4><p>　<strong>卷积神经网络</strong>（<strong>CNN</strong>, <strong>C</strong>onvolutional <strong>N</strong>eural <strong>N</strong>etwork）是一种<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">前馈神经网络</a>，由哈弗医学院生理学家 Hubel 和 Wiesel 通过对猫视觉皮层细胞的研究，在 1962 年提出了<strong>感受野</strong>（Receptive Field）的概念，随后在 1984 年日本学者 Fukushima 基于 RF 的概念，设计出了神经感知机（Neocognitron）。其人工神经元可以响应一部分覆盖范围内的周围单元，对于图像处理和语音识别有着出色的表现</p>
<p>　卷积神经网络由一个或多个卷积层和顶端的全连通层（对应经典的神经网络）组成，同时也包括关联权重和池化层（Pooling Layer）。这一结构使得 CNN 能够利用输入数据的二维结构，也可以使用<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95">反向传播算法</a>进行训练。相比较其他的前馈神经网络，CNN 通过<strong>卷积核</strong>控制只在同一个核内的神经元进行全连接，使得需要估计的参数很少，从而在根本上解决了 DNN 的<strong>参数膨胀</strong>的问题。但是，CNN 仍然存在无法对时间序列进行建模的缺陷</p>
<h4 id="递归神经网络（RNN-Recurrent-Neural-Networks）"><a href="#递归神经网络（RNN-Recurrent-Neural-Networks）" class="headerlink" title="递归神经网络（RNN, Recurrent Neural Networks）"></a>递归神经网络（<a href="https://zh.wikipedia.org/zh-hans/%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">RNN</a>, Recurrent Neural Networks）</h4><p>　<strong>递归神经网络</strong>（<strong>RNN</strong>, <strong>R</strong>ecurrent <strong>N</strong>eural <strong>N</strong>etworks）是两种<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">人工神经网络</a>的总称。一种是<strong>时间递归神经网络</strong>（Recurrent Neural Network），另一种是<strong>结构递归神经网络</strong>（Recursive Neural Network）。前者的神经元间连接构成<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E5%90%91%E5%9B%BE">有向图</a>，而后者利用相似的 神经网络结构 递归构造更为复杂的深度网络。RNN 一般指代 时间递归神经网络。单纯递归神经网络因为无法处理随着递归，权重指数级爆炸或消失的问题（Vanishing Gradient Problem），所以难以捕捉长期时间的关联；而结合不同变种的 <strong>LSTM</strong> 网络 可以很好解决这个问题</p>
<h4 id="长短期记忆网络（LSTM-Long-Short-Term-Memory-Networks）"><a href="#长短期记忆网络（LSTM-Long-Short-Term-Memory-Networks）" class="headerlink" title="长短期记忆网络（LSTM, Long Short Term Memory Networks）"></a>长短期记忆网络（<a href="https://zh.wikipedia.org/wiki/%E9%95%B7%E7%9F%AD%E6%9C%9F%E8%A8%98%E6%86%B6">LSTM</a>, <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Long Short Term Memory Networks</a>）</h4><p>　<strong>长短期记忆</strong>（<strong>LSTM</strong>, <strong>L</strong>ong <strong>S</strong>hort <strong>T</strong>erm <strong>M</strong>emory <strong>N</strong>etworks）是 <a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">时间递归神经网络</a>（RNN） 的一种，论文首次发表于 1997 年。由于巧妙的设计结构，LSTM 适合于处理和预测<a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97">时间序列</a>中间隔和延迟非常长的重要事件。因为 时间递归神经网络 和 <a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">前馈神经网络</a>（Feedforward Neural Network）接受较特定结构的输入不同，RNN 将状态（Cell State） 在自身网络中循环传递，使得 LSTM 可以接受更广泛的<a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97">时间序列</a>结构的输入，进而更好地描述动态时间行为</p>
<p>　一般的，LSTM 的表现会比 <a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">时间递归神经网络</a>（RNN）及<a href="https://zh.wikipedia.org/wiki/%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8B">隐马尔科夫模型</a>（HMM）更好，比如用在不分段连续<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB">手写识别</a>上。在 2009 年，用 LSTM 构建的人工神经网络模型就赢过了 ICDAR 手写识别比赛冠军。同时，LSTM 还普遍应用于自主<a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB">语音识别</a>，2013 年运用 <a href="https://en.wikipedia.org/wiki/TIMIT">TIMIT</a> 自然演讲数据库达成 17.7% 错误率的纪录。而作为<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E7%BA%BF%E6%80%A7">非线性</a>模型，LSTM 又可当作复杂的非线性单元用于构造更庞大的<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0">深度神经网络</a></p>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>　其实将机器学习和深度学习分为两个章节来讲，会容易让人产生错觉，误以为机器学习和深度学习是两个不相干的领域。实际上，后者只是前者的一个子集。针对两者关系，更详细的描述可以参见后面 “<a href="https://yuzhouwan.com/posts/42737/#AI-到底是什么">AI 到底是什么</a>” 部分</p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="分类与回归"><a href="#分类与回归" class="headerlink" title="分类与回归"></a>分类与回归</h4><p>　机器学习任务中，预测值为<strong>离散</strong>类型的，则称该任务为<strong>分类</strong>任务（Classification）；反之，预测值为<strong>连续</strong>类型的，则称该任务为<strong>回归</strong>任务（Regression）</p>
<h3 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a><a href="https://zh.wikipedia.org/wiki/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86">贝叶斯定理</a></h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><script type="math/tex; mode=display">P(B \mid A) = \frac{P(B)\,P(A \mid B)}{P(A)}</script><p>　其中，$P(A \mid B)$ 是在 $B$ 发生的情况下 $A$ 发生的可能性，称为 $A$ 的<a href="https://zh.wikipedia.org/wiki/%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87">后验概率</a>。相应的，$P(B \mid A)$ 则称为 $B$ 后验概率；$P(A)$ 是不考虑任何 $B$ 方面的因素下 $A$ 发生的可能性，称为 $A$ 的<a href="https://zh.wikipedia.org/wiki/%E5%85%88%E9%AA%8C%E6%A6%82%E7%8E%87">先验概率</a>（或<a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A6%82%E7%8E%87">边缘概率</a>）。相应的，$P(B)$ 则称为 $B$ 的先验概率</p>
<h4 id="种类-1"><a href="#种类-1" class="headerlink" title="种类"></a>种类</h4><h5 id="特征独立性"><a href="#特征独立性" class="headerlink" title="特征独立性"></a>特征独立性</h5><p>　按照特征之间<strong>独立性</strong>的强弱，可以分为 <a href="https://zhuanlan.zhihu.com/p/25097242">朴素贝叶斯</a>、半朴素贝叶斯、（一般的）贝叶斯 等</p>
<h5 id="分布情况"><a href="#分布情况" class="headerlink" title="分布情况"></a>分布情况</h5><p>　按照属性和特征的<strong>分布</strong>情况，又可以分为 高斯贝叶斯、多项式贝叶斯、伯努利贝叶斯 等</p>
<h5 id="离散程度"><a href="#离散程度" class="headerlink" title="离散程度"></a>离散程度</h5><p>　按照训练集的<strong>离散</strong>程度，还可以分为 离散型贝叶斯、连续型贝叶斯、混合型贝叶斯 等</p>
<h4 id="编码实战"><a href="#编码实战" class="headerlink" title="编码实战"></a>编码实战</h4><p>　The set <code>A</code> contains 30 <code>a</code> and 10 <code>b</code>, and the set <code>B</code> contains 20 <code>a</code> and 20 <code>b</code>, then what is the value of <code>P(A|a)</code>?</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">situations = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">priori_probability</span>(<span class="params">situation, probability</span>):</span></span><br><span class="line">    situations[situation] = probability  <span class="comment"># P(A), P(B)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">posterior_probability</span>(<span class="params">situation, probability</span>):</span></span><br><span class="line">    old_prob = situations[situation]</span><br><span class="line">    situations[situation] = old_prob * probability  <span class="comment"># P(A)P(a|A), P(B)P(a|B)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> situation <span class="keyword">in</span> situations.values():</span><br><span class="line">        count += situation  <span class="comment"># P(A)P(a|A) + P(B)P(a|B)</span></span><br><span class="line">    <span class="keyword">for</span> situation, probability <span class="keyword">in</span> situations.items():</span><br><span class="line">        <span class="comment"># P(A)P(a|A)/(P(A)P(a|A) + P(B)P(a|B)), P(B)P(a|B)/(P(A)P(a|A) + P(B)P(a|B))</span></span><br><span class="line">        situations[situation] = situations[situation] / count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prob</span>(<span class="params">hypothis</span>):</span></span><br><span class="line">    <span class="keyword">return</span> situations[hypothis]  <span class="comment"># P(A|a), P(B|a)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">priori_probability(<span class="string">'A'</span>, <span class="number">0.5</span>)  <span class="comment"># P(A)=1/2</span></span><br><span class="line">priori_probability(<span class="string">'B'</span>, <span class="number">0.5</span>)  <span class="comment"># P(B)=1/2</span></span><br><span class="line"></span><br><span class="line">posterior_probability(<span class="string">'A'</span>, <span class="number">0.75</span>)  <span class="comment"># P(a|A)=3/4</span></span><br><span class="line">posterior_probability(<span class="string">'B'</span>, <span class="number">0.5</span>)   <span class="comment"># P(a|B)=1/2</span></span><br><span class="line"></span><br><span class="line">normalize()</span><br><span class="line">prob = prob(<span class="string">'A'</span>)  <span class="comment"># P(A|a)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The probability of getting `a` that belongs to set `A`: %s'</span> % prob)</span><br><span class="line"><span class="comment"># P(a|A): 从 A 中获取 a</span></span><br><span class="line"><span class="comment"># P(A|a): 获取 a，并且 a 恰巧是属于 A 的</span></span><br><span class="line"><span class="comment"># 这两个描述的场景完全不同，对应的概率也因而不同</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>　当存在多个特征变量时，表达式可扩展为</p>
<script type="math/tex; mode=display">P(C \mid F_1,\dots,F_n) = \frac{P(C) \, P(F_1,\dots,F_n \mid C)}{P(F_1,\dots,F_n)} = \frac{1}{Z} P(C)\prod_{i=1}^n P(F_i \mid C)</script><p>　其中，$\frac{1}{Z}$ 是一个只与 $F_i$ 相关的缩放因子，且当特征变量的值固定时，$\frac{1}{Z}$ 为常量</p>
<h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><h3 id="深度网络概要"><a href="#深度网络概要" class="headerlink" title="深度网络概要"></a>深度网络概要</h3><h4 id="激活函数（Activation-Function）"><a href="#激活函数（Activation-Function）" class="headerlink" title="激活函数（Activation Function）"></a><a href="https://en.wikipedia.org/wiki/Activation_function">激活函数</a>（Activation Function）</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>　<strong>激活函数</strong> 就是在神经网络的神经元上运行的函数，负责将神经元的输入映射到输出端。主要解决线性不可分问题，如 <a href="https://www.zhihu.com/question/22334626">XOR 异或</a> 等</p>
<h5 id="种类-2"><a href="#种类-2" class="headerlink" title="种类"></a>种类</h5><h6 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h6><p>　<strong>Sigmoid</strong> 激活函数的表达式为 $f(x)$ = $\frac{e^x}{e^x + 1}$ = $\frac{1}{1 + e^{-x}}$</p>
<p><img data-src="/picture/ai/ai_sigmoid.png" alt=""></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/Sigmoid_function" target="_blank">wikipedia.org</a>，已确认版权为 CC BY-SA 3.0 协议）</center>



<h6 id="TanHyperbolic（Tanh）"><a href="#TanHyperbolic（Tanh）" class="headerlink" title="TanHyperbolic（Tanh）"></a>TanHyperbolic（Tanh）</h6><p>　<strong>Tanh</strong> 激活函数的表达式为 $f(x)$ = $\frac{e^x - e^{-x}}{e^x + e^{-x}}$，属于<a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0">双曲</a>正切函数，如下图表示</p>
<p><img data-src="/picture/ai/ai_tanh.png" alt=""></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/Hyperbolic_function" target="_blank">wikipedia.org</a>，已确认无版权）</center>



<h6 id="ReLU-amp-Softplus"><a href="#ReLU-amp-Softplus" class="headerlink" title="ReLU &amp; Softplus"></a>ReLU &amp; Softplus</h6><p>　<strong>ReLU</strong> 激活函数表达式为 $f(x)$ = $max(0, x)$</p>
<p>　<strong>Softplus</strong> 激活函数表达式为 $f(x)$ = $\log(1+e^x)$</p>
<p><img data-src="/picture/ai/ai_relu.png" alt=""></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)" target="_blank">wikipedia.org</a>，已确认版权为 CC0 1.0 协议）</center>



<h6 id="LReLU-amp-PReLU-amp-RReLU"><a href="#LReLU-amp-PReLU-amp-RReLU" class="headerlink" title="LReLU &amp; PReLU &amp; RReLU"></a>LReLU &amp; PReLU &amp; RReLU</h6><p><img data-src="/picture/ai/ai_relu_prelu_rrelu.png" alt=""></p>
<center>（图片来源：<a href="https://stats.stackexchange.com/questions/115258/comprehensive-list-of-activation-functions-in-neural-networks-with-pros-cons" target="_blank">stackexchange.com</a>，已确认版权为 CC BY-SA 3.0 协议）</center>



<h6 id="Maxout"><a href="#Maxout" class="headerlink" title="Maxout"></a><a href="https://arxiv.org/pdf/1302.4389.pdf">Maxout</a></h6><p>　<strong>Maxout</strong> 激活函数表达式为 $f(x)$ = $max_{j\in[1, k]}z_{ij}$，其中，$x \in R$，$z_{ij}$ = $x^TW_{\dots ij} + b_{ij}$，$W \in R^{d \cdot m \cdot k}$，$b \in R^{m \cdot k}$</p>
<h6 id="Swish"><a href="#Swish" class="headerlink" title="Swish"></a><a href="https://arxiv.org/pdf/1710.05941.pdf">Swish</a></h6><p>　<strong>Swish</strong> 激活函数表达式为 $f(x)$ = $x \cdot sigmoid(x)$</p>
<h4 id="代价函数（Cost-Function）"><a href="#代价函数（Cost-Function）" class="headerlink" title="代价函数（Cost Function）"></a>代价函数（Cost Function）</h4><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>　<strong>代价函数</strong>（又称为 <strong>损失函数</strong> 或 <strong>成本函数</strong>）用来估量模型预测值 $f(x)$ 与 真实值 $Y$ 的偏差程度，通常表示为 $L(Y, f(x))$。代价函数的值越小，说明模型的鲁棒性越好。在特定的领域中，代价函数又会被称为 <a href="https://en.wikipedia.org/wiki/Reward_function">回报函数</a>，<a href="https://en.wikipedia.org/wiki/Profit_function">利润函数</a>，<a href="https://en.wikipedia.org/wiki/Utility_function">效用函数</a>，<a href="https://en.wikipedia.org/wiki/Fitness_function">适应度函数</a> 等</p>
<h5 id="种类-3"><a href="#种类-3" class="headerlink" title="种类"></a>种类</h5><h6 id="二次代价函数（Quadratic-Cost）"><a href="#二次代价函数（Quadratic-Cost）" class="headerlink" title="二次代价函数（Quadratic Cost）"></a>二次代价函数（Quadratic Cost）</h6><p>　<strong>二次代价函数</strong>表达式为 $C$ = $\frac{1}{2n}\sum\mid\mid y(x)$ - $a^L(x)\mid\mid^2$，其中 $x$ 代表样本，$y$ 代表实际值，$a$ 代表输出值，$n$ 代表样本的总量</p>
<p>　当 $n = 1$ 时，样本集中只有一个样本，则二次代价函数可表示为 $C = \frac{1}{2}(((y - a)^1)^{\frac{1}1})^2$ = $\frac{(y - a)^2}{2}$，其中信号总量表示为 $z = \sum{W_jX_j} + b$, 激活函数表示为 $a = \sigma(z)$，则 $C = \frac{(y - \sigma(\sum{W_jX_j} + b))^2}{2}$。此时，我们对 $C$ 分别求 权重值 $w$ 和 偏置量 $b$ 的偏导，则得到 $\frac{\partial C}{\partial w}$ = $(a - y)\sigma^\prime(z) x$ 和 $\frac{\partial C}{\partial b}$ = $(a - y)\sigma^\prime(z)$。由此可见，$w$ 和 $b$ 的梯度和 $\sigma$ 的梯度成正比，$\sigma$ 的梯度越大，$w$ 和 $b$ 的调整速度越快，训练收敛便越快（推导过程相对比较简单，只用到了 <a href="https://zh.wikipedia.org/wiki/%E5%BA%A6%E9%87%8F">度量空间求向量距离</a> 和 <a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99">复合函数求偏导</a>）</p>
<h6 id="交叉熵（Cross-Entropy）"><a href="#交叉熵（Cross-Entropy）" class="headerlink" title="交叉熵（Cross Entropy）"></a>交叉熵（Cross Entropy）</h6><p>　<strong>交叉熵代价函数</strong>表达式为 $C = -\frac{1}{n}\sum_{x=1}^{n}[y\ln a + (1 - y)\ln(1 - a)]$，其中 $x$ 代表样本，$y$ 代表实际值，$a$ 代表输出值，$n$ 代表样本的总量</p>
<p>　和二次代价函数一样，不改变其激活函数，信号总量表示为 $z = \sum{W_jX_j} + b$, 激活函数表示为 $a = \sigma(z)$，则 $\sigma^\prime(z) = \sigma(x)(1 - \sigma(z))$。再次对 $C$ 求 $w$ 和 $b$ 的偏导分别为 $\frac{\partial C}{\partial w_j} = \frac{1}n\sum_{x=1}^nx_j(\sigma(z)-y)$ 和 $\frac{\partial C}{\partial b} = \frac{1}n\sum_{x=1}^n(\sigma(z) - y)$。由此可见，$w$ 和 $b$ 的调整与 $\sigma^\prime(z)$ 无关，并且，当 $\sigma(z) - y$ 预测值与实际值误差越大，$C$ 的梯度（求导）也就越大，训练的收敛速度也就越大。因此，$sigmoid$ 此类 $S$ 形激活函数，则不适合使用上文中介绍的二次代价函数；不过如果激活函数是线性的，则可能二次代价函数的表现更佳</p>
<h6 id="对数似然代价函数（Log-likelihood-Cost）"><a href="#对数似然代价函数（Log-likelihood-Cost）" class="headerlink" title="对数似然代价函数（Log-likelihood Cost）"></a>对数似然代价函数（Log-likelihood Cost）</h6><p>　<strong>对数似然代价函数</strong>常用于 <a href="http://blog.csdn.net/u014313009/article/details/51045303">Softmax</a> 归一化指数函数，可以有效地解决学习速度变慢的问题；但是，如果输出层神经元是 <a href="https://hit-scir.gitbooks.io/neural-networks-and-deep-learning-zh_cn/content/chap1/c1s2.html">Sigmoid</a>，则建议采用交叉熵代价函数</p>
<h4 id="优化器（Optimizer）"><a href="#优化器（Optimizer）" class="headerlink" title="优化器（Optimizer）"></a>优化器（Optimizer）</h4><p>　<a href="http://en.wikipedia.org/wiki/Stochastic_gradient_descent">SGD</a>, <a href="http://www.jmlr.org/proceedings/papers/v28/sutskever13.pdf">Momentum</a>, <a href="http://books.google.com.tr/books?id=2-ElBQAAQBAJ&amp;printsec=frontcover&amp;source=gbs_ge_summary_r&amp;cad=0#v=onepage&amp;q&amp;f=false">NAG</a>, <a href="http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf">Adagrad</a>, <a href="http://arxiv.org/abs/1212.5701">Adadelta</a>, <a href="https://class.coursera.org/neuralnets-2012-001/lecture/67">RMSprop</a></p>
<p><img data-src="/picture/ai/ai_noisy_moons.gif" alt=""></p>
<p><img data-src="/picture/ai/ai_beale_function.gif" alt=""></p>
<p><img data-src="/picture/ai/ai_long_valley.gif" alt=""></p>
<p><img data-src="/picture/ai/ai_saddle_point.gif" alt=""></p>
<center>（图片来源：<a href="http://www.denizyuret.com/2015/03/alec-radfords-animations-for.html" target="_blank">denizyuret.com</a>，已询问作者）</center>




<h3 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h3><h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><h4 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h4><h5 id="常见类型-1"><a href="#常见类型-1" class="headerlink" title="常见类型"></a>常见类型</h5><h6 id="Max-Pooling"><a href="#Max-Pooling" class="headerlink" title="Max Pooling"></a>Max Pooling</h6><p><img data-src="/picture/ai/ai_max_pooling.png" alt=""></p>
<center>（图片来源：<a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling" target="_blank">wikipedia.org</a>，已确认版权为 CC BY-SA 4.0 协议）</center>


<h6 id="Mean-Pooling"><a href="#Mean-Pooling" class="headerlink" title="Mean Pooling"></a>Mean Pooling</h6><h6 id="L2-norm-pooling"><a href="#L2-norm-pooling" class="headerlink" title="L2-norm pooling"></a>L2-norm pooling</h6><h6 id="Down-Pooling"><a href="#Down-Pooling" class="headerlink" title="Down Pooling"></a><a href="http://www.cnblogs.com/wangduo/p/6762914.html">Down Pooling</a></h6><h4 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h4><h5 id="Same-Padding"><a href="#Same-Padding" class="headerlink" title="Same Padding"></a>Same Padding</h5><p>　给采样平面外部补 $0$，使得卷积窗口采样之后，可以得到一个与被采样平面，大小一样的结果平面</p>
<h5 id="Valid-Padding"><a href="#Valid-Padding" class="headerlink" title="Valid Padding"></a>Valid Padding</h5><p>　不会超出采样平面，卷积窗口采样之后，会到得到一个比原来平面小的结果平面</p>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><h3 id="Tensorflow-Tensorflow"><a href="#Tensorflow-Tensorflow" class="headerlink" title="Tensorflow / Tensorflow"></a><a href="https://github.com/tensorflow">Tensorflow</a> / <strong><a href="https://github.com/tensorflow/tensorflow">Tensorflow</a></strong></h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>　<strong>TensorFlow</strong>™ 是一个端到端开源机器学习平台。它拥有一个全面而灵活的生态系统，其中包含各种工具、库和社区资源，可助力研究人员推动先进机器学习技术的发展，并使开发者能够轻松地构建和部署由机器学习提供支持的应用。  — <a href="https://www.tensorflow.org/">tensorflow.org</a></p>
<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul>
<li>高度的灵活性</li>
<li>可移植性</li>
<li>极大地提高了科研产出率</li>
<li>自动求微分</li>
<li>多语言支持（<a href="https://yuzhouwan.com/posts/43687/">Python</a> / C++ / <a href="https://yuzhouwan.com/posts/27328/">Java</a> / Golang）</li>
<li>最大化硬件的性能</li>
</ul>
<h5 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h5><ul>
<li>使用 <strong>图</strong>（Graph）来表示计算任务</li>
<li>在被称之为 <strong>会话</strong>（Session）的<strong>上下文</strong>（Context）中执行图</li>
<li>使用 <strong>Tensor</strong> 表示数据</li>
<li>通过 <strong>变量</strong>（Variable）维护状态</li>
<li>使用 <code>feed</code> 和 <code>fetch</code> 可以为任意的<strong>操作</strong>（Arbitrary Operation）赋值或从中获取数据</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><p>　需要注意的是，如果是在 Windows 环境下，只能<a href="https://www.python.org/downloads/">安装</a> <code>Python3.5+</code> 版本。详细安装步骤见《<a href="https://yuzhouwan.com/posts/43687/#环境部署">Python - 环境部署</a>》</p>
<h5 id="Anaconda3"><a href="#Anaconda3" class="headerlink" title="Anaconda3"></a>Anaconda3</h5><p>　下载地址：<a href="https://repo.continuum.io/archive/">Download Page</a></p>
<p>　启动程序的快捷链接，都自动创建在了 <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Anaconda3 (64-bit)</code> 目录下</p>
<p>　在运行 <code>Jupyter</code> 之前，需要简单设置下，文件的存放路径（如果只想使用 Jupyter，相关安装步骤见《<a href="https://yuzhouwan.com/posts/43687/#科学分析工具">Python - 科学分析工具</a>》）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ jupyter notebook --generate-config</span><br><span class="line">  Writing default config to: C:\Users\Benedict Jin\.jupyter\jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">$ vim jupyter_notebook_config.py</span><br><span class="line">  <span class="comment">## The directory to use for notebooks and kernels.</span></span><br><span class="line">  c.NotebookApp.notebook_dir = <span class="string">'E:\Jupyter\TensorFlow'</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a><a href="https://www.tensorflow.org/install/">TensorFlow</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## 安装</span></span><br><span class="line"><span class="comment"># cpu</span></span><br><span class="line">$ pip3 install tensorflow</span><br><span class="line"><span class="comment"># gpu</span></span><br><span class="line">$ pip3 install tensorflow-gpu</span><br><span class="line"></span><br><span class="line"><span class="comment">## 升级</span></span><br><span class="line"><span class="comment"># cpu</span></span><br><span class="line">$ pip3 install --upgrade tensorflow</span><br><span class="line"><span class="comment"># gpu</span></span><br><span class="line">$ pip3 install --upgrade tensorflow-gpu</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试</span></span><br><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt; hello = tf.constant(<span class="string">'Hello, TensorFlow!'</span>)</span><br><span class="line">&gt;&gt;&gt; sess = tf.Session()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(sess.run(hello))</span><br><span class="line">  b<span class="string">'Hello, TensorFlow!'</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 当然还有其他的方式，可以帮助我们更方便地使用这些科学分析库，包括 <a href="http://winpython.sourceforge.net/">WinPython</a>、<a href="https://www.enthought.com/product/canopy/">Enthought Canopy</a> etc.</p>
<h4 id="编程实战"><a href="#编程实战" class="headerlink" title="编程实战"></a>编程实战</h4><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><h6 id="加减"><a href="#加减" class="headerlink" title="加减"></a>加减</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建变量</span></span><br><span class="line">a = tf.Variable([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">b = tf.Variable([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># sub/add 两个 operation</span></span><br><span class="line">sub = tf.subtract(a, b)</span><br><span class="line">add = tf.add(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化变量</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 Session</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="built_in">print</span>(sess.run(sub))</span><br><span class="line">    <span class="built_in">print</span>(sess.run(add))</span><br><span class="line"></span><br><span class="line">  <span class="comment">#[1 -1]</span></span><br><span class="line">  <span class="comment">#[1 1]</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="累计"><a href="#累计" class="headerlink" title="累计"></a>累计</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Counter</span></span><br><span class="line">counter = tf.Variable(<span class="number">0</span>, name = <span class="string">"counter"</span>)</span><br><span class="line">add_one = tf.add(counter, <span class="number">1</span>)</span><br><span class="line">assign = tf.assign(counter, add_one)</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        sess.run(assign)</span><br><span class="line">        <span class="built_in">print</span>(sess.run(counter))</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  <span class="number">3</span></span><br><span class="line">  <span class="number">4</span></span><br><span class="line">  <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/Variable.ipynb">here</a>.</p>
<h5 id="矩阵积"><a href="#矩阵积" class="headerlink" title="矩阵积"></a>矩阵积</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行两列</span></span><br><span class="line">matrix1 = tf.constant([[<span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 两行一列</span></span><br><span class="line">matrix2 = tf.constant([[<span class="number">1</span>], [<span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 矩阵相乘</span></span><br><span class="line">matmul = tf.matmul(matrix1, matrix2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果（Tensor 而不是结果 2）</span></span><br><span class="line"><span class="built_in">print</span>(matmul)</span><br><span class="line"></span><br><span class="line">  Tensor(<span class="string">"MatMul:0"</span>, shape = (<span class="number">1</span>, <span class="number">1</span>), dtype = int32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义会话</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 真正开始执行</span></span><br><span class="line"><span class="built_in">print</span>(sess.run(matmul))</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写成 `with ... as ...`，则可以保证 Session 会自动关闭</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(matmul))</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/Matrix.ipynb">here</a>.</p>
<h5 id="Fetch-amp-Feed"><a href="#Fetch-amp-Feed" class="headerlink" title="Fetch &amp; Feed"></a>Fetch &amp; Feed</h5><h6 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Fetch</span></span><br><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">c = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">multiply = tf.multiply(a, b)</span><br><span class="line">add = tf.add(matmul, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fetch 可以运行多个 Op</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run([add, multiply]))</span><br><span class="line"></span><br><span class="line">  <span class="comment">#[5.0, 2.0]</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Feed</span></span><br><span class="line">ph1 = tf.placeholder(tf.float32)</span><br><span class="line">ph2 = tf.placeholder(tf.float32)</span><br><span class="line">m = tf.multiply(ph1, ph2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在真正执行的时候，再将数据以字典的形式传入</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(m, feed_dict={ph1: [<span class="number">1.0</span>], ph2: [<span class="number">2.0</span>]}))</span><br><span class="line"></span><br><span class="line">  <span class="comment">#[ 2.]</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/Feed%20%26%20Fetch.ipynb">here</a>.</p>
<h5 id="二次代价函数-amp-梯度下降"><a href="#二次代价函数-amp-梯度下降" class="headerlink" title="二次代价函数 &amp; 梯度下降"></a>二次代价函数 &amp; 梯度下降</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x_data = np.random.rand(<span class="number">100</span>)</span><br><span class="line">y_data = x_data * <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性模型的斜率 &amp; 偏置量</span></span><br><span class="line">k = tf.Variable(<span class="number">0.</span>)</span><br><span class="line">b = tf.Variable(<span class="number">0.</span>)</span><br><span class="line">y = k * x_data + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二次代价函数</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y_data - y))</span><br><span class="line"><span class="comment"># 梯度下降</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 最小化代价函数</span></span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性模型中，k、b 作为变量，会在梯度下降法的作用下不断变化，以使得 loss 函数越来越小</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">501</span>):</span><br><span class="line">        sess.run(train)</span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Step: "</span>, step, <span class="string">"[k, b]"</span>, sess.run([k, b]))</span><br><span class="line"></span><br><span class="line">  Step:  <span class="number">0</span> [k, b] [<span class="number">0.054201454</span>, <span class="number">0.10031855</span>]</span><br><span class="line">  Step:  <span class="number">100</span> [k, b] [<span class="number">0.10048652</span>, <span class="number">0.19973609</span>]</span><br><span class="line">  Step:  <span class="number">200</span> [k, b] [<span class="number">0.10003704</span>, <span class="number">0.1999799</span>]</span><br><span class="line">  Step:  <span class="number">300</span> [k, b] [<span class="number">0.10000283</span>, <span class="number">0.19999847</span>]</span><br><span class="line">  Step:  <span class="number">400</span> [k, b] [<span class="number">0.10000023</span>, <span class="number">0.19999987</span>]</span><br><span class="line">  Step:  <span class="number">500</span> [k, b] [<span class="number">0.10000023</span>, <span class="number">0.19999987</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/Loss%20Function%20%26%20GD.ipynb">here</a>.</p>
<h5 id="非线性回归"><a href="#非线性回归" class="headerlink" title="非线性回归"></a>非线性回归</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 [-0.5, 0.5] 区间内生成随机数</span></span><br><span class="line">x_data = np.linspace(-<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">100</span>)[:, np.newaxis]</span><br><span class="line"><span class="comment"># 在 100 个随机数基础上，增加噪音</span></span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.02</span>, x_data.shape)</span><br><span class="line">y_data = np.square(x_data) + noise</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">1</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络 中间层</span></span><br><span class="line">weight_L1 = tf.Variable(tf.random_normal([<span class="number">1</span>, <span class="number">10</span>]))</span><br><span class="line">biase_L1 = tf.Variable(tf.zeros([<span class="number">1</span>, <span class="number">10</span>]))</span><br><span class="line">w_plus_b_L1 = tf.matmul(x, weight_L1) + biase_L1</span><br><span class="line"><span class="comment"># 激活函数</span></span><br><span class="line">L1 = tf.nn.tanh(w_plus_b_L1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络 输出层</span></span><br><span class="line">wegith_L2 = tf.Variable(tf.random_normal([<span class="number">10</span>, <span class="number">1</span>]))</span><br><span class="line">biase_L2 = tf.Variable(tf.zeros([<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">w_plus_b_L2 = tf.matmul(L1, wegith_L2) + biase_L2</span><br><span class="line">prediction = tf.nn.tanh(w_plus_b_L2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loss Function</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y - prediction))</span><br><span class="line">train = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>):</span><br><span class="line">        sess.run(train, feed_dict = {x: x_data, y: y_data})</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用训练好的模式进行预测</span></span><br><span class="line">    prediction_result = sess.run(prediction, feed_dict = {x: x_data})</span><br><span class="line"></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.scatter(x_data, y_data)</span><br><span class="line">    plt.plot(x_data, prediction_result, <span class="string">'r-'</span>, lw = <span class="number">5</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/ai/ai_linear_regression.png" alt=""></p>
<center>（使用 <a href="https://yuzhouwan.com/posts/43687/#Matplotlib" target="_blank">Matplotlib</a> 绘制而成）</center>

<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/Non%20Linear%20Regression.ipynb">here</a>.</p>
<h5 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Download MNIST datasource</span></span><br><span class="line"><span class="comment"># 6w 个 28*28 个像素的手写数字图片集</span></span><br><span class="line"><span class="comment"># 用 [60000, 784] 的张量表示 [图片索引，图片像素点索引]</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># `one-hot vectors`：向量中只有一个数据为 1，其余维度只能为 0</span></span><br><span class="line"><span class="comment"># 转化为 [60000, 10] 的张量表示 [图片索引，图片表示的数值]</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 28 * 28 = 784 的占位符</span></span><br><span class="line"><span class="comment"># None 表示可能是任何数值</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line">z = tf.placeholder(tf.float32)                        <span class="comment"># 用于 drop_out 操作时的依据（0.8：80% 的神经元在工作）</span></span><br><span class="line">lr = tf.Variable(<span class="number">0.001</span>, dtype = tf.float32)           <span class="comment"># 用于不断递减的学习率，使得梯度下降到最低点时，能更好地命中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 权重值（截断的随机正太分布）和 偏置量（0.1）</span></span><br><span class="line">W1 = tf.Variable(tf.truncated_normal([<span class="number">784</span>, <span class="number">600</span>], stddev = <span class="number">0.1</span>))</span><br><span class="line">b1 = tf.Variable(tf.zeros([<span class="number">600</span>]) + <span class="number">0.1</span>)</span><br><span class="line">L1 = tf.nn.tanh(tf.matmul(x, W1) + b1)</span><br><span class="line">L1_drop = tf.nn.dropout(L1, z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏层</span></span><br><span class="line">W2 = tf.Variable(tf.truncated_normal([<span class="number">600</span>, <span class="number">400</span>], stddev = <span class="number">0.1</span>))</span><br><span class="line">b2 = tf.Variable(tf.zeros([<span class="number">400</span>]) + <span class="number">0.1</span>)</span><br><span class="line">L2 = tf.nn.tanh(tf.matmul(L1_drop, W2) + b2)</span><br><span class="line">L2_drop = tf.nn.dropout(L2, z)</span><br><span class="line"></span><br><span class="line">W3 = tf.Variable(tf.truncated_normal([<span class="number">400</span>, <span class="number">10</span>], stddev = <span class="number">0.1</span>))</span><br><span class="line">b3 = tf.Variable(tf.zeros([<span class="number">10</span>]) + <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># softmax 回归模型</span></span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(L2_drop, W3) + b3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二次 Loss Func</span></span><br><span class="line"><span class="comment"># loss = tf.reduce_mean(tf.square(y - prediction))</span></span><br><span class="line"><span class="comment"># 交叉熵 Loss Func</span></span><br><span class="line"><span class="comment"># loss = tf.reduce_mean(- tf.reduce_sum(y * tf.log(prediction), reduction_indices = [1]))</span></span><br><span class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y, logits = prediction))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度下降</span></span><br><span class="line"><span class="comment"># train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(lr).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line"><span class="comment"># 判断 一维张量 y、prediction 中最大值的位置是否相等</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(prediction, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line"><span class="comment"># 将 布尔型列表 corrent_prediction 转化为 float32 类型</span></span><br><span class="line"><span class="comment"># [true, false, false, ...]  =&gt; [1.0, 0., 0., ...]</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.device(<span class="string">'/gpu:0'</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        tf.global_variables_initializer().run()</span><br><span class="line"></span><br><span class="line">        batch_size = <span class="number">100</span></span><br><span class="line">        batch = (<span class="built_in">int</span>) (<span class="number">60000</span> / batch_size)</span><br><span class="line">        <span class="comment"># batch = mnist.train.num_examples</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">            sess.run(tf.assign(lr, <span class="number">0.001</span> * (<span class="number">0.95</span> ** _)))</span><br><span class="line">            <span class="keyword">for</span> batch_step <span class="keyword">in</span> <span class="built_in">range</span>(batch):</span><br><span class="line">                batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">                sess.run(train_step, feed_dict = {x: batch_xs, y: batch_ys, z: <span class="number">0.9973</span>})</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_ % <span class="number">10</span>) == <span class="number">0</span>:</span><br><span class="line">                test_accuracy = sess.run(accuracy, feed_dict = {x: mnist.test.images, y: mnist.test.labels, z: <span class="number">1.0</span>})</span><br><span class="line">                train_accuracy = sess.run(accuracy, feed_dict = {x: mnist.train.images, y: mnist.train.labels, z: <span class="number">1.0</span>})</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Batch: "</span>, _, <span class="string">"Accuracy: ["</span>, test_accuracy, <span class="string">","</span>, train_accuracy, <span class="string">"]"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二次 Loss Func</span></span><br><span class="line">Batch:  <span class="number">0</span> Accuracy:  <span class="number">0.8394</span></span><br><span class="line">Batch:  <span class="number">10</span> Accuracy:  <span class="number">0.9067</span></span><br><span class="line">Batch:  <span class="number">20</span> Accuracy:  <span class="number">0.9142</span></span><br><span class="line">Batch:  <span class="number">30</span> Accuracy:  <span class="number">0.9187</span></span><br><span class="line">Batch:  <span class="number">40</span> Accuracy:  <span class="number">0.9199</span></span><br><span class="line">Batch:  <span class="number">50</span> Accuracy:  <span class="number">0.9219</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵 Loss Func</span></span><br><span class="line">Batch:  <span class="number">0</span> Accuracy:  <span class="number">0.8262</span></span><br><span class="line">Batch:  <span class="number">10</span> Accuracy:  <span class="number">0.9183</span></span><br><span class="line">Batch:  <span class="number">20</span> Accuracy:  <span class="number">0.9224</span></span><br><span class="line">Batch:  <span class="number">30</span> Accuracy:  <span class="number">0.9232</span></span><br><span class="line">Batch:  <span class="number">40</span> Accuracy:  <span class="number">0.9273</span></span><br><span class="line">Batch:  <span class="number">50</span> Accuracy:  <span class="number">0.9274</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏层 + DropOut</span></span><br><span class="line">Batch:  <span class="number">0</span> Accuracy: [ <span class="number">0.9176</span> , <span class="number">0.915527</span> ]</span><br><span class="line">Batch:  <span class="number">10</span> Accuracy: [ <span class="number">0.9565</span> , <span class="number">0.963182</span> ]</span><br><span class="line">Batch:  <span class="number">20</span> Accuracy: [ <span class="number">0.9669</span> , <span class="number">0.975236</span> ]</span><br><span class="line">Batch:  <span class="number">30</span> Accuracy: [ <span class="number">0.9718</span> , <span class="number">0.982</span> ]</span><br><span class="line">Batch:  <span class="number">40</span> Accuracy: [ <span class="number">0.9737</span> , <span class="number">0.984836</span> ]</span><br><span class="line">Batch:  <span class="number">50</span> Accuracy: [ <span class="number">0.9768</span> , <span class="number">0.987036</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># AdamOptimizer + GPU</span></span><br><span class="line">Batch:  <span class="number">0</span> Accuracy: [ <span class="number">0.9573</span> , <span class="number">0.962128</span> ]</span><br><span class="line">Batch:  <span class="number">10</span> Accuracy: [ <span class="number">0.9803</span> , <span class="number">0.994455</span> ]</span><br><span class="line">Batch:  <span class="number">20</span> Accuracy: [ <span class="number">0.9795</span> , <span class="number">0.997073</span> ]</span><br><span class="line">Batch:  <span class="number">30</span> Accuracy: [ <span class="number">0.9816</span> , <span class="number">0.997709</span> ]</span><br><span class="line">Batch:  <span class="number">40</span> Accuracy: [ <span class="number">0.9828</span> , <span class="number">0.997946</span> ]</span><br><span class="line">Batch:  <span class="number">50</span> Accuracy: [ <span class="number">0.9823</span> , <span class="number">0.998128</span> ]</span><br><span class="line">Batch:  <span class="number">60</span> Accuracy: [ <span class="number">0.9828</span> , <span class="number">0.998237</span> ]</span><br><span class="line">Batch:  <span class="number">70</span> Accuracy: [ <span class="number">0.9828</span> , <span class="number">0.998309</span> ]</span><br><span class="line">Batch:  <span class="number">80</span> Accuracy: [ <span class="number">0.9831</span> , <span class="number">0.998346</span> ]</span><br><span class="line">Batch:  <span class="number">90</span> Accuracy: [ <span class="number">0.9828</span> , <span class="number">0.9984</span> ]</span><br><span class="line">Batch:  <span class="number">100</span> Accuracy: [ <span class="number">0.9831</span> , <span class="number">0.9984</span> ]</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: <strong>Softmax</strong> 公式为：$softmax(x)_i$ = $\frac{exp(x_i)}{\sum_j{exp(x_j)}}$ = $\frac{e^{x_i}}{\sum_j{e^{x_j}}}$<br>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/MNIST.ipynb">here</a>.</p>
<h4 id="TensorBoard-可视化"><a href="#TensorBoard-可视化" class="headerlink" title="TensorBoard 可视化"></a>TensorBoard 可视化</h4><h5 id="Scalar-amp-NameScope-amp-Embedding"><a href="#Scalar-amp-NameScope-amp-Embedding" class="headerlink" title="Scalar &amp; NameScope &amp; Embedding"></a>Scalar &amp; NameScope &amp; Embedding</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># Download MNIST datasource</span></span><br><span class="line"><span class="comment"># 6w 个 28*28 个像素的手写数字图片集</span></span><br><span class="line"><span class="comment"># 用 [60000, 784] 的张量表示 [图片索引，图片像素点索引]</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.tensorboard.plugins <span class="keyword">import</span> projector</span><br><span class="line"></span><br><span class="line"><span class="comment"># `one-hot vectors`：向量中只有一个数据为 1，其余维度只能为 0</span></span><br><span class="line"><span class="comment"># 转化为 [60000, 10] 的张量表示 [图片索引，图片表示的数值]</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">image_num = <span class="number">10000</span></span><br><span class="line">embedding = tf.Variable(tf.stack(mnist.test.images[:image_num]), trainable = <span class="literal">False</span>, name = <span class="string">'embedding'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义求统计指标的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summaries</span>(<span class="params">var</span>):</span></span><br><span class="line">    <span class="comment"># 申明一个命名空间</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'summaries'</span>):</span><br><span class="line">        tf.summary.scalar(<span class="string">'max'</span>, tf.reduce_max(var))        <span class="comment"># 最大值</span></span><br><span class="line">        tf.summary.scalar(<span class="string">'min'</span>, tf.reduce_min(var))        <span class="comment"># 最小值</span></span><br><span class="line">        mean = tf.reduce_mean(var)</span><br><span class="line">        tf.summary.scalar(<span class="string">'mean'</span>, mean)                     <span class="comment"># 平均值</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'stddev'</span>):</span><br><span class="line">            stddev = tf.sqrt(tf.reduce_mean(tf.square(var - mean)))</span><br><span class="line">        tf.summary.scalar(<span class="string">'stddev'</span>, stddev)                 <span class="comment"># 标准差</span></span><br><span class="line">        tf.summary.histogram(<span class="string">'histogram'</span>, var)              <span class="comment"># 直方图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'input'</span>):</span><br><span class="line">    <span class="comment"># 28 * 28 = 784 的占位符</span></span><br><span class="line">    <span class="comment"># None 表示可能是任何数值</span></span><br><span class="line">    x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">784</span>], name = <span class="string">'x_input'</span>)</span><br><span class="line">    y = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>], name = <span class="string">'y_input'</span>)</span><br><span class="line">    <span class="comment"># 用于 drop_out 操作时的依据（0.8：80% 的神经元在工作）</span></span><br><span class="line">    z = tf.placeholder(tf.float32, name = <span class="string">'drop_output_input'</span>)</span><br><span class="line">    lr = tf.Variable(<span class="number">0.001</span>, dtype = tf.float32)           <span class="comment"># 用于不断递减的学习率，使得梯度下降到最低点时，能更好地命中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'layer'</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'layer_1'</span>):</span><br><span class="line">        <span class="comment"># 权重值（截断的随机正太分布）和 偏置量（0.1）</span></span><br><span class="line">        W1 = tf.Variable(tf.truncated_normal([<span class="number">784</span>, <span class="number">600</span>], stddev = <span class="number">0.1</span>), name = <span class="string">'W1'</span>)</span><br><span class="line">        b1 = tf.Variable(tf.zeros([<span class="number">600</span>]) + <span class="number">0.1</span>, name = <span class="string">'b1'</span>)</span><br><span class="line">        <span class="comment"># 调用函数求权重、偏置值的统计指标</span></span><br><span class="line">        summaries(W1)</span><br><span class="line">        summaries(b1)</span><br><span class="line">        L1 = tf.nn.tanh(tf.matmul(x, W1) + b1)</span><br><span class="line">        L1_drop = tf.nn.dropout(L1, z)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'layer_2'</span>):</span><br><span class="line">        <span class="comment"># 隐藏层</span></span><br><span class="line">        W2 = tf.Variable(tf.truncated_normal([<span class="number">600</span>, <span class="number">400</span>], stddev = <span class="number">0.1</span>), name = <span class="string">'W2'</span>)</span><br><span class="line">        b2 = tf.Variable(tf.zeros([<span class="number">400</span>]) + <span class="number">0.1</span>, name = <span class="string">'b2'</span>)</span><br><span class="line">        summaries(W2)</span><br><span class="line">        summaries(b2)</span><br><span class="line">        L2 = tf.nn.tanh(tf.matmul(L1_drop, W2) + b2)</span><br><span class="line">        L2_drop = tf.nn.dropout(L2, z)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'layer_output'</span>):</span><br><span class="line">        W3 = tf.Variable(tf.truncated_normal([<span class="number">400</span>, <span class="number">10</span>], stddev = <span class="number">0.1</span>), name = <span class="string">'W3'</span>)</span><br><span class="line">        b3 = tf.Variable(tf.zeros([<span class="number">10</span>]) + <span class="number">0.1</span>, name = <span class="string">'b3'</span>)</span><br><span class="line">        summaries(W3)</span><br><span class="line">        summaries(b3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'softmax'</span>):</span><br><span class="line">        <span class="comment"># softmax 回归模型</span></span><br><span class="line">        prediction = tf.nn.softmax(tf.matmul(L2_drop, W3) + b3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">    <span class="comment"># 二次 Loss Func</span></span><br><span class="line">    <span class="comment"># loss = tf.reduce_mean(tf.square(y - prediction))</span></span><br><span class="line">    <span class="comment"># 交叉熵 Loss Func</span></span><br><span class="line">    <span class="comment"># loss = tf.reduce_mean(-tf.reduce_sum(y * tf.log(prediction), reduction_indices=[1]))</span></span><br><span class="line">    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y, logits = prediction))</span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>, loss)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'train'</span>):</span><br><span class="line">    <span class="comment"># 梯度下降</span></span><br><span class="line">    <span class="comment"># train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)</span></span><br><span class="line">    train_step = tf.train.AdamOptimizer(lr).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'accuracy'</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'correct_prediction'</span>):</span><br><span class="line">        <span class="comment"># 评估模型</span></span><br><span class="line">        <span class="comment"># 判断 一维张量 y、prediction 中最大值的位置是否相等</span></span><br><span class="line">        correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(prediction, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'accuracy'</span>):</span><br><span class="line">        <span class="comment"># 准确率</span></span><br><span class="line">        <span class="comment"># 将 布尔型列表 corrent_prediction 转化为 float32 类型</span></span><br><span class="line">        <span class="comment"># [true, false, false, ...]  =&gt; [1.0, 0., 0., ...]</span></span><br><span class="line">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">        tf.summary.scalar(<span class="string">'accuracy'</span>, accuracy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得所有定义的 Summary</span></span><br><span class="line">summary_all = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置运行资源</span></span><br><span class="line">session_config = tf.ConfigProto(device_count={<span class="string">"CPU"</span>: <span class="number">8</span>}, inter_op_parallelism_threads = <span class="number">32</span>, intra_op_parallelism_threads = <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session(config = session_config) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产生 MetaData 文件 [注意，这里只能使用绝对路径]</span></span><br><span class="line">    base_path = <span class="string">'E:/Jupyter/_drafts/ipython/TensorFlow/tensorboard/'</span></span><br><span class="line">    metadata_path = base_path + <span class="string">'metadata.tsv'</span></span><br><span class="line">    <span class="keyword">if</span> tf.gfile.Exists(metadata_path):</span><br><span class="line">        tf.gfile.DeleteRecursively(metadata_path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(metadata_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        labels = sess.run(tf.argmax(mnist.test.labels[:], <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(image_num):</span><br><span class="line">            f.write(<span class="built_in">str</span>(labels[i]) + <span class="string">'\n'</span>)   </span><br><span class="line"></span><br><span class="line">    writer = tf.summary.FileWriter(base_path, sess.graph)</span><br><span class="line"></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    config = projector.ProjectorConfig()</span><br><span class="line">    embed = config.embeddings.add()</span><br><span class="line">    embed.tensor_name = embedding.name</span><br><span class="line">    embed.metadata_path = metadata_path</span><br><span class="line">    embed.sprite.image_path = base_path + <span class="string">'data/mnist_10k_sprite.png'</span></span><br><span class="line">    embed.sprite.single_image_dim.extend([<span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">    projector.visualize_embeddings(writer, config)</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">100</span></span><br><span class="line">    batch = (<span class="built_in">int</span>) (<span class="number">60000</span> / batch_size)</span><br><span class="line">    <span class="comment"># batch = mnist.train.num_examples</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里主要是为了测试 TensorBoard，所以只训练 5 次</span></span><br><span class="line">    summary_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        sess.run(tf.assign(lr, <span class="number">0.001</span> * (<span class="number">0.95</span> ** _)))</span><br><span class="line">        <span class="keyword">for</span> batch_step <span class="keyword">in</span> <span class="built_in">range</span>(batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            <span class="comment"># 真正开始生成 metadata</span></span><br><span class="line">            run_options = tf.RunOptions(trace_level = tf.RunOptions.FULL_TRACE)</span><br><span class="line">            run_metadata = tf.RunMetadata()</span><br><span class="line">            summary_, result = sess.run([summary_all, train_step], feed_dict = {x: batch_xs, y: batch_ys, z: <span class="number">0.997</span>}, options = run_options, run_metadata = run_metadata)</span><br><span class="line">            summary_count = summary_count + <span class="number">1</span></span><br><span class="line">            writer.add_run_metadata(run_metadata, <span class="string">'step%03d'</span> % summary_count)</span><br><span class="line">            writer.add_summary(summary_, summary_count)</span><br><span class="line"></span><br><span class="line">        test_accuracy = sess.run(accuracy, feed_dict = {x: mnist.test.images, y: mnist.test.labels, z: <span class="number">1.0</span>})</span><br><span class="line">        train_accuracy = sess.run(accuracy, feed_dict = {x: mnist.train.images, y: mnist.train.labels, z: <span class="number">1.0</span>})</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Batch: "</span>, _, <span class="string">"Accuracy: ["</span>, test_accuracy, <span class="string">","</span>, train_accuracy, <span class="string">"]"</span>)</span><br><span class="line"></span><br><span class="line">    saver.save(sess, base_path + <span class="string">'minst_model.ckpt'</span>, global_step = summary_count)</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/TensorBoard.ipynb">here</a>.</p>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行完，会在程序中指定的目录下生成文件 events.out.tfevents.1502692143.BENEDICT_JIN</span></span><br><span class="line">$ tensorboard --logdir=E:\Jupyter\_drafts\ipython\TensorFlow\tensorboard</span><br><span class="line">  Starting TensorBoard b<span class="string">'54'</span> at http://Benedict_Jin:6006</span><br><span class="line">  (Press CTRL+C to quit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里 windows 用户需要注意，使用 `cmd` 而不要使用 `git bash` 等工具，同时，还需要切换盘符</span></span><br><span class="line"><span class="comment"># 第二次执行，需要删除生成的文件，使用 `Kernel` - `Restart &amp; Run all` 清理缓存</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Scalars"><a href="#Scalars" class="headerlink" title="Scalars"></a>Scalars</h5><p><img data-src="/picture/ai/ai_tensorboard_scalars.png" alt=""></p>
<center>（对 <a href="https://www.tensorflow.org" target="_blank">TensorBoard</a> 可视化界面的截图）</center>


<h5 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h5><p><img data-src="/picture/ai/ai_tensorboard_graph.png" alt=""></p>
<center>（对 <a href="https://www.tensorflow.org" target="_blank">TensorBoard</a> 可视化界面的截图）</center>


<h5 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h5><p><img data-src="/picture/ai/ai_tensorboard_embeddings.png" alt=""></p>
<center>（对 <a href="https://www.tensorflow.org" target="_blank">TensorBoard</a> 可视化界面的截图）</center>



<h4 id="GPU-加速"><a href="#GPU-加速" class="headerlink" title="GPU 加速"></a>GPU 加速</h4><h5 id="准备-NVIDIA-显卡"><a href="#准备-NVIDIA-显卡" class="headerlink" title="准备 NVIDIA 显卡"></a>准备 NVIDIA 显卡</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">显卡2详情</span><br><span class="line">显卡名称  NVIDIA GeForce GTX 960M</span><br><span class="line">显卡厂商  英伟达</span><br><span class="line">显存大小  4095 MB</span><br><span class="line">内核名称  GeForce GTX 960M</span><br><span class="line">内核频率  324 MHz</span><br><span class="line">显存频率  405 MHz</span><br><span class="line">驱动版本  21.21.13.7651</span><br></pre></td></tr></tbody></table></figure>
<h5 id="CUDA（Compute-Unified-Device-Architecture）"><a href="#CUDA（Compute-Unified-Device-Architecture）" class="headerlink" title="CUDA（Compute Unified Device Architecture）"></a>CUDA（Compute Unified Device Architecture）</h5><p>　在 <a href="https://developer.nvidia.com/cuda-downloads">下载地址</a> 找到系统对应的版本进行下载安装（<code>Windows</code> - <code>x86_64</code> - <code>10</code> - <code>exe</code> - <code>cuda_8.0.61_win10.exe</code>）</p>
<p>　安装成功后，将 <code>bin</code> 和 <code>lib/x64</code> 添加到系统 <code>PATH</code> 环境变量中</p>
<h5 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h5><p>　在 <a href="https://developer.nvidia.com/rdp/cudnn-download">登陆页面</a> 注册好 Nvidia 的账户后，下载对应 CUDA 版本的 cuDNN 即可（<code>cudnn-8.0-windows10-x64-v5.1.zip</code>）</p>
<p>　将压缩包中 <code>bin</code> / <code>include</code> / <code>lib</code> 中的文件，拷贝到 <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0</code> 下对应目录中。最后，将 <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\extras\CUPTI\libx64\cupti64_80.dll</code> 文件复制到 <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin</code> 下</p>
<h5 id="tensorflow-gpu"><a href="#tensorflow-gpu" class="headerlink" title="tensorflow-gpu"></a>tensorflow-gpu</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip uninstall tensorflow</span><br><span class="line">$ pip install tensorflow-gpu</span><br><span class="line"><span class="comment"># 如果只有一颗 gpu，程序是不需要修改的，默认会直接使用该 gpu 进行运算</span></span><br><span class="line"><span class="comment"># 如果有多个，可以使用 with tf.device('/gpu:1'): 进行指定</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="nvidia-smi-命令"><a href="#nvidia-smi-命令" class="headerlink" title="nvidia-smi 命令"></a>nvidia-smi 命令</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># nvidia-smi 可以查看 GPU 的资源、监控 GPU 运行状态、设置 GPU 超频 等等</span></span><br><span class="line">$ <span class="string">"C:\Program Files\NVIDIA Corporation\NVSMI\nvidia-smi.exe"</span></span><br><span class="line">  Tue Sep 19 23:33:29 2017</span><br><span class="line">  +-----------------------------------------------------------------------------+</span><br><span class="line">  | NVIDIA-SMI 385.41                 Driver Version: 385.41                    |</span><br><span class="line">  |-------------------------------+----------------------+----------------------+</span><br><span class="line">  | GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">  | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">  |===============================+======================+======================|</span><br><span class="line">  |   0  GeForce GTX 960M   WDDM  | 00000000:02:00.0 Off |                  N/A |</span><br><span class="line">  | N/A   55C    P8    N/A /  N/A |     30MiB /  4096MiB |      0%      Default |</span><br><span class="line">  +-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">  +-----------------------------------------------------------------------------+</span><br><span class="line">  | Processes:                                                       GPU Memory |</span><br><span class="line">  |  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">  |=============================================================================|</span><br><span class="line">  |  No running processes found                                                 |</span><br><span class="line">  +-----------------------------------------------------------------------------+</span><br></pre></td></tr></tbody></table></figure>
<h4 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h4><h5 id="CNN-版手写数字识别"><a href="#CNN-版手写数字识别" class="headerlink" title="CNN 版手写数字识别"></a>CNN 版手写数字识别</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span>(<span class="params">shape</span>):</span></span><br><span class="line">    initial = tf.truncated_normal(shape=shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial_value=initial)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏置值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span>(<span class="params">shape</span>):</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial_value=initial)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span>(<span class="params">x, W</span>):</span></span><br><span class="line">    <span class="comment"># x:  `  [batch, in_height, in_width, in_channels]`</span></span><br><span class="line">    <span class="comment">#        [批次大小，输入图片的长和宽，通道数（黑白：2；彩色：3）]</span></span><br><span class="line">    <span class="comment"># W: `[filter_height, filter_width, in_channels, out_channels]`</span></span><br><span class="line">    <span class="comment">#     [滤波器长，宽，输入通道数，输出通道数]</span></span><br><span class="line">    <span class="comment"># strides: `[1, stride, stride, 1]`</span></span><br><span class="line">    <span class="comment">#           [固定为 1，x/y 方向的步长，固定为 1]</span></span><br><span class="line">    <span class="comment"># padding: 是否在外部补零</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># x:  `  [batch, in_height, in_width, in_channels]`</span></span><br><span class="line">    <span class="comment">#        [批次大小，输入图片的长和宽，通道数（黑白：2；彩色：3）]</span></span><br><span class="line">    <span class="comment"># ksize: [固定为 1，窗口大小，固定为 1]</span></span><br><span class="line">    <span class="comment"># strides: `[1, stride, stride, 1]`</span></span><br><span class="line">    <span class="comment">#           [固定为 1，x/y 方向的步长，固定为 1]</span></span><br><span class="line">    <span class="comment"># padding: 是否在外部补零</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Place Holder</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># Learn Rate 学习率</span></span><br><span class="line">lr = tf.Variable(<span class="number">0.001</span>, dtype = tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 x 的转化为 4D 向量</span></span><br><span class="line"><span class="comment"># [batch, in_height, in_width, in_channels]</span></span><br><span class="line">x_image = tf.reshape(x, [-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化第一个卷积层 权值和偏置值</span></span><br><span class="line"><span class="comment"># 5*5 的采样窗口，32 个卷积核（输出 channels 数）从 1 个平面（输入 channels 数）抽取特征，获得 32 个特征平面</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</span><br><span class="line"><span class="comment"># 32 个卷积核，每个卷积核对应一个偏置值</span></span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行卷积采样操作，并加上偏置值</span></span><br><span class="line">conv2d_1 = conv2d(x_image, W_conv1) + b_conv1</span><br><span class="line"><span class="comment"># ReLU 激活函数，获得第一个卷积层，计算得到的结果</span></span><br><span class="line">h_conv1 = tf.nn.relu(conv2d_1)</span><br><span class="line"><span class="comment"># 执行 pooling 池化操作</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个卷积层 + 激活函数 + 池化层</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">conv2d_2 = conv2d(h_pool1, W_conv2) + b_conv2</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d_2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次卷积操作后，28 * 28 图片仍然是 28 * 28</span></span><br><span class="line"><span class="comment"># 第一次池化之后，因为 2 * 2 的窗口，所以变成了 14 * 14</span></span><br><span class="line"><span class="comment"># 第二次卷积之后，仍然保持 14 * 14 的平面大小</span></span><br><span class="line"><span class="comment"># 第二次池化之后，因为 2 * 2 的窗口，所以变成了 7 * 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层一共有 1000 个神经元，连接上一层的 7 * 7* 64 = 3136 个神经元</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1000</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1000</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把上一层的池化层，转化为 1 维（-1 代表任意值）</span></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [-<span class="number">1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])</span><br><span class="line"><span class="comment"># 矩阵相乘，并加上偏置值</span></span><br><span class="line">wx_plus_b1 = tf.matmul(h_pool2_flat, W_fc1) + b_fc1</span><br><span class="line"><span class="comment"># ReLU 激活函数</span></span><br><span class="line">h_fc1 = tf.nn.relu(wx_plus_b1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dropout 正则化</span></span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个全连接层</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1000</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算输出</span></span><br><span class="line">wx_plus_b2 = tf.matmul(h_fc1_drop, W_fc2) + b_fc2</span><br><span class="line">prediction = tf.nn.softmax(wx_plus_b2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵 Loss Function</span></span><br><span class="line">cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=prediction))  </span><br><span class="line"><span class="comment"># Adam 优化器，配合一个不断下降的学习率</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(lr).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># argmax 方法，会返回一维张量中最大值所在的位置</span></span><br><span class="line"><span class="comment"># 计算正确率</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(prediction, <span class="number">1</span>), tf.argmax(y, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.device(<span class="string">'/gpu:0'</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        tf.global_variables_initializer().run()</span><br><span class="line"></span><br><span class="line">        batch_size = <span class="number">100</span></span><br><span class="line">        batch = (<span class="built_in">int</span>) (<span class="number">60000</span> / batch_size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">            sess.run(tf.assign(lr, <span class="number">0.0001</span> * (<span class="number">0.95</span> ** _)))</span><br><span class="line">            <span class="keyword">for</span> batch_step  <span class="keyword">in</span> <span class="built_in">range</span>(batch):</span><br><span class="line">                batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">                sess.run(train_step, feed_dict={x: batch_xs, y: batch_ys, keep_prob: <span class="number">0.68</span>})</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> _ % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">                test_acc = sess.run(accuracy,feed_dict={x: mnist.test.images, y: mnist.test.labels, keep_prob: <span class="number">1.0</span>})</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Iterator: "</span>, _, <span class="string">"Accuracy:"</span>, test_acc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Iterator:  <span class="number">0</span> Accuracy: <span class="number">0.954</span></span><br><span class="line">  Iterator:  <span class="number">20</span> Accuracy: <span class="number">0.9912</span></span><br><span class="line">  Iterator:  <span class="number">40</span> Accuracy: <span class="number">0.9916</span></span><br><span class="line">  Iterator:  <span class="number">60</span> Accuracy: <span class="number">0.9924</span></span><br><span class="line">  Iterator:  <span class="number">80</span> Accuracy: <span class="number">0.9924</span></span><br><span class="line">  Iterator:  <span class="number">100</span> Accuracy: <span class="number">0.9926</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/MNIST_CNN.ipynb">here</a>, and Kaggle competition is <a href="https://www.kaggle.com/c/digit-recognizer/leaderboard">here</a>.</p>
<h4 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h4><h5 id="LSTM-版手写数字识别"><a href="#LSTM-版手写数字识别" class="headerlink" title="LSTM 版手写数字识别"></a>LSTM 版手写数字识别</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入的图片，每张 28*28 个像素</span></span><br><span class="line">n_inputs = <span class="number">28</span>      <span class="comment"># 输入的每行有 28 个数据，输入层 神经元的个数</span></span><br><span class="line">max_time = <span class="number">28</span>      <span class="comment"># 输入的次数为 28 次</span></span><br><span class="line">lstm_size = <span class="number">100</span>    <span class="comment"># 隐藏层 block 单元</span></span><br><span class="line">n_classes = <span class="number">10</span>     <span class="comment"># 分类个数</span></span><br><span class="line">batch_size = <span class="number">50</span>    <span class="comment"># 单批次的样本数量</span></span><br><span class="line">n_batch = mnist.train.num_examples / batch_size   <span class="comment"># 一共会分成多少批次</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line">weights = tf.Variable(tf.truncated_normal([lstm_size, n_classes], stddev=<span class="number">0.1</span>))</span><br><span class="line">biases = tf.Variable(tf.constant(<span class="number">0.1</span>, shape=[n_classes]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LSTM</span>(<span class="params">x, weights, biases</span>):</span></span><br><span class="line">    inputs = tf.reshape(x, [-<span class="number">1</span>, max_time, n_inputs])</span><br><span class="line">    <span class="comment"># 定义隐藏层 block 单元</span></span><br><span class="line">    lstm_cell = tf.contrib.rnn.BasicLSTMCell(lstm_size)</span><br><span class="line">    <span class="comment"># final_state[0]: cell state</span></span><br><span class="line">    <span class="comment"># final_state[1]: hidden_state</span></span><br><span class="line">    outputs, final_state = tf.nn.dynamic_rnn(lstm_cell, inputs, dtype=tf.float32)</span><br><span class="line">    <span class="keyword">return</span> tf.nn.softmax(tf.matmul(final_state[<span class="number">1</span>], weights) + biases)</span><br><span class="line"></span><br><span class="line">prediction = LSTM(x, weights, biases)</span><br><span class="line">cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=prediction, labels=y))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(prediction, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(n_batch)):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(train_step, feed_dict={x: batch_xs, y: batch_ys})</span><br><span class="line">        <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            acc = sess.run(accuracy, feed_dict={x:mnist.test.images, y:mnist.test.labels})</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Iterator:"</span>, <span class="built_in">str</span>(epoch), <span class="string">", Accuracy:"</span>, <span class="built_in">str</span>(acc))</span><br><span class="line"></span><br><span class="line">  Iterator: <span class="number">0</span> , Accuracy: <span class="number">0.7244</span></span><br><span class="line">  Iterator: <span class="number">10</span> , Accuracy: <span class="number">0.946</span></span><br><span class="line">  Iterator: <span class="number">20</span> , Accuracy: <span class="number">0.9646</span></span><br><span class="line">  Iterator: <span class="number">30</span> , Accuracy: <span class="number">0.9696</span></span><br><span class="line">  Iterator: <span class="number">40</span> , Accuracy: <span class="number">0.9717</span></span><br><span class="line">  Iterator: <span class="number">50</span> , Accuracy: <span class="number">0.9764</span></span><br><span class="line">  Iterator: <span class="number">60</span> , Accuracy: <span class="number">0.9776</span></span><br><span class="line">  Iterator: <span class="number">70</span> , Accuracy: <span class="number">0.9801</span></span><br><span class="line">  Iterator: <span class="number">80</span> , Accuracy: <span class="number">0.9814</span></span><br><span class="line">  Iterator: <span class="number">90</span> , Accuracy: <span class="number">0.9793</span></span><br><span class="line">  Iterator: <span class="number">100</span> , Accuracy: <span class="number">0.9814</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-tensorflow/src/main/resources/ipython/MNIST_LSTM.ipynb">here</a>.</p>
<h3 id="pyTorch-pyTorch"><a href="#pyTorch-pyTorch" class="headerlink" title="pyTorch / pyTorch"></a><a href="https://github.com/pytorch">pyTorch</a> / <a href="https://github.com/pytorch/pytorch"><strong>pyTorch</strong></a></h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>　<strong>PyTorch</strong>™ is a Python package that provides two high-level features: Tensor computation (like NumPy) with strong GPU acceleration and Deep neural networks built on a tape-based autograd system</p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>　到 <a href="https://github.com/peterjc123/pytorch-scripts">pytorch-scripts</a> 项目中，下载当前最新的 <a href="https://github.com/pytorch/pytorch/releases">release</a> 版本 <a href="https://ci.appveyor.com/api/buildjobs/9gexsv1wq91hj2hj/artifacts/output%2Ftorch-0.3.0b0%2B591e73e-cp35-cp35m-win_amd64.whl">torch-0.3.0b0+591e73e-cp35-cp35m-win_amd64.whl</a>，并<a href="http://pytorch.org/#pip-install-pytorch">安装</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install <span class="string">"torch-0.3.0b0+591e73e-cp35-cp35m-win_amd64.whl"</span></span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="http://nbviewer.jupyter.org/github/asdf2014/yuzhouwan/blob/master/yuzhouwan-ai/yuzhouwan-ai-pytorch/src/main/resources/ipython/hello_world.ipynb">here</a>.</p>
<h4 id="编程实战-1"><a href="#编程实战-1" class="headerlink" title="编程实战"></a>编程实战</h4><h5 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello-world"></a>Hello-world</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">t = torch.Tensor(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 1.00000e-29 *</span></span><br><span class="line">  <span class="comment">#   2.7413</span></span><br><span class="line">  <span class="comment"># [torch.FloatTensor of size 1]</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="BVLC-Caffe"><a href="#BVLC-Caffe" class="headerlink" title="BVLC / Caffe"></a><a href="https://github.com/BVLC">BVLC</a> / <a href="https://github.com/BVLC/caffe"><strong>Caffe</strong></a></h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>　<strong>Caffe</strong>™ (<strong>C</strong>onvolutional <strong>A</strong>rchitecture for <strong>F</strong>ast <strong>F</strong>eature <strong>E</strong>mbedding) is a deep learning framework made with expression, speed, and modularity in mind. It is developed by Berkeley AI Research (<a href="http://bair.berkeley.edu/">BAIR</a>) and by community contributors. <a href="http://daggerfs.com/">Yangqing Jia</a> created the project during his PhD at UC Berkeley. Caffe is released under the <a href="https://github.com/BVLC/caffe/blob/master/LICENSE">BSD 2-Clause license</a>.</p>
<h3 id="dmlc-xgboost"><a href="#dmlc-xgboost" class="headerlink" title="dmlc / xgboost"></a><a href="https://github.com/dmlc">dmlc</a> / <a href="https://github.com/dmlc/xgboost"><strong>xgboost</strong></a></h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>　<strong>XGBoost</strong>™ is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the Gradient Boosting framework. <a href="http://blog.csdn.net/sb19931201/article/details/52557382">XGBoost</a> provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. The same code runs on major distributed environment (Hadoop, SGE, MPI) and can solve problems beyond billions of examples.</p>
<h3 id="Apache-PredictionIO"><a href="#Apache-PredictionIO" class="headerlink" title="Apache / PredictionIO"></a><a href="https://github.com/apache">Apache</a> / <a href="https://github.com/apache/predictionio">PredictionIO</a></h3><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p>　<strong>Apache PredictionIO</strong>™ is an open source Machine Learning Server built on top of a state-of-the-art open source stack for developers and data scientists to create predictive engines for any machine learning task.</p>
<h3 id="Numenta-NuPIC"><a href="#Numenta-NuPIC" class="headerlink" title="Numenta / NuPIC"></a><a href="https://github.com/numenta">Numenta</a> / <strong><a href="https://github.com/numenta/nupic">NuPIC</a></strong></h3><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>　<strong>NuPIC</strong>™<code>(Numenta Platform for Intelligent Computing, Numenta 智能计算平台)</code> 是一个与众不同的开源人工智能平台，它基于一种<code>脑皮质学习算法</code>，即 “层级实时记忆”（<strong>H</strong>ierarchical <strong>T</strong>emporal <strong>M</strong>emory, <a href="https://numenta.com/assets/pdf/whitepapers/hierarchical-temporal-memory-cortical-learning-algorithm-0.2.1-en.pdf">HTM</a>）。该算法旨在模拟新大脑皮层的工作原理，将复杂的问题转化为模式匹配与预测，而传统的 AI算法大多是针对特定的任务目标而设计的<br>　NuPIC 聚焦于分析实时数据流，可以通过学习数据之间基于时间的状态变化，对未知数据进行预测，并揭示其中的非常规特性</p>
<h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h5><ul>
<li>持续的在线学习（根据快速变化的数据流进行<strong>实时调整</strong>）</li>
<li>时间和空间分析（可以同时模拟<strong>时间</strong>和<strong>空间的变化</strong>）</li>
<li>通过<strong>通用性</strong>的大脑皮层算法，进行预测和建模</li>
<li>强大的异常检测能力（实时检测数据流的扰动，不依靠<strong>僵化的阈值</strong>设置和过时的算法）</li>
<li>层级实时存储算法</li>
</ul>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yum install glibc-devel.i686 gcc -y</span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br><span class="line">$ pip -V</span><br><span class="line">  pip 9.0.1 from /usr/<span class="built_in">local</span>/lib/python2.7/site-packages (python 2.7)</span><br><span class="line">$ pip install nupic</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><p>　可能部分版本不支持，需要结合 Nupic 的 <a href="https://github.com/numenta/nupic/releases">Release</a> 和 <a href="https://pypi.python.org/pypi/nupic.bindings">PyPi 平台</a>找到合适的版本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install https://s3-us-west-2.amazonaws.com/artifacts.numenta.org/numenta/nupic.core/releases/nupic.bindings/nupic.bindings-0.4.5-cp27-none-linux_x86_64.whl</span><br><span class="line">$ pip install nupic==0.4.5</span><br></pre></td></tr></tbody></table></figure>
<h2 id="AI-到底是什么？"><a href="#AI-到底是什么？" class="headerlink" title="AI 到底是什么？"></a>AI 到底是什么？</h2><h3 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h3><p>　从体系组成成分的角度来讲，人工智能，包含<a href="https://en.wikipedia.org/wiki/Machine_learning">机器学习</a>。而机器学习，又包含了<a href="https://en.wikipedia.org/wiki/Deep_learning">深度学习</a></p>
<h3 id="四象限"><a href="#四象限" class="headerlink" title="四象限"></a>四象限</h3><p>　从 “是否类人类”、“是否产生动作” 两个方向，又可以将人工智能化分为四个象限</p>
<p>　在 $x$ 轴正方向上，我们希望 AI 系统只需给出某类问题的最优解，并不用考虑是否会和人类一样去思考这个问题，例如地图导航系统，只需要算出两点的最佳路径即可。而 $x$ 轴的负方向上，则希望 AI 系统能表现出人类的思想活动，比如能听着音乐点头、摇摆的机器人，能去享受旋律；另一方面，在 $y$ 轴的正方向上，AI 系统更侧重于思考，譬如 类似 Siri™ 助理系统，可以处理人们通过语音输入的指令，并能思考出最为合理的反应。而 $y$ 轴的负方向上，则会偏向于动作的产生，比方说流水线上完成材料加工、处理工作的工业机器人</p>
<p><img data-src="/picture/ai/ai_four.png" alt=""></p>
<center>（使用 <a href="https://www.apple.com/cn/ipad/" target="_blank">iPad</a>™ 手绘而成）</center>






<h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><h3 id="OverSampling-和-Data-Augmentation-的区别"><a href="#OverSampling-和-Data-Augmentation-的区别" class="headerlink" title="OverSampling 和 Data Augmentation 的区别"></a><a href="https://stats.stackexchange.com/questions/249142/over-sampling-for-minority-classes">OverSampling</a> 和 <a href="https://arxiv.org/pdf/1609.08764.pdf">Data Augmentation</a> 的区别</h3><h3 id="Transfer-Learning-和-Fine-tuning-的区别"><a href="#Transfer-Learning-和-Fine-tuning-的区别" class="headerlink" title="Transfer Learning 和 Fine-tuning 的区别"></a>Transfer Learning 和 Fine-tuning 的<a href="https://www.zhihu.com/question/49534423">区别</a></h3><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="http://nupic.docs.numenta.org/stable/quick-start/index.html">NuPIC Quick Start</a></li>
<li><a href="https://github.com/lxzheng/machine_learning/wiki/TFlearn---%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">TFlearn 快速入门</a></li>
<li><a href="https://gym.openai.com/docs/">OpenAI Gym is a toolkit for developing and comparing reinforcement learning algorithms</a></li>
<li><a href="http://pytorch.org/tutorials/">Welcome to PyTorch Tutorials</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><h4 id="机器学习-1"><a href="#机器学习-1" class="headerlink" title="机器学习"></a>机器学习</h4><ul>
<li><a href="http://blog.csdn.net/zouxy09">zouxy09 的专栏</a></li>
<li><a href="https://www.zhihu.com/question/20224890">机器学习领域有哪些著名的期刊和会议?</a></li>
<li><a href="http://blog.csdn.net/v_july_v/article/details/7624837">支持向量机通俗导论（理解 SVM 的三层境界）</a></li>
</ul>
<h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><ul>
<li><a href="https://www.zhihu.com/question/54884091">有哪些 AI 开源框架可供开发者使用？</a></li>
<li><a href="http://blog.csdn.net/shinanhualiu/article/details/49864219">理解 LSTM 网络</a></li>
<li><a href="http://blog.csdn.net/diamonjoy_zone/article/details/70904212">Deep Learning-TensorFlow（14）CNN 卷积神经网络：深度残差网络 ResNet</a></li>
<li><a href="http://www.primaryobjects.com/2013/01/27/using-artificial-intelligence-to-write-self-modifying-improving-programs/">Using Artificial Intelligence to Write Self-Modifying/Improving Programs</a></li>
<li><a href="http://www.infoq.com/cn/articles/cnn-and-imagenet-champion-model-analysis">CNN 浅析和历年 ImageNet 冠军模型解析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28749411">变形卷积核、可分离卷积？卷积神经网络中十大拍案叫绝的操作。</a></li>
<li><a href="http://blog.echen.me/2017/05/30/exploring-lstms/">Exploring LSTMs</a></li>
<li><a href="http://colah.github.io/posts/2015-08-Backprop/">Calculus on Computational Graphs: Backpropagation</a></li>
<li><a href="https://harishnarayanan.org/writing/artistic-style-transfer/">Convolutional neural networks for artistic style transfer</a></li>
</ul>
<h4 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h4><ul>
<li><a href="https://zhuanlan.zhihu.com/p/21498750">深度强化学习导引</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22542101">深度强化学习 强化学习概述</a></li>
<li><a href="http://blog.greenwicher.com/2016/12/18/drl-general_ai-intro/">走向通用人工智能之路</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21609472?refer=intelligentunit">DQN 从入门到放弃系列</a></li>
<li><a href="https://www.zhihu.com/question/49230922">强化学习（reinforcement learning）有什么好的开源项目、网站、文章推荐一下？</a></li>
<li><a href="http://karpathy.github.io/2016/05/31/rl/">Deep Reinforcement Learning: Pong from Pixels</a></li>
<li><a href="https://devblogs.nvidia.com/parallelforall/train-reinforcement-learning-agents-openai-gym/">Train Your Reinforcement Learning Agents at the OpenAI Gym</a></li>
<li><a href="http://icml.cc/2016/tutorials/deep_rl_tutorial.pdf">David silve’s tutorial on ICML’16</a></li>
</ul>
<h4 id="胶囊网络"><a href="#胶囊网络" class="headerlink" title="胶囊网络"></a>胶囊网络</h4><ul>
<li><a href="https://papers.nips.cc/paper/6975-dynamic-routing-between-capsules.pdf">Dynamic Routing Between Capsules</a></li>
<li><a href="https://medium.com/ai%C2%B3-theory-practice-business/understanding-hintons-capsule-networks-part-i-intuition-b4b559d1159b">Part I: Intuition</a></li>
<li><a href="https://medium.com/ai%C2%B3-theory-practice-business/understanding-hintons-capsule-networks-part-ii-how-capsules-work-153b6ade9f66">Part II: How Capsules Work</a></li>
<li><a href="https://medium.com/@pechyonkin/understanding-hintons-capsule-networks-part-iii-dynamic-routing-between-capsules-349f6d30418">Part III: Dynamic Routing Between Capsules</a></li>
<li><a href="https://medium.com/@pechyonkin/part-iv-capsnet-architecture-6a64422f7dce">Part IV: CapsNet Architecture</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><h4 id="统计学-1"><a href="#统计学-1" class="headerlink" title="统计学"></a>统计学</h4><ul>
<li><a href="https://book.douban.com/subject/1588297/">统计学（第二版 David Freedman 等著）</a></li>
<li><a href="https://book.douban.com/subject/1230154/">统计学：基本概念与方法</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/1461381738">The Making of Statisticians</a></li>
</ul>
<h4 id="微积分-1"><a href="#微积分-1" class="headerlink" title="微积分"></a>微积分</h4><ul>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01M28M4G6">普林斯顿微积分读本（修订版）</a></li>
<li><a href="https://book.douban.com/subject/1231399/">托马斯微积分（第 11 版）</a></li>
</ul>
<h4 id="概率论-1"><a href="#概率论-1" class="headerlink" title="概率论"></a>概率论</h4><ul>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B019NB0UZQ">概率导论（第二版 修订版）</a></li>
</ul>
<h4 id="机器学习-2"><a href="#机器学习-2" class="headerlink" title="机器学习"></a>机器学习</h4><ul>
<li><a href="https://book.douban.com/subject/26708119/">机器学习（周志华 著）</a> <code>又名"西瓜书"</code></li>
</ul>
<h4 id="人工智能-1"><a href="#人工智能-1" class="headerlink" title="人工智能"></a>人工智能</h4><ul>
<li><a href="https://book.douban.com/subject/1834728/">人工智能的未来</a></li>
<li><a href="https://exacity.github.io/deeplearningbook-chinese/">Deep Learning（Yoshua Bengio 著）</a> <code>又名"花书"</code></li>
<li><a href="https://book.douban.com/subject/26976457/">Tensorflow：实战 Google 深度学习框架</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01HQHPSS8">深度学习：21 天实战 Caffe</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01N3KU68R">深度学习：Caffe 之经典模型详解与实战</a></li>
</ul>
<h4 id="强化学习-1"><a href="#强化学习-1" class="headerlink" title="强化学习"></a>强化学习</h4><ul>
<li><a href="https://www.amazon.com/Reinforcement-Learning-Introduction-Adaptive-Computation/dp/0262193981">Reinforcement Learning: An Introduction</a></li>
<li><a href="https://www.amazon.com/Reinforcement-Learning-TensorFlow-Keras-Python/dp/1484232844">Reinforcement Learning: With Open AI, TensorFlow and Keras Using Python</a></li>
<li><a href="https://www.amazon.com/Algorithms-Reinforcement-Synthesis-Artificial-Intelligence/dp/1608454924">Algorithms for Reinforcement Learning</a></li>
<li><a href="https://www.amazon.com/Reinforcement-Learning-State-Art-Optimization/dp/364244685X">Reinforcement Learning State-of-the-Art</a></li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul>
<li><a href="http://nbviewer.jupyter.org/github/numenta/nupic/blob/master/examples/NuPIC%20Walkthrough.ipynb">Code for “Beginner’s Guide to NuPIC”</a></li>
<li><a href="https://web.stanford.edu/class/cs221/">Car Tracking</a></li>
</ul>
<h3 id="Course"><a href="#Course" class="headerlink" title="Course"></a>Course</h3><ul>
<li><a href="https://www.datacamp.com/">Learn Data Science Online</a></li>
<li><a href="https://github.com/kailashahirwar/cheatsheets-ai">Cheat Sheets for AI</a></li>
<li><a href="https://www.rstudio.com/resources/cheatsheets/">RStudio Cheat Sheets</a></li>
<li><a href="http://www.fast.ai/">fast.ai</a></li>
</ul>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><ul>
<li><a href="https://www.kaggle.com/">Your Home for Data Science</a></li>
<li><a href="https://www.data.gov/">The home of the U.S. Government´s open data</a></li>
<li>NASA + ImageNet + Google + 新闻 + 自动驾驶 + 图像 + 生物 数据集 <code>(加群后免费获取)</code></li>
</ul>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><ul>
<li><a href="https://github.com/vinta/awesome-python#awesome-python-">A curated list of awesome Python frameworks, libraries, software and resources.</a></li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a href="https://www.zybuluo.com/codeep/note/163962">Cmd Markdown 公式指导手册</a></li>
<li><a href="http://www.jianshu.com/p/7bcf4ad609cf">在 Markdown 中使用 HTML 中的特殊符号</a></li>
<li><a href="http://detexify.kirelabs.org/classify.html">Draw Markdown</a></li>
<li><a href="http://webdemo.myscript.com/views/math/index.html">手写生成 LaTex 代码</a></li>
<li><a href="https://support.typora.io/Draw-Diagrams-With-Markdown/">Draw Diagrams With Markdown</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="https://numenta.org/resources/HTM_CorticalLearningAlgorithms.pdf">HIERARCHICAL TEMPORAL MEMORY including HTM Cortical Learning Algorithms</a></li>
<li><a href="http://gogameguru.com/i/2016/03/deepmind-mastering-go.pdf"><strong>AlphaGo</strong>: Mastering the Game of Go with Deep Neural Networks and Tree Search</a></li>
<li><a href="https://www.nature.com/nature/journal/v550/n7676/full/nature24270.html"><strong>AlphaGo Zero</strong>: Mastering the game of Go without human knowledge</a> <code>(加群后免费获取)</code></li>
<li><a href="https://arxiv.org/pdf/1712.01815.pdf"><strong>AlphaZero</strong>: Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm</a></li>
<li><a href="https://github.com/junhyukoh/deep-reinforcement-learning-papers">Deep Reinforcement Learning Papers</a></li>
<li><a href="https://github.com/aikorea/awesome-rl">Awesome Reinforcement Learning</a></li>
</ul>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><ul>
<li><a href="http://open.163.com/special/opencourse/daishu.html">麻省理工公开课：线性代数</a></li>
<li><a href="http://cs229.stanford.edu/"><strong>CS229</strong>: Machine Learning</a></li>
<li><a href="https://web.stanford.edu/class/cs224n/index.html"><strong>CS224n</strong>: Natural Language Processing with Deep Learning</a></li>
<li><a href="https://www.youtube.com/watch?v=i0o-ui1N35U"><strong>CS188</strong>: Artificial Intelligence</a></li>
<li><a href="https://www.youtube.com/watch?v=aUrX-rP_ss4"><strong>CS294</strong>: Deep Reinforcement Learning</a></li>
<li><a href="https://katefvision.github.io/"><strong>CMU10703</strong>: Deep Reinforcement Learning and Control</a></li>
<li><a href="http://selfdrivingcars.mit.edu/"><strong>6.S094</strong>: Deep Learning for Self-Driving Cars</a></li>
<li><a href="http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html">UCL Course on RL</a></li>
<li><a href="https://www.coursera.org/learn/neural-networks-deep-learning">Andrew Ng: Neural Networks and Deep Learning</a></li>
<li><a href="https://www.youtube.com/watch?v=BCwOgbSSDM4">Beginner´s Guide to NuPIC</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL3yXMgtrZmDqhsFQzwUC9V8MeeVOQ7eZ9">HTM School</a></li>
<li><a href="https://github.com/numenta/nupic/tree/master/examples/opf/clients/hotgym/anomaly/one_gym">One Hot Gym Anomaly Tutorial</a></li>
<li><a href="http://videolectures.net/deeplearning2016_pineau_reinforcement_learning/">Introduction to Reinforcement Learning</a></li>
</ul>
<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul>
<li><a href="https://www.intmath.com/functions-and-graphs/graphs-using-svg.php">Online Graphing Calculator: Plot your own SVG Math Graphs</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>TensorFlow</tag>
        <tag>微积分</tag>
        <tag>人工智能</tag>
        <tag>MP Model</tag>
        <tag>Perceptron</tag>
        <tag>MLP</tag>
        <tag>DNN</tag>
        <tag>CNN</tag>
        <tag>RNN</tag>
        <tag>LSTM</tag>
        <tag>统计学</tag>
        <tag>线性代数</tag>
        <tag>概率论</tag>
        <tag>深度学习</tag>
        <tag>PyTorch</tag>
        <tag>Caffe</tag>
        <tag>xgboost</tag>
        <tag>Apache PredictionIO</tag>
        <tag>NuPIC</tag>
      </tags>
  </entry>
  <entry>
    <title>那些绕不过去的 Java 知识点</title>
    <url>/posts/190413/</url>
    <content><![CDATA[<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>　虽然接触 Java 已经 8 年之久，可惜学习之初的笔记文档没能很好地保存下来。本文是近几年工作学习中遇到的一些零散的知识点，包括了 基础概念、实用的编程技巧、代码可读性、设计模式、性能优化（工具 &amp; 编码）、测试相关、JVM 相关、常用的工具和常见问题。本着好记性不如烂笔头的初衷，在不断地踩坑和爬坑的过程中，慢慢地记录成文。期待着本文能起到抛砖引玉的作用，以看到大家的真知灼见。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="GuardedBy"><a href="#GuardedBy" class="headerlink" title="GuardedBy"></a>GuardedBy</h4><p>　<code>@GuardedBy</code> 注解可以作用于某一个属性或者方法，约定在访问这些被注解标记的资源时，能被同步代码块保护着。简单的使用案例如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GuardedBy("obj")</span></span><br><span class="line"><span class="keyword">private</span> ConcurrentMap&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String k, String v)</span> </span>{</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) {</span><br><span class="line">        map.put(k, v);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If you use `error prone` tool to check this, this annotation should be `<span class="doctag">@SuppressWarnings</span>("GuardedBy")`</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@see</span> https://errorprone.info/bugpattern/GuardedBy}</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@see</span> https://github.com/apache/druid/pull/6868#discussion_r249639199}</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings("FieldAccessNotGuarded")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String k)</span> </span>{</span><br><span class="line">    map.remove(k);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"GuardedByExample{"</span> +</span><br><span class="line">                <span class="string">"map="</span> + map +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: <a href="https://github.com/apache/druid/pull/6903">Code Example</a> from <a href="https://yuzhouwan.com/posts/5845/">Apache Druid</a>；另外，<strong>error-prone</strong> 工具支持对<a href="https://github.com/google/error-prone/blob/master/docs/bugpattern/GuardedBy.md#guardedby">多种版本</a>的 <code>@GuardedBy</code> 进行检查</p>
<span id="more"></span>
<h4 id="InterfaceStability"><a href="#InterfaceStability" class="headerlink" title="InterfaceStability"></a>InterfaceStability</h4><ul>
<li><p>@InterfaceStability.Stable<br>主版本是稳定的，不同主版本间，可能不兼容</p>
</li>
<li><p>@InterfaceStability.Evolving<br>不断变化中，不同的次版本间，可能不兼容</p>
</li>
<li><p>@InterfaceStability.Unstable<br>不对可靠性和健壮性做任何保证</p>
</li>
</ul>
<h4 id="InterfaceAudience"><a href="#InterfaceAudience" class="headerlink" title="InterfaceAudience"></a>InterfaceAudience</h4><ul>
<li><p>@InterfaceAudience.Public<br>对所有工程可用</p>
</li>
<li><p>@InterfaceAudience.LimitedPrivate<br>仅限特定的工程，如 <a href="https://yuzhouwan.com/posts/45888/">HBase</a>、<a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a>、<a href="https://yuzhouwan.com/posts/60504/">HDFS</a> 等（以 Hadoop 为例）</p>
</li>
<li><p>@InterfaceAudience.Private<br>仅限于工程内部使用</p>
</li>
</ul>
<h4 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="JsonIgnoreProperties"></a>JsonIgnoreProperties</h4><p>　通过增加 Class 级别的 <code>@JsonIgnoreProperties(ignoreUnknown = true)</code> 注解，可以避免在解析不支持的字段时抛出 UnrecognizedPropertyException 异常</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h4><p>　给实现了 <code>Serializable</code> 接口的类中的字段，增加 <code>transient</code> 修饰符，则可以让该字段跳过序列化的过程</p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/javaProhibited/serializable/bean/Country.java">here</a> and <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/javaProhibited/serializable/SerializableTest.java#L45">here</a>.</p>
<h4 id="类中包含没有实现-Serializable-接口的字段"><a href="#类中包含没有实现-Serializable-接口的字段" class="headerlink" title="类中包含没有实现 Serializable 接口的字段"></a>类中包含没有实现 Serializable 接口的字段</h4><p>　需要自己实现 <code>serialize</code> 和 <code>deserialize</code> 方法</p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/javaProhibited/serializable/converter/SerializationConverter.java">here</a> and <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/javaProhibited/serializable/SerializableTest.java#L27">here</a>.</p>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="Collection-内元素类型转换"><a href="#Collection-内元素类型转换" class="headerlink" title="Collection 内元素类型转换"></a>Collection 内元素类型转换</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 对集合里面的元素类型进行转换（A -&gt; B）</span></span><br><span class="line">List&lt;B&gt; variable = (List&lt;B&gt;)(List&lt;?&gt;) collectionOfListA;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="集合的差集、交集、并集"><a href="#集合的差集、交集、并集" class="headerlink" title="集合的差集、交集、并集"></a>集合的差集、交集、并集</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Guava 中封装的 Sets 类</span></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"></span><br><span class="line">Sets.difference(set1, set2)</span><br><span class="line">Sets.intersection(set1, set2)</span><br><span class="line">Sets.union(set1, set2)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数组转为-Set"><a href="#数组转为-Set" class="headerlink" title="数组转为 Set"></a>数组转为 Set</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// JDK8</span></span><br><span class="line"><span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(str.trim().split(<span class="string">","</span>)))</span><br><span class="line"><span class="comment">// JDK9+</span></span><br><span class="line">Set.of(str.trim().split(<span class="string">","</span>));</span><br></pre></td></tr></tbody></table></figure>
<h3 id="TransmittableThreadLocal-解决跨父子线程和线程池缓存问题"><a href="#TransmittableThreadLocal-解决跨父子线程和线程池缓存问题" class="headerlink" title="TransmittableThreadLocal 解决跨父子线程和线程池缓存问题"></a>TransmittableThreadLocal 解决跨父子线程和线程池缓存问题</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String tlMsg = <span class="string">"tl"</span>;</span><br><span class="line">String ttlMsg = <span class="string">"ttl"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ThreadLocal&lt;String&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">tl.set(tlMsg);</span><br><span class="line"><span class="keyword">final</span> TransmittableThreadLocal&lt;String&gt; ttl = <span class="keyword">new</span> TransmittableThreadLocal&lt;&gt;();</span><br><span class="line">ttl.set(ttlMsg);</span><br><span class="line"></span><br><span class="line">assertEquals(tl.get(), tlMsg);</span><br><span class="line">assertEquals(ttl.get(), ttlMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">    assertNull(tl.get());</span><br><span class="line">    assertEquals(ttl.get(), ttlMsg);</span><br><span class="line">}).start();</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/algorithms/thread/ttl/TransmittableThreadLocalTest.java">here</a>.</p>
<h3 id="计算中位数"><a href="#计算中位数" class="headerlink" title="计算中位数"></a>计算中位数</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> COUNT;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> PriorityQueue&lt;Double&gt; MAX = <span class="keyword">new</span> PriorityQueue&lt;&gt;(Collections.reverseOrder());</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> PriorityQueue&lt;Double&gt; MIN = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    add(<span class="number">1D</span>);</span><br><span class="line">    add(<span class="number">2D</span>);</span><br><span class="line">    add(<span class="number">3D</span>);</span><br><span class="line">    add(<span class="number">4D</span>);</span><br><span class="line">    add(<span class="number">4D</span>);</span><br><span class="line">    <span class="comment">// 3.0</span></span><br><span class="line">    System.out.println(median());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!Double.isNaN(v)) {</span><br><span class="line">        <span class="keyword">if</span> (COUNT % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">            MIN.add(v);</span><br><span class="line">            MAX.add(MIN.peek());</span><br><span class="line">            MIN.poll();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            MAX.add(v);</span><br><span class="line">            MIN.add(MAX.peek());</span><br><span class="line">            MAX.poll();</span><br><span class="line">        }</span><br><span class="line">        COUNT++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings("ConstantConditions")</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">median</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (COUNT == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> Double.NaN;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (COUNT % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> (MAX.peek() + MIN.peek()) / <span class="number">2.0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> MAX.peek();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Shutdown-Hook"><a href="#Shutdown-Hook" class="headerlink" title="Shutdown Hook"></a>Shutdown Hook</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>　进程异常退出时，可能 <code>try-finally</code> 也无法保证可以及时释放类似数据库连接资源或清理临时文件，使用 Shutdown Hook 则可以避免该问题。不过也有可能存在无法触发 Shutdown Hook 的情况，例如执行 <code>kill -9</code> 退出进程等，但绝大部分的情况下，都能成功触发，具体如下：</p>
<ul>
<li>程序正常退出</li>
<li>使用 <code>System.exit()</code></li>
<li><code>OutOfMemory</code> 宕机</li>
<li>终端 <code>Ctrl+C</code> 触发的中断</li>
<li>使用 <code>kill pid</code> 命令退出进程</li>
</ul>
<h4 id="编码-1"><a href="#编码-1" class="headerlink" title="编码"></a>编码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"registering"</span>);</span><br><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"shutdown1..."</span>)));</span><br><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"shutdown2..."</span>)));</span><br><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"shutdown3..."</span>)));</span><br><span class="line">System.out.println(<span class="string">"registered"</span>);</span><br><span class="line">System.out.println(<span class="string">"exit"</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">registering</span><br><span class="line">registered</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">shutdown2...</span><br><span class="line">shutdown3...</span><br><span class="line">shutdown1...</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">这里需要注意的是，注册的多个 Shutdown Hook 由各自不同的线程执行完成，是无法保证执行的先后顺序的</div>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a href="https://stefanbirkner.github.io/system-rules/">测试</a></h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.stefanbirkner<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>system-rules<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.ExpectedSystemExit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutdownHookTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ExpectedSystemExit exit = ExpectedSystemExit.none();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_shutdown_hook</span><span class="params">()</span> </span>{</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"shutdown..."</span>)));</span><br><span class="line"></span><br><span class="line">        exit.expectSystemExit();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">使用 ExpectedSystemExit 可以避免执行 System.exit 后所有测试用例都被终止的问题</div>



<h3 id="SPI-解耦"><a href="#SPI-解耦" class="headerlink" title="SPI 解耦"></a>SPI 解耦</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/ServiceLoader.html">定义</a></h4><blockquote>
<p>A service is a well-known interface or class for which zero, one, or many service providers exist. A service provider (or just provider) is a class that implements or subclasses the well-known interface or class. A ServiceLoader is an object that locates and loads service providers deployed in the run time environment at a time of an application´s choosing. Application code refers only to the service, not to service providers, and is assumed to be capable of choosing between multiple service providers (based on the functionality they expose through the service), and handling the possibility that no service providers are located.</p>
</blockquote>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-hacker/src/main/java/com/yuzhouwan/hacker/spi">示例</a></h4><ul>
<li>定义 SPI 接口</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStore</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">record</span><span class="params">(String data)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>实现 SPI 接口</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESStore</span> <span class="keyword">implements</span> <span class="title">IStore</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(String data)</span> </span>{</span><br><span class="line">        System.err.println(<span class="string">"Recording "</span> + data + <span class="string">" to ES ..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseStore</span> <span class="keyword">implements</span> <span class="title">IStore</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(String data)</span> </span>{</span><br><span class="line">        System.err.println(<span class="string">"Recording "</span> + data + <span class="string">" to HBase ..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置子类的全限定名</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim src/main/resources/META-INF/services/com.yuzhouwan.hacker.spi.IStore</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">com.yuzhouwan.hacker.spi.ESStore</span><br><span class="line">com.yuzhouwan.hacker.spi.HBaseStore</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>通过 ServiceLoader.load 加载 SPI 接口的实现</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (IStore store : ServiceLoader.load(IStore.class)) {</span><br><span class="line">    System.err.println(<span class="string">"Loaded "</span> + store.getClass().getSimpleName());</span><br><span class="line">    store.record(<span class="string">"yuzhouwan.com"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Loaded ESStore</span><br><span class="line">Recording yuzhouwan.com to ES ...</span><br><span class="line">Loaded HBaseStore</span><br><span class="line">Recording yuzhouwan.com to HBase ...</span><br></pre></td></tr></tbody></table></figure>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>解耦</li>
<li>插件化</li>
<li>通过 <code>stream()</code> 遍历可以实现懒加载，避免一次性加载所有的实现（JDK9+）</li>
</ul>
<h3 id="避免使用-Properties-的-put-和-putAll-方法"><a href="#避免使用-Properties-的-put-和-putAll-方法" class="headerlink" title="避免使用 Properties 的 put 和 putAll 方法"></a>避免使用 Properties 的 put 和 putAll 方法</h3><p>　因为 <code>Properties</code> 继承于 <code>Hashtable</code>，所以可以调用父类 <code>Hashtable</code> 的 <code>put</code> 和 <code>putAll</code> 方法。但是并不建议这样用，而是希望使用 <code>setProperty</code> 方法。因为 <code>setProperty</code> 方法限制了 Key 和 Value 的数据类型为 <code>String</code>，而 <code>put</code> 和 <code>putAll</code> 方法却不会。虽然，<code>put</code> 写入和 <code>get</code> 读取非 <code>String</code> 的数据是没问题的，但是在 <code>store</code> 和 <code>save</code> 调用的时候却会出错，抛出 <code>ClassCastException</code> 异常。例如：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">p.put(<span class="number">1</span>, <span class="string">"yuzhouwan"</span>);</span><br><span class="line">p.store(System.out, <span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line">  at java.util.Properties.store0(Properties.java:<span class="number">833</span>)</span><br><span class="line">  at java.util.Properties.store(Properties.java:<span class="number">818</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h2><h3 id="魔法数字"><a href="#魔法数字" class="headerlink" title="魔法数字"></a>魔法数字</h3><p>　编码过程中，应该避免出现没有声明含义的纯数字</p>
<h4 id="反面示例"><a href="#反面示例" class="headerlink" title="反面示例"></a>反面示例</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.kafka.connect.runtime.distributed.DistributedHerder#stop</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (!forwardRequestExecutor.awaitTermination(<span class="number">10000L</span>, TimeUnit.MILLISECONDS))</span><br><span class="line">    forwardRequestExecutor.shutdownNow();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="正面示例"><a href="#正面示例" class="headerlink" title="正面示例"></a>正面示例</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 这里除了需要将 10000L 抽象成 FORWARD_REQUEST_SHUTDOWN_TIMEOUT_MS 静态变量</span></span><br><span class="line"><span class="comment">// 还可以进一步使用 10_000L 方便阅读</span></span><br><span class="line"><span class="comment">// 因为这里和时间有关，更进一步，可以使用 TimeUnit.SECONDS.toMillis(10) 来代替纯数字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> FORWARD_REQUEST_SHUTDOWN_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (!forwardRequestExecutor.awaitTermination(FORWARD_REQUEST_SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS))</span><br><span class="line">    forwardRequestExecutor.shutdownNow();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/apache/kafka/pull/4799/files">here</a> and <a href="https://github.com/apache/druid/pull/6158/files">here</a>.</p>
<h3 id="字符串判空"><a href="#字符串判空" class="headerlink" title="字符串判空"></a>字符串判空</h3><h4 id="反面示例-1"><a href="#反面示例-1" class="headerlink" title="反面示例"></a>反面示例</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.kafka.connect.runtime.distributed.DistributedHerder#reconfigureConnector</span></span><br><span class="line">leaderUrl.equals(<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="正面示例-1"><a href="#正面示例-1" class="headerlink" title="正面示例"></a>正面示例</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 一方面，需要考虑不能将对象放在 equals 方法之前，避免空指针异常</span></span><br><span class="line"><span class="comment">// 另一方面，使用 `str.length() == 0` 的方式，效率会高一些</span></span><br><span class="line"><span class="comment">// 进一步，使用 isEmpty() 方法，则可以使得代码更加可读</span></span><br><span class="line">leaderUrl == <span class="keyword">null</span> || leaderUrl.trim().isEmpty()</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/apache/kafka/pull/4798/files">here</a>.</p>
<h3 id="箭头型代码"><a href="#箭头型代码" class="headerlink" title="箭头型代码"></a>箭头型代码</h3><h4 id="反面示例-2"><a href="#反面示例-2" class="headerlink" title="反面示例"></a>反面示例</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">public void m(String s) {</span><br><span class="line">    <span class="keyword">if</span> (s != null) {</span><br><span class="line">        <span class="keyword">if</span> (s.trim().length() &gt; 0) {</span><br><span class="line">            <span class="keyword">if</span> (s.contains(<span class="string">"yuzhouwan"</span>)) {</span><br><span class="line">                System.out.println(<span class="string">"https://yuzhouwan.com"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="正面示例-2"><a href="#正面示例-2" class="headerlink" title="正面示例"></a>正面示例</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(String s)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (s.trim().length() == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!s.contains(<span class="string">"yuzhouwan"</span>)) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"https://yuzhouwan.com"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><h5 id="反面示例-3"><a href="#反面示例-3" class="headerlink" title="反面示例"></a>反面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">deserialize</span><span class="params">(ByteArrayDataInput in)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> isNullByteSet(in) ? <span class="keyword">null</span> : in.readLong();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="正面示例-3"><a href="#正面示例-3" class="headerlink" title="正面示例"></a>正面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> Optional.ofNullable(in)</span><br><span class="line">               .filter(InputRowSerde::isNotNullByteSet)</span><br><span class="line">               .map(ByteArrayDataInput::readLong)</span><br><span class="line">               .get();</span><br></pre></td></tr></tbody></table></figure>
<h4 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h4><h5 id="反面示例-4"><a href="#反面示例-4" class="headerlink" title="反面示例"></a>反面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTaskPending</span><span class="params">(Task task)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (TaskRunnerWorkItem workItem : taskRunner.getPendingTasks()) {</span><br><span class="line">        <span class="keyword">if</span> (workItem.getTaskId().equals(task.getId())) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="正面示例-4"><a href="#正面示例-4" class="headerlink" title="正面示例"></a>正面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String taskId = task.getId();</span><br><span class="line"><span class="keyword">return</span> taskRunner.getPendingTasks()</span><br><span class="line">                 .stream()</span><br><span class="line">                 .anyMatch(t -&gt; taskId.equals(t.getTaskId()));</span><br></pre></td></tr></tbody></table></figure>
<h4 id="list-去重统计"><a href="#list-去重统计" class="headerlink" title="list 去重统计"></a>list 去重统计</h4><h5 id="反面示例-5"><a href="#反面示例-5" class="headerlink" title="反面示例"></a>反面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">final</span> Map&lt;String, Integer&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : list) {</span><br><span class="line">    <span class="keyword">if</span> (res.containsKey(s)) {</span><br><span class="line">        res.put(s, res.get(s) + <span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        res.put(s, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// {"a":3,"b":1,"c":1}</span></span><br><span class="line">System.out.println(JSON.toJSONString(res));</span><br></pre></td></tr></tbody></table></figure>
<h5 id="正面示例-5"><a href="#正面示例-5" class="headerlink" title="正面示例"></a>正面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">final</span> Map&lt;String, Integer&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">list.forEach(s -&gt; res.compute(s, (k, v) -&gt; (v == <span class="keyword">null</span>) ? <span class="number">1</span> : ++v));</span><br><span class="line"><span class="comment">// {"a":3,"b":1,"c":1}</span></span><br><span class="line">System.out.println(JSON.toJSONString(res));</span><br></pre></td></tr></tbody></table></figure>
<h4 id="嵌套-list-遍历求和"><a href="#嵌套-list-遍历求和" class="headerlink" title="嵌套 list 遍历求和"></a>嵌套 list 遍历求和</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">List&lt;Integer&gt; l0 = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">l0.add(<span class="number">1</span>);</span><br><span class="line">l0.add(<span class="number">2</span>);</span><br><span class="line">l.add(l0);</span><br><span class="line">l.add(Collections.singletonList(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (List&lt;Integer&gt; ints : l) {</span><br><span class="line">    <span class="keyword">for</span> (Integer i : ints) {</span><br><span class="line">        sum += i;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">Assert.assertEquals(<span class="number">6</span>, sum);</span><br></pre></td></tr></tbody></table></figure>
<h5 id="正面示例-6"><a href="#正面示例-6" class="headerlink" title="正面示例"></a>正面示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">List&lt;Integer&gt; l0 = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">l0.add(<span class="number">1</span>);</span><br><span class="line">l0.add(<span class="number">2</span>);</span><br><span class="line">l.add(l0);</span><br><span class="line">l.add(Collections.singletonList(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">int</span> sum = l.stream()</span><br><span class="line">        .flatMap(Collection::stream)</span><br><span class="line">        .mapToInt(Integer::intValue)</span><br><span class="line">        .sum();</span><br><span class="line">Assert.assertEquals(<span class="number">6</span>, sum);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99">单一功能原则</a></h3><p>　在面向对象编程领域中，<strong>单一功能原则</strong>（<strong>S</strong>ingle <strong>r</strong>esponsibility <strong>p</strong>rinciple，<strong>SRP</strong>）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">开闭原则</a></h3><p>　在面向对象编程领域中，<strong>开闭原则</strong>（<strong>O</strong>pen-<strong>c</strong>losed <strong>p</strong>rinciple，<strong>OCP</strong>）规定“软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的”，这意味着一个实体是允许在不改变它的源代码的前提下变更它的行为</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a><a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a></h3><p>　<strong>里氏替换原则</strong>（<strong>L</strong>iskov <strong>s</strong>ubstitution <strong>p</strong>rinciple，<strong>LSP</strong>）强调的是 面向对象程序设计中的 <strong>可替代性</strong>，说明在计算机程序中，如果 S 是 T 的子类型，那么类型 T 的对象可以用类型 S 的对象替换（即 T 类型的对象可以被任何子类型 S 的对象替换），而不改变程序的任何期望属性（正确地执行的任务等）</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a><a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99">接口隔离原则</a></h3><p>　<strong>接口隔离原则</strong>（<strong>I</strong>nterface-<strong>s</strong>egregation <strong>p</strong>rinciples，<strong>ISP</strong>）指明客户（client）应该不依赖于它不使用的方法。接口隔离原则拆分非常庞大臃肿的接口，成为更小的和更具体的接口，这样客户将只需要知道他们感兴趣的方法。这种缩小的接口也被称为角色接口（Role interfaces）。接口隔离原则的目的是系统解开耦合，从而容易重构，更改和重新部署</p>
<h3 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a><a href="https://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99">依赖反转原则</a></h3><p>　在面向对象编程领域中，<strong>依赖反转原则</strong>（<strong>D</strong>ependency <strong>i</strong>nversion <strong>p</strong>rinciple，<strong>DIP</strong>）是指一种特定的解耦（传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。 该原则规定：</p>
<ul>
<li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口</li>
<li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口</li>
</ul>
<div class="note success">五大原则的速记：SOLID</div>





<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="工具层面"><a href="#工具层面" class="headerlink" title="工具层面"></a>工具层面</h3><h4 id="性能指标监控"><a href="#性能指标监控" class="headerlink" title="性能指标监控"></a>性能指标监控</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">metrics.version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">metrics.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>metrics-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>${metrics.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="JMH-基准测试"><a href="#JMH-基准测试" class="headerlink" title="JMH 基准测试"></a>JMH 基准测试</h4><h5 id="增加-Maven-依赖"><a href="#增加-Maven-依赖" class="headerlink" title="增加 Maven 依赖"></a>增加 <a href="https://yuzhouwan.com/posts/2254/">Maven</a> 依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jmh.version</span>&gt;</span>1.19<span class="tag">&lt;/<span class="name">jmh.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JMH --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jmh.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jmh.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="编写-JMH-测试案例"><a href="#编写-JMH-测试案例" class="headerlink" title="编写 JMH 测试案例"></a>编写 JMH 测试案例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.Throughput)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenchmarkSimple</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bench</span><span class="params">()</span> </span>{</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Benchmark               Mode    Cnt     Score        Error     Units</span></span><br><span class="line"><span class="comment">    BenchmarkSimple.bench   thrpt    5  13352311.603 ± 767137.272  ops/ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>{</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(BenchmarkSimple.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .warmupIterations(<span class="number">5</span>)</span><br><span class="line">                .measurementIterations(<span class="number">5</span>)</span><br><span class="line">                .threads(<span class="number">10</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-bigdata/yuzhouwan-bigdata-zookeeper/src/test/java/com/yuzhouwan/bigdata/zookeeper/benchmark">here</a>.</p>
<h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul>
<li>不和会 JUnit 冲突，不用担心 Jenkins 会自动跑 Benchmark 测试而影响效率（否则需要添加 <code>@Ignore</code> 让 CI 系统忽略掉性能相关的 JUnit 测试用例）</li>
<li>支持 <code>warm up</code>，可以解决 JIT 预热问题</li>
</ul>
<h4 id="BTrace"><a href="#BTrace" class="headerlink" title="BTrace"></a><a href="https://github.com/btraceio/btrace">BTrace</a></h4><p>　BTrace is a safe, dynamic tracing tool for the Java platform. BTrace can be used to dynamically trace a running Java program (similar to DTrace for OpenSolaris applications and OS). BTrace dynamically instruments the classes of the target application to inject tracing code (“bytecode tracing”).</p>
<h4 id="LooseJar"><a href="#LooseJar" class="headerlink" title="LooseJar"></a>LooseJar</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>　分析没有被加载任何 class 的 jar 包，帮助删除工程中不必要的 jar 包。不过，需要注意的是，有些类是动态加载的（比如数据类型转换类的，只有加载数据时才会用到），需要尽可能地多测试，才能保证 LooseJar 分析准确</p>
<h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><ul>
<li><p>下载<br>在 LooseJar 的 <a href="https://github.com/kyrill007/loosejar/releases">release 页面</a>，下载 <a href="https://github.com/kyrill007/loosejar/releases/download/1.1.0/loosejar-1.1.0.jar">loosejar-1.1.0.jar</a></p>
</li>
<li><p>拷贝<br>将 loosejar.jar 放到应用的 WEB-INF 下的 lib 目录中，比如说路径是 <code>/yuzhouwan/yuzhouwan-site/yuzhouwan-site-web/src/main/webapp/WEB-INF/lib/loosejar.jar</code></p>
</li>
<li><p>配置<br>在 IDE 中的 installed JRES 里面的 JDK 处配置 <code>-Dfile.encoding=uft8 -javaagent:/yuzhouwan/yuzhouwan-site/yuzhouwan-site-web/src/main/webapp/WEB-INF/lib/loosejar.jar</code></p>
</li>
<li><p>启动<br>启动应用，尽可能做到路径全覆盖地测试应用，让每段代码都被执行到</p>
</li>
<li><p>查看结果<br>运行 JDK 自带的 Jconsole 工具，选择 BootStrap 的那个端口，然后选择 MBean 下的 <code>com.googlecode.loosejar</code>，并点击 summary，即可看到分析结果</p>
</li>
</ul>
<h3 id="编码层面"><a href="#编码层面" class="headerlink" title="编码层面"></a>编码层面</h3><h4 id="并发相关"><a href="#并发相关" class="headerlink" title="并发相关"></a>并发相关</h4><h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><p>　详见，《如何运用 JVM 知识提高编程水平 - <a href="https://yuzhouwan.com/posts/27328/#synchronized-的性能之争">synchronized 的性能之争</a>》</p>
<h5 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h5><p>　StampedLock 是 JDK8 新引入的一个针对读写锁进行改进的类。其主要思想是，如果在读的同时又发生了写，则应当重读，而不是在读的时候阻塞写。如此可以做到，不仅读操作之间不会相互阻塞，还可以保证读操作不会阻塞写操作</p>
<h4 id="集合优化"><a href="#集合优化" class="headerlink" title="集合优化"></a>集合优化</h4><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><h6 id="为什么-Java-8-版本中引入红黑树"><a href="#为什么-Java-8-版本中引入红黑树" class="headerlink" title="为什么 Java 8 版本中引入红黑树"></a>为什么 Java 8 版本中引入红黑树</h6><ul>
<li><p>原因</p>
<p>JDK8 以前 HashMap 的实现是 <strong>数组+链表</strong>，即使哈希函数取得再好，也很难达到元素百分百均匀分布</p>
<p>当 HashMap 中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个时候 HashMap 就相当于一个单链表，假如单链表有 n 个元素，遍历的时间复杂度就是 $O(n)$，完全失去了它的优势</p>
<p>针对这种情况，JDK8 中引入了 <strong>红黑树</strong>（查找时间复杂度为 $O(\log n)$）来优化这个问题</p>
</li>
</ul>
<ul>
<li><p>流程</p>
<p>添加时，当桶中链表个数超过 8 时会转换成红黑树</p>
<p>删除、扩容时，如果桶中结构为红黑树，并且树中元素个数太少的话，会进行修剪或者直接还原成链表结构</p>
<p>查找时即使哈希函数设计不合理，大量元素集中在一个桶中，由于有红黑树结构，性能也不会差</p>
</li>
</ul>
<h5 id="Collections-类"><a href="#Collections-类" class="headerlink" title="Collections 类"></a>Collections 类</h5><h6 id="空集合"><a href="#空集合" class="headerlink" title="空集合"></a>空集合</h6><p>　<code>Collections.emptyList()</code> 重用一个对象而不是创建一个新对象，就像 <code>Arrays.asList()</code> 一样</p>
<h6 id="单元素"><a href="#单元素" class="headerlink" title="单元素"></a>单元素</h6><p>　<code>Collections.singletonList(element)</code> 是不可变的，且内部不用创建数组。而 <code>Arrays.asList(element)</code> 则是一个固定大小的 List，仍然需要创建数组</p>
<h5 id="LinkedList-vs-ArrayList-vs-ArrayDeque"><a href="#LinkedList-vs-ArrayList-vs-ArrayDeque" class="headerlink" title="LinkedList vs ArrayList vs ArrayDeque"></a>LinkedList vs ArrayList vs ArrayDeque</h5><p>　绝对大部分的场景，都能用 ArrayList 和 ArrayDeque 满足需求。而 LinkedList 唯一最擅长的场景是，遍历元素的时候，删除当前元素。ArrayList 使用下标访问元素时，因为不需要遍历链表，所以比 LinkedList 快很多。而 ArrayDeque 对开头和结尾进行增加或者删除时，因为不涉及分配链表节点和 GC 成本，所以也比 LinkedList 更快。不过，<code>ArrayDeque</code> 不支持 <code>null</code> 是硬伤</p>
<h5 id="java-util-Random-vs-java-util-concurrent-ThreadLocalRandom-vs-java-util-SplittableRandom"><a href="#java-util-Random-vs-java-util-concurrent-ThreadLocalRandom-vs-java-util-SplittableRandom" class="headerlink" title="java.util.Random vs java.util.concurrent.ThreadLocalRandom vs java.util.SplittableRandom"></a>java.util.Random vs java.util.concurrent.ThreadLocalRandom vs java.util.SplittableRandom</h5><p>　目前，JDK 中存在三种常用的方法来产生随机数，分别是 JDK1.0 的 <code>java.util.Random</code>、JDK1.7 的 <code>java.util.concurrent.ThreadLocalRandom</code> 和 JDK1.8 的 <code>java.util.SplittableRandom</code>（另外，<code>java.lang.Math.random()</code> 本质上还是 <code>java.util.Random</code>；而 <code>java.security.SecureRandom</code> 主要适用于加密场景，这里不做展开）。其中，<code>java.util.Random</code> 使用的是最普遍使用的线性同余法，该方法主要思路是通过对前一个数进行线性运算并取模从而得到下一个随机数。如此会带来一个问题，如果想保证线程安全，就需要在多线程之间共享 seed 值，同步的过程就会导致性能的损失。而 <code>ThreadLocalRandom</code> 和 <code>SplittableRandom</code> 为了避免该问题，则使用新发明的 SPLITMIX 算法，通过构建图谱和混合函数的方式，避免了加锁或 CAS 的过程。后两者都是基于同一个算法实现，不过也有稍微的区别，比如混合函数中引起<a href="https://en.wikipedia.org/wiki/Avalanche_effect">雪崩效应</a>的常数值不一致等。从工程实现角度来看，相比于 <code>Random</code>，后两者基于 Fork-Join 思想，使得其在并发场景下，性能更佳。并且，<code>ThreadLocalRandom</code> 继承于 <code>Random</code>，而 <code>SplittableRandom</code> 则是完全独立的类。<br>　从 Doug Lea 的论文可以看出，后两者无论是单线程还是多线程的场景下，都是优于 <code>java.util.Random</code> 的。而针对 32-bits 和 64-bits 两种场景下，<code>ThreadLocalRandom</code> 和 <code>SplittableRandom</code> 则各有千秋。</p>
<p><img data-src="/picture/java/java_random_sequential_throughput.png" alt="Sequential Throughput for Random"></p>
<p><img data-src="/picture/java/java_random_parallel_stream_throughput.png" alt="Parallel Stream Throughput for Random"></p>
<center>（图片来源：《Fast Splittable Pseudorandom Number Generators》）</center>




<h5 id="contains-方法"><a href="#contains-方法" class="headerlink" title="contains 方法"></a>contains 方法</h5><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h6><p>　时间复杂度 和 内存使用率 角度看，<code>HashSet</code> 为最佳之选</p>
<h5 id="toArray-方法"><a href="#toArray-方法" class="headerlink" title="toArray 方法"></a>toArray 方法</h5><h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><p>　使用 <code>Collection.toArray</code> 将集合转数组的时候，应该传入长度为 <code>0</code> 的数组（例如，<code>new String[0])</code>），而非预分配大小的。如此不仅代码可读性更佳，性能也会更好。</p>
<p>　JDK6 之前推荐传入预分配大小的数组，是因为 <code>toArray</code> 会调用 <code>Array.newArray</code>，而该方法使用了反射的方式初始化数组，因而性能低下。而在 JDK6 之后，JVM 将 <code>newArray</code> 调用标记为 <code>@HotSpotIntrinsicCandidate</code> 方法，使得其直接调用 JVM 内部实现而不走正常 JNI 逻辑，从而规避了昂贵的反射操作。另外，数组在初始化的时候，需要通过 zeroing 的过程，将已经分配给数组的内存空间覆盖为初始值。而长度为 <code>0</code> 的数组，则可以节省下这部分的性能开销。</p>
<h6 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToArrayBenchmark</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param({"1", "100", "1000", "5000", "10000", "100000"})</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateList</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            list.add(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> Object[] preSize() {</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> Object[n]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> Object[] resize() {</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Integer List:</span></span><br><span class="line"><span class="comment">    Benchmark                    (n)  Mode  Cnt       Score        Error  Units</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize       1  avgt    3      41.552 ±    108.030  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize     100  avgt    3     216.449 ±    799.501  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize    1000  avgt    3    2087.965 ±   6027.778  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize    5000  avgt    3    9098.358 ±  14603.493  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize   10000  avgt    3   24204.199 ± 121468.232  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize  100000  avgt    3  188183.618 ± 369455.090  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize        1  avgt    3      18.987 ±     36.449  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize      100  avgt    3     265.549 ±   1125.008  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize     1000  avgt    3    1560.713 ±   2922.186  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize     5000  avgt    3    7804.810 ±   8333.390  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize    10000  avgt    3   24791.026 ±  78459.936  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize   100000  avgt    3  158891.642 ±  56055.895  ns/op</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Object List:</span></span><br><span class="line"><span class="comment">    Benchmark                    (n)  Mode  Cnt      Score       Error  Units</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize       1  avgt    3     36.306 ±    96.612  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize     100  avgt    3     52.372 ±    84.159  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize    1000  avgt    3    449.807 ±   215.692  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize    5000  avgt    3   2080.172 ±  2003.726  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize   10000  avgt    3   4657.937 ±  8432.624  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.preSize  100000  avgt    3  51980.829 ± 46920.314  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize        1  avgt    3     16.747 ±    85.131  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize      100  avgt    3     43.803 ±    28.704  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize     1000  avgt    3    404.681 ±   132.986  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize     5000  avgt    3   1972.649 ±   174.691  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize    10000  avgt    3   4021.440 ±  1114.212  ns/op</span></span><br><span class="line"><span class="comment">    ToArrayBenchmark.resize   100000  avgt    3  44204.167 ± 76714.850  ns/op</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(ToArrayBenchmark.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .warmupIterations(<span class="number">1</span>)</span><br><span class="line">                .measurementIterations(<span class="number">3</span>)</span><br><span class="line">                .threads(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/algorithms/collection/ToArrayBenchmark.java">here</a>.</p>
<h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5><div class="table-container">
<table>
<thead>
<tr>
<th>Operation</th>
<th>Runtime in nanoseconds per operation</th>
<th>Relative to instanceof</th>
</tr>
</thead>
<tbody>
<tr>
<td>INSTANCEOF</td>
<td>39,598 ± 0,022 ns/op</td>
<td>100,00 %</td>
</tr>
<tr>
<td>GETCLASS</td>
<td>39,687 ± 0,021 ns/op</td>
<td>100,22 %</td>
</tr>
<tr>
<td>TYPE</td>
<td>46,295 ± 0,026 ns/op</td>
<td>116,91 %</td>
</tr>
<tr>
<td>OO</td>
<td>48,078 ± 0,026 ns/op</td>
<td>121,42 %</td>
</tr>
</tbody>
</table>
</div>
<h4 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h4><h5 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h5><p>　借鉴 JDK11 中新增的 <code>String#repeat</code> 特性，实现高效的 repeat 工具方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string whose value is the concatenation of the</span></span><br><span class="line"><span class="comment"> * string {<span class="doctag">@code</span> s} repeated {<span class="doctag">@code</span> count} times.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If count or length is zero then the empty string is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method may be used to create space padding for</span></span><br><span class="line"><span class="comment"> * formatting text or zero padding for formatting numbers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count number of times to repeat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> A string composed of this string repeated</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@code</span> count} times or the empty string if count</span></span><br><span class="line"><span class="comment"> * or length is zero.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the {<span class="doctag">@code</span> count} is negative.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> https://bugs.openjdk.java.net/browse/JDK-8197594</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">repeat</span><span class="params">(String s, <span class="keyword">int</span> count)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count is negative, "</span> + count);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">byte</span>[] value = s.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> || count == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] single = <span class="keyword">new</span> <span class="keyword">byte</span>[count];</span><br><span class="line">        Arrays.fill(single, value[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(single, StandardCharsets.UTF_8);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (Integer.MAX_VALUE / count &lt; len) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> limit = len * count;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] multiple = <span class="keyword">new</span> <span class="keyword">byte</span>[limit];</span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, multiple, <span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">int</span> copied = len;</span><br><span class="line">    <span class="keyword">for</span> (; copied &lt; limit - copied; copied &lt;&lt;= <span class="number">1</span>) {</span><br><span class="line">        System.arraycopy(multiple, <span class="number">0</span>, multiple, copied, copied);</span><br><span class="line">    }</span><br><span class="line">    System.arraycopy(multiple, <span class="number">0</span>, multiple, copied, limit - copied);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(multiple, StandardCharsets.UTF_8);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Fork-Join-思想"><a href="#Fork-Join-思想" class="headerlink" title="Fork / Join 思想"></a>Fork / Join 思想</h4><p>　这里以查找最小数为例，具体实现如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright @ 2019 yuzhouwan.com</span></span><br><span class="line"><span class="comment"> * All right reserved.</span></span><br><span class="line"><span class="comment"> * Function：Minimum Finder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Benedict Jin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/4/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinimumFinder</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JOIN_THRESHOLD = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MinimumFinder</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MinimumFinder</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(data, <span class="number">0</span>, data.length);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> len = end - start;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; JOIN_THRESHOLD) {</span><br><span class="line">            <span class="keyword">return</span> internal();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> split = len / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> MinimumFinder left = <span class="keyword">new</span> MinimumFinder(data, start, start + split);</span><br><span class="line">        left.fork();</span><br><span class="line">        <span class="keyword">final</span> MinimumFinder right = <span class="keyword">new</span> MinimumFinder(data, start + split, end);</span><br><span class="line">        <span class="keyword">return</span> Math.min(right.compute(), left.join());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Integer <span class="title">internal</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">" computing: "</span> + start + <span class="string">" to "</span> + end);</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (data[i] &lt; min) {</span><br><span class="line">                min = data[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random(System.nanoTime());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) {</span><br><span class="line">            data[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">final</span> ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">        <span class="keyword">final</span> MinimumFinder finder = <span class="keyword">new</span> MinimumFinder(data);</span><br><span class="line">        System.out.println(pool.invoke(finder));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　另外，JDK8+ 中使用 <code>parallelStream()</code> 方法将集合转为并行的 Stream 进行处理，内部使用的便是 Fork/Join 思想。需要注意的是，parallelStream 内部创建的线程池大小可以通过 <code>java.util.concurrent.ForkJoinPool.common.parallelism</code> 参数来控制，最大不能超过 <code>ForkJoinPool#MAX_CAP</code>，即 <code>32767</code>。默认情况下，直接使用 CPU 的虚拟核数作为线程池大小。</p>
<h4 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h4><p>　摘自一段来自 <a href="https://en.wikipedia.org/wiki/Memoization">wikipedia.org</a> 的定义，如下</p>
<blockquote>
<p>In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.</p>
</blockquote>
<p>　由此可见，Memoization 也就是我们常用的单例设计模式的由来。如果项目中使用到了 Guava，则可以很方便地通过调用 <code>Suppliers.memoize(() -&gt; {...})</code> 来实现。其<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Suppliers.java#L85">内部</a>实现了一个 <code>2-field</code> 变种的 Double-check 锁，具体如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a supplier which caches the instance retrieved during the first</span></span><br><span class="line"><span class="comment"> * call to {<span class="doctag">@code</span> get()} and returns that value on subsequent calls to</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@code</span> get()}. See:</span></span><br><span class="line"><span class="comment"> * &lt;a href="http://en.wikipedia.org/wiki/Memoization"&gt;memoization&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The returned supplier is thread-safe. The supplier's serialized form</span></span><br><span class="line"><span class="comment"> * does not contain the cached value, which will be recalculated when {<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * get()} is called on the reserialized instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If {<span class="doctag">@code</span> delegate} is an instance created by an earlier call to {<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * memoize}, it is returned directly.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Supplier&lt;T&gt; <span class="title">memoize</span><span class="params">(Supplier&lt;T&gt; delegate)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> (delegate <span class="keyword">instanceof</span> MemoizingSupplier)</span><br><span class="line">         ? delegate</span><br><span class="line">         : <span class="keyword">new</span> MemoizingSupplier&lt;T&gt;(Preconditions.checkNotNull(delegate));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoizingSupplier</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt;, <span class="title">Serializable</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> Supplier&lt;T&gt; delegate;</span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized;</span><br><span class="line">  <span class="comment">// "value" does not need to be volatile; visibility piggy-backs</span></span><br><span class="line">  <span class="comment">// on volatile read of "initialized".</span></span><br><span class="line">  <span class="keyword">transient</span> T value;</span><br><span class="line"></span><br><span class="line">  MemoizingSupplier(Supplier&lt;T&gt; delegate) {</span><br><span class="line">    <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// A 2-field variant of Double Checked Locking.</span></span><br><span class="line">    <span class="keyword">if</span> (!initialized) {</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">        <span class="keyword">if</span> (!initialized) {</span><br><span class="line">          T t = delegate.get();</span><br><span class="line">          value = t;</span><br><span class="line">          initialized = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">return</span> t;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Suppliers.memoize("</span> + delegate + <span class="string">")"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="堆栈优化"><a href="#堆栈优化" class="headerlink" title="堆栈优化"></a>堆栈优化</h4><h5 id="ByteBuffer"><a href="#ByteBuffer" class="headerlink" title="ByteBuffer"></a>ByteBuffer</h5><p>　通过 <code>allocateDirect(int capacity)</code> 方法可以避开堆栈，直接通过操作系统创建内存块作为缓冲区。该方式与操作系统能更好地耦合，因而能进一步提高 I/O 操作的速度。缺点是，分配直接缓冲区的系统开销很大。因此，只有在缓冲区较大并会长期存在，或者需要经常重用时，才使用这种缓冲区</p>
<h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><h5 id="奇偶数"><a href="#奇偶数" class="headerlink" title="奇偶数"></a>奇偶数</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEven</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (i &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="毫秒"><a href="#毫秒" class="headerlink" title="毫秒"></a>毫秒</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SECOND_MASK = <span class="number">0xFFFFFFFF00000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMillis</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (timestamp &amp; SECOND_MASK) != <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>　<code>System.currentTimeMillis()</code> 通过 <code>GetSystemTimeAsFileTime</code> API 可以快速地获取系统的全局变量值，以得到毫秒值。但是，这个接口取决于操作系统底层的实现，所以有可能该全局变量值的更新频率不高，导致无法满足毫秒级别的精度。如果，是在高精度监控或者游戏等，对时间精度要求很高的领域，则需要使用 <code>System.nanoTime()</code>。后者，使用了 PIT（programmable-interval-timer）、PMT（power management timer）或 TSC（CPU-level timestamp-counter）几种高精度的时间计数器，以保证准确性。但 <code>System.nanoTime()</code> 的执行过程会存在微秒级别的耗时，所以也很难真正达到纳秒级的精度</p>
<h4 id="强引用-vs-软引用-vs-弱引用-vs-虚引用"><a href="#强引用-vs-软引用-vs-弱引用-vs-虚引用" class="headerlink" title="强引用 vs 软引用 vs 弱引用 vs 虚引用"></a>强引用 vs 软引用 vs 弱引用 vs 虚引用</h4><p>　合理地利用软引用和弱引用，可以有效解决 OOM 问题，下表是关于四种引用类型的比对：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>例子</th>
<th>用途</th>
<th>生命周期</th>
<th>触发回收的时刻</th>
</tr>
</thead>
<tbody>
<tr>
<td>强引用</td>
<td><code>Object o = new Object()</code></td>
<td>对象的一般状态</td>
<td>JVM 停止运行时终止</td>
<td>从来不会</td>
</tr>
<tr>
<td>软引用</td>
<td><code>new SoftReference&lt;&gt;("yuzhouwan")</code></td>
<td>对象缓存</td>
<td>内存不足时终止</td>
<td>内存不足时</td>
</tr>
<tr>
<td>弱引用</td>
<td><code>new WeakReference&lt;&gt;("asdf")</code></td>
<td>对象缓存</td>
<td>GC 运行后终止</td>
<td>垃圾回收时</td>
</tr>
<tr>
<td>虚引用</td>
<td><code>new PhantomReference&lt;&gt;("2014", new ReferenceQueue&lt;&gt;())</code></td>
<td>跟踪对象被垃圾回收器回收的活动</td>
<td>无生命周期</td>
<td>任何时候</td>
</tr>
</tbody>
</table>
</div>
<h2 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h2><h3 id="参数驱动"><a href="#参数驱动" class="headerlink" title="参数驱动"></a>参数驱动</h3><p>　利用 <code>@Parameterized.Parameters</code> 注解可以指定多个可能的传值，使得当前测试类下的所有测试用例可以被多次复用。但是该注解并不能让参数之间自行组合，所以严格来说，并不是参数驱动（后续介绍的 HttpRunner 框架则是严格意义上的参数驱动）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yuzhouwan.compression.CompressionType;</span><br><span class="line"><span class="keyword">import</span> org.junit.FixMethodOrder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.MethodSorters;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FixMethodOrder(MethodSorters.JVM)</span></span><br><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompressionTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter()</span><br><span class="line">    <span class="keyword">public</span> CompressionType compressionType4ts;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">public</span> CompressionType compressionType4longValue;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">public</span> CompressionType compressionType4doubleValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; getParameters() {</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]{</span><br><span class="line">                {CompressionType.NONE, CompressionType.NONE, CompressionType.NONE},</span><br><span class="line">                {CompressionType.SIMPLE8B, CompressionType.NONE, CompressionType.GORILLA},</span><br><span class="line">                {CompressionType.SIMPLE8B_WITH_RLE, CompressionType.ZIGZAG_WITH_SIMPLE8B, CompressionType.NONE},</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NONE - NONE - NONE</span></span><br><span class="line"><span class="comment">     * SIMPLE8B - NONE - GORILLA</span></span><br><span class="line"><span class="comment">     * SIMPLE8B_WITH_RLE - ZIGZAG_WITH_SIMPLE8B - NONE</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(compressionType4ts + <span class="string">" - "</span> + compressionType4longValue + <span class="string">" - "</span> + compressionType4doubleValue);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h3><h4 id="HttpRunner"><a href="#HttpRunner" class="headerlink" title="HttpRunner"></a>HttpRunner</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>　<a href="https://v2.httprunner.org/">HttpRunner</a>™ 是一款面向 HTTP(S) 协议的通用测试框架，只需编写维护一份 <code>YAML/JSON</code> 脚本，即可实现自动化测试、性能测试、线上监控、持续集成等多种测试需求。这里将以测试 OpenTSDB 为例，更加具象地介绍 HttpRunner</p>
<h5 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install httprunner==1.5.15</span><br><span class="line"></span><br><span class="line">$ hrun -V</span><br><span class="line">  1.5.15</span><br><span class="line"></span><br><span class="line">$ har2case -V</span><br><span class="line">  0.2.0</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-Flask"><a href="#启动-Flask" class="headerlink" title="启动 Flask"></a>启动 Flask</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install flask</span><br><span class="line"></span><br><span class="line">$ mkdir docs/data/</span><br><span class="line">$ wget https://v2.httprunner.org/data/api_server.py -P docs/data/</span><br><span class="line">$ <span class="built_in">export</span> FLASK_APP=docs/data/api_server.py</span><br><span class="line">$ <span class="built_in">export</span> FLASK_ENV=development</span><br><span class="line">$ flask run</span><br><span class="line"></span><br><span class="line">$ curl localhost:5000                                          </span><br><span class="line">  Hello World!</span><br></pre></td></tr></tbody></table></figure>
<h6 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://v2.httprunner.org/data/demo-quickstart.har -P docs/data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 demo-quickstart.har 转换为 HttpRunner 的测试用例文件</span></span><br><span class="line"><span class="comment"># 默认输出 JSON 文件，加 `-2y` 参数，可以转化为 YAML</span></span><br><span class="line">$ har2case docs/data/demo-quickstart.har</span><br><span class="line">$ hrun docs/data/demo-quickstart.json</span><br></pre></td></tr></tbody></table></figure>
<h5 id="新建测试项目"><a href="#新建测试项目" class="headerlink" title="新建测试项目"></a>新建测试项目</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 新建目录</span></span><br><span class="line">$ httprunner --startproject yuzhouwan</span><br><span class="line"></span><br><span class="line">$ ls -sail</span><br><span class="line">  12891420763 4 -rw-r--r--  1 benedictjin wheel   44 Feb  2 11:37 .env</span><br><span class="line">  12891384628 0 drwxr-xr-x  2 benedictjin wheel   64 Feb  1 16:44 api/</span><br><span class="line">  12891454305 4 -rw-r--r--  1 benedictjin wheel 2389 Feb  2 14:34 debugtalk.py</span><br><span class="line">  12891454901 4 -rw-r--r--  1 benedictjin wheel 1452 Feb  2 15:21 locustfile.py</span><br><span class="line">  12891454386 0 drwxr-xr-x  8 benedictjin wheel  256 Feb  2 15:30 reports/</span><br><span class="line">  12891384629 0 drwxr-xr-x  7 benedictjin wheel  224 Feb  2 14:47 testcases/</span><br><span class="line">  12891384630 0 drwxr-xr-x  2 benedictjin wheel   64 Feb  1 16:44 testsuites/</span><br><span class="line"><span class="comment"># .env         存放环境变量的 properties 文件</span></span><br><span class="line"><span class="comment"># testcases    存放所有 httprunner 的 json 测试实例</span></span><br><span class="line"><span class="comment"># debugtalk.py 存放所有 httprunner 测试实例中，需要用到自定义函数</span></span><br><span class="line"><span class="comment"># reports      生成的 html 结果页面</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><h6 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python -m pip install --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --trusted-host pypi.org locustio</span><br><span class="line"></span><br><span class="line">$ locusts -V</span><br><span class="line">  [2019-02-02 10:17:55,387] BenedictJin.local/INFO/stdout: Locust 0.9.0</span><br><span class="line">  [2019-02-02 10:17:55,387] BenedictJin.local/INFO/stdout:</span><br><span class="line"></span><br><span class="line">$ locusts -f put_one_point_with_variable_data_types.json --processes 4</span><br><span class="line">  [2019-02-02 10:18:53,668] BenedictJin.local/INFO/locust.main: Starting web monitor at *:8089</span><br><span class="line">  [2019-02-02 10:18:53,668] BenedictJin.local/INFO/locust.main: Starting Locust 0.9.0</span><br></pre></td></tr></tbody></table></figure>
<h6 id="测试限流"><a href="#测试限流" class="headerlink" title="测试限流"></a>测试限流</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要先打开服务端的限流</span></span><br><span class="line">$ <span class="built_in">source</span> .env</span><br><span class="line">$ locusts -f testcases/<span class="built_in">limit</span>/limit_tps_with_number.json --processes 4 -H <span class="variable">${base_url_from_env}</span> -L DEBUG</span><br><span class="line">$ locusts -f testcases/<span class="built_in">limit</span>/limit_tps_with_string.json --processes 4 -H <span class="variable">${base_url_from_env}</span> -L DEBUG</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/picture/java/java_limit_tps_with_string.png" alt=""></p>
<center>（对 <a href="https://github.com/HttpRunner" target="_blank">HttpRunner</a>™ 的截图）</center>


<h5 id="抓包并转为-TestCase"><a href="#抓包并转为-TestCase" class="headerlink" title="抓包并转为 TestCase"></a>抓包并转为 TestCase</h5><h6 id="使用-Charles-抓包工具"><a href="#使用-Charles-抓包工具" class="headerlink" title="使用 Charles 抓包工具"></a>使用 Charles 抓包工具</h6><p>　通过该方法，可以将现有的测试用例，轻松地转为 http_runner 的表现形式。具体步骤如下：</p>
<p>a) 安装 Charles Proxy</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Mac</span></span><br><span class="line"><span class="comment"># https://www.charlesproxy.com/download/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">$ cat &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/Charles.repo</span></span><br><span class="line"><span class="string">  [charlesproxy]</span></span><br><span class="line"><span class="string">  name=Charles Proxy Repository</span></span><br><span class="line"><span class="string">  baseurl=https://www.charlesproxy.com/packages/yum</span></span><br><span class="line"><span class="string">  gpgkey=https://www.charlesproxy.com/packages/yum/PublicKey</span></span><br><span class="line"><span class="string">  EOF</span></span><br><span class="line"></span><br><span class="line">$ sudo yum install charles-proxy</span><br></pre></td></tr></tbody></table></figure>
<p>b) 关闭 browsermob-proxy</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pkill -1 -f browsermob-proxy</span><br></pre></td></tr></tbody></table></figure>
<p>c) 在 Http Request 中增加 Proxy</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">request.setConfig(RequestConfig.custom().setProxy(<span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>)).build());</span><br><span class="line"><span class="comment">// 修改好之后，重新打包编译即可</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="使用-browsermobproxy-代理库"><a href="#使用-browsermobproxy-代理库" class="headerlink" title="使用 browsermobproxy 代理库"></a>使用 browsermobproxy 代理库</h6><p>　也可以通过编写 Python 脚本，来创建 Proxy，并使用 Json 库将 Proxy 抓包内容以 har 的形式保存为文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">from</span> browsermobproxy <span class="keyword">import</span> Server</span><br><span class="line"></span><br><span class="line"><span class="comment"># pkill -1 -f browsermob-proxy</span></span><br><span class="line"><span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</span><br><span class="line">    <span class="keyword">if</span> proc.name() == <span class="string">"browsermob-proxy"</span>:</span><br><span class="line">        proc.kill()</span><br><span class="line"></span><br><span class="line">server = Server(path=<span class="string">"/apps/browsermob-proxy-2.1.4/bin/browsermob-proxy"</span>,</span><br><span class="line">                options={<span class="string">'port'</span>: <span class="number">8880</span>})</span><br><span class="line">server.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">proxy = server.create_proxy(params={<span class="string">'port'</span>: <span class="number">8881</span>})</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'testcases.txt'</span>, <span class="string">"r+"</span>, encoding=<span class="string">"utf8"</span>) <span class="keyword">as</span> of:</span><br><span class="line">    os.chdir(<span class="string">"/code/yuzhouwan-test-cloud"</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> of.readlines():</span><br><span class="line"></span><br><span class="line">        line = line.strip(<span class="string">'\n'</span>)</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        splits = line.split(<span class="string">'.'</span>)</span><br><span class="line">        clazz = splits[<span class="number">0</span>]</span><br><span class="line">        method = splits[<span class="number">1</span>]</span><br><span class="line">        proxy.new_har(<span class="string">"com.yuzhouwan.yuzhouwan.client.%s,%s"</span> % (clazz, method),</span><br><span class="line">                      options={<span class="string">'captureHeaders'</span>: <span class="literal">True</span>, <span class="string">'captureContent'</span>: <span class="literal">True</span>, <span class="string">'captureBinaryContent'</span>: <span class="literal">True</span>})</span><br><span class="line"></span><br><span class="line">        command = <span class="string">'java -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:'</span> \</span><br><span class="line">                  <span class="string">'&lt;...&gt;" '</span> \</span><br><span class="line">                  <span class="string">'com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 -junit4 '</span> \</span><br><span class="line">                  <span class="string">'com.yuzhouwan.yuzhouwan.client.%s,%s'</span> % (clazz, method)</span><br><span class="line">        os.system(command)</span><br><span class="line"></span><br><span class="line">        json_obj = json.dumps(proxy.har)</span><br><span class="line"></span><br><span class="line">        file_dir = <span class="string">'/Users/benedictjin/Documents/http_runner/%s/'</span> % clazz</span><br><span class="line">        file_name = method</span><br><span class="line">        file_extension = <span class="string">'.har'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_dir):</span><br><span class="line">            os.makedirs(file_dir)</span><br><span class="line"></span><br><span class="line">        fileObject = <span class="built_in">open</span>(file_dir + file_name + file_extension, <span class="string">'w'</span>)</span><br><span class="line">        fileObject.write(json_obj)</span><br><span class="line">        fileObject.close()</span><br><span class="line"></span><br><span class="line">server.stop()</span><br></pre></td></tr></tbody></table></figure>
<h5 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h5><h6 id="解决-http-runner-中只能解析部分-parameters-的问题"><a href="#解决-http-runner-中只能解析部分-parameters-的问题" class="headerlink" title="解决 http_runner 中只能解析部分 parameters 的问题"></a>解决 http_runner 中只能解析部分 parameters 的问题</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># vim httprunner/parser.py</span></span><br><span class="line">parsed_parameters_list = []</span><br><span class="line"><span class="keyword">for</span> parameter <span class="keyword">in</span> parameters:</span><br><span class="line">    parameter_name, parameter_content = <span class="built_in">list</span>(parameter.items())[<span class="number">0</span>]</span><br><span class="line">    parameter_name_list = parameter_name.split(<span class="string">"-"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">parsed_parameters_list = []</span><br><span class="line"><span class="keyword">for</span> parameter_name, parameter_content <span class="keyword">in</span> parameters.items():</span><br><span class="line">    parameter_name_list = parameter_name.split(<span class="string">"-"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h6 id="使得-har2case-支持-list-结构的-JSON"><a href="#使得-har2case-支持-list-结构的-JSON" class="headerlink" title="使得 har2case 支持 list 结构的 JSON"></a>使得 har2case 支持 list 结构的 JSON</h6><p>　详见：Let <code>_make_validate</code> method supports the <code>list</code> structures JSON <a href="https://github.com/HttpRunner/har2case/pull/18/files">#18</a></p>
<h6 id="使得-har2case-支持普通文本的返回类型"><a href="#使得-har2case-支持普通文本的返回类型" class="headerlink" title="使得 har2case 支持普通文本的返回类型"></a>使得 har2case 支持普通文本的返回类型</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># vim har2case/core.py</span></span><br><span class="line">mime_type = resp_content_dict.get(<span class="string">"mimeType"</span>)</span><br><span class="line"><span class="keyword">if</span> mime_type <span class="keyword">and</span> mime_type.startswith(<span class="string">"application/json"</span>):</span><br><span class="line"></span><br><span class="line">    encoding = resp_content_dict.get(<span class="string">"encoding"</span>)</span><br><span class="line">    <span class="keyword">if</span> encoding <span class="keyword">and</span> encoding == <span class="string">"base64"</span>:</span><br><span class="line">        content = base64.b64decode(text).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp_content_json = json.loads(content)</span><br><span class="line">        <span class="keyword">except</span> JSONDecodeError:</span><br><span class="line">            logging.warning(<span class="string">"response content can not be loaded as json."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resp_content_json = json.loads(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">mime_type = resp_content_dict.get(<span class="string">"mimeType"</span>)</span><br><span class="line"><span class="keyword">if</span> mime_type <span class="keyword">and</span> mime_type.startswith(<span class="string">"application/json"</span>):</span><br><span class="line"></span><br><span class="line">    encoding = resp_content_dict.get(<span class="string">"encoding"</span>)</span><br><span class="line">    <span class="keyword">if</span> encoding <span class="keyword">and</span> encoding == <span class="string">"base64"</span>:</span><br><span class="line">        text = base64.b64decode(text).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp_content_json = json.loads(text)</span><br><span class="line">    <span class="keyword">except</span> JSONDecodeError:</span><br><span class="line">        logging.warning(<span class="string">"response content can not be loaded as json."</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"resp_content_json"</span>, resp_content_json)</span><br></pre></td></tr></tbody></table></figure>
<h6 id="使二次开发的改动生效"><a href="#使二次开发的改动生效" class="headerlink" title="使二次开发的改动生效"></a>使二次开发的改动生效</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip uninstall har2case -y</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/har2case/har2case</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line">$ har2case --log-level DEBUG test.har</span><br></pre></td></tr></tbody></table></figure>
<h5 id="可视化管理系统"><a href="#可视化管理系统" class="headerlink" title="可视化管理系统"></a>可视化管理系统</h5><h6 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h6><p>　按照<a href="https://github.com/HttpRunner/HttpRunnerManager#%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2">部署手册</a>即可部署成功。相关的，比如，<a href="https://www.jianshu.com/p/07a9826898c0">MySQL 安装</a>、<a href="https://blog.csdn.net/jeikerxiao/article/details/73822184">RabbitMQ 安装</a>，都能找到很多资料。这里，主要记录几个可能踩到的坑</p>
<h6 id="可视化管理页面"><a href="#可视化管理页面" class="headerlink" title="可视化管理页面"></a>可视化管理页面</h6><p>　配置环境、增加测试用例、组合测试套件等，效果如下图所示：</p>
<p><img data-src="/picture/java/java_http_runner_suit.png" alt=""></p>
<p>　运行结果报告页面，效果如下图所示：</p>
<p><img data-src="/picture/java/java_http_runner_report.png" alt=""></p>
<p>　支持权限管理，超级管理员可以配置整个管理系统，效果如下图所示：</p>
<p><img data-src="/picture/java/java_http_runner_super_user.png" alt=""></p>
<center>（对 <a href="https://github.com/HttpRunner" target="_blank">HttpRunner</a>™ 的截图）</center>



<h5 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h5><h6 id="MySQL-默认编码导致-Django-报错-OperationalError"><a href="#MySQL-默认编码导致-Django-报错-OperationalError" class="headerlink" title="MySQL 默认编码导致 Django 报错 OperationalError"></a>MySQL 默认编码导致 Django 报错 OperationalError</h6><ul>
<li>描述</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python manage.py migrate</span><br><span class="line"><span class="comment"># 报错 django.db.utils.OperationalError: (1366, "Incorrect string value for column 'name' at row 1")</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>解决</li>
</ul>
<p>　这个问题是因为新安装的 MySQL 默认的编码不是 <code>UTF-8</code> 导致的，停掉 <code>mysql</code> 实例配置 <code>my.cnf</code> 再重启即可。如果停止不掉，可以 <code>pkill mysql</code> 强制停止。之前创建的数据库也需要删掉重新创建</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/support-files</span><br><span class="line">$ sudo ./mysql.server stop</span><br><span class="line">$ vim my.cnf</span><br><span class="line">  [client]</span><br><span class="line">  default-character-set=utf8</span><br><span class="line"></span><br><span class="line">  [mysql]</span><br><span class="line">  default-character-set=utf8</span><br><span class="line"></span><br><span class="line">  [mysqld]</span><br><span class="line">  collation-server=utf8_unicode_ci</span><br><span class="line">  init-connect=<span class="string">'SET NAMES utf8'</span></span><br><span class="line">  character-set-server=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 my.cnf 没有生效，可能需要拷贝一份到 /private/etc 目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> /private/etc</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/mysql/support-files/my.cnf .</span><br><span class="line"></span><br><span class="line">$ sudo ./mysql.server restart</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; show variables like <span class="string">'%char%'</span>;</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                                     |</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                                      |</span><br><span class="line">| character_set_connection | utf8                                                      |</span><br><span class="line">| character_set_database   | utf8                                                      |</span><br><span class="line">| character_set_filesystem | binary                                                    |</span><br><span class="line">| character_set_results    | utf8                                                      |</span><br><span class="line">| character_set_server     | utf8                                                      |</span><br><span class="line">| character_set_system     | utf8                                                      |</span><br><span class="line">| character_sets_dir       | /usr/<span class="built_in">local</span>/mysql-5.7.25-macos10.14-x86_64/share/charsets/ |</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop database HttpRunner;</span><br><span class="line">Query OK, 27 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create database HttpRunner;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 `TEST_CHARSET` 连接配置</span></span><br><span class="line">$ vim HttpRunnerManager/settings.py</span><br><span class="line">  DATABASES = {</span><br><span class="line">      <span class="string">'default'</span>: {</span><br><span class="line">          <span class="comment"># ...</span></span><br><span class="line">          <span class="string">'TEST_CHARSET'</span>: <span class="string">'utf-8'</span></span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></tbody></table></figure>
<h2 id="JVM-相关"><a href="#JVM-相关" class="headerlink" title="JVM 相关"></a><a href="https://yuzhouwan.com/posts/27328/">JVM 相关</a></h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="堆内-vs-堆外"><a href="#堆内-vs-堆外" class="headerlink" title="堆内 vs 堆外"></a>堆内 vs 堆外</h4><h5 id="堆内内存"><a href="#堆内内存" class="headerlink" title="堆内内存"></a>堆内内存</h5><p>　一般情况下，Java 中分配的非空对象都是由 Java 虚拟机的垃圾收集器管理的，也称为<strong>堆内内存</strong>（on-heap memory）</p>
<h5 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h5><p>　<strong>堆外内存</strong>（off-heap memory）意味着把内存对象分配在 Java 虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机）</p>
<h5 id="堆外内存的优势"><a href="#堆外内存的优势" class="headerlink" title="堆外内存的优势"></a>堆外内存的优势</h5><ul>
<li>对于大内存有良好的伸缩性</li>
<li>对垃圾回收停顿的改善可以明显感觉到</li>
<li>在进程间可以共享，减少虚拟机间的复制</li>
</ul>
<h5 id="堆外内存的劣势"><a href="#堆外内存的劣势" class="headerlink" title="堆外内存的劣势"></a>堆外内存的劣势</h5><ul>
<li>数据结构变得不那么直观，发生内存溢出的时候，排查定位会很麻烦</li>
<li>如果数据结构比较复杂，就要对它进行串行化（serialization），而串行化本身也会影响性能</li>
<li>可以使用更大的内存的同时，需要担心虚拟内存（即硬盘）的速度对应用的影响</li>
</ul>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-XX:MaxDirectMemorySize=64M 可以控制堆外内存大小，默认在 VM 静态变量 directMemory 为 64M</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">maxDirectMemory: 67108864</span></span><br><span class="line"><span class="comment">isDirect: true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    System.out.println(<span class="string">"maxDirectMemory: "</span> + VM.maxDirectMemory());</span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">64</span>);</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">boolean</span> isDirect = buffer.isDirect();</span><br><span class="line">    System.out.println(<span class="string">"isDirect: "</span> + isDirect);</span><br><span class="line">    <span class="keyword">if</span> (isDirect) ((DirectBuffer) buffer).cleaner().clean();</span><br><span class="line">    <span class="keyword">else</span> buffer.clear();</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    System.exit(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指针压缩"><a href="#指针压缩" class="headerlink" title="指针压缩"></a>指针压缩</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>　64 位环境下，寄存器是 64 位的，对应指针也就成 64 位了，也就是 8 字节。我们知道 4 字节可以表示 4G，实际中基本不会有需要加载这么多对象的情况。因此 8 字节就显得浪费了，narrowKlass 只使用 4 个字节，预分配给 _metadata 的 8 字节中的另外 4 字节就可以用做它用了。看似 4 个字节无关紧要，但是堆中存在上千万到亿个对象时，省下的内存就是几百兆啊</p>
<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>基于以下事实</p>
<ul>
<li>CPU 使用的虚拟地址是 64 位的，访问内存时，必须使用 64 位的指针访问内存对象</li>
<li>Java 对象是分配于具体的某个内存位置的，对其访问必须使用 64 位地址</li>
<li>对 Java 对象内的引用字段进行访问时，必须经过虚拟机这一层，操作某个对象引用不管是 getfield 还是 putfield，都是由虚拟机来执行。或者简单来说，要改变 Java 对象某个引用字段，必须经过虚拟机的参与</li>
</ul>
<p>　细心的你从上面一定可以看出一点线索，由于存一个对象引用和取一个对象引用必须经过虚拟机，所以完全可以在虚拟机这一层做些手脚。对于外部来说，putfield 提供的对象地址是 64 位的，经过虚拟机的转换，映射到 32 位，然后存入对象；getfield 指定目标对象的 64 位地址和其内部引用字段的偏移，取 32 位的数据，然后反映射到 64 位内存地址。对于外部来说，只看见 64 位的对象放进去，拿出来，内部的转换是透明的（本质上，就是按字节寻址，变成了按字寻址）</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><p>　CompressedOops 的原理是，解释器在解释字节码时，植入压缩指令（不影响正常和 JVM 优化后的指令顺序）<br>　具体逻辑是，当对象被读取时，解压，存入 heap 时，压缩</p>
<h6 id="压缩指令伪码"><a href="#压缩指令伪码" class="headerlink" title="压缩指令伪码"></a>压缩指令伪码</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">! int R8; oop[] R9; // R9 is 64 bits</span><br><span class="line">! oop R10 = R9[R8]; // R10 is 32 bits</span><br><span class="line">! load compressed ptr from wide base ptr:</span><br><span class="line">movl R10, [R9 + R8&lt;&lt;<span class="string">3 + 16]</span></span><br><span class="line"><span class="string">! klassOop R11 = R10._klass; // R11 is 32 bits</span></span><br><span class="line"><span class="string">! void* const R12 = GetHeapBase();</span></span><br><span class="line"><span class="string">! load compressed klass ptr from compressed base ptr:</span></span><br><span class="line"><span class="string">movl R11, [R12 + R10&lt;&lt;3</span> + 8]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="零基压缩优化（Zero-Based-Compressd-Oops）"><a href="#零基压缩优化（Zero-Based-Compressd-Oops）" class="headerlink" title="零基压缩优化（Zero Based Compressd Oops）"></a>零基压缩优化（Zero Based Compressd Oops）</h5><p>　零基压缩是针对压解压动作的进一步优化。它通过改变正常指针的随机地址分配特性，强制从零开始做分配（需要 OS 支持），进一步提高了压解压效率</p>
<p>　要启用零基压缩，你分配给 JVM 的内存大小必须控制在 4G 以上，32G 以下<br>　如果小于 4G，那么 JVM 会使用低虚拟地址空间（low virutal address space，64 位下模拟 32 位），这样就不需要做压解压动作了<br>　而对于大于 32G，将采用默认的随机地址分配特性，进行压解压</p>
<h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>　CompressedOops，可以让跑在 64 位平台下的 JVM，不需要因为更宽的寻址，而付出 Heap 容量损失的代价。<br>　不过，它的实现方式是在机器码中植入压缩与解压指令，可能会给 JVM 增加额外的开销</p>
<h5 id="参数控制"><a href="#参数控制" class="headerlink" title="参数控制"></a>参数控制</h5><p>　<code>-XX:+UseCompressedOops</code> 开启（<code>jdk1.6.0_14+</code>）<br>　<code>-XX:-UseCompressedOops</code> 关闭</p>
<h5 id="零基压缩的边界"><a href="#零基压缩的边界" class="headerlink" title="零基压缩的边界"></a>零基压缩的边界</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ JAVA_HOME=`/usr/libexec/java_home -v 1.8` java -Xmx32766m -XX:+PrintFlagsFinal 2&gt; /dev/null | grep UseCompressedOops</span><br><span class="line">  bool UseCompressedOops   := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">$ JAVA_HOME=`/usr/libexec/java_home -v 1.8` java -Xmx32767m -XX:+PrintFlagsFinal 2&gt; /dev/null | grep UseCompressedOops</span><br><span class="line">  bool UseCompressedOops   = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果已经 JVM 进程已经启动了，可以通过 jinfo 进行查询</span></span><br><span class="line">$ jinfo -flag UseCompressedOops 18979</span><br><span class="line">  -XX:-UseCompressedOops</span><br></pre></td></tr></tbody></table></figure>
<h5 id="压缩-class-信息中的指针"><a href="#压缩-class-信息中的指针" class="headerlink" title="压缩 class 信息中的指针"></a>压缩 class 信息中的指针</h5><p>　从 JDK6_u23 开始 UseCompressedOops 被默认打开了。因此既能享受 64bit 带来的好处，又避免了 64bit 带来的性能损耗。当然，如果你有机会使用超过 32G 的堆内存，记得把这个选项关了</p>
<p>　到了 Java8，永久代被干掉了，有了 “meta space” 的概念，存储 JVM 中的元数据，包括 Byte code，class 等信息。Java8 在 UseCompressedOops 之外，额外增加了一个新选项叫做 UseCompressedClassPointer。这个选项打开后，class 信息中的指针也用 32bit 的 Compressed 版本。而这些指针指向的空间被称作 “Compressed Class Space”。默认大小是 1G，但可以通过 “CompressedClassSpaceSize” 调整</p>
<p>　如果你的 Java 程序引用了太多的包，有可能会造成这个空间不够用，于是会看到</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Compressed <span class="class"><span class="keyword">class</span> <span class="title">space</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>　这时，一般调大 CompreseedClassSpaceSize 就可以了</p>
<h3 id="常用-Collector"><a href="#常用-Collector" class="headerlink" title="常用 Collector"></a>常用 Collector</h3><h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>　<strong>CMS</strong>，全称 <strong>C</strong>oncurrent <strong>M</strong>ark <strong>S</strong>weep，是一款并发的、使用<strong>标记-清除</strong>算法的垃圾回收器</p>
<h5 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h5><p>　CMS 本身是不会移动内存的，长时间运行后，会产生很多内存碎片，导致没有一段足够大的连续区域可以存放大对象，导致 <code>promotion failed</code>、<code>concurrent mode failure</code> 等异常，从而触发 Full GC</p>
<p>　启用 <code>-XX:+UseCMSCompactAtFullCollection</code> 参数之后，会在 Full GC 的时候，对年老代的内存进行压缩。再配合 <code>-XX:CMSFullGCsBeforeCompaction=0</code> 参数可以控制多少次 FGC 后对老年代做压缩操作。默认值为 0，代表每次都压缩。该参数开启后，会把对象移动到内存的最左边，可能会影响性能，但是可以消除碎片</p>
<h5 id="浮动垃圾"><a href="#浮动垃圾" class="headerlink" title="浮动垃圾"></a>浮动垃圾</h5><p>　由于 CMS 并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS 无法在当次收集中处理掉它们，只好留待下一次 GC 时再清理掉。这些无法被 GC 掉，留到下一次 GC 的垃圾，称之为<strong>浮动垃圾</strong></p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><h5 id="Xss-堆栈大小"><a href="#Xss-堆栈大小" class="headerlink" title="-Xss 堆栈大小"></a>-Xss 堆栈大小</h5><div class="table-container">
<table>
<thead>
<tr>
<th>Platform</th>
<th>Default（KB）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows IA32</td>
<td>64</td>
</tr>
<tr>
<td>Linux IA32</td>
<td>128</td>
</tr>
<tr>
<td>Windows x86_64</td>
<td>128</td>
</tr>
<tr>
<td>Linux x86_64</td>
<td>256</td>
</tr>
<tr>
<td>Windows IA64</td>
<td>320</td>
</tr>
<tr>
<td>Linux IA64</td>
<td>1024</td>
</tr>
<tr>
<td>Solaris Sparc</td>
<td>512</td>
</tr>
</tbody>
</table>
</div>
<p>Tips: <a href="https://github.com/OpenTSDB/opentsdb/issues/334#issuecomment-482528576">实际案例</a> OpenTSDB 大查询导致 <code>java.long.StackOverflowError</code> 后，调整 <code>-Xss32m</code> 得以解决</p>
<h4 id="日志方面"><a href="#日志方面" class="headerlink" title="日志方面"></a>日志方面</h4><h5 id="常用的配置项"><a href="#常用的配置项" class="headerlink" title="常用的配置项"></a>常用的配置项</h5><div class="table-container">
<table>
<thead>
<tr>
<th>Flag</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>-verbose:gc</td>
<td>The <code>-verbose:gc</code> option enables logging of garbage collection (GC) information.</td>
</tr>
<tr>
<td>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps</td>
<td><code>-XX:+PrintGCDetails</code> and <code>-XX:+PrintGCTimeStamps</code> are used to print detailed information about garbage collection.（这里由于 <code>-verbose:gc</code> 相当于 <code>-XX:+PrintGCDetails</code> 的别名，避免冗余，应该去掉 <code>-verbose:gc</code>）</td>
</tr>
<tr>
<td>-XX:-PrintTenuringDistribution</td>
<td>Print tenuring age information.</td>
</tr>
<tr>
<td>-XX:-UseGCLogFileRotation</td>
<td>Enabled GC log rotation, requires -Xloggc.</td>
</tr>
<tr>
<td>-XX:NumberOfGCLogFiles=3</td>
<td>Set the number of files to use when rotating logs, must be &gt;= 1. The rotated log files will use the following naming scheme, <code>&lt;filename&gt;</code>.0, <code>&lt;filename&gt;</code>.1, …, <code>&lt;filename&gt;</code>.n-1.</td>
</tr>
<tr>
<td>-XX:GCLogFileSize=8K</td>
<td>The size of the log file at which point the log will be rotated, must be &gt;= 8K.</td>
</tr>
<tr>
<td>-XX:ErrorFile=./hs_err_pid_%p.log</td>
<td>当 JVM 进程发生 Crash 的时候，会记录下相关的错误信息、信号信息、寄存器信息，以及内存分配情况等。其中 <code>%p</code> 是当前 JVM 进程的 pid 值。默认该日志会创建在当前 JVM 进程的工作目录下</td>
</tr>
</tbody>
</table>
</div>
<h5 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h5><h6 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h6><p>　以 <a href="https://yuzhouwan.com/posts/5845/">Apache Druid</a> 为例，在 Tranquility 组件启动时，加上 <code>-XX:+PrintTenuringDistribution</code> 参数后的效果如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ nohup ./bin/tranquility -J-XX:+HeapDumpOnOutOfMemoryError -J-XX:HeapDumpPath=/data02/druid/ -J-verbose:gc -J-XX:+PrintGCDetails -J-XX:+PrintGCDateStamps -J-XX:+PrintGCDetails -J-XX:+PrintTenuringDistribution -J-Xloggc:/data02/druid/gc.log -Ddruid.extensions.directory=/home/druid/software/druid/extensions -Ddruid.extensions.loadList=<span class="string">'["druid-avro-extensions"]'</span> kafka -configFile conf/service/hbase_metrics_kafka2_avro.json &gt; /home/druid/logs/tranquility/hbase_metrics_kafka2_avro.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line">2017-03-23T14:38:23.582+0800: 90.288: [GC (Allocation Failure) [PSYoungGen: 9934821K-&gt;5622K(10469376K)] 12602986K-&gt;7093554K(28291584K), 0.6114898 secs] [Times: user=13.74 sys=0.06, real=0.61 secs] </span><br><span class="line">2017-03-23T14:38:24.801+0800: 91.507: [GC (Allocation Failure) [PSYoungGen: 10071976K-&gt;3022K(10469376K)] 17159909K-&gt;8861529K(28291584K), 0.1748974 secs] [Times: user=3.91 sys=0.03, real=0.17 secs] </span><br><span class="line">2017-03-23T14:38:26.178+0800: 92.884: [GC (Allocation Failure) [PSYoungGen: 10303201K-&gt;3733K(10469376K)] 19161707K-&gt;9746931K(28291584K), 0.1744318 secs] [Times: user=3.89 sys=0.02, real=0.17 secs] </span><br><span class="line">2017-03-23T14:38:27.277+0800: 93.983: [GC (Allocation Failure) [PSYoungGen: 10091092K-&gt;902K(10469888K)] 19834290K-&gt;10628837K(28292096K), 0.1108355 secs] [Times: user=2.48 sys=0.01, real=0.12 secs] </span><br><span class="line">2017-03-23T14:38:28.586+0800: 95.292: [GC (Allocation Failure) [PSYoungGen: 10089131K-&gt;1078K(10472448K)] 20717066K-&gt;11513094K(28294656K), 0.1054663 secs] [Times: user=2.34 sys=0.01, real=0.11 secs] </span><br><span class="line">2017-03-23T14:38:29.840+0800: 96.546: [GC (Allocation Failure) [PSYoungGen: 10400114K-&gt;1501K(10461696K)] 21912131K-&gt;13281552K(28283904K), 0.1337201 secs] [Times: user=2.99 sys=0.01, real=0.13 secs] </span><br><span class="line">2017-03-23T14:38:30.865+0800: 97.571: [GC (Allocation Failure) [PSYoungGen: 10133038K-&gt;1099K(10472448K)] 23413089K-&gt;15049201K(28294656K), 0.1312707 secs] [Times: user=2.94 sys=0.02, real=0.13 secs] </span><br><span class="line">2017-03-23T14:38:30.996+0800: 97.702: [Full GC (Ergonomics) [PSYoungGen: 1099K-&gt;0K(10472448K)] [ParOldGen: 15048102K-&gt;1783009K(17664000K)] 15049201K-&gt;1783009K(28136448K), [Metaspace: 54341K-&gt;54341K(1095680K)], 0.3020992 secs] [Times: user=3.90 sys=0.00, real=0.31 secs]</span><br><span class="line"></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line">2017-03-23T14:41:03.576+0800: 31.699: [GC (Allocation Failure) </span><br><span class="line">Desired survivor size 23592960 bytes, new threshold 1 (max 15)</span><br><span class="line">[PSYoungGen: 9975727K-&gt;6112K(10454016K)] 13540045K-&gt;6222293K(27026432K), 0.2530233 secs] [Times: user=5.67 sys=0.03, real=0.25 secs] </span><br><span class="line">2017-03-23T14:41:05.031+0800: 33.154: [GC (Allocation Failure) </span><br><span class="line">Desired survivor size 23592960 bytes, new threshold 1 (max 15)</span><br><span class="line">[PSYoungGen: 10241863K-&gt;11872K(10457088K)] 16458045K-&gt;8885401K(27029504K), 0.2811251 secs] [Times: user=6.27 sys=0.05, real=0.29 secs] </span><br><span class="line">2017-03-23T14:41:06.022+0800: 34.145: [GC (Allocation Failure) </span><br><span class="line">Desired survivor size 25165824 bytes, new threshold 1 (max 15)</span><br><span class="line">[PSYoungGen: 10378567K-&gt;15664K(10458624K)] 19252097K-&gt;10661383K(27031040K), 0.2552984 secs] [Times: user=5.70 sys=0.05, real=0.25 secs] </span><br><span class="line">2017-03-23T14:41:06.893+0800: 35.016: [GC (Allocation Failure) </span><br><span class="line">Desired survivor size 24117248 bytes, new threshold 1 (max 15)</span><br><span class="line">[PSYoungGen: 10054634K-&gt;10669K(10460160K)] 20700353K-&gt;12431545K(27032576K), 0.3152384 secs] [Times: user=6.89 sys=0.19, real=0.31 secs] </span><br><span class="line">2017-03-23T14:41:07.208+0800: 35.33</span><br><span class="line">1: [Full GC (Ergonomics) [PSYoungGen: 10669K-&gt;0K(10460160K)] [ParOldGen: 12420876K-&gt;1803376K(14484992K)] 12431545K-&gt;1803376K(24945152K), [Metaspace: 54185K-&gt;54185K(1095680K)], 0.2905749 secs] [Times: user=4.77 sys=0.00, real=0.29 secs] </span><br></pre></td></tr></tbody></table></figure>
<h4 id="内存方面"><a href="#内存方面" class="headerlink" title="内存方面"></a>内存方面</h4><h5 id="XX-AlwaysPreTouch"><a href="#XX-AlwaysPreTouch" class="headerlink" title="-XX:+AlwaysPreTouch"></a>-XX:+AlwaysPreTouch</h5><p>　<a href="https://yuzhouwan.com/posts/31915/#swappiness">Pre-touch</a> the Java heap during JVM initialization. Every page of the heap is thus demand-zeroed during initialization rather than incrementally during application execution.</p>
<h5 id="XX-UseStringDeduplication"><a href="#XX-UseStringDeduplication" class="headerlink" title="-XX:+UseStringDeduplication"></a>-XX:+UseStringDeduplication</h5><p>　在 JDK 1.7.0_6 版本之后，每个 String 对象内部都持有一个私有 <code>char[]</code> 数组。因为该数组没有暴露出来，所以 JVM 可以先判断两个 String 的内容是否一致，再将 <code>char[]</code> 替换成另一个字符串的 <code>char[]</code>。该特性在 <a href="https://openjdk.java.net/jeps/192">JDK 1.8.0_20</a> 版本中引入，但只有在 JVM 使用了 G1GC 的情况下，才可以开启。相关的还有两个参数，其一是 <code>-XX:StringDeduplicationAgeThreshold</code>（默认值：3，即多次 GC 后仍然存活的 String 对象），用来避免作用于生命周期短的字符串；其二是  <code>+PrintStringDeduplicationStatistics</code>，用来打印一些统计信息，以判断特性是否生效。最后，需要注意的是，该特性的执行是发生在 GC 过程中的，如果 String 去重率不高的话，有可能会得不偿失，反而导致 GC 时间变长</p>
<h4 id="启动方面"><a href="#启动方面" class="headerlink" title="启动方面"></a>启动方面</h4><h5 id="ea"><a href="#ea" class="headerlink" title="-ea"></a>-ea</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Usage:</span></span><br><span class="line">  -enableassertions[:&lt;packageName&gt;<span class="string">"..."</span> | :&lt;className&gt;]</span><br><span class="line">  -ea[:&lt;packageName&gt;<span class="string">"..."</span> | :&lt;className&gt;]</span><br><span class="line"></span><br><span class="line">  该参数用来设置 jvm 是否启动断言机制（从 JDK 1.4 开始支持），默认 JVM 是关闭断言机制的，增加 `-ea` 参数可打开断言机制</span><br><span class="line">  不指定 packageName 和 className 时运行所有包和类中的断言</span><br><span class="line">  如果希望只运行某些包或类中的断言，可将包名或类名加到 `-ea` 之后</span><br><span class="line">  比如想要启动包 `com.yuzhouwan.common` 下的断言机制，可用命令 `java -ea:com.yuzhouwan.common...&lt;Main Class&gt;`</span><br></pre></td></tr></tbody></table></figure>
<h3 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h3><h4 id="查看-JVM-参数的默认值"><a href="#查看-JVM-参数的默认值" class="headerlink" title="查看 JVM 参数的默认值"></a>查看 JVM 参数的默认值</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 JDK8 中是否默认打开了 “对象头压缩” 开关</span></span><br><span class="line"><span class="comment"># 实际上，JDK6u23 版本之后，Hotspot 都已经打开了 -XX:+UseCompressedOops 功能（OOP，Ordinary Object Pointer）</span></span><br><span class="line">$ java -XX:+PrintFlagsFinal -version | grep UseCompressedOops</span><br><span class="line">       bool UseCompressedOops                        := <span class="literal">true</span></span><br><span class="line">            {lp64_product}</span><br><span class="line">  java version <span class="string">"1.8.0_111"</span></span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查看-Java-进程的-JVM-参数"><a href="#查看-Java-进程的-JVM-参数" class="headerlink" title="查看 Java 进程的 JVM 参数"></a>查看 Java 进程的 JVM 参数</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ jcmd 666 VM.flags</span><br><span class="line">  666:</span><br><span class="line">  -XX:CICompilerCount=15 -XX:ConcGCThreads=6 -XX:G1HeapRegionSize=33554432 -XX:InitialHeapSize=197904039936 -XX:MarkStackSize=4194304 -XX:MaxGCPauseMillis=200 -XX:MaxHeapSize=197904039936 -XX:MaxNewSize=118715580416 -XX:MinHeapDeltaBytes=33554432 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseFastUnorderedTimeStamps -XX:+UseG1GC</span><br></pre></td></tr></tbody></table></figure>
<h4 id="堆内内存分析"><a href="#堆内内存分析" class="headerlink" title="堆内内存分析"></a>堆内内存分析</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ jmap -histo:live &lt;pid&gt; | less</span><br></pre></td></tr></tbody></table></figure>
<h4 id="堆外内存分析"><a href="#堆外内存分析" class="headerlink" title="堆外内存分析"></a>堆外内存分析</h4><h5 id="google-perftools"><a href="#google-perftools" class="headerlink" title="google-perftools"></a>google-perftools</h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 先安装 g++</span></span><br><span class="line">$ yum -y install gcc gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 libunwind</span></span><br><span class="line">$ wget http://download.savannah.gnu.org/releases/libunwind/libunwind-0.99.tar.gz</span><br><span class="line">$ tar -xzvf libunwind-0.99.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> libunwind-0.99</span><br><span class="line">$ ./configure --prefix=/data0/java/deploy/google-perftools/<span class="built_in">local</span>/libunwind</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 gperftools</span></span><br><span class="line">$ wget https://github.com/gperftools/gperftools/releases/download/gperftools-2.5/gperftools-2.5.tar.gz</span><br><span class="line">$ tar -xzvf gperftools-2.5.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> gperftools-2.5</span><br><span class="line">$ ./configure --prefix=/data0/java/deploy/google-perftools/<span class="built_in">local</span>/gperftools-2.5/</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line">$ vim /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line">  /data0/java/deploy/google-perftools/<span class="built_in">local</span>/libunwind/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 ldconfig 命令，使libunwind生效。 需要 sudo 权限</span></span><br><span class="line">$ /sbin/ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 tmp 目录</span></span><br><span class="line">$ mkdir -p /data0/java/deploy/google-perftools/<span class="built_in">local</span>/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入环境变量</span></span><br><span class="line"><span class="comment"># 不要加在 .bashrc 里面，放在 jvm 启动脚本里面即可</span></span><br><span class="line">  <span class="built_in">export</span> LD_PRELOAD=/data0/java/deploy/google-perftools/<span class="built_in">local</span>/gperftools-2.5/lib/libtcmalloc.so</span><br><span class="line">  <span class="built_in">export</span> HEAPPROFILE=/data0/java/deploy/google-perftools/<span class="built_in">local</span>/tmp/gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 jvm 进程，就会在 /data0/java/deploy/google-perftools/local/ 目录下生成 heap 文件</span></span><br><span class="line">$ bin/hitsdb restart</span><br></pre></td></tr></tbody></table></figure>
<h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 分析函数调用</span></span><br><span class="line">$ /data0/java/deploy/google-perftools/<span class="built_in">local</span>/gperftools-2.5/bin/pprof --text /usr/<span class="built_in">local</span>/jdk1.8.0_181/bin/java /data0/java/deploy/google-perftools/<span class="built_in">local</span>/tmp/gzip.0001.heap</span><br><span class="line"></span><br><span class="line">  Using <span class="built_in">local</span> file /usr/<span class="built_in">local</span>/jdk1.8.0_181/bin/java.</span><br><span class="line">  Using <span class="built_in">local</span> file /data0/java/deploy/google-perftools/<span class="built_in">local</span>/tmp/gzip.0001.heap.</span><br><span class="line">  Total: 0.0 MB</span><br><span class="line">       0.0  87.9%  87.9%      0.0 100.0% __FRAME_END__</span><br><span class="line">       0.0   9.6%  97.5%      0.0   9.6% _nl_intern_locale_data</span><br><span class="line">       0.0   1.2%  98.7%      0.0   1.2% __gconv_lookup_cache</span><br><span class="line">       0.0   0.6%  99.3%      0.0   0.6% new_composite_name</span><br><span class="line">       0.0   0.3%  99.6%      0.0  10.0% _nl_load_locale_from_archive</span><br><span class="line">       0.0   0.2%  99.8%      0.0   0.2% __GI___strdup</span><br><span class="line">       0.0   0.1%  99.9%      0.0   1.3% __wcsmbs_load_conv</span><br><span class="line">       0.0   0.1% 100.0%      0.0   0.1% __bindtextdomain</span><br><span class="line">       0.0   0.0% 100.0%      0.0  10.7% __GI_setlocale</span><br><span class="line">       0.0   0.0% 100.0%      0.0   1.3% __btowc</span><br><span class="line">       0.0   0.0% 100.0%      0.0   1.2% __gconv_find_transform</span><br><span class="line">       0.0   0.0% 100.0%      0.0 100.0% __libc_start_main</span><br><span class="line">       0.0   0.0% 100.0%      0.0   0.0% __textdomain</span><br><span class="line">       0.0   0.0% 100.0%      0.0  10.0% _nl_find_locale</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="JMC-监控报警工具（Java-Mission-Control）"><a href="#JMC-监控报警工具（Java-Mission-Control）" class="headerlink" title="JMC 监控报警工具（Java Mission Control）"></a>JMC 监控报警工具（Java Mission Control）</h3><p>　JMC 工具是 JDK 里面自带的，只需要运行 <code>jmc</code> 命令即可</p>
<p><img data-src="/picture/java/java_jvm_jmc_java_mission_control.png" alt=""></p>
<center>（对 <a href="https://www.oracle.com/technetwork/java/javaseproducts/mission-control/index.html" target="_blank">JMC</a>™ 的截图）</center>


<h3 id="GCViewer"><a href="#GCViewer" class="headerlink" title="GCViewer"></a>GCViewer</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>　在 GCViewer 的<a href="https://github.com/chewiebug/GCViewer/releases">下载页面</a>，找到当前最新版本 <a href="http://sourceforge.net/projects/gcviewer/files/gcviewer-1.35.jar/download">gcviewer-1.35.jar</a> 进行下载</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 文件 gc.log 是由增加了 `-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/home/yuzhouwan/gc.log` 参数的 JVM 进程生成的 GC 日志</span></span><br><span class="line">$ java -jar gcviewer-1.35.jar gc.log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img data-src="/picture/java/java_jvm_gcviewer_throughput_100_percent.png" alt="JVM GCViewer"></p>
<center>（对 <a href="https://github.com/chewiebug/GCViewer" target="_blank">GCViewer</a>™ 的截图）</center>



<h3 id="MAT-内存分析工具（Memory-Analyzer-Tool）"><a href="#MAT-内存分析工具（Memory-Analyzer-Tool）" class="headerlink" title="MAT 内存分析工具（Memory Analyzer Tool）"></a><a href="https://www.eclipse.org/mat/">MAT</a> 内存分析工具（Memory Analyzer Tool）</h3><h4 id="创建-dump-文件"><a href="#创建-dump-文件" class="headerlink" title="创建 dump 文件"></a>创建 dump 文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果指定 live 参数的话，将会在 dump 之前，强制进行一次 Full GC</span></span><br><span class="line">$ jmap -dump:[live,]format=b,file=&lt;file_name&gt;.hprof &lt;pid&gt;</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果 hprof 文件过大，打开时可能会有 OOM 的报错，此时则需要修改 /Applications/mat.app/Contents/Eclipse/MemoryAnalyzer.ini 文件中的 -Xmx1024m 默认参数为 -Xmx4096m，并重启 MAT</div>
<div class="note info">通过 Window - Preferences - Memory Analyzer - Bytes Display 选项卡，可以设置字节占用的展示单位为 GB，默认为 Bytes</div>



<h3 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>　火焰图是一个二维图片，火焰图的 <strong>X</strong> 轴代表<strong>采样总量</strong>，而 <strong>Y</strong> 轴代表<strong>栈深度</strong>。每个框就代表了一个栈里的函数，其宽度代表了所占用的 <strong>CPU 总时间</strong>。因此，比较宽的框就表示，该函数运行时间较慢或被调用次数较多，从而占用的 CPU 时间多</p>
<h4 id="以往获得火焰图所需要的复杂步骤"><a href="#以往获得火焰图所需要的复杂步骤" class="headerlink" title="以往获得火焰图所需要的复杂步骤"></a>以往获得火焰图所需要的复杂步骤</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ yum install perf -y</span><br><span class="line">$ yum install gcc -y</span><br><span class="line">$ yum install gcc-c++</span><br><span class="line">$ yum install cmake -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 perf</span></span><br><span class="line">$ git <span class="built_in">clone</span> --depth=1 https://github.com/jrudolph/perf-map-agent</span><br><span class="line">$ <span class="built_in">cd</span> perf-map-agent</span><br><span class="line">$ cmake .</span><br><span class="line">$ make</span><br><span class="line">$ bin/create-links-in /usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 FlameGraph</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/brendangregg/FlameGraph.git</span><br><span class="line">$ <span class="built_in">export</span> FLAMEGRAPH_DIR=/root/git/FlameGraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动程序时，增加 JVM 参数 -XX:+PreserveFramePointer</span></span><br><span class="line">$ perf-java-flames &lt;pid&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用新版-JVM-Profile-功能之后一键搞定"><a href="#使用新版-JVM-Profile-功能之后一键搞定" class="headerlink" title="使用新版 JVM Profile 功能之后一键搞定"></a>使用新版 JVM Profile 功能之后一键搞定</h4><div class="note success">这里我们以 2018.3 版本为例，但只要是高于该版本的 IDEA 也都是默认支持的</div>


<p>　打开下载 Intellij Idea 下载页面，找到 <a href="https://www.jetbrains.com/idea/nextversion/">Coming in 2018.3</a>，然后下载 EAP 版本的 Intellij Idea</p>
<p><img data-src="/picture/java/java_intellij_2018_3_coming_in.png" alt=""></p>
<p>　打开项目后，使用快捷键 <code>⌘⌥⇧/</code> 打开 <code>Maintenance</code> 面板，选择 <code>Experimantal features</code>，勾选 <code>linux.native.menu</code> 和 <code>idea.profiler.enabled</code></p>
<p><img data-src="/picture/java/java_idea_profiler_enabled.png" alt=""></p>
<p>　使用 <code>Run xxx with Async Profiler</code> 执行任意程序</p>
<p><img data-src="/picture/java/java_run_with_async_profiler.png" alt=""></p>
<p>　即可获得火焰图、方法调用链、方法列表</p>
<p><img data-src="/picture/java/java_jvm_profiler.png" alt=""></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">Intellij IDEA</a>™ 的截图）</center>

<p><strong>火焰图</strong>，主要用于分析 CPU 性能消耗。可以交互式地分析 JVM 进程中所有线程的 CPU 消耗火焰图，也可以选择某一个线程来分析；<br><strong>方法调用链</strong>，可以找到在某个线程中，消耗 CPU 最多的方法<br><strong>方法列表</strong>，可以看到每个方法的调用次数，展开后还可以看到详细的调用栈</p>
<h3 id="序列化-ID-排查工具"><a href="#序列化-ID-排查工具" class="headerlink" title="序列化 ID 排查工具"></a>序列化 ID 排查工具</h3><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">serialver [ options ] [ classnames ]</span><br><span class="line"></span><br><span class="line">  options</span><br><span class="line">    The command-line options. See Options.</span><br><span class="line"></span><br><span class="line">  classnames</span><br><span class="line">    The classes <span class="keyword">for</span> <span class="built_in">which</span> the serialVersionUID is to be returned.</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Arthas-诊断工具"><a href="#Arthas-诊断工具" class="headerlink" title="Arthas 诊断工具"></a>Arthas 诊断工具</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p><img data-src="/picture/java/java_arthas_logo.png" alt=""></p>
<center>（图片来源：<a href="https://github.com/alibaba/arthas/issues/371#issuecomment-457469188" target="_blank">Arthas</a>™ 官网，已获得 Collaborator 的授权）</center>

<p>　如果你想要对线上运行的 JVM 进程进行逻辑或性能分析，但是此时如果进程本身重启很耗时，或者进程内存很大无法进行 Dump 操作，亦或是不想有任何的代码侵入，就统计出各个方法的调用次数和耗时，那么，Arthas 绝对是不二之选</p>
<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a><a href="https://arthas.aliyun.com/doc/quick-start.html">使用</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line">$ java -jar arthas-boot.jar</span><br></pre></td></tr></tbody></table></figure>
<h3 id="tsar-资源监控工具"><a href="#tsar-资源监控工具" class="headerlink" title="tsar 资源监控工具"></a><a href="https://github.com/alibaba/tsar">tsar</a> 资源监控工具</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget -O tsar.zip https://github.com/alibaba/tsar/archive/master.zip --no-check-certificate</span><br><span class="line">$ unzip tsar.zip</span><br><span class="line">$ <span class="built_in">cd</span> tsar-master</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tsar -l -i 1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h3><h4 id="SimpleDateFormat-多线程安全问题"><a href="#SimpleDateFormat-多线程安全问题" class="headerlink" title="SimpleDateFormat 多线程安全问题"></a>SimpleDateFormat 多线程安全问题</h4><p>　不安全的主要原因是，SimpleDateFormat 继承的 DateTime 类，本身就是不安全的。而根本原因是 DateTime 的类属性中 <code>Calendar</code> 实例，并没有使用同步代码块进行多线程安全处理。如果在执行 <code>format(...)</code> 方法的同时，有其他线程调用 <code>setCalendar(Calendar newCalendar)</code> 方法，则会出现混乱。处理的方法有很多，除了在每次需要使用重新初始化 SimpleDateFormat 实例，另外还可使用 ThreadLocal 对其进行缓存，再或者使用 Joda-time 替换 Jdk 原生的 SimpleDateFormat 和 Java 8 里面的 DateTimeFormatter（注意别触发 <a href="https://bugs.java.com/view_bug.do?bug_id=JDK-8031085">JDK-8031085</a>，该问题在 JDK9 才修复），亦可</p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/joda/JodaTimeHaveATry.java">here</a> and <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-common/src/main/java/com/yuzhouwan/common/util/TimeUtils.java#L99">here</a>.</p>
<h4 id="java-lang-IllegalThreadStateException"><a href="#java-lang-IllegalThreadStateException" class="headerlink" title="java.lang.IllegalThreadStateException"></a>java.lang.IllegalThreadStateException</h4><p>　报错是因为 <code>Thread</code> 不可以使用 <code>start()</code> 启动多次，可以将逻辑放在 <code>Runnable</code> 对象中，每次启动的时候，再通过  <code>new Thread(runnable).start()</code> 初始化一个 <code>Thread</code> 对象来启动即可</p>
<h4 id="java-util-ConcurrentModificationException"><a href="#java-util-ConcurrentModificationException" class="headerlink" title="java.util.ConcurrentModificationException"></a><a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-hacker/src/test/java/com/yuzhouwan/hacker/algorithms/collection/FastFailTest.java">java.util.ConcurrentModificationException</a></h4><p>　对集合遍历的时候，同时执行了 remove 元素的操作，就会出现该问题。除了“通过一个临时集合保存需要删除的元素，在遍历结束后，执行 removeAll 进行清理”这种方案外，还可以通过 Iterator 直接进行 remove。后者虽然可以节省了新集合的内存消耗，但是却不能使用增强 for 循环的特性。具体如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = parameters.keySet().iterator();</span><br><span class="line">String key;</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">    key = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"c"</span>.equals(key)) {</span><br><span class="line">        parameters.remove(key);</span><br><span class="line">    }</span><br><span class="line">    assertEquals(<span class="number">1</span>, parameters.size());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="取消数值的科学计数法"><a href="#取消数值的科学计数法" class="headerlink" title="取消数值的科学计数法"></a>取消数值的科学计数法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 数值过大后，double、long 的 toString 可能会出现科学计数法</span></span><br><span class="line"><span class="comment">// 可以通过 NumberFormat 来解决</span></span><br><span class="line">NumberFormat nf = NumberFormat.getInstance();</span><br><span class="line">nf.setGroupingUsed(<span class="keyword">false</span>);</span><br><span class="line">nf.setMaximumFractionDigits(<span class="number">0</span>);</span><br><span class="line">nf.setMaximumIntegerDigits(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">assertEquals(<span class="string">"1234567890123456789"</span>, nf.format(<span class="number">1234567890123456789L</span>));</span><br><span class="line">assertEquals(<span class="number">1234567890123456789L</span>, Long.valueOf(nf.format(<span class="number">1234567890123456789L</span>)).longValue());</span><br><span class="line"><span class="comment">// 或者转换 double 的字符串为 long</span></span><br><span class="line">assertEquals(<span class="number">0L</span>, Long.valueOf(nf.format(<span class="number">0.0</span>)).longValue());</span><br><span class="line"></span><br><span class="line">nf.setMaximumFractionDigits(<span class="number">64</span>);</span><br><span class="line">assertEquals(<span class="string">"0.12345678901234568"</span>, nf.format(<span class="number">0.1234567890_12345678D</span>));</span><br><span class="line">assertEquals(<span class="number">0.12345678901234568D</span>, Double.valueOf(nf.format(<span class="number">0.1234567890_12345678D</span>)), <span class="number">64</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="File-toURL-过期"><a href="#File-toURL-过期" class="headerlink" title="File#toURL 过期"></a>File#toURL 过期</h4><p>　使用 <code>file.toURI().toURL()</code> 替代</p>
<h4 id="Jersey-的-Produces-默认不设置-UTF-8-存在中文乱码"><a href="#Jersey-的-Produces-默认不设置-UTF-8-存在中文乱码" class="headerlink" title="Jersey 的 @Produces 默认不设置 UTF-8 存在中文乱码"></a>Jersey 的 @Produces 默认不设置 UTF-8 存在中文乱码</h4><h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><p>　实现 ContainerResponseFilter 接口，给 <code>@Produces</code> 注解增加 <code>charset=UTF-8</code> 属性</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="编码-MediaTypeFilter"><a href="#编码-MediaTypeFilter" class="headerlink" title="编码 MediaTypeFilter"></a>编码 MediaTypeFilter</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jersey.core.util.Priority;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Priorities;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.ext.Provider;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Provider</span></span><br><span class="line"><span class="meta">@Priority(Priorities.HEADER_DECORATOR)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaTypeFilter</span> <span class="keyword">implements</span> <span class="title">ResourceFilter</span>, <span class="title">ContainerResponseFilter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContainerResponse <span class="title">filter</span><span class="params">(ContainerRequest request, ContainerResponse response)</span> </span>{</span><br><span class="line">        Annotation[] annotations = response.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; annotations.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!(annotations[i] <span class="keyword">instanceof</span> Produces)) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            Produces produces = (Produces) annotations[i];</span><br><span class="line">            String[] producesValues = produces.value();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; producesValues.length; j++) {</span><br><span class="line">                <span class="keyword">if</span> (!MediaType.APPLICATION_JSON.equals(producesValues[j]) &amp;&amp; !MediaType.TEXT_PLAIN.equals(producesValues[j])) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                producesValues[j] += <span class="string">";charset=UTF-8"</span>;</span><br><span class="line">            }</span><br><span class="line">            annotations[i] = produces;</span><br><span class="line">        }</span><br><span class="line">        response.setAnnotations(annotations);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContainerRequestFilter <span class="title">getRequestFilter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContainerResponseFilter <span class="title">getResponseFilter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="在-BrokerResource-中使用"><a href="#在-BrokerResource-中使用" class="headerlink" title="在 BrokerResource 中使用"></a>在 BrokerResource 中使用</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMap;</span><br><span class="line"><span class="keyword">import</span> com.google.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.ResourceFilters;</span><br><span class="line"><span class="keyword">import</span> org.apache.druid.client.BrokerServerView;</span><br><span class="line"><span class="keyword">import</span> org.apache.druid.server.http.security.StateResourceFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.Response;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path("/druid/broker/v1")</span></span><br><span class="line"><span class="meta">@ResourceFilters({StateResourceFilter.class, MediaTypeFilter.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrokerResource</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BrokerServerView brokerServerView;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BrokerResource</span><span class="params">(BrokerServerView brokerServerView)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="keyword">this</span>.brokerServerView = brokerServerView;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GET</span></span><br><span class="line">  <span class="meta">@Path("/loadstatus")</span></span><br><span class="line">  <span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Response <span class="title">getLoadStatus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="keyword">return</span> Response.ok(ImmutableMap.of(<span class="string">"inventoryInitialized"</span>, brokerServerView.isInitialized())).build();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="FastJSON-默认将浮点型反序列化为-BigDecimal"><a href="#FastJSON-默认将浮点型反序列化为-BigDecimal" class="headerlink" title="FastJSON 默认将浮点型反序列化为 BigDecimal"></a>FastJSON 默认将浮点型反序列化为 BigDecimal</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line">JSON.DEFAULT_PARSER_FEATURE &amp;= ~Feature.UseBigDecimal.getMask();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部</span></span><br><span class="line"><span class="keyword">int</span> disable = JSON.DEFAULT_PARSER_FEATURE &amp; ~Feature.UseBigDecimal.getMask();</span><br><span class="line">JSON.parseObject(json, clazz, disable);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然也可以通过 JSON.DEFAULT_PARSER_FEATURE |= Feature.UseBigDecimal.getMask() 重新打开该特性</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="IDE-相关"><a href="#IDE-相关" class="headerlink" title="IDE 相关"></a>IDE 相关</h3><h4 id="Intellij-Idea-Code-Check-中设置行长度为-120，却仍然有一条虚线竖在-80"><a href="#Intellij-Idea-Code-Check-中设置行长度为-120，却仍然有一条虚线竖在-80" class="headerlink" title="[Intellij Idea] Code Check 中设置行长度为 120，却仍然有一条虚线竖在 80"></a>[Intellij Idea] Code Check 中设置行长度为 120，却仍然有一条虚线竖在 80</h4><p>　依次选择菜单 <code>Settings</code> - <code>Editor</code> - <code>Code Style</code> - <code>Java</code>，这时候可以将默认的 <code>Scheme</code> 设置成想要的方案，也可以在 <code>Wrapping  and Braces</code> 中修改 <code>Hard wrap at</code> 为 <code>120</code>，以达到想要的效果</p>
<h3 id="版本相关"><a href="#版本相关" class="headerlink" title="版本相关"></a>版本相关</h3><h4 id="Unsupported-major-minor-version-52-0"><a href="#Unsupported-major-minor-version-52-0" class="headerlink" title="Unsupported major.minor version 52.0"></a>Unsupported major.minor version 52.0</h4><p>　此类报错，是因为用低版本 JDK 去运行高版本的 Java 程序了</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>JDK 版本</th>
<th>Major Version Number</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java SE 11</td>
<td>55</td>
</tr>
<tr>
<td>Java SE 10</td>
<td>54</td>
</tr>
<tr>
<td>Java SE 9</td>
<td>53</td>
</tr>
<tr>
<td>Java SE 8</td>
<td>52</td>
</tr>
<tr>
<td>Java SE 7</td>
<td>51</td>
</tr>
<tr>
<td>Java SE 6.0</td>
<td>50</td>
</tr>
<tr>
<td>Java SE 5.0</td>
<td>49</td>
</tr>
<tr>
<td>JDK 1.4</td>
<td>48</td>
</tr>
<tr>
<td>JDK 1.3</td>
<td>47</td>
</tr>
<tr>
<td>JDK 1.2</td>
<td>46</td>
</tr>
<tr>
<td>JDK 1.1</td>
<td>45</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Maven-相关"><a href="#Maven-相关" class="headerlink" title="Maven 相关"></a>Maven 相关</h3><h4 id="需要正确地在-Maven-的-checkstyle-插件的-Regexp-正则中使用-XML-关键字"><a href="#需要正确地在-Maven-的-checkstyle-插件的-Regexp-正则中使用-XML-关键字" class="headerlink" title="需要正确地在 Maven 的 checkstyle 插件的 Regexp 正则中使用 XML 关键字"></a>需要正确地在 Maven 的 checkstyle 插件的 Regexp 正则中使用 XML 关键字</h4><p>　如果不对下面 5 个符号加 <code>\</code> 反斜杠转义的话，就需要使用 HTML 来表示</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>原始符号</th>
<th>含义</th>
<th>HTML</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\lt$</td>
<td>小于</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>$\gt$</td>
<td>大于</td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td>&amp;</td>
<td>和</td>
<td><code>&amp;amp;</code></td>
</tr>
<tr>
<td>‘</td>
<td>单引号</td>
<td><code>&amp;apos;</code></td>
</tr>
<tr>
<td>“</td>
<td>双引号</td>
<td><code>&amp;quot;</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="LogBack-相关"><a href="#LogBack-相关" class="headerlink" title="LogBack 相关"></a>LogBack 相关</h3><h4 id="日志文件过大"><a href="#日志文件过大" class="headerlink" title="日志文件过大"></a>日志文件过大</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><p>　多个 JVM 进程将日志写入同一个日志文件中，导致按照文件大小切割的策略失效，<code>xxx.log.1</code> 会持续写下去，以至于磁盘被撑爆</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>　在日志路径上增加 <code>${JVM_PREFIX}</code> 变量，并在不同的 JVM 启动的时候，通过 <code>-DJVM_PREFIX="process001"</code> 的方式传入，使得不同的 JVM 进程将日志写入各自的日志文件中</p>
<h3 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h3><h4 id="ConfigFactory-load-只能加载固定目录下的配置文件"><a href="#ConfigFactory-load-只能加载固定目录下的配置文件" class="headerlink" title="ConfigFactory.load() 只能加载固定目录下的配置文件"></a>ConfigFactory.load() 只能加载固定目录下的配置文件</h4><p>　对于 Java 开发而言，要实现加载配置文件的功能，一般都会选用 typesafe 下 <a href="https://github.com/lightbend/config">config</a> 框架，它具备纯 Java 源码和无任何外部依赖的优点。而调用 <code>ConfigFactory.load()</code> 方法只能加载 <code>src/main/resources</code> 下配置文件的问题。针对该问题，只需调用 <code>ConfigFactory.parseFile(new File("yuzhouwan.conf"))</code> 方法，即可指定其他任意位置的配置文件</p>
<h3 id="JVM-相关-1"><a href="#JVM-相关-1" class="headerlink" title="JVM 相关"></a>JVM 相关</h3><h4 id="Too-small-initial-heap"><a href="#Too-small-initial-heap" class="headerlink" title="Too small initial heap"></a>Too small initial heap</h4><p>　<code>-Xmx1024 -Xms512</code> 应改为 <code>-Xmx1024M -Xms512M</code></p>
<h4 id="定位-OOM"><a href="#定位-OOM" class="headerlink" title="定位 OOM"></a>定位 OOM</h4><p>　<code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=xxx</code></p>
<h4 id="堆外内存使用不当，导致-OOM-问题"><a href="#堆外内存使用不当，导致-OOM-问题" class="headerlink" title="堆外内存使用不当，导致 OOM 问题"></a>堆外内存使用不当，导致 OOM 问题</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Direct buffer memory</span><br><span class="line">  at java.nio.Bits.reserveMemory(Bits.java:<span class="number">658</span>)</span><br><span class="line">  at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:<span class="number">123</span>)</span><br><span class="line">  at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:<span class="number">311</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator.newBuffer(SocketReceiveBufferAllocator.java:<span class="number">64</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator.get(SocketReceiveBufferAllocator.java:<span class="number">41</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:<span class="number">62</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:<span class="number">108</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:<span class="number">337</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:<span class="number">89</span>)</span><br><span class="line">  at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:<span class="number">178</span>)</span><br><span class="line">  at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:<span class="number">108</span>)</span><br><span class="line">  at org.jboss.netty.util.internal.DeadLockProofWorker$<span class="number">1.</span>run(DeadLockProofWorker.java:<span class="number">42</span>)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</span><br><span class="line">  at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h5><p>　升级 JDK 版本到 <a href="https://bugs.openjdk.java.net/browse/JDK-8147468">1.8u102+</a>，并使用 <code>-Djdk.nio.maxCachedBufferSize</code> 参数限制每个线程的 <code>DirectByteBuffer</code> 大小</p>
<div class="note info">该参数不支持 M、G 这些单位，只能填写数字，且单位为 Byte</div>
<div class="note info">该参数默认值是 Integer.MAX_VALUE</div>



<h4 id="G1GC-报错-To-space-Exhausted"><a href="#G1GC-报错-To-space-Exhausted" class="headerlink" title="G1GC 报错 To-space Exhausted"></a>G1GC 报错 To-space Exhausted</h4><h5 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2018</span>-08-12T00:<span class="number">52</span>:<span class="number">36.255</span>+0800: <span class="number">17308164.871</span>: [<span class="function">GC <span class="title">pause</span> <span class="params">(G1 Evacuation Pause)</span> <span class="params">(young)</span> <span class="params">(to-space exhausted)</span>, 2.3349764 secs]</span></span><br><span class="line"><span class="function">   [Parallel Time: 331.1 ms, GC Workers: 23]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">Start</span> <span class="params">(ms)</span>: Min: 17308164872.2, Avg: 17308164872.3, Max: 17308164872.3, Diff: 0.2]</span></span><br><span class="line"><span class="function">      [Ext Root <span class="title">Scanning</span> <span class="params">(ms)</span>: Min: 0.7, Avg: 1.0, Max: 3.1, Diff: 2.4, Sum: 23.1]</span></span><br><span class="line"><span class="function">      [Update <span class="title">RS</span> <span class="params">(ms)</span>: Min: 56.3, Avg: 58.3, Max: 59.2, Diff: 2.9, Sum: 1341.8]</span></span><br><span class="line"><span class="function">         [Processed Buffers: Min: 75, Avg: 95.6, Max: 133, Diff: 58, Sum: 2199]</span></span><br><span class="line"><span class="function">      [Scan <span class="title">RS</span> <span class="params">(ms)</span>: Min: 0.8, Avg: 1.4, Max: 1.5, Diff: 0.7, Sum: 33.0]</span></span><br><span class="line"><span class="function">      [Code Root <span class="title">Scanning</span> <span class="params">(ms)</span>: Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span></span><br><span class="line"><span class="function">      [Object <span class="title">Copy</span> <span class="params">(ms)</span>: Min: 269.3, Avg: 269.5, Max: 269.8, Diff: 0.6, Sum: 6197.7]</span></span><br><span class="line"><span class="function">      [<span class="title">Termination</span> <span class="params">(ms)</span>: Min: 0.0, Avg: 0.4, Max: 0.6, Diff: 0.5, Sum: 9.3]</span></span><br><span class="line"><span class="function">         [Termination Attempts: Min: 1, Avg: 290.0, Max: 325, Diff: 324, Sum: 6669]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">Other</span> <span class="params">(ms)</span>: Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 3.0]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">Total</span> <span class="params">(ms)</span>: Min: 330.7, Avg: 330.8, Max: 331.0, Diff: 0.3, Sum: 7608.0]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">End</span> <span class="params">(ms)</span>: Min: 17308165202.9, Avg: 17308165203.0, Max: 17308165203.1, Diff: 0.2]</span></span><br><span class="line"><span class="function">   [Code Root Fixup: 0.2 ms]</span></span><br><span class="line"><span class="function">   [Code Root Purge: 0.0 ms]</span></span><br><span class="line"><span class="function">   [Clear CT: 1.1 ms]</span></span><br><span class="line"><span class="function">   [Other: 2002.7 ms]</span></span><br><span class="line"><span class="function">      [Evacuation Failure: 779.0 ms]</span></span><br><span class="line"><span class="function">      [Choose CSet: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Ref Proc: 1217.9 ms]</span></span><br><span class="line"><span class="function">      [Ref Enq: 1.6 ms]</span></span><br><span class="line"><span class="function">      [Redirty Cards: 0.8 ms]</span></span><br><span class="line"><span class="function">      [Humongous Register: 0.2 ms]</span></span><br><span class="line"><span class="function">      [Humongous Reclaim: 0.9 ms]</span></span><br><span class="line"><span class="function">      [Free CSet: 1.5 ms]</span></span><br><span class="line"><span class="function">   [Eden: 8520.0<span class="title">M</span><span class="params">(<span class="number">8520.</span>0M)</span>-&gt;0.0<span class="title">B</span><span class="params">(<span class="number">3536.</span>0M)</span> Survivors: 368.0M-&gt;440.0M Heap: 14.8<span class="title">G</span><span class="params">(<span class="number">16.</span>0G)</span>-&gt;10.4<span class="title">G</span><span class="params">(<span class="number">16.</span>0G)</span>]</span></span><br><span class="line"><span class="function"> [Times: user</span>=<span class="number">25.22</span> sys=<span class="number">0.29</span>, real=<span class="number">2.33</span> secs] </span><br></pre></td></tr></tbody></table></figure>
<h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>　在日志中看到类似 Evacuation Failure、To-space Exhausted 或者 To-space Overflow 这样的输出（取决于不同版本的 JVM，输出略有不同）。这是 G1GC 收集器在将某个需要垃圾回收的分区进行回收时，无法找到一个能将其中存活对象拷贝过去的空闲分区。这种情况被称为 Evacuation Failure，常常会引发 Full GC</p>
<h5 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h5><ol>
<li>增加 <code>-XX:G1ReservePercent</code> 选项的值（并相应增加总的堆大小），为<strong>目标空间</strong>增加预留内存量</li>
<li>将 <code>-XX:InitiatingHeapOccupancyPercent</code> 参数调低（默认值是45），可以使 G1GC 收集器更早开始 Mixed GC；但另一方面，会增加 GC 发生频率</li>
<li>提高 <code>-XX:ConcGCThreads</code> 的值，在 Mixed GC 阶段投入更多的并发线程，争取提高每次暂停的效率。但是此参数会占用一定的有效工作线程资源</li>
</ol>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://tools.ietf.org/html/rfc5789">PATCH Method for HTTP</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/index.html">Java Platform Standard Edition 8 Documentation</a></li>
</ul>
<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul>
<li><a href="http://jd.benow.ca/">JD-GUI</a></li>
<li><a href="https://abi-laboratory.pro/index.php?view=tracker&amp;lang=java">ABI Laboratory</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="http://mail.openjdk.java.net/pipermail/openjfx-dev/2015-April/017063.html">Private APIs not usable in Java 9?</a><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getTotalPhysicalMemorySize</span><span class="params">()</span> </span>{</span><br><span class="line">    com.sun.management.OperatingSystemMXBean os = (com.sun.management.OperatingSystemMXBean)</span><br><span class="line">            java.lang.management.ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line">    <span class="keyword">return</span> os.getTotalPhysicalMemorySize();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>SPI</tag>
        <tag>HttpRunner</tag>
        <tag>JMC</tag>
        <tag>MAT</tag>
        <tag>Arthas</tag>
        <tag>Jersey</tag>
        <tag>LogBack</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Kafka 分布式消息队列框架</title>
    <url>/posts/26002/</url>
    <content><![CDATA[<h2 id="Kafka-是什么？"><a href="#Kafka-是什么？" class="headerlink" title="Kafka 是什么？"></a>Kafka 是什么？</h2><p>　<strong>Kafka</strong> is a distributed, partitioned, replicated commit log service. It provides the functionality of a messaging system, but with a unique design.</p>
<h2 id="为什么要有-Kafka"><a href="#为什么要有-Kafka" class="headerlink" title="为什么要有 Kafka?"></a>为什么要有 Kafka?</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>　具备经济、快速、可靠、易扩充、数据共享、设备共享、通讯方便、灵活等，分布式所具备的特性</p>
<h3 id="高吞吐量"><a href="#高吞吐量" class="headerlink" title="高吞吐量"></a>高吞吐量</h3><p>　同时为数据生产者和消费者提高吞吐量</p>
<h3 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h3><p>　支持多个消费者，当某个消费者失败的时候，能够自动负载均衡</p>
<h3 id="离线-amp-实时性"><a href="#离线-amp-实时性" class="headerlink" title="离线 &amp; 实时性"></a>离线 &amp; 实时性</h3><p>　能将消息持久化，进行批量处理</p>
<h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>　作为各个系统连接的桥梁，避免系统之间的耦合</p>
<span id="more"></span>
<h2 id="Kafka-工作机制"><a href="#Kafka-工作机制" class="headerlink" title="Kafka 工作机制"></a>Kafka 工作机制</h2><h3 id="一些主要概念"><a href="#一些主要概念" class="headerlink" title="一些主要概念"></a>一些主要概念</h3><ul>
<li><p>Topic（主题）<br> A <strong>topic</strong> is a category or feed name to which messages are published.</p>
</li>
<li><p>Producers（发布者）<br> <strong>Producers</strong> publish data to the topics of their choice. The producer is responsible for choosing which message to assign to which partition within the topic.</p>
</li>
<li><p>Consumers（订阅者）<br> <strong>Consumers</strong> label themselves with a <em>consumer group</em> name, and each record published to a topic is delivered to one consumer instance within each subscribing consumer group. Consumer instances can be in separate processes or on separate machines.</p>
</li>
</ul>
<h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img data-src="/picture/kafka/kafka_consumer_groups.png" alt="Kafka Consumer Groups"></p>
<center>（图片来源：<a href="https://kafka.apache.org/intro" target="_blank">Kafka</a>™ 官网）</center>



<h2 id="Kafka-Connect"><a href="#Kafka-Connect" class="headerlink" title="Kafka Connect"></a>Kafka Connect</h2><h3 id="Kafka-Connect-是什么？"><a href="#Kafka-Connect-是什么？" class="headerlink" title="Kafka Connect 是什么？"></a>Kafka Connect 是什么？</h3><p>　<strong>Kafka Connect</strong> 是一款可扩展且稳定的、可在 Apache Kafka 和其他系统之间进行数据传输的框架。能够快速定义，将大量数据导入导出 Kafka 的连接器。Source Connector 可以接受整个数据库，将表转化为 Stream 更新到 Kafka Topic 中。也支持将应用服务器的指标收集到 Kafka Topic，使得数据可用于低延迟场景的<strong>流处理</strong>。Sink Connector 则可以将数据从 Kafka Topic 传送到搜索引擎（如 <a href="https://yuzhouwan.com/posts/22654/">ElasticSearch</a>）或<strong>离线分析</strong>系统（如 <a href="https://yuzhouwan.com/posts/60504/">Hadoop</a>）</p>
<p><img data-src="/picture/kafka/kafka_connect.png" alt="Kafka Connect"></p>
<center>（图片来源：<a href="https://kafka.apache.org/intro" target="_blank">Kafka</a>™ 官网）</center>



<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>Kafka Connector 通用框架，提供统一的 API 集成接口</li>
<li>支持单机和分布式模式</li>
<li>提供 <a href="https://yuzhouwan.com/posts/26002/#RESTful-接口">RESTful 接口</a>，用来查看和管理 Kafka Connectors</li>
<li>自动化的 Offset 管理</li>
<li>分布式、可扩展，基于现有的 Group 管理协议，可以通过增加 Task / Worker 实现动态扩展</li>
<li>更方便集成其他 流 / 批 处理系统</li>
<li>丰富的 Metrics 监控指标</li>
<li>支持 C / C++ / Go / <a href="https://yuzhouwan.com/posts/27328/">Java</a> / JMS / .Net / <a href="https://yuzhouwan.com/posts/43687/">Python</a> 等多种语言的<a href="https://www.confluent.io/clients/">客户端</a></li>
</ul>
<h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ul>
<li>只专注于可靠、可扩展地<strong>同步数据</strong>（将转换、抽取等任务交给专门的数据处理框架）</li>
<li>尽可能地保持<strong>粗粒度</strong>（比如，同步数据库时，是将整个数据库作为默认的处理单元，而不是一张张表）</li>
<li><strong>并行</strong>地数据同步（支持数据处理能力的自动扩展）</li>
<li>支持 <strong>exactly-once</strong> 强语义（包括，类似 HDFS 这样没有主键用于区分重复的存储系统）</li>
<li>当源系统提供了数据结构和类型之后，需要在数据同步过程中保存<strong>元数据</strong></li>
<li>API 定义需要<strong>简洁</strong>、可重用、易于理解，方便实现自定义的 Connector</li>
<li>同时支持<strong>单机</strong>开发测试，也支持<strong>分布式</strong>生产应用</li>
</ul>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h4><p>　<strong>Connector</strong> 是为了方便协调数据流任务，而提出的高层抽象</p>
<h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>　具体实现数据从 Kafka 导入导出的功能</p>
<p>　同时具备 <strong>Task</strong> 自动容灾的能力（不过 Worker 本身<a href="https://docs.confluent.io/current/connect/userguide.html#deployment-considerations">不支持</a> 自动重启和扩容进程资源的功能）</p>
<h4 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h4><p>　执行 Connector 和 Task 的进程</p>
<h4 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h4><p>　用于转化 Kafka Connect 和 其他系统之间交互的数据格式</p>
<h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><p>　对 Connector 接收和发送的数据进行一些简单的处理逻辑</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a><a href="https://docs.confluent.io/current/connect/design.html#architecture">架构</a></h3><h4 id="Connector-model"><a href="#Connector-model" class="headerlink" title="Connector model"></a><strong>Connector model</strong></h4><p>　Connector 模型，定义了 Kafka Connector 与外部系统的操作接口，包括 Connector 和 Task</p>
<p>　Connector 是一个指定的 <code>Connector</code> 实现类，配置了需要拷贝哪些数据，以及如何处理数据的相关属性。Connector 实例由一组 Tasks 组成。Kafka Connect 实际管理 Tasks，Connector 只负责生成 Tasks，并在框架指定更新的时候，完成配置更改。<code>Source</code> 端 / <code>Sink</code> 端 的 <code>Connectors</code>/<code>Tasks</code> API 接口是独立定义的，主要为了能够保证 API 定义的简洁性</p>
<h4 id="Worker-model"><a href="#Worker-model" class="headerlink" title="Worker model"></a><strong>Worker model</strong></h4><p>　Worker 模型，管理 Connector 和 Task 的生命周期，包括 启动、暂停、恢复、重启、停止 等</p>
<p>　Kafka Connect 群集由一组 Worker 进程组成，这些进程是执行 Connector 和 Task 的容器。Worker 自动和其他分布式的 Worker 协调工作，提供可扩展性和容错性。同时 Worker 进程的<strong>资源管理</strong>可以托管于 Yarn / Mesos，<strong>配置管理</strong>可以与 Chef / Puppet 框架整合，<strong>生命周期管理</strong>也可以使用 Oozie / <a href="http://falcon.apache.org/FalconDocumentation.html">Falcon</a> 等</p>
<h4 id="Data-model"><a href="#Data-model" class="headerlink" title="Data model"></a><strong>Data model</strong></h4><p>　数据模型，定义了 Kafka Connector 管理的数据结构、记录的序列化</p>
<p>　Connectors 复制数据流从一个 partitioned 输入流到一个 partitioned 输出流，其中输入输出端至少有一个总是 Kafka。每一个 Stream 都是一个有序的数据流，流里面的消息都有一个对应的偏移量。这些偏移量的格式和语义由 Connector 定义，以支持与各种系统的集成；然而，为了在故障的情况下实现某些传递语义，需要确保 Stream 内的偏移是唯一的，并且流可以 seek 任意的偏移。同时，Kafka Connect 支持插件式的转换器，以便支持各种序列化格式，来存储这些数据。另外，Schema 是内置的，使得关于数据格式的重要元数据，得以在复杂的数据管道中传播。但是，当 Schema 不可用时，也可以使用无模式的数据</p>
<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><h4 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加用户，并赋予其密码</span></span><br><span class="line">$ adduser connect</span><br><span class="line">$ passwd connect            <span class="comment"># ur password for connect user</span></span><br><span class="line"><span class="comment"># 赋予用户可以 sudo 的权限</span></span><br><span class="line">$ chmod u+w /etc/sudoers</span><br><span class="line">$ vim /etc/sudoers</span><br><span class="line">  <span class="comment"># 找到 `root ALL=(ALL) ALL` 这行，并在下面添加 connect 用户</span></span><br><span class="line">  connect    ALL=(ALL)    ALL</span><br><span class="line"></span><br><span class="line">$ chmod u-w /etc/sudoers</span><br><span class="line"><span class="comment"># 切换到 connect 用户</span></span><br><span class="line">$ su - connect</span><br><span class="line">$ <span class="built_in">cd</span> /home/connect</span><br><span class="line"><span class="comment"># 存放软件目录 &amp; 安装目录 &amp; 日志目录</span></span><br><span class="line">$ mkdir install &amp;&amp; mkdir software &amp;&amp; mkdir logs</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Confluent"><a href="#Confluent" class="headerlink" title="Confluent"></a>Confluent</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>　在 <a href="https://www.confluent.io/download/">https://www.confluent.io/download/</a> 页面中下载 <a href="http://packages.confluent.io/archive/3.3/confluent-oss-3.3.1-2.11.tar.gz">confluent-oss-3.3.1-2.11.tar.gz</a> 安装包</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install/</span><br><span class="line">$ tar zxvf confluent-oss-3.3.1-2.11.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/</span><br><span class="line">$ ln -s confluent-3.3.1/ confluent</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> CONFLUENT_HOME=/home/connect/software/confluent</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$CONFLUENT_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 ZooKeeper, Kafka, Schema Registry</span></span><br><span class="line">$ confluent start schema-registry</span><br><span class="line">  Starting zookeeper</span><br><span class="line">  zookeeper is [UP]</span><br><span class="line">  Starting kafka</span><br><span class="line">  kafka is [UP]</span><br><span class="line">  Starting schema-registry</span><br><span class="line">  schema-registry is [UP]</span><br><span class="line"></span><br><span class="line">$ jps -ml</span><br><span class="line">  32680 org.apache.zookeeper.server.quorum.QuorumPeerMain /tmp/confluent.A8TzcjSE/zookeeper/zookeeper.properties</span><br><span class="line">  348 io.confluent.support.metrics.SupportedKafka /tmp/confluent.A8TzcjSE/kafka/kafka.properties</span><br><span class="line">  483 io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain /tmp/confluent.A8TzcjSE/schema-registry/schema-registry.properties</span><br></pre></td></tr></tbody></table></figure>
<h5 id="发送-avro-数据"><a href="#发送-avro-数据" class="headerlink" title="发送 avro 数据"></a>发送 avro 数据</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/confluent/</span><br><span class="line">$ ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic <span class="built_in">test</span> --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></span><br><span class="line">  <span class="comment"># 输入以下三行 JSON 串</span></span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value3"</span>}</span><br><span class="line">  <span class="comment"># Ctrl+C 停止进程</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="接受-avro-数据"><a href="#接受-avro-数据" class="headerlink" title="接受 avro 数据"></a>接受 avro 数据</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./bin/kafka-avro-console-consumer --topic <span class="built_in">test</span> --zookeeper localhost:2181 --from-beginning</span><br><span class="line">  <span class="comment"># 接收到 producer 发送的三行 JSON 串</span></span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value3"</span>}</span><br><span class="line">  <span class="comment"># Ctrl+C 停止进程</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="发送数据格式不对的-avro-数据"><a href="#发送数据格式不对的-avro-数据" class="headerlink" title="发送数据格式不对的 avro 数据"></a>发送数据格式不对的 avro 数据</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic <span class="built_in">test</span> --property value.schema=<span class="string">'{"type":"int"}'</span></span><br><span class="line">  <span class="comment"># 输入以下一行 JSON 串</span></span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value1"</span>}</span><br><span class="line">  <span class="comment"># 获得如下报错</span></span><br><span class="line">  org.apache.kafka.common.errors.SerializationException: Error deserializing json {<span class="string">"f1"</span>:<span class="string">"value1"</span>} to Avro of schema <span class="string">"int"</span></span><br><span class="line">  Caused by: org.apache.avro.AvroTypeException: Expected int. Got START_OBJECT</span><br><span class="line">      at org.apache.avro.io.JsonDecoder.error(JsonDecoder.java:698)</span><br><span class="line">      at org.apache.avro.io.JsonDecoder.readInt(JsonDecoder.java:172)</span><br><span class="line">      at org.apache.avro.io.ValidatingDecoder.readInt(ValidatingDecoder.java:83)</span><br><span class="line">      at org.apache.avro.generic.GenericDatumReader.readInt(GenericDatumReader.java:503)</span><br><span class="line">      at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:183)</span><br><span class="line">      at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)</span><br><span class="line">      at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:145)</span><br><span class="line">      at io.confluent.kafka.formatter.AvroMessageReader.jsonToAvro(AvroMessageReader.java:191)</span><br><span class="line">      at io.confluent.kafka.formatter.AvroMessageReader.readMessage(AvroMessageReader.java:158)</span><br><span class="line">      at kafka.tools.ConsoleProducer$.main(ConsoleProducer.scala:58)</span><br><span class="line">      at kafka.tools.ConsoleProducer.main(ConsoleProducer.scala)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ confluent stop schema-registry</span><br><span class="line">  Stopping connect</span><br><span class="line">  connect is [DOWN]</span><br><span class="line">  Stopping kafka-rest</span><br><span class="line">  kafka-rest is [DOWN]</span><br><span class="line">  Stopping schema-registry</span><br><span class="line">  schema-registry is [DOWN]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Kafka-Connect-1"><a href="#Kafka-Connect-1" class="headerlink" title="Kafka Connect"></a><a href="https://docs.confluent.io/current/connect/connect-hdfs/docs/hdfs_connector.html">Kafka Connect</a></h4><h5 id="启动-confluent"><a href="#启动-confluent" class="headerlink" title="启动 confluent"></a>启动 confluent</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ confluent start</span><br><span class="line">  zookeeper is already running. Try restarting <span class="keyword">if</span> needed</span><br><span class="line">  kafka is already running. Try restarting <span class="keyword">if</span> needed</span><br><span class="line">  Starting schema-registry</span><br><span class="line">  schema-registry is [UP]</span><br><span class="line">  Starting kafka-rest</span><br><span class="line">  kafka-rest is [UP]</span><br><span class="line">  Starting connect</span><br><span class="line">  connect is [UP]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="查看-connect-日志"><a href="#查看-connect-日志" class="headerlink" title="查看 connect 日志"></a>查看 connect 日志</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ confluent <span class="built_in">log</span> connect</span><br><span class="line">$ confluent current</span><br><span class="line">  /tmp/confluent.A8TzcjSE</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /tmp/confluent.A8TzcjSE</span><br><span class="line">$ less connect/connect.stderr</span><br></pre></td></tr></tbody></table></figure>
<h5 id="查看支持的-connect-类型"><a href="#查看支持的-connect-类型" class="headerlink" title="查看支持的 connect 类型"></a>查看支持的 connect 类型</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ confluent list connectors</span><br><span class="line">  Bundled Predefined Connectors (edit configuration under etc/):</span><br><span class="line">    elasticsearch-sink</span><br><span class="line">    file-source</span><br><span class="line">    file-sink</span><br><span class="line">    jdbc-source</span><br><span class="line">    jdbc-sink</span><br><span class="line">    hdfs-sink</span><br><span class="line">    s3-sink</span><br><span class="line"></span><br><span class="line">$ ll etc/</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 08:07 camus</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:41 confluent-common</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:28 kafka</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:50 kafka-connect-elasticsearch</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:58 kafka-connect-hdfs</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 08:06 kafka-connect-jdbc</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 08:04 kafka-connect-s3</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:52 kafka-connect-storage-common</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:48 kafka-rest</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:42 rest-utils</span><br><span class="line">  drwxr-xr-x 2 connect connect 4096 Jul 28 07:45 schema-registry</span><br></pre></td></tr></tbody></table></figure>
<h5 id="使用-file-source"><a href="#使用-file-source" class="headerlink" title="使用 file-source"></a>使用 file-source</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 file-source</span></span><br><span class="line">$ cat ./etc/kafka/connect-file-source.properties</span><br><span class="line">  name=local-file-source</span><br><span class="line">  connector.class=FileStreamSource</span><br><span class="line">  tasks.max=1</span><br><span class="line">  file=test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不需要 Schema Registry 功能，需要同时制定 key.converter 和 value.converter 参数为org.apache.kafka.connect.json.JsonConverter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往 test.txt 里面写入测试数据</span></span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> {1..3}; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"log line <span class="variable">$i</span>"</span>; <span class="keyword">done</span> &gt; test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装载 file-source 连接器，并确认 file-source 的配置</span></span><br><span class="line">$ confluent load file-source</span><br><span class="line">  {<span class="string">"name"</span>:<span class="string">"file-source"</span>,<span class="string">"config"</span>:{<span class="string">"connector.class"</span>:<span class="string">"FileStreamSource"</span>,<span class="string">"tasks.max"</span>:<span class="string">"1"</span>,<span class="string">"file"</span>:<span class="string">"test.txt"</span>,<span class="string">"topic"</span>:<span class="string">"connect-test"</span>,<span class="string">"name"</span>:<span class="string">"file-source"</span>},<span class="string">"tasks"</span>:[]}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认 connecter 是否已经装载</span></span><br><span class="line">$ confluent status connectors</span><br><span class="line">  [<span class="string">"file-source"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 file-source 连接器的运行状态</span></span><br><span class="line">$ confluent status file-source</span><br><span class="line">  {<span class="string">"name"</span>:<span class="string">"file-source"</span>,<span class="string">"connector"</span>:{<span class="string">"state"</span>:<span class="string">"RUNNING"</span>,<span class="string">"worker_id"</span>:<span class="string">"192.168.1.101:8083"</span>},<span class="string">"tasks"</span>:[{<span class="string">"state"</span>:<span class="string">"RUNNING"</span>,<span class="string">"id"</span>:0,<span class="string">"worker_id"</span>:<span class="string">"192.168.1.101:8083"</span>}]}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 Kafka 是否接收到数据</span></span><br><span class="line">$ kafka-avro-console-consumer --bootstrap-server localhost:9092 --topic connect-test --from-beginning</span><br><span class="line">  <span class="string">"log line 1"</span></span><br><span class="line">  <span class="string">"log line 2"</span></span><br><span class="line">  <span class="string">"log line 3"</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="使用-file-sink"><a href="#使用-file-sink" class="headerlink" title="使用 file-sink"></a>使用 file-sink</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 file-sink</span></span><br><span class="line">$ cat ./etc/kafka/connect-file-sink.properties</span><br><span class="line">  name=local-file-sink</span><br><span class="line">  connector.class=FileStreamSink</span><br><span class="line">  tasks.max=1</span><br><span class="line">  file=test.sink.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装载 file-sink 连接器，并确认 file-sink 的配置</span></span><br><span class="line">$ confluent load file-sink</span><br><span class="line">  {<span class="string">"name"</span>:<span class="string">"file-sink"</span>,<span class="string">"config"</span>:{<span class="string">"connector.class"</span>:<span class="string">"FileStreamSink"</span>,<span class="string">"tasks.max"</span>:<span class="string">"1"</span>,<span class="string">"file"</span>:<span class="string">"test.sink.txt"</span>,<span class="string">"topics"</span>:<span class="string">"connect-test"</span>,<span class="string">"name"</span>:<span class="string">"file-sink"</span>},<span class="string">"tasks"</span>:[]}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认 connecter 是否已经装载</span></span><br><span class="line">$ confluent status connectors</span><br><span class="line">  [<span class="string">"file-source"</span>,<span class="string">"file-sink"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 file-sink 连接器的运行状态</span></span><br><span class="line">$ confluent status file-sink</span><br><span class="line">  {<span class="string">"name"</span>:<span class="string">"file-sink"</span>,<span class="string">"connector"</span>:{<span class="string">"state"</span>:<span class="string">"RUNNING"</span>,<span class="string">"worker_id"</span>:<span class="string">"192.168.1.101:8083"</span>},<span class="string">"tasks"</span>:[{<span class="string">"state"</span>:<span class="string">"RUNNING"</span>,<span class="string">"id"</span>:0,<span class="string">"worker_id"</span>:<span class="string">"192.168.1.101:8083"</span>}]}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 Kafka 数据是否已经写入到文件</span></span><br><span class="line">$ tail -f test.sink.txt</span><br><span class="line">  <span class="built_in">log</span> line 1</span><br><span class="line">  <span class="built_in">log</span> line 2</span><br><span class="line">  <span class="built_in">log</span> line 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另起窗口，并执行写入 test.txt 数据的脚本，可以看到对应 test.sink.txt 里面已经被写入数据</span></span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> {4..1000}; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"log line <span class="variable">$i</span>"</span>; <span class="keyword">done</span> &gt;&gt; test.txt</span><br></pre></td></tr></tbody></table></figure>
<h5 id="清理工作"><a href="#清理工作" class="headerlink" title="清理工作"></a>清理工作</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载 file-source / file-sink connector</span></span><br><span class="line">$ confluent unload file-source</span><br><span class="line">$ confluent unload file-sink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 connect 进程</span></span><br><span class="line">$ confluent stop connect</span><br><span class="line">  Stopping connect</span><br><span class="line">  connect is [DOWN]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有 confluent 进程</span></span><br><span class="line">$ confluent stop</span><br><span class="line">  Stopping connect</span><br><span class="line">  connect is [DOWN]</span><br><span class="line">  Stopping kafka-rest</span><br><span class="line">  kafka-rest is [DOWN]</span><br><span class="line">  Stopping schema-registry</span><br><span class="line">  schema-registry is [DOWN]</span><br><span class="line">  Stopping kafka</span><br><span class="line">  kafka is [DOWN]</span><br><span class="line">  Stopping zookeeper</span><br><span class="line">  zookeeper is [DOWN]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有 confluent 进程，并删除临时文件</span></span><br><span class="line">$ confluent destroy</span><br><span class="line">  Stopping connect</span><br><span class="line">  connect is [DOWN]</span><br><span class="line">  Stopping kafka-rest</span><br><span class="line">  kafka-rest is [DOWN]</span><br><span class="line">  Stopping schema-registry</span><br><span class="line">  schema-registry is [DOWN]</span><br><span class="line">  Stopping kafka</span><br><span class="line">  kafka is [DOWN]</span><br><span class="line">  Stopping zookeeper</span><br><span class="line">  zookeeper is [DOWN]</span><br><span class="line">  Deleting: /tmp/confluent.A8TzcjSE</span><br></pre></td></tr></tbody></table></figure>
<h3 id="支持的组件"><a href="#支持的组件" class="headerlink" title="支持的组件"></a><a href="https://www.confluent.io/product/connectors/">支持的组件</a></h3><h4 id="Kafka-2-HDFS"><a href="#Kafka-2-HDFS" class="headerlink" title="Kafka 2 HDFS"></a><a href="https://github.com/confluentinc/kafka-connect-hdfs">Kafka 2 HDFS</a></h4><h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a><a href="https://docs.confluent.io/current/connect/connect-hdfs/docs/hdfs_connector.html#features">特性</a></h5><h6 id="Exactly-Once-Delivery"><a href="#Exactly-Once-Delivery" class="headerlink" title="Exactly Once Delivery"></a><strong>Exactly Once Delivery</strong></h6><p>　Connector 使用 WAL 文件保证每条导入到 HDFS 的数据都是<strong>有且仅有一条</strong>的<br>　通过将 Kafka offset 信息编码到 WAL 文件中，就可以在 task 失败或者重启的时候，获取到最后一条提交的 offset 了</p>
<h6 id="Extensible-Data-Format"><a href="#Extensible-Data-Format" class="headerlink" title="Extensible Data Format"></a><strong>Extensible Data Format</strong></h6><p>　原生支持 <code>Avro</code> / <code>Parquet</code> 格式，其他数据格式，可以通过扩展 <code>Format</code> 类获得支持</p>
<h6 id="Hive-Integration"><a href="#Hive-Integration" class="headerlink" title="Hive Integration"></a><strong>Hive Integration</strong></h6><p>　支持 Hive 的整合<br>　激活该功能后，Connector 会自动给每一个导入 HDFS 的 topic 创建 Hive 的外部分区表</p>
<h6 id="Schema-Evolution"><a href="#Schema-Evolution" class="headerlink" title="Schema Evolution"></a><strong>Schema Evolution</strong></h6><p>　支持模式演进和不同的 Schema 兼容级别<br>　整合 Hive 时，支持给 <code>schema.compatibility</code> 配置 <code>BACKWARD</code> / <code>FORWARD</code> / <code>FULL</code> 三种模式<br>　Hive 表可以查询同一个 Topic 下，以不同 Schema 写入的所有表数据</p>
<h6 id="Secure-HDFS-and-Hive-Metastore-Support"><a href="#Secure-HDFS-and-Hive-Metastore-Support" class="headerlink" title="Secure HDFS and Hive Metastore Support"></a><strong>Secure HDFS and Hive Metastore Support</strong></h6><p>　支持 <code>Kerberos</code> 权限控制，所以可以和带权限控制的 HDFS 或 Hive metastore 进行整合</p>
<h6 id="Pluggable-Partitioner"><a href="#Pluggable-Partitioner" class="headerlink" title="Pluggable Partitioner"></a><strong>Pluggable Partitioner</strong></h6><p>　支持默认的 Partitioner、基于 field 的 Partitioner、基于时间的 Partitioner（包括 daily / hourly 等粒度）<br>　可以实现 <code>Partitioner</code> 类扩展自己的 Partitioner<br>　也可以实现 <code>TimeBasedPartitioner</code> 类扩展基于时间的 Partitioner</p>
<h5 id="实战-HDFS"><a href="#实战-HDFS" class="headerlink" title="实战 HDFS"></a>实战 HDFS</h5><h6 id="安装-HDFS"><a href="#安装-HDFS" class="headerlink" title="安装 HDFS"></a>安装 HDFS</h6><p>　此处略，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/39683/#Hadoop">Apache Eagle</a>》</p>
<h6 id="配置-Confluent"><a href="#配置-Confluent" class="headerlink" title="配置 Confluent"></a>配置 Confluent</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka-connect-hdfs/quickstart-hdfs.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">hdfs-sink</span></span><br><span class="line"><span class="meta">connector.class</span>=<span class="string">io.confluent.connect.hdfs.HdfsSinkConnector</span></span><br><span class="line"><span class="meta">tasks.max</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">topics</span>=<span class="string">test_hdfs</span></span><br><span class="line"><span class="meta">hdfs.url</span>=<span class="string">hdfs://localhost:9000</span></span><br><span class="line"><span class="meta">flush.size</span>=<span class="string">3</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ confluent start</span><br><span class="line">  Starting zookeeper</span><br><span class="line">  zookeeper is [UP]</span><br><span class="line">  Starting kafka</span><br><span class="line">  kafka is [UP]</span><br><span class="line">  Starting schema-registry</span><br><span class="line">  schema-registry is [UP]</span><br><span class="line">  Starting kafka-rest</span><br><span class="line">  kafka-rest is [UP]</span><br><span class="line">  Starting connect</span><br><span class="line">  connect is [UP]</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~/software/confluent</span><br><span class="line">$ ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic test_hdfs --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></span><br><span class="line">  <span class="comment"># 输入一下三行数据</span></span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value3"</span>}</span><br><span class="line"></span><br><span class="line">$ confluent load hdfs-sink -d etc/kafka-connect-hdfs/quickstart-hdfs.properties</span><br><span class="line">  {</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"hdfs-sink"</span>,</span><br><span class="line">      <span class="string">"config"</span>:{</span><br><span class="line">          <span class="string">"connector.class"</span>:<span class="string">"io.confluent.connect.hdfs.HdfsSinkConnector"</span>,</span><br><span class="line">          <span class="string">"tasks.max"</span>:<span class="string">"1"</span>,</span><br><span class="line">          <span class="string">"topics"</span>:<span class="string">"test_hdfs"</span>,</span><br><span class="line">          <span class="string">"hdfs.url"</span>:<span class="string">"hdfs://localhost:9000"</span>,</span><br><span class="line">          <span class="string">"flush.size"</span>:<span class="string">"3"</span>,</span><br><span class="line">          <span class="string">"name"</span>:<span class="string">"hdfs-sink"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"tasks"</span>:[</span><br><span class="line">          {</span><br><span class="line">              <span class="string">"connector"</span>:<span class="string">"hdfs-sink"</span>,</span><br><span class="line">              <span class="string">"task"</span>:0</span><br><span class="line">          }</span><br><span class="line">      ]</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hadoop fs -ls /topics/test_hdfs/partition=0</span><br><span class="line">  Found 1 items</span><br><span class="line">  -rw-r--r--   3 connect supergroup        197 2017-11-12 16:58 /topics/test_hdfs/partition=0/test_hdfs+0+0000000000+0000000002.avro</span><br><span class="line"></span><br><span class="line">$ wget http://mirror.metrocast.net/apache/avro/avro-1.8.2/java/avro-tools-1.8.2.jar</span><br><span class="line"><span class="comment"># 直接在线上执行 avro 2 json 操作</span></span><br><span class="line">$ hadoop jar avro-tools-1.8.2.jar tojson hdfs://localhost:9000/topics/test_hdfs/partition=0/test_hdfs+0+0000000000+0000000002.avro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者，拷贝 avro 文件到本地，再执行 avro 2 json 操作</span></span><br><span class="line">$ hadoop fs -copyToLocal /topics/test_hdfs/partition=0/test_hdfs+0+0000000000+0000000002.avro /tmp/test_hdfs+0+0000000000+0000000002.avro</span><br><span class="line">$ java -jar avro-tools-1.8.2.jar tojson /tmp/test_hdfs+0+0000000000+0000000002.avro</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value3"</span>}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="实战-Hive"><a href="#实战-Hive" class="headerlink" title="实战 Hive"></a>实战 Hive</h5><h6 id="安装-Hive"><a href="#安装-Hive" class="headerlink" title="安装 Hive"></a>安装 Hive</h6><p>a) 下载 <a href="http://archive.apache.org/dist/hive/hive-2.1.1/apache-hive-2.1.1-bin.tar.gz">apache-hive-2.1.1-bin.tar.gz</a></p>
<p>b) 修改环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> HIVE_HOME=/usr/<span class="built_in">local</span>/hadoop/hive</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$HIVE_HOME</span>/conf:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure>
<p>c) 修改配置文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim hive-env.sh</span><br><span class="line">  <span class="built_in">export</span> HADOOP_HEAPSIZE=1024</span><br><span class="line">  <span class="comment"># Set HADOOP_HOME to point to a specific hadoop install directory</span></span><br><span class="line">  HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line">  <span class="comment"># Hive Configuration Directory can be controlled by:</span></span><br><span class="line">  <span class="built_in">export</span> HIVE_CONF_DIR=/usr/<span class="built_in">local</span>/hadoop/hive/conf</span><br><span class="line">  <span class="comment"># Folder containing extra ibraries required for hive compilation/execution can be controlled by:</span></span><br><span class="line">  <span class="built_in">export</span> HIVE_AUX_JARS_PATH=/usr/<span class="built_in">local</span>/hadoop/hive/lib</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim hive-site.xml</span><br><span class="line">  <span class="comment"># 该参数指定了 Hive 的数据存储目录，默认位置在 HDFS 上面的 /user/hive/warehouse 路径下</span></span><br><span class="line">  hive.metastore.warehouse.dir</span><br><span class="line">  <span class="comment"># 该参数指定了 Hive 的数据临时文件目录，默认位置为 HDFS 上面的 /tmp/hive 路径下</span></span><br><span class="line">  hive.exec.scratchdir</span><br></pre></td></tr></tbody></table></figure>
<p>d) 初始化和启动运行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">$ ./schematool -initSchema -dbType derby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ nohup bin/hive --service metastore &gt; logs/metastore.log &amp;</span><br><span class="line">$ nohup bin/hive --service hiveserver2 &gt; logs/hiveserver2.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">$ bin/hive</span><br><span class="line">  &gt; show databases;</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置-Confluent-1"><a href="#配置-Confluent-1" class="headerlink" title="配置 Confluent"></a>配置 Confluent</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka-connect-hdfs/quickstart-hdfs.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># hdfs 部分</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">hdfs_sink_18</span></span><br><span class="line"><span class="meta">connector.class</span>=<span class="string">io.confluent.connect.hdfs.HdfsSinkConnector</span></span><br><span class="line"><span class="meta">topics.dir</span>=<span class="string">/user/connect/topics</span></span><br><span class="line"><span class="meta">flush.size</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">topics</span>=<span class="string">hdfs_sink_18</span></span><br><span class="line"><span class="meta">tasks.max</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">hdfs.url</span>=<span class="string">hdfs://192.168.1.101:9000</span></span><br><span class="line"><span class="meta">logs.dir</span>=<span class="string">/user/connect/logs</span></span><br><span class="line"><span class="meta">schema.cache.size</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">value.converter.schema.registry.url</span>=<span class="string">http://localhost:8081</span></span><br><span class="line"><span class="meta">format.class</span>=<span class="string">io.confluent.connect.hdfs.avro.AvroFormat</span></span><br><span class="line"><span class="meta">value.converter</span>=<span class="string">io.confluent.connect.avro.AvroConverter</span></span><br><span class="line"><span class="meta">key.converter</span>=<span class="string">io.confluent.connect.avro.AvroConverter</span></span><br><span class="line"><span class="meta">key.converter.schema.registry.url</span>=<span class="string">http://localhost:8081</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># hive 部分</span></span><br><span class="line"><span class="meta">hive.integration</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">hive.metastore.uris</span>=<span class="string">thrift://192.168.1.101:9083</span></span><br><span class="line"><span class="meta">schema.compatibility</span>=<span class="string">BACKWARD</span></span><br><span class="line"><span class="meta">hive.database</span>=<span class="string">hive</span></span><br><span class="line"><span class="meta">hive.conf.dir</span>=<span class="string">/home/connect/software/hive/conf</span></span><br><span class="line"><span class="meta">hive.home</span>=<span class="string">/home/connect/software/hive</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="启用-1"><a href="#启用-1" class="headerlink" title="启用"></a>启用</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ confluent load hdfs-sink-18 -d etc/kafka-connect-hdfs/quickstart-schema.properties</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/confluent</span><br><span class="line">$ ./bin/kafka-avro-console-producer --broker-list 192.168.1.101:9092,192.168.1.102:9092,192.168.1.103:9092 --topic hdfs_sink_18 --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></span><br><span class="line">  <span class="comment"># 输入以下数据</span></span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value3"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value4"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value4"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value4"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value4"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value4"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value4"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value5"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>:<span class="string">"value6"</span>}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/hive</span><br><span class="line">$ use hive;</span><br><span class="line">$ select * from hdfs_sink_18 <span class="built_in">limit</span> 10;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">value4  0</span><br><span class="line">value4  0</span><br><span class="line">value6  0</span><br><span class="line">value2  1</span><br><span class="line">value4  1</span><br><span class="line">value4  1</span><br><span class="line">value5  1</span><br><span class="line">value1  2</span><br><span class="line">value4  2</span><br><span class="line">value4  2</span><br><span class="line">Time taken: 8.458 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Kafka-2-ElasticSearch"><a href="#Kafka-2-ElasticSearch" class="headerlink" title="Kafka 2 ElasticSearch"></a><a href="https://github.com/confluentinc/kafka-connect-elasticsearch">Kafka 2 ElasticSearch</a></h4><h5 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a><a href="https://docs.confluent.io/current/connect/connect-elasticsearch/docs/elasticsearch_connector.html">特性</a></h5><h6 id="Exactly-Once-Delivery-1"><a href="#Exactly-Once-Delivery-1" class="headerlink" title="Exactly Once Delivery"></a><strong>Exactly Once Delivery</strong></h6><p>　Connect 使用 ElasticSearch 的幂等写入语句和设置 ES Document IDs，来确保写入 ES 的数据都是<strong>有且仅有一条</strong>的<br>　如果 Kafka 消息里面包含了 Key 值，那么这些 Key 值会自动转化为 ES Document IDs；相反，如果 Kafka 消息里面没有包含这些 Key 值，或者是明确指定不要使用 Kafka 消息里面的 Key 值，Kafka Connect 将会自动使用 <code>topic+partition+offset</code> 作为 Key 值，以确保每一条写入 ES 的数据，都有一个唯一对应的 Document</p>
<h6 id="Mapping-Inference"><a href="#Mapping-Inference" class="headerlink" title="Mapping Inference"></a><strong>Mapping Inference</strong></h6><p>　启用该功能时，Connector 可以<strong>自动</strong>依据 Schema Register 来<strong>推断</strong> ES <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">mapping</a> 结构<br>　但是，该功能的推断受限于 field 类型和默认值。如果需要增加更多的限制（例如，用户自定义的解析器），则需要自己手动创建 mapping</p>
<h6 id="Schema-Evolution-1"><a href="#Schema-Evolution-1" class="headerlink" title="Schema Evolution"></a><strong>Schema Evolution</strong></h6><p>　支持<strong>模式演进</strong>和不同的 Schema 兼容级别<br>　可以处理一些模式不兼容的更改，比如</p>
<ul>
<li><p>增加字段</p>
<p>当增加一个或者多个 field 到 Kafka 消息中，并且 ES 开启了 <code>dynamic mapping</code> 功能，那么 ES 将会自动增加新的 field 到 mapping 中</p>
</li>
<li><p>移除字段</p>
<p>当从 Kafka 消息中移除一个或者多个 field 时，则这些缺失的值，将会被作为 <code>null</code> 值进行处理</p>
</li>
<li><p>更改字段类型</p>
<p>例如将一个 field 从 <code>string</code> 改成 <code>integer</code> 类型，ES 将会自动将 <code>string</code> 转化为 <code>integer</code></p>
</li>
</ul>
<h6 id="Delivery-Semantics"><a href="#Delivery-Semantics" class="headerlink" title="Delivery Semantics"></a><strong>Delivery Semantics</strong></h6><p>　Connector 支持 <strong>batch</strong> 和 <strong>pipeline</strong> 两种写入 ES 的模式，以此来增加吞吐量。batch 模式下，允许并行地处理多个 batch<br>　通过使用分区级 Kafka 偏移量作为 ES <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-versioning">文档版本</a>，并使用 <code>version_mode = external</code> 配置，来确保文档级（Document-level）更新顺序</p>
<h6 id="Reindexing-with-Zero-Downtime"><a href="#Reindexing-with-Zero-Downtime" class="headerlink" title="Reindexing with Zero Downtime"></a><strong>Reindexing with Zero Downtime</strong></h6><p>　利用 ES 的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Index Aliases</a> 接口，可以完成零停机 reindexing 操作（ES 本身提供了 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex</a> 接口，不过性能不高），具体对 ES 集群操作的步骤如下</p>
<ol>
<li>Create an alias for the index with the old mapping.</li>
<li>The applications that uses the index are pointed to the alias.</li>
<li>Create a new index with the updated mapping.</li>
<li>Move data from old to the new index.</li>
<li>Atomically move the alias to the new index.</li>
<li>Delete the old index.</li>
</ol>
<p>　为了保证用户无感知，需要在 reindexing 期间，仍然可以处理写数据的请求。但是别名是无法同时往新旧 index 写入数据的。为了解决这个问题，可以使用两个 ElasticSearch Connector 同时将相同的数据，写入到新旧 index 中，具体对 ES Connector 的操作步骤如下</p>
<ol>
<li>The connector job that ingest data to the old indices continue writing to the old indices.</li>
<li>Create a new connector job that writes to new indices. This will copy both some old data and new data to the new indices as long as the data is in Kafka.</li>
<li>Once the data in the old indices are moved to the new indices by the reindexing process, we can stop the old connector job.</li>
</ol>
<h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><h6 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h6><p>　此处略写，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/22654/#安装">ElasticSearch</a>》</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/install</span><br><span class="line">$ curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.4.tar.gz</span><br><span class="line">$ tar zxvf elasticsearch-5.6.4.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s elasticsearch-5.6.4/ elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=~/software/java</span><br><span class="line">  <span class="built_in">export</span> ELASTIC_SEARCH_HOME=~/software/elasticsearch</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$ELASTIC_SEARCH_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ elasticsearch -version</span><br><span class="line">  Version: 5.6.4, Build: 8bbedf5/2017-10-31T18:55:38.105Z, JVM: 1.8.0_131</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">$ elasticsearch -Ecluster.name=yuzhouwan -Enode.name=yuzhouwan_kafka_connect_test -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">$ jps -ml</span><br><span class="line">  25332 org.elasticsearch.bootstrap.Elasticsearch -Ecluster.name=yuzhouwan -Enode.name=yuzhouwan_kafka_connect_test -d</span><br><span class="line">$ netstat -nap | grep 9200</span><br><span class="line">  tcp        0      0 ::ffff:127.0.0.1:9200       :::*                        LISTEN      25332/java</span><br><span class="line">  tcp        0      0 ::1:9200                    :::*                        LISTEN      25332/java</span><br><span class="line"></span><br><span class="line">$ curl -XGET <span class="string">'http://localhost:9200/_cluster/health'</span> | jq</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"cluster_name"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"yellow"</span>,</span><br><span class="line">    <span class="string">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"number_of_nodes"</span>: 1,</span><br><span class="line">    <span class="string">"number_of_data_nodes"</span>: 1,</span><br><span class="line">    <span class="string">"active_primary_shards"</span>: 5,</span><br><span class="line">    <span class="string">"active_shards"</span>: 5,</span><br><span class="line">    <span class="string">"relocating_shards"</span>: 0,</span><br><span class="line">    <span class="string">"initializing_shards"</span>: 0,</span><br><span class="line">    <span class="string">"unassigned_shards"</span>: 5,</span><br><span class="line">    <span class="string">"delayed_unassigned_shards"</span>: 0,</span><br><span class="line">    <span class="string">"number_of_pending_tasks"</span>: 0,</span><br><span class="line">    <span class="string">"number_of_in_flight_fetch"</span>: 0,</span><br><span class="line">    <span class="string">"task_max_waiting_in_queue_millis"</span>: 0,</span><br><span class="line">    <span class="string">"active_shards_percent_as_number"</span>: 50</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h6 id="配置-Confluent-2"><a href="#配置-Confluent-2" class="headerlink" title="配置 Confluent"></a><a href="https://github.com/confluentinc/kafka-connect-elasticsearch/blob/master/docs/configuration_options.rst">配置</a> Confluent</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka-connect-elasticsearch/quickstart-elasticsearch.properties</span><br><span class="line">  name=elasticsearch-sink</span><br><span class="line">  connector.class=io.confluent.connect.elasticsearch.ElasticsearchSinkConnector</span><br><span class="line">  tasks.max=1</span><br><span class="line">  topics=test-elasticsearch-sink</span><br><span class="line">  key.ignore=<span class="literal">true</span></span><br><span class="line">  connection.url=http://localhost:9200</span><br><span class="line">  type.name=kafka-connect</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启用-2"><a href="#启用-2" class="headerlink" title="启用"></a>启用</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/confluent</span><br><span class="line">$ ./bin/zookeeper-server-start ./etc/kafka/zookeeper.properties</span><br><span class="line">$ ./bin/kafka-server-start ./etc/kafka/server.properties</span><br><span class="line">$ ./bin/schema-registry-start ./etc/schema-registry/schema-registry.properties</span><br><span class="line">$ ./bin/kafka-rest-start ./etc/kafka-rest/kafka-rest.properties</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~/software/confluent</span><br><span class="line">$ ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic test-elasticsearch-sink --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></span><br><span class="line">  <span class="comment"># 输入一下三行数据</span></span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value3"</span>}</span><br><span class="line"></span><br><span class="line">$ ./bin/connect-standalone etc/schema-registry/connect-avro-standalone.properties etc/kafka-connect-elasticsearch/quickstart-elasticsearch.properties</span><br><span class="line"></span><br><span class="line">$ confluent load elasticsearch-sink | jq</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"elasticsearch-sink"</span>,</span><br><span class="line">    <span class="string">"config"</span>: {</span><br><span class="line">      <span class="string">"connector.class"</span>: <span class="string">"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector"</span>,</span><br><span class="line">      <span class="string">"tasks.max"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"topics"</span>: <span class="string">"test-elasticsearch-sink"</span>,</span><br><span class="line">      <span class="string">"key.ignore"</span>: <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"connection.url"</span>: <span class="string">"http://localhost:9200"</span>,</span><br><span class="line">      <span class="string">"type.name"</span>: <span class="string">"kafka-connect"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"elasticsearch-sink"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"tasks"</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="string">"connector"</span>: <span class="string">"elasticsearch-sink"</span>,</span><br><span class="line">        <span class="string">"task"</span>: 0</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h6 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'http://localhost:9200/test-elasticsearch-sink/_search?pretty'</span></span><br><span class="line">  {</span><br><span class="line">    <span class="string">"took"</span> : 2,</span><br><span class="line">    <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"_shards"</span> : {</span><br><span class="line">      <span class="string">"total"</span> : 5,</span><br><span class="line">      <span class="string">"successful"</span> : 5,</span><br><span class="line">      <span class="string">"skipped"</span> : 0,</span><br><span class="line">      <span class="string">"failed"</span> : 0</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"hits"</span> : {</span><br><span class="line">      <span class="string">"total"</span> : 3,</span><br><span class="line">      <span class="string">"max_score"</span> : 1.0,</span><br><span class="line">      <span class="string">"hits"</span> : [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"_index"</span> : <span class="string">"test-elasticsearch-sink"</span>,</span><br><span class="line">          <span class="string">"_type"</span> : <span class="string">"kafka-connect"</span>,</span><br><span class="line">          <span class="string">"_id"</span> : <span class="string">"test-elasticsearch-sink+0+0"</span>,</span><br><span class="line">          <span class="string">"_score"</span> : 1.0,</span><br><span class="line">          <span class="string">"_source"</span> : {</span><br><span class="line">            <span class="string">"f1"</span> : <span class="string">"value1"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"_index"</span> : <span class="string">"test-elasticsearch-sink"</span>,</span><br><span class="line">          <span class="string">"_type"</span> : <span class="string">"kafka-connect"</span>,</span><br><span class="line">          <span class="string">"_id"</span> : <span class="string">"test-elasticsearch-sink+0+2"</span>,</span><br><span class="line">          <span class="string">"_score"</span> : 1.0,</span><br><span class="line">          <span class="string">"_source"</span> : {</span><br><span class="line">            <span class="string">"f1"</span> : <span class="string">"value3"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"_index"</span> : <span class="string">"test-elasticsearch-sink"</span>,</span><br><span class="line">          <span class="string">"_type"</span> : <span class="string">"kafka-connect"</span>,</span><br><span class="line">          <span class="string">"_id"</span> : <span class="string">"test-elasticsearch-sink+0+1"</span>,</span><br><span class="line">          <span class="string">"_score"</span> : 1.0,</span><br><span class="line">          <span class="string">"_source"</span> : {</span><br><span class="line">            <span class="string">"f1"</span> : <span class="string">"value2"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h5 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h5><h6 id="max-file-descriptors-32768-for-elasticsearch-process-is-too-low-increase-to-at-least-65536"><a href="#max-file-descriptors-32768-for-elasticsearch-process-is-too-low-increase-to-at-least-65536" class="headerlink" title="max file descriptors [32768] for elasticsearch process is too low, increase to at least [65536]"></a>max file descriptors [32768] for elasticsearch process is too low, increase to at least [65536]</h6><ul>
<li>解决</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ su root</span><br><span class="line">$ vim /etc/security/limits.d/90-nproc.conf</span><br><span class="line">  *    -    nproc      20480</span><br><span class="line">  *    -    nofile     65536</span><br><span class="line">  *    -    memlock    unlimited</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Kafka-2-Druid"><a href="#Kafka-2-Druid" class="headerlink" title="Kafka 2 Druid"></a><a href="https://github.com/gianm/kafka-connect-druid">Kafka 2 Druid</a></h4><p>　官方<a href="https://github.com/gianm/kafka-connect-druid/issues/1">决定</a>使用 <a href="http://druid.io/docs/latest/development/extensions-core/kafka-ingestion.html">Kafka Indexing Service</a> 方案，方便构建自己的生态圈。不过，目前的 Kafka Indexing Service 仍然存在一定的<a href="https://groups.google.com/forum/#!topic/druid-user/S7UKNsSCMGI">缺陷</a>。因此，Kafka Connect 2 <a href="https://yuzhouwan.com/posts/5845/">Druid</a> 功能需要自己基于 Druid Tranquility 组件进行定制开发。同时，可以在关闭 Kafka Auto Commit 功能后，自己控制事务提交，来保证不丢不重，进而弥补了 Tranquility 组件没有 Exactly-once 特性的缺陷</p>
<p>Tips: <a href="https://github.com/Landoop/stream-reactor">Stream Reactor</a> 中基于 Tranquility 实现了 K2D</p>
<h4 id="Kafka-2-Kafka"><a href="#Kafka-2-Kafka" class="headerlink" title="Kafka 2 Kafka"></a><a href="https://docs.confluent.io/current/connect/connect-replicator/docs/connect_replicator.html">Kafka 2 Kafka</a></h4><p>　Connect Replicator 可以轻松可靠地将 Topic 从一个 Kafka 集群复制到另一个。除了复制消息之外，此连接器还会根据需要创建主题，以保留源群集中的 Topic 配置。这包括保留分区数量，副本数以及为单个 Topic 指定对任何配置的覆盖</p>
<p>　下图显示了一个典型的<strong>多数据中心</strong>（<strong>D</strong>ata <strong>C</strong>enter）部署，其中来自位于不同数据中心的两个 Kafka 群集的数据聚合在位于另一个数据中心的单独群集中。这里，复制数据的来源称为<strong>源簇</strong>，而复制数据的目标称为<strong>目的地</strong></p>
<h5 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h5><ul>
<li>Topic 的选择，可以使用白名单、黑名单和正则表达式</li>
<li>支持使用匹配的 Partition 数量、 Replicaton 因子和 Topic 配置覆盖，在目标集群动态创建 Topic</li>
<li>当新的 partition 被加入到源集群之后，目标集群会自动扩容对应的 Topic</li>
<li>其他源集群的配置更改，都会被自动同步到目标集群</li>
</ul>
<h3 id="单机版-Worker"><a href="#单机版-Worker" class="headerlink" title="单机版 Worker"></a>单机版 Worker</h3><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/connect-standalone worker.properties connector1.properties [connector2.properties connector3.properties ...]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 存储 connector 的 offset</span></span><br><span class="line">offset.storage.file.filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># RESTful 端口，接受 HTTP 请求</span></span><br><span class="line">rest.port</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 单机模式下，偏移量 offset 保存在 <code>/tmp/connect.offset</code> 中</p>
<h3 id="分布式-Worker"><a href="#分布式-Worker" class="headerlink" title="分布式 Worker"></a>分布式 Worker</h3><h4 id="启动-Confluent"><a href="#启动-Confluent" class="headerlink" title="启动 Confluent"></a>启动 Confluent</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/confluent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 ZooKeeper</span></span><br><span class="line">$ nohup ./bin/zookeeper-server-start ./etc/kafka/zookeeper.properties &gt; zookeeper.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Kafka</span></span><br><span class="line">$ nohup ./bin/kafka-server-start ./etc/kafka/server.properties &gt; kafka.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Schema Registry</span></span><br><span class="line">$ nohup ./bin/schema-registry-start ./etc/schema-registry/schema-registry.properties &gt; schema.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Kafka REST</span></span><br><span class="line">$ nohup ./bin/kafka-rest-start ./etc/kafka-rest/kafka-rest.properties &gt; kafka-rest.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以分布式模式启动 Connect</span></span><br><span class="line">$ nohup ./bin/connect-distributed ./etc/kafka/connect-distributed.properties &gt; connect-distribute.log &amp;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="创建-Topic"><a href="#创建-Topic" class="headerlink" title="创建 Topic"></a>创建 Topic</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取帮助文档</span></span><br><span class="line">$ bin/kafka-topics --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 connect-configs / connect-offsets / connect-status 三个 Topic</span></span><br><span class="line"><span class="comment"># connect-configs 存储 connector 和 task 的配置信息</span></span><br><span class="line">$ bin/kafka-topics --create --zookeeper localhost:2181 --topic connect-configs --replication-factor 3 --partitions 1 --config cleanup.policy=compact</span><br><span class="line"><span class="comment"># connect-offsets 存储 connector 和 task 的 offset 信息</span></span><br><span class="line">$ bin/kafka-topics --create --zookeeper localhost:2181 --topic connect-offsets --replication-factor 3 --partitions 50 --config cleanup.policy=compact</span><br><span class="line"><span class="comment"># connect-status 存储 connector 和 task 的状态变更信息</span></span><br><span class="line">$ bin/kafka-topics --create --zookeeper localhost:2181 --topic connect-status --replication-factor 3 --partitions 10 --config cleanup.policy=compact</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已存在的 topic</span></span><br><span class="line">$ bin/kafka-topics --list --zookeeper localhost:2181</span><br><span class="line">  __consumer_offsets</span><br><span class="line">  _schemas</span><br><span class="line">  connect-configs</span><br><span class="line">  connect-offsets</span><br><span class="line">  connect-statuses</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 topic 状态</span></span><br><span class="line">$ bin/kafka-topics --describe --zookeeper localhost:2181 --topic connect-configs</span><br><span class="line">  Topic:connect-configs  PartitionCount:1  ReplicationFactor:1   Configs:</span><br><span class="line">  Topic:connect-configs  Partition: 0      Leader: 0    Replicas: 0   Isr: 0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除-Topic"><a href="#删除-Topic" class="headerlink" title="删除 Topic"></a>删除 Topic</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka/server.properties</span><br><span class="line">  <span class="comment"># 如果需要删除 topic，需要先设置 delete.topic.enable 为 true</span></span><br><span class="line">  delete.topic.enable=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">$ bin/kafka-topics --delete --zookeeper localhost:2181 --topic connect-configs</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Connector-和-Task-状态"><a href="#Connector-和-Task-状态" class="headerlink" title="Connector 和 Task 状态"></a><a href="https://docs.confluent.io/current/connect/managing.html#connector-and-task-status">Connector 和 Task 状态</a></h4><p>　所有 Connector 和隶属于这些 Connector 的 Tasks，都通过 <code>status.storage.topic</code> 发布状态更新。因为 Worker 消费 <code>status.storage.topic</code> 是异步的，所以从 API 获取最新状态的时候，会存在一些短暂的延迟</p>
<p>　Connector 或者某个 Task 的状态，可能为：</p>
<ul>
<li><p><strong>UNASSIGNED</strong></p>
<p>Connector 或者 Task 尚未被分配到某个 Worker 上</p>
</li>
<li><p><strong>RUNNING</strong></p>
<p>运行中</p>
</li>
<li><p><strong>PAUSED</strong></p>
<p>Connector 或者 Task 被管理员暂停</p>
</li>
<li><p><strong>FAILED</strong></p>
<p>通常因为出现异常，导致 Connector 或者 Task 失败</p>
</li>
</ul>
<p>　一般 Pause / Resume API 的操作，适用的场景是 消费端系统需要维护，通过停止掉 Kafka Connector，来避免数据一直被积压着。同时，停止操作不是临时的，即便重启了集群，仍需要再次操作 Resume 接口，暂停的 Connector 才会恢复到 Running 状态。另外，FAILED 状态的任务是不允许执行 Pause 操作的，需要重启恢复到 Running 状态才行</p>
<h4 id="Worker-之间如何建立通讯"><a href="#Worker-之间如何建立通讯" class="headerlink" title="Worker 之间如何建立通讯"></a>Worker 之间如何建立通讯</h4><p>　只要保证各个 Worker 使用的是统一的 <code>group.id</code>（可以看做是 Cluster Name），还有 <code>config.storage.topic</code>、<code>offset.storage.topic</code> 和 <code>status.storage.topic</code> 三个 Topic 也需要保持一致，Worker 就会自动发现同一个集群中的其他 Worker 进程</p>
<h4 id="Relance-机制"><a href="#Relance-机制" class="headerlink" title="Relance 机制"></a>Relance 机制</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[2017-12-04 11:32:18,607] INFO Rebalance started (org.apache.kafka.connect.runtime.distributed.DistributedHerder:1187)</span><br><span class="line">[2017-12-04 11:32:18,608] INFO Finished stopping tasks <span class="keyword">in</span> preparation <span class="keyword">for</span> rebalance (org.apache.kafka.connect.runtime.distributed.DistributedHerder:1217)</span><br><span class="line">[2017-12-04 11:32:18,608] INFO (Re-)joining group connect-cluster (org.apache.kafka.clients.consumer.internals.AbstractCoordinator:442)</span><br><span class="line">[2017-12-04 11:32:18,612] INFO Successfully joined group connect-cluster with generation 2 (org.apache.kafka.clients.consumer.internals.AbstractCoordinator:409)</span><br><span class="line">[2017-12-04 11:32:18,612] INFO Joined group and got assignment: Assignment{error=0, leader=<span class="string">'connect-1-efb9e92c-27a6-4062-9fcc-92480f8e9e03'</span>, leaderUrl=<span class="string">'http://192.168.1.101:8083/'</span>, offset=-1, connectorIds=[], taskIds=[]} (org.apache.kafka.connect.runtime.distributed.DistributedHerder:1166)</span><br><span class="line">[2017-12-04 11:32:18,612] INFO Starting connectors and tasks using config offset -1 (org.apache.kafka.connect.runtime.distributed.DistributedHerder:815)</span><br><span class="line">[2017-12-04 11:32:18,613] INFO Finished starting connectors and tasks (org.apache.kafka.connect.runtime.distributed.DistributedHerder:825)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="完全分布式"><a href="#完全分布式" class="headerlink" title="完全分布式"></a>完全分布式</h3><h4 id="替换原生的-ZooKeeper"><a href="#替换原生的-ZooKeeper" class="headerlink" title="替换原生的 ZooKeeper"></a>替换原生的 ZooKeeper</h4><p>　具体安装过程略，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/31915/#环境搭建">ZooKeeper 原理与优化</a>》</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/connect/software/confluent</span><br><span class="line">$ vim ./etc/kafka/server.properties</span><br><span class="line">  zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line">  zookeeper.connection.timeout.ms=6000</span><br><span class="line"></span><br><span class="line">$ vim ./etc/schema-registry/connect-avro-distributed.properties</span><br><span class="line">  id=kafka-rest-test-server</span><br><span class="line">  schema.registry.url=http://localhost:8081</span><br><span class="line">  zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line"></span><br><span class="line">$ zkServer.sh start</span><br></pre></td></tr></tbody></table></figure>
<h4 id="替换原生的-Kafka"><a href="#替换原生的-Kafka" class="headerlink" title="替换原生的 Kafka"></a>替换原生的 Kafka</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建日志目录</span></span><br><span class="line">$ mkdir -p /home/connect/kafka_log</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /home/connect/software/kafka</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Kafka Server</span></span><br><span class="line">$ vim config/server.properties</span><br><span class="line">  <span class="comment"># 每个 Kafka Broker 节点，配置不同的 broker.id</span></span><br><span class="line">  broker.id=0</span><br><span class="line">  <span class="comment"># 允许删除 topic</span></span><br><span class="line">  delete.topic.enable=<span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置成当前 Kafka Borker 节点的 IP</span></span><br><span class="line">  listeners=PLAINTEXT://192.168.1.101:9092</span><br><span class="line">  advertised.listeners=PLAINTEXT://192.168.1.101:9092</span><br><span class="line">  log.dirs=/home/connect/kafka_log</span><br><span class="line">  zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Kafka ZooKeeper</span></span><br><span class="line">$ vim config/zookeeper.properties</span><br><span class="line">  dataDir=/home/connect/zkdata</span><br><span class="line">  clientPort=2181</span><br><span class="line">  maxClientCnxns=60</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Kafka Consumer</span></span><br><span class="line">$ vim config/consumer.properties</span><br><span class="line">  zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line">  zookeeper.connection.timeout.ms=6000</span><br><span class="line">  group.id=test-consumer-group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Kafka</span></span><br><span class="line">$ nohup /home/connect/software/kafka/bin/kafka-server-start.sh /home/connect/software/kafka/config/server.properties &gt; /home/connect/kafka_log/kafka.server.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Kafka 日志</span></span><br><span class="line">$ tail -f ~/kafka_log/kafka.server.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Confluent 配置</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/connect/software/confluent</span><br><span class="line">$ vim etc/kafka/connect-distributed.properties</span><br><span class="line">  bootstrap.servers=192.168.1.101:9092,192.168.1.102:9092,192.168.1.103:9092</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 connect-configs / connect-offsets / connect-status 三个 Topic</span></span><br><span class="line"><span class="comment"># connect-configs 存储 connector 和 task 的配置信息</span></span><br><span class="line">$ bin/kafka-topics.sh --create --zookeeper 192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181 --topic connect-configs --replication-factor 3 --partitions 1 --config cleanup.policy=compact</span><br><span class="line"><span class="comment"># connect-offsets 存储 connector 和 task 的 offset 信息</span></span><br><span class="line">$ bin/kafka-topics.sh --create --zookeeper 192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181 --topic connect-offsets --replication-factor 3 --partitions 1 --config cleanup.policy=compact</span><br><span class="line"><span class="comment"># connect-status 存储 connector 和 task 的状态变更信息</span></span><br><span class="line">$ bin/kafka-topics.sh --create --zookeeper 192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181 --topic connect-status --replication-factor 3 --partitions 1 --config cleanup.policy=compact</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已存在的 topic</span></span><br><span class="line">$ bin/kafka-topics.sh --list --zookeeper 192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line">  __consumer_offsets</span><br><span class="line">  connect-configs</span><br><span class="line">  connect-offsets</span><br><span class="line">  connect-status</span><br><span class="line">  test-elasticsearch-sink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 topic 状态</span></span><br><span class="line">$ bin/kafka-topics --describe --zookeeper 192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181 --topic connect-configs</span><br><span class="line">  Topic:connect-configs   PartitionCount:1  ReplicationFactor:3   Configs:cleanup.policy=compact</span><br><span class="line">  Topic:connect-configs   Partition: 0      Leader: 2             Replicas: 0,2,1     Isr: 2,0,1</span><br></pre></td></tr></tbody></table></figure>
<h4 id="更新-Kafka-Rest-配置"><a href="#更新-Kafka-Rest-配置" class="headerlink" title="更新 Kafka Rest 配置"></a>更新 Kafka Rest 配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/connect/software/confluent</span><br><span class="line">$ vim etc/kafka-rest/kafka-rest.properties</span><br><span class="line">  id=kafka-rest-test-server</span><br><span class="line">  schema.registry.url=http://192.168.1.103:8081</span><br><span class="line">  zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line"></span><br><span class="line">$ nohup ./bin/kafka-rest-start ./etc/kafka-rest/kafka-rest.properties &amp;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="更新-Schema-Register-配置"><a href="#更新-Schema-Register-配置" class="headerlink" title="更新 Schema Register 配置"></a>更新 Schema Register 配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/connect/software/confluent</span><br><span class="line">$ vim etc/schema-registry/schema-registry.properties</span><br><span class="line">  listeners=http://0.0.0.0:8081</span><br><span class="line">  kafkastore.connection.url=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class="line">  kafkastore.topic=_schemas</span><br><span class="line">  debug=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">$ nohup ./bin/schema-registry-start ./etc/schema-registry/schema-registry.properties &amp;</span><br><span class="line">$ tail -f logs/schema-registry.log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="更新-Worker-配置"><a href="#更新-Worker-配置" class="headerlink" title="更新 Worker 配置"></a>更新 Worker 配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /home/connect/software/confluent/etc/kafka/connect-distributed.properties</span><br><span class="line"></span><br><span class="line">  bootstrap.servers=192.168.1.101:9092,192.168.1.102:9092,192.168.1.103:9092</span><br><span class="line"></span><br><span class="line">  group.id=connect-cluster</span><br><span class="line">  key.converter=org.apache.kafka.connect.json.JsonConverter</span><br><span class="line">  value.converter=org.apache.kafka.connect.json.JsonConverter</span><br><span class="line">  <span class="comment"># 考虑到方便压测，可以关闭 schema 功能，将下面两个配置项置为 false</span></span><br><span class="line">  key.converter.schemas.enable=<span class="literal">true</span></span><br><span class="line">  value.converter.schemas.enable=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  internal.key.converter=org.apache.kafka.connect.json.JsonConverter</span><br><span class="line">  internal.value.converter=org.apache.kafka.connect.json.JsonConverter</span><br><span class="line">  internal.key.converter.schemas.enable=<span class="literal">false</span></span><br><span class="line">  internal.value.converter.schemas.enable=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  key.converter=io.confluent.connect.avro.AvroConverter</span><br><span class="line">  key.converter.schema.registry.url=http://192.168.1.103:8081</span><br><span class="line">  value.converter=io.confluent.connect.avro.AvroConverter</span><br><span class="line">  value.converter.schema.registry.url=http://192.168.1.103:8081</span><br><span class="line"></span><br><span class="line">$ nohup /home/connect/software/confluent/bin/connect-distributed /home/connect/software/confluent/etc/kafka/connect-distributed.properties &gt; /home/connect/software/confluent/logs/connect-distributed.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分发配置，并在各节点启动 worker</span></span><br><span class="line">$ scp /home/connect/software/confluent/etc/schema-registry/connect-avro-distributed.properties 192.168.1.102:/home/connect/software/confluent/etc/schema-registry/connect-avro-distributed.properties</span><br><span class="line"></span><br><span class="line">$ scp /home/connect/software/confluent/etc/schema-registry/connect-avro-distributed.properties 192.168.1.103:/home/connect/software/confluent/etc/schema-registry/connect-avro-distributed.properties</span><br></pre></td></tr></tbody></table></figure>
<h4 id="踩过的坑-1"><a href="#踩过的坑-1" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED"><a href="#WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED" class="headerlink" title="WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"></a>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</h5><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim .ssh/known_hosts</span><br><span class="line">  <span class="comment"># 删除本机 IP 下的秘钥</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Timed-out-while-checking-for-or-creating-topic-s-‘connect-offsets’"><a href="#Timed-out-while-checking-for-or-creating-topic-s-‘connect-offsets’" class="headerlink" title="Timed out while checking for or creating topic(s) ‘connect-offsets’"></a>Timed out while checking for or creating topic(s) ‘connect-offsets’</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="number">2017</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">17</span>:<span class="number">39</span>:<span class="number">13</span>,<span class="number">503</span>] ERROR Uncaught exception in herder work thread, exiting:  (org.apache.kafka.connect.runtime.distributed.DistributedHerder:<span class="number">206</span>)</span><br><span class="line">org.apache.kafka.connect.errors.ConnectException: <span class="function">Timed out <span class="keyword">while</span> checking <span class="keyword">for</span> or creating <span class="title">topic</span><span class="params">(s)</span> 'connect-offsets'. This could indicate a connectivity issue, unavailable topic partitions, or <span class="keyword">if</span> <span class="keyword">this</span> is your first use of the topic it may have taken too <span class="keyword">long</span> to create.</span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.util.TopicAdmin.<span class="title">createTopics</span><span class="params">(TopicAdmin.java:<span class="number">243</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.storage.KafkaOffsetBackingStore$1.<span class="title">run</span><span class="params">(KafkaOffsetBackingStore.java:<span class="number">99</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.util.KafkaBasedLog.<span class="title">start</span><span class="params">(KafkaBasedLog.java:<span class="number">126</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.storage.KafkaOffsetBackingStore.<span class="title">start</span><span class="params">(KafkaOffsetBackingStore.java:<span class="number">109</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.runtime.Worker.<span class="title">start</span><span class="params">(Worker.java:<span class="number">146</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.runtime.AbstractHerder.<span class="title">startServices</span><span class="params">(AbstractHerder.java:<span class="number">99</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.kafka.connect.runtime.distributed.DistributedHerder.<span class="title">run</span><span class="params">(DistributedHerder.java:<span class="number">194</span>)</span></span></span><br><span class="line"><span class="function">	at java.util.concurrent.Executors$RunnableAdapter.<span class="title">call</span><span class="params">(Executors.java:<span class="number">511</span>)</span></span></span><br><span class="line"><span class="function">	at java.util.concurrent.FutureTask.<span class="title">run</span><span class="params">(FutureTask.java:<span class="number">266</span>)</span></span></span><br><span class="line"><span class="function">	at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1142</span>)</span></span></span><br><span class="line"><span class="function">	at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">617</span>)</span></span></span><br><span class="line"><span class="function">	at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">748</span>)</span></span></span><br><span class="line"><span class="function">Caused by: org.apache.kafka.common.errors.TimeoutException: Timed out waiting to send the call.</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="Request-to-leader-to-reconfigure-connector-tasks-failed"><a href="#Request-to-leader-to-reconfigure-connector-tasks-failed" class="headerlink" title="Request to leader to reconfigure connector tasks failed"></a>Request to leader to reconfigure connector tasks failed</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">303</span>] ERROR Unexpected error during connector task reconfiguration:  (org.apache.kafka.connect.runtime.distributed.DistributedHerder:<span class="number">933</span>)</span><br><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">303</span>] ERROR Task reconfiguration <span class="keyword">for</span> FileStreamSinkConnector failed unexpectedly, <span class="keyword">this</span> connector will not be properly reconfigured unless manually triggered. (org.apache.kafka.connect.runtime.distributed.DistributedHerder:<span class="number">934</span>)</span><br><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">306</span>] INFO <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span> - - [<span class="number">13</span>/Mar/<span class="number">2018</span>:<span class="number">02</span>:<span class="number">30</span>:<span class="number">28</span> +<span class="number">0000</span>] <span class="string">"POST /connectors/FileStreamSinkConnector/tasks?forward=false HTTP/1.1"</span> <span class="number">409</span> <span class="number">113</span>  <span class="number">1</span> (org.apache.kafka.connect.runtime.rest.RestServer:<span class="number">60</span>)</span><br><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">307</span>] INFO <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span> - - [<span class="number">13</span>/Mar/<span class="number">2018</span>:<span class="number">02</span>:<span class="number">30</span>:<span class="number">28</span> +<span class="number">0000</span>] <span class="string">"POST /connectors/FileStreamSinkConnector/tasks?forward=true HTTP/1.1"</span> <span class="number">409</span> <span class="number">113</span>  <span class="number">3</span> (org.apache.kafka.connect.runtime.rest.RestServer:<span class="number">60</span>)</span><br><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">307</span>] INFO <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span> - - [<span class="number">13</span>/Mar/<span class="number">2018</span>:<span class="number">02</span>:<span class="number">30</span>:<span class="number">28</span> +<span class="number">0000</span>] <span class="string">"POST /connectors/FileStreamSinkConnector/tasks HTTP/1.1"</span> <span class="number">409</span> <span class="number">113</span>  <span class="number">4</span> (org.apache.kafka.connect.runtime.rest.RestServer:<span class="number">60</span>)</span><br><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">307</span>] <span class="function">ERROR Request to leader to reconfigure connector tasks <span class="title">failed</span> <span class="params">(org.apache.kafka.connect.runtime.distributed.DistributedHerder:<span class="number">996</span>)</span></span></span><br><span class="line"><span class="function">org.apache.kafka.connect.runtime.rest.errors.ConnectRestException: Cannot complete request because of a conflicting <span class="title">operation</span> <span class="params">(e.g. worker rebalance)</span></span></span><br><span class="line"><span class="function">        at org.apache.kafka.connect.runtime.rest.RestServer.<span class="title">httpRequest</span><span class="params">(RestServer.java:<span class="number">229</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.kafka.connect.runtime.distributed.DistributedHerder$18.<span class="title">run</span><span class="params">(DistributedHerder.java:<span class="number">993</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.Executors$RunnableAdapter.<span class="title">call</span><span class="params">(Executors.java:<span class="number">511</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.FutureTask.<span class="title">run</span><span class="params">(FutureTask.java:<span class="number">266</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1142</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">617</span>)</span></span></span><br><span class="line"><span class="function">        at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">748</span>)</span></span></span><br><span class="line"><span class="function">[2018-03-13 10:30:28,307] ERROR Failed to reconfigure connector´s tasks, retrying after backoff: <span class="params">(org.apache.kafka.connect.runtime.distributed.DistributedHerder:<span class="number">922</span>)</span></span></span><br><span class="line"><span class="function">org.apache.kafka.connect.runtime.rest.errors.ConnectRestException: Cannot complete request because of a conflicting <span class="title">operation</span> <span class="params">(e.g. worker rebalance)</span></span></span><br><span class="line"><span class="function">        at org.apache.kafka.connect.runtime.rest.RestServer.<span class="title">httpRequest</span><span class="params">(RestServer.java:<span class="number">229</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.kafka.connect.runtime.distributed.DistributedHerder$18.<span class="title">run</span><span class="params">(DistributedHerder.java:<span class="number">993</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.Executors$RunnableAdapter.<span class="title">call</span><span class="params">(Executors.java:<span class="number">511</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.FutureTask.<span class="title">run</span><span class="params">(FutureTask.java:<span class="number">266</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1142</span>)</span></span></span><br><span class="line"><span class="function">        at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">617</span>)</span></span></span><br><span class="line"><span class="function">        at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">748</span>)</span></span></span><br><span class="line"><span class="function">[2018-03-13 10:30:28,557] INFO SinkConnectorConfig values:</span></span><br><span class="line"><span class="function">        connector.class </span>= org.apache.kafka.connect.file.FileStreamSinkConnector</span><br><span class="line">        key.converter = <span class="keyword">null</span></span><br><span class="line">        name = FileStreamSinkConnector</span><br><span class="line">        tasks.max = <span class="number">1</span></span><br><span class="line">        topics = [kafka-connect-ui-file-sink]</span><br><span class="line">        transforms = <span class="keyword">null</span></span><br><span class="line">        value.converter = <span class="keyword">null</span></span><br><span class="line"> (org.apache.kafka.connect.runtime.SinkConnectorConfig:<span class="number">223</span>)</span><br><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">28</span>,<span class="number">558</span>] INFO EnrichedConnectorConfig values:</span><br><span class="line">        connector.class = org.apache.kafka.connect.file.FileStreamSinkConnector</span><br><span class="line">        key.converter = <span class="keyword">null</span></span><br><span class="line">        name = FileStreamSinkConnector</span><br><span class="line">        tasks.max = <span class="number">1</span></span><br><span class="line">        topics = [kafka-connect-ui-file-sink]</span><br><span class="line">        transforms = <span class="keyword">null</span></span><br><span class="line">        value.converter = <span class="keyword">null</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka/connect-distributed.properties</span><br><span class="line">  <span class="comment"># These are provided to inform the user about the presence of the REST host and port configs </span></span><br><span class="line">  <span class="comment"># Hostname &amp; Port for the REST API to listen on. If this is set, it will bind to the interface used to listen to requests.</span></span><br><span class="line">  rest.host.name=0.0.0.0</span><br><span class="line">  rest.port=8083</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 增加如下两个配置</span></span><br><span class="line">  <span class="comment"># The Hostname &amp; Port that will be given out to other workers to connect to i.e. URLs that are routable from other servers.</span></span><br><span class="line">  rest.advertised.host.name=192.168.1.101  <span class="comment"># 当前机器 IP 地址</span></span><br><span class="line">  rest.advertised.port=8083</span><br></pre></td></tr></tbody></table></figure>
<h5 id="io-confluent-kafka-schemaregistry-client-rest-RestService-Connection-refused"><a href="#io-confluent-kafka-schemaregistry-client-rest-RestService-Connection-refused" class="headerlink" title="io.confluent.kafka.schemaregistry.client.rest.RestService Connection refused"></a>io.confluent.kafka.schemaregistry.client.rest.RestService Connection refused</h5><h6 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic kafka-connect-ui-file-sink --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></span><br><span class="line">  <span class="comment"># 发送数据</span></span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value1"</span>}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">211</span>] ERROR Failed to send HTTP request to endpoint: http:<span class="comment">//localhost:8081/subjects/kafka-connect-ui-file-sink-value/versions (io.confluent.kafka.schemaregistry.client.rest.RestService:156)</span></span><br><span class="line">java.net.ConnectException: <span class="function">Connection <span class="title">refused</span> <span class="params">(Connection refused)</span></span></span><br><span class="line"><span class="function">	at java.net.PlainSocketImpl.<span class="title">socketConnect</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function">	at java.net.AbstractPlainSocketImpl.<span class="title">doConnect</span><span class="params">(AbstractPlainSocketImpl.java:<span class="number">350</span>)</span></span></span><br><span class="line"><span class="function">	at java.net.AbstractPlainSocketImpl.<span class="title">connectToAddress</span><span class="params">(AbstractPlainSocketImpl.java:<span class="number">206</span>)</span></span></span><br><span class="line"><span class="function">	at java.net.AbstractPlainSocketImpl.<span class="title">connect</span><span class="params">(AbstractPlainSocketImpl.java:<span class="number">188</span>)</span></span></span><br><span class="line"><span class="function">	at java.net.SocksSocketImpl.<span class="title">connect</span><span class="params">(SocksSocketImpl.java:<span class="number">392</span>)</span></span></span><br><span class="line"><span class="function">	at java.net.Socket.<span class="title">connect</span><span class="params">(Socket.java:<span class="number">589</span>)</span></span></span><br><span class="line"><span class="function">	at java.net.Socket.<span class="title">connect</span><span class="params">(Socket.java:<span class="number">538</span>)</span></span></span><br><span class="line"><span class="function">	at sun.net.NetworkClient.<span class="title">doConnect</span><span class="params">(NetworkClient.java:<span class="number">180</span>)</span></span></span><br><span class="line"><span class="function">	at sun.net.www.http.HttpClient.<span class="title">openServer</span><span class="params">(HttpClient.java:<span class="number">463</span>)</span></span></span><br><span class="line"><span class="function">	at sun.net.www.http.HttpClient.<span class="title">openServer</span><span class="params">(HttpClient.java:<span class="number">558</span>)</span></span></span><br><span class="line"><span class="function">	at sun.net.www.http.HttpClient.&lt;init&gt;<span class="params">(HttpClient.java:<span class="number">242</span>)</span></span></span><br><span class="line"><span class="function">	at sun.net.www.http.HttpClient.<span class="title">New</span><span class="params">(HttpClient.java:<span class="number">339</span>)</span></span></span><br><span class="line"><span class="function">	at sun.net.www.http.HttpClient.<span class="title">New</span><span class="params">(HttpClient.java:<span class="number">357</span>)</span></span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 schema register 进程是否存在</span></span><br><span class="line">$ nohup ./bin/schema-registry-start ./etc/schema-registry/schema-registry.properties &amp;</span><br><span class="line">$ tail -f logs/schema-registry.log</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><h4 id="Docker-环境安装"><a href="#Docker-环境安装" class="headerlink" title="Docker 环境安装"></a>Docker 环境安装</h4><h5 id="更新镜像源"><a href="#更新镜像源" class="headerlink" title="更新镜像源"></a>更新镜像源</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加国内 yum 源</span></span><br><span class="line">$ sudo yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 更新 yum 软件源缓存</span></span><br><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></tbody></table></figure>
<h5 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker-CE"></a>安装 Docker-CE</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 依赖包</span></span><br><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 安装 docker-ce</span></span><br><span class="line">$ sudo yum install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接一键安装</span></span><br><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></tbody></table></figure>
<h5 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure>
<h5 id="建立-Docker-用户组"><a href="#建立-Docker-用户组" class="headerlink" title="建立 Docker 用户组"></a>建立 Docker 用户组</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 docker 组</span></span><br><span class="line">$ sudo groupadd docker</span><br><span class="line"><span class="comment"># 将当前用户加入 docker 组</span></span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="MySQL-Kafka-Connect-HDFS-实战"><a href="#MySQL-Kafka-Connect-HDFS-实战" class="headerlink" title="MySQL - Kafka Connect - HDFS 实战"></a>MySQL - Kafka Connect - HDFS 实战</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><p>　<code>MySQL - Kafka Connect - HDFS</code> 的集成环境，官方已经提供了 <a href="https://s3-us-west-2.amazonaws.com/confluent-files/kafka_connect_blog.ova">kafka_connect_blog.ova</a> 镜像文件</p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><h6 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h6><p>　Vagrant 来管理和安装 VirtualBox 虚拟机，相关安装步骤，详见我的另一篇博客《<a href="https://yuzhouwan.com/posts/43687/#Vagrant">Python</a>》</p>
<h5 id="导入虚拟机镜像"><a href="#导入虚拟机镜像" class="headerlink" title="导入虚拟机镜像"></a>导入虚拟机镜像</h5><p>　选择合适的资源，导入 <code>kafka_connect_blog.ova</code> 文件即可<br>　默认用户名密码均为 <code>vagrant</code></p>
<h5 id="操作虚拟机镜像"><a href="#操作虚拟机镜像" class="headerlink" title="操作虚拟机镜像"></a>操作虚拟机镜像</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 更新下载源索引</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ ./setup.sh</span><br><span class="line">$ ./start.sh</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 机器配置过低 和 网络代理受阻 的原因，未完待续…</p>
<h4 id="踩过的坑-2"><a href="#踩过的坑-2" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="bridge-nf-call-iptables-is-disabled"><a href="#bridge-nf-call-iptables-is-disabled" class="headerlink" title="bridge-nf-call-iptables is disabled"></a>bridge-nf-call-iptables is disabled</h5><h6 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加内核配置参数</span></span><br><span class="line">$ sudo tee -a /etc/sysctl.conf &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">  net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">  net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">  EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 sysctl.conf</span></span><br><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></tbody></table></figure>
<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><h4 id="Worker-通用配置"><a href="#Worker-通用配置" class="headerlink" title="Worker 通用配置"></a>Worker 通用配置</h4><h5 id="bootstrap-servers"><a href="#bootstrap-servers" class="headerlink" title="bootstrap.servers"></a>bootstrap.servers</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 建立到 Kafka 的初始连接</span></span><br><span class="line"><span class="comment"># Bootstrap Kafka servers. If multiple servers are specified, they should be comma-separated.</span></span><br><span class="line"><span class="meta">bootstrap.servers</span>=<span class="string">localhost:9092</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="key-value-converter"><a href="#key-value-converter" class="headerlink" title="[key | value].converter"></a>[key | value].converter</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 Kafka 中的数据如何转为到 Connect</span></span><br><span class="line"><span class="comment"># The converters specify the format of data in Kafka and how to translate it into Connect data.</span></span><br><span class="line"><span class="comment"># Every Connect user will need to configure these based on the format they want their data in</span></span><br><span class="line"><span class="comment"># when loaded from or stored into Kafka</span></span><br><span class="line"><span class="meta">key.converter</span>=<span class="string">io.confluent.connect.avro.AvroConverter</span></span><br><span class="line"><span class="meta">key.converter.schema.registry.url</span>=<span class="string">http://localhost:8081</span></span><br><span class="line"><span class="meta">value.converter</span>=<span class="string">io.confluent.connect.avro.AvroConverter</span></span><br><span class="line"><span class="meta">value.converter.schema.registry.url</span>=<span class="string">http://localhost:8081</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="internal-key-value-converter"><a href="#internal-key-value-converter" class="headerlink" title="internal.[key | value].converter"></a>internal.[key | value].converter</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 Connect 内部的数据转化</span></span><br><span class="line"><span class="comment"># The offsets, status, and configurations are written to the topics using converters specified through the following required properties.</span></span><br><span class="line"><span class="comment"># Most users will always want to use the JSON converter without schemas. </span></span><br><span class="line"><span class="comment"># Offset and config data is never visible outside of Connect in this format.</span></span><br><span class="line"><span class="meta">internal.key.converter</span>=<span class="string">org.apache.kafka.connect.json.JsonConverter</span></span><br><span class="line"><span class="meta">internal.value.converter</span>=<span class="string">org.apache.kafka.connect.json.JsonConverter</span></span><br><span class="line"><span class="meta">internal.key.converter.schemas.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">internal.value.converter.schemas.enable</span>=<span class="string">false</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="rest-host-name-amp-rest-port"><a href="#rest-host-name-amp-rest-port" class="headerlink" title="rest.host.name &amp; rest.port"></a>rest.host.name &amp; rest.port</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 RESTful 服务的 IP 和 Port</span></span><br><span class="line"><span class="comment"># These are provided to inform the user about the presence of the REST host and port configs</span></span><br><span class="line"><span class="comment"># Hostname &amp; Port for the REST API to listen on. If this is set, it will bind to the interface used to listen to requests.</span></span><br><span class="line"><span class="meta">rest.host.name</span>=<span class="string">0.0.0.0</span></span><br><span class="line"><span class="meta">rest.port</span>=<span class="string">8083</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="plugin-path"><a href="#plugin-path" class="headerlink" title="plugin.path"></a>plugin.path</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Set to a list of filesystem paths separated by commas (,) to enable class loading isolation for plugins</span></span><br><span class="line"><span class="comment"># (connectors, converters, transformations). The list should consist of top level directories that include </span></span><br><span class="line"><span class="comment"># any combination of: </span></span><br><span class="line"><span class="comment"># a) directories immediately containing jars with plugins and their dependencies</span></span><br><span class="line"><span class="comment"># b) uber-jars with plugins and their dependencies</span></span><br><span class="line"><span class="comment"># c) directories immediately containing the package directory structure of classes of plugins and their dependencies</span></span><br><span class="line"><span class="comment"># Examples: </span></span><br><span class="line"><span class="comment"># plugin.path=/usr/local/share/java,/usr/local/share/kafka/plugins,/opt/connectors,</span></span><br><span class="line"><span class="meta">plugin.path</span>=<span class="string">/home/connect/plugins</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="分布式-Worker-配置"><a href="#分布式-Worker-配置" class="headerlink" title="分布式 Worker 配置"></a>分布式 Worker 配置</h4><h5 id="group-id"><a href="#group-id" class="headerlink" title="group.id"></a>group.id</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># The group ID is a unique identifier for the set of workers that form a single Kafka Connect cluster</span></span><br><span class="line"><span class="meta">group.id</span>=<span class="string">connect-cluster</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="config-offset-status-storage-topic"><a href="#config-offset-status-storage-topic" class="headerlink" title="[config | offset | status].storage.topic"></a>[config | offset | status].storage.topic</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Internal Storage Topics.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Kafka Connect distributed workers store the connector and task configurations, connector offsets,</span></span><br><span class="line"><span class="comment"># and connector statuses in three internal topics. These topics MUST be compacted.</span></span><br><span class="line"><span class="comment"># When the Kafka Connect distributed worker starts, it will check for these topics and attempt to create them</span></span><br><span class="line"><span class="comment"># as compacted topics if they don't yet exist, using the topic name, replication factor, and number of partitions</span></span><br><span class="line"><span class="comment"># as specified in these properties, and other topic-specific settings inherited from your brokers'</span></span><br><span class="line"><span class="comment"># auto-creation settings. If you need more control over these other topic-specific settings, you may want to</span></span><br><span class="line"><span class="comment"># manually create these topics before starting Kafka Connect distributed workers.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following properties set the names of these three internal topics for storing configs, offsets, and status.</span></span><br><span class="line"><span class="meta">config.storage.topic</span>=<span class="string">connect-configs</span></span><br><span class="line"><span class="meta">offset.storage.topic</span>=<span class="string">connect-offsets</span></span><br><span class="line"><span class="meta">status.storage.topic</span>=<span class="string">connect-statuses</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="config-offset-status-storage-replication-factor"><a href="#config-offset-status-storage-replication-factor" class="headerlink" title="[config | offset | status].storage.replication.factor"></a>[config | offset | status].storage.replication.factor</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># The following properties set the replication factor for the three internal topics, defaulting to 3 for each</span></span><br><span class="line"><span class="comment"># and therefore requiring a minimum of 3 brokers in the cluster. Since we want the examples to run with</span></span><br><span class="line"><span class="comment"># only a single broker, we set the replication factor here to just 1. That´s okay for the examples, but</span></span><br><span class="line"><span class="comment"># ALWAYS use a replication factor of AT LEAST 3 for production environments to reduce the risk of </span></span><br><span class="line"><span class="comment"># losing connector offsets, configurations, and status.</span></span><br><span class="line"><span class="meta">config.storage.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">offset.storage.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">status.storage.replication.factor</span>=<span class="string">1</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="offset-status-storage-partitions"><a href="#offset-status-storage-partitions" class="headerlink" title="[offset | status].storage.partitions"></a>[offset | status].storage.partitions</h5><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># The config storage topic must have a single partition, and this cannot be changed via properties. </span></span><br><span class="line"><span class="comment"># Offsets for all connectors and tasks are written quite frequently and therefore the offset topic</span></span><br><span class="line"><span class="comment"># should be highly partitioned; by default it is created with 25 partitions, but adjust accordingly</span></span><br><span class="line"><span class="comment"># with the number of connector tasks deployed to a distributed worker cluster. Kafka Connect records</span></span><br><span class="line"><span class="comment"># the status less frequently, and so by default the topic is created with 5 partitions.</span></span><br><span class="line"><span class="meta">offset.storage.partitions</span>=<span class="string">25</span></span><br><span class="line"><span class="meta">status.storage.partitions</span>=<span class="string">5</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Connector-配置"><a href="#Connector-配置" class="headerlink" title="Connector 配置"></a>Connector 配置</h4><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Unique name for the connector. Attempting to register again with the same name will fail.</span></span><br><span class="line">name</span><br><span class="line"><span class="comment"># The Java class for the connector</span></span><br><span class="line">connector.class</span><br><span class="line"><span class="comment"># The maximum number of tasks that should be created for this connector. The connector may create fewer tasks if it cannot achieve this level of parallelism.</span></span><br><span class="line">tasks.max</span><br><span class="line"><span class="comment"># (optional) Override the default key converter class set by the worker.</span></span><br><span class="line">key.converter</span><br><span class="line"><span class="comment"># (optional) Override the default value converter class set by the worker.</span></span><br><span class="line">value.converter</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sink connectors also have one additional option to control their input</span></span><br><span class="line"><span class="comment"># A list of topics to use as input for this connector</span></span><br><span class="line">topics</span><br></pre></td></tr></tbody></table></figure>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><h6 id="单机版-Connector-配置"><a href="#单机版-Connector-配置" class="headerlink" title="单机版 Connector 配置"></a>单机版 Connector 配置</h6><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">local-file-sink</span></span><br><span class="line"><span class="meta">connector.class</span>=<span class="string">FileStreamSinkConnector</span></span><br><span class="line"><span class="meta">tasks.max</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">file</span>=<span class="string">test.sink.txt</span></span><br><span class="line"><span class="attr">topics</span>=<span class="string">connect-test</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="分布式-Connector-配置"><a href="#分布式-Connector-配置" class="headerlink" title="分布式 Connector 配置"></a>分布式 Connector <a href="https://docs.confluent.io/current/connect/userguide.html#distributed-worker-configuration">配置</a></h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X POST -H <span class="string">"Content-Type: application/json"</span> --data <span class="string">'{"name": "local-file-sink", "config": {"connector.class":"FileStreamSinkConnector", "tasks.max":"1", "file":"test.sink.txt", "topics":"connect-test" }}'</span> http://localhost:8083/connectors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接指定一个包含了 JSON 格式的配置文件</span></span><br><span class="line">$ curl -X POST -H <span class="string">"Content-Type: application/json"</span> --data @config.json http://localhost:8083/connectors</span><br></pre></td></tr></tbody></table></figure>
<h3 id="RESTful-接口"><a href="#RESTful-接口" class="headerlink" title="RESTful 接口"></a><a href="http://kafka.apache.org/documentation.html#connect_rest">RESTful</a> 接口</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>　Since Kafka Connect is intended to be run as a service, it also provides a REST API for managing connectors. By default, this service runs on port 8083.</p>
<p>　The following are the currently supported endpoints:</p>
<ul>
<li><code>GET /connectors</code> - return a list of active connectors</li>
<li><code>POST /connectors</code> - create a new connector; the request body should be a JSON object containing a string <code>name</code> field and an object <code>config</code> field with the connector configuration parameters</li>
<li><code>GET /connectors/{name}</code> - get information about a specific connector</li>
<li><code>GET /connectors/{name}/config</code> - get the configuration parameters for a specific connector</li>
<li><code>PUT /connectors/{name}/config</code> - update the configuration parameters for a specific connector</li>
<li><code>GET /connectors/{name}/status</code> - get current status of the connector, including if it is running, failed, paused, etc., which worker it is assigned to, error information if it has failed, and the state of all its tasks</li>
<li><code>GET /connectors/{name}/tasks</code> - get a list of tasks currently running for a connector</li>
<li><code>GET /connectors/{name}/tasks/{taskid}/status</code> - get current status of the task, including if it is running, failed, paused, etc., which worker it is assigned to, and error information if it has failed</li>
<li><code>PUT /connectors/{name}/pause</code> - pause the connector and its tasks, which stops message processing until the connector is resumed</li>
<li><code>PUT /connectors/{name}/resume</code> - resume a paused connector (or do nothing if the connector is not paused)</li>
<li><code>POST /connectors/{name}/restart</code> - restart a connector (typically because it has failed)</li>
<li><code>POST /connectors/{name}/tasks/{taskId}/restart</code> - restart an individual task (typically because it has failed)</li>
<li><code>DELETE /connectors/{name}</code> - delete a connector, halting all tasks and deleting its configuration</li>
</ul>
<p>　Kafka Connect also provides a REST API for getting information about connector plugins:</p>
<ul>
<li><code>GET /connector-plugins</code>- return a list of connector plugins installed in the Kafka Connect cluster. Note that the API only checks for connectors on the worker that handles the request, which means you may see inconsistent results, especially during a rolling upgrade if you add new connector jars</li>
<li><code>PUT /connector-plugins/{connector-type}/config/validate</code> - validate the provided configuration values against the configuration definition. This API performs per config validation, returns suggested values and error messages during validation.</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><h5 id="Worker-版本信息"><a href="#Worker-版本信息" class="headerlink" title="Worker 版本信息"></a>Worker 版本信息</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost:8083/ | jq</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.10.0.1-cp1"</span>,</span><br><span class="line">  <span class="attr">"commit"</span>: <span class="string">"ea5fcd28195f168b"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Worker-支持的-Connector-插件"><a href="#Worker-支持的-Connector-插件" class="headerlink" title="Worker 支持的 Connector 插件"></a>Worker 支持的 Connector 插件</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost:8083/connector-plugins | jq</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"sink"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.3.1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.hdfs.HdfsSinkConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"sink"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.3.1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.hdfs.tools.SchemaSourceConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"source"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.11.0.0-cp1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.jdbc.JdbcSinkConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"sink"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.3.1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.jdbc.JdbcSourceConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"source"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.3.1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.s3.S3SinkConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"sink"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.3.1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"io.confluent.connect.storage.tools.SchemaSourceConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"source"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.11.0.0-cp1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"org.apache.kafka.connect.file.FileStreamSinkConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"sink"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.11.0.0-cp1"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"class"</span>: <span class="string">"org.apache.kafka.connect.file.FileStreamSourceConnector"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"source"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.11.0.0-cp1"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Worker-上激活的-Connector-插件"><a href="#Worker-上激活的-Connector-插件" class="headerlink" title="Worker 上激活的 Connector 插件"></a>Worker 上激活的 Connector 插件</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost:8083/connectors | jq</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"file-source"</span>,</span><br><span class="line">  <span class="string">"file-sink"</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="重启-Connector"><a href="#重启-Connector" class="headerlink" title="重启 Connector"></a>重启 Connector</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X POST localhost:8083/connectors/file-sink/restart</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>如果成功了，不会返回任何信息</li>
<li>如果失败了，会打印如下类似信息</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"error_code"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Unknown connector: local-file-sink"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="获得某个-Connector上的所有-Tasks"><a href="#获得某个-Connector上的所有-Tasks" class="headerlink" title="获得某个 Connector上的所有 Tasks"></a>获得某个 Connector上的所有 Tasks</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost:8083/connectors/file-sink/tasks | jq</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"id"</span>: {</span><br><span class="line">      <span class="attr">"connector"</span>: <span class="string">"file-sink"</span>,</span><br><span class="line">      <span class="attr">"task"</span>: <span class="number">0</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"config"</span>: {</span><br><span class="line">      <span class="attr">"topics"</span>: <span class="string">"connect-test"</span>,</span><br><span class="line">      <span class="attr">"file"</span>: <span class="string">"test.sink.txt"</span>,</span><br><span class="line">      <span class="attr">"task.class"</span>: <span class="string">"org.apache.kafka.connect.file.FileStreamSinkTask"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="重启-Task"><a href="#重启-Task" class="headerlink" title="重启 Task"></a>重启 Task</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X POST localhost:8083/connectors/file-sink/tasks/0/restart | jq</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>如果成功了，不会返回任何信息</li>
<li>如果失败了，会打印如下类似信息</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"error_code"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Unknown task: file-sink-1"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="暂停-Connector"><a href="#暂停-Connector" class="headerlink" title="暂停 Connector"></a>暂停 Connector</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X PUT localhost:8083/connectors/file-sink/pause | jq</span><br></pre></td></tr></tbody></table></figure>
<h5 id="恢复-Connector"><a href="#恢复-Connector" class="headerlink" title="恢复 Connector"></a>恢复 Connector</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X PUT localhost:8083/connectors/file-sink/resume | jq</span><br></pre></td></tr></tbody></table></figure>
<h5 id="更新-Connector-配置信息"><a href="#更新-Connector-配置信息" class="headerlink" title="更新 Connector 配置信息"></a>更新 Connector 配置信息</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X PUT -H <span class="string">"Content-Type: application/json"</span> --data <span class="string">'{"connector.class":"FileStreamSinkConnector","file":"test.sink.txt","tasks.max":"2","topics":"connect-test","name":"local-file-sink"}'</span> localhost:8083/connectors/local-file-sink/config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"local-file-sink"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: {</span><br><span class="line">    <span class="attr">"connector.class"</span>: <span class="string">"FileStreamSinkConnector"</span>,</span><br><span class="line">    <span class="attr">"file"</span>: <span class="string">"test.sink.txt"</span>,</span><br><span class="line">    <span class="attr">"tasks.max"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"topics"</span>: <span class="string">"connect-test"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"local-file-sink"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"tasks"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"connector"</span>: <span class="string">"local-file-sink"</span>,</span><br><span class="line">      <span class="attr">"task"</span>: <span class="number">0</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"connector"</span>: <span class="string">"local-file-sink"</span>,</span><br><span class="line">      <span class="attr">"task"</span>: <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="获取-Connector-状态"><a href="#获取-Connector-状态" class="headerlink" title="获取 Connector 状态"></a>获取 Connector 状态</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost:8083/connectors/file-sink/status | jq</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"file-sink"</span>,</span><br><span class="line">  <span class="attr">"connector"</span>: {</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"RUNNING"</span>,</span><br><span class="line">    <span class="attr">"worker_id"</span>: <span class="string">"192.168.1.101:8083"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"tasks"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"RUNNING"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"worker_id"</span>: <span class="string">"192.168.1.101:8083"</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="获取-Connector-配置信息"><a href="#获取-Connector-配置信息" class="headerlink" title="获取 Connector 配置信息"></a>获取 Connector 配置信息</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl localhost:8083/connectors/file-sink | jq</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"file-sink"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: {</span><br><span class="line">    <span class="attr">"topics"</span>: <span class="string">"connect-test"</span>,</span><br><span class="line">    <span class="attr">"file"</span>: <span class="string">"test.sink.txt"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"file-sink"</span>,</span><br><span class="line">    <span class="attr">"tasks.max"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"connector.class"</span>: <span class="string">"FileStreamSink"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"tasks"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"connector"</span>: <span class="string">"file-sink"</span>,</span><br><span class="line">      <span class="attr">"task"</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="删除-Connector"><a href="#删除-Connector" class="headerlink" title="删除 Connector"></a>删除 Connector</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X DELETE localhost:8083/connectors/file-sink</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 每个 Connector 进程在启动的时候，都会内置地启动一个 REST 服务端（默认端口 8083）</p>
<h3 id="Schema-Registry"><a href="#Schema-Registry" class="headerlink" title="Schema Registry"></a><a href="https://docs.confluent.io/current/schema-registry/docs/index.html">Schema Registry</a></h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有 Schema</span></span><br><span class="line">$ curl -X GET http://localhost:8081/subjects | jq</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"hdfs_sink_13-value"</span>,</span><br><span class="line">    <span class="string">"kafka-connect-ui-file-sink-value"</span>,</span><br><span class="line">    <span class="string">"hdfs_sink_16-value"</span>,</span><br><span class="line">    <span class="string">"hdfs_sink_17-value"</span>,</span><br><span class="line">    <span class="string">"hdfs_sink_18-value"</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 hdfs_sink_13-value 的所有版本</span></span><br><span class="line">$ curl -X DELETE http://localhost:8081/subjects/hdfs_sink_13-value</span><br><span class="line">  [1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 hdfs_sink_16-value 的第一个版本</span></span><br><span class="line">$ curl -X DELETE http://localhost:8081/subjects/hdfs_sink_16-value/versions/1</span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 hdfs_sink_17-value 最后一个版本</span></span><br><span class="line">$ curl -X DELETE http://localhost:8081/subjects/hdfs_sink_17-value/versions/latest</span><br><span class="line">  1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><h4 id="Confluent-UI"><a href="#Confluent-UI" class="headerlink" title="Confluent UI"></a><a href="https://docs.confluent.io/4.0.0/cloud-quickstart.html">Confluent UI</a></h4><p>　未开源</p>
<h4 id="Landoop-UI"><a href="#Landoop-UI" class="headerlink" title="Landoop UI"></a>Landoop UI</h4><h5 id="kafka-connect-ui"><a href="#kafka-connect-ui" class="headerlink" title="kafka-connect-ui"></a><a href="https://github.com/Landoop/kafka-connect-ui">kafka-connect-ui</a></h5><h6 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/Landoop/kafka-connect-ui.git</span><br><span class="line">$ <span class="built_in">cd</span> kafka-connect-ui</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ npm install -g bower http-server</span><br><span class="line">$ npm install</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ http-server -p 8080 .</span><br></pre></td></tr></tbody></table></figure>
<h6 id="开启-Confluent-Rest"><a href="#开启-Confluent-Rest" class="headerlink" title="开启 Confluent Rest"></a>开启 Confluent Rest</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 REST 接口</span></span><br><span class="line">$ <span class="built_in">cd</span> software/confluent</span><br><span class="line">$ vim ./etc/kafka/connect-distributed.properties</span><br><span class="line">  <span class="comment"># These are provided to inform the user about the presence of the REST host and port configs</span></span><br><span class="line">  <span class="comment"># Hostname &amp; Port for the REST API to listen on. If this is set, it will bind to the interface used to listen to requests.</span></span><br><span class="line">  rest.host.name=0.0.0.0</span><br><span class="line">  rest.port=8083</span><br><span class="line">  <span class="comment"># 如果不设置这两个配置，Worker 节点之间将无法互相识别</span></span><br><span class="line">  <span class="comment"># The Hostname &amp; Port that will be given out to other workers to connect to i.e. URLs that are routable from other servers.</span></span><br><span class="line">  rest.advertised.host.name=192.168.1.101  <span class="comment"># 当前机器 IP 地址</span></span><br><span class="line">  rest.advertised.port=8083</span><br><span class="line">  <span class="comment"># 如果不设置这两个配置，页面上将会看到 prod http://xxxx:8083 N/A N/A N/A</span></span><br><span class="line">  access.control.allow.methods=GET,POST,PUT,DELETE,OPTIONS</span><br><span class="line">  access.control.allow.origin=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动 Worker</span></span><br><span class="line">$ nohup ./bin/connect-distributed ./etc/kafka/connect-distributed.properties &gt; connect-distribute.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问，验证</span></span><br><span class="line">$ curl http://192.168.1.101:8083/</span><br><span class="line">  {<span class="string">"version"</span>:<span class="string">"0.11.0.1-cp1"</span>,<span class="string">"commit"</span>:<span class="string">"3735a6ca8b6432db"</span>}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="创建-File-Sink"><a href="#创建-File-Sink" class="headerlink" title="创建 File Sink"></a>创建 File Sink</h6><ul>
<li><p>选择 Kafka Connect 集群<br><img data-src="/picture/kafka/kafka_connect_ui_configured_clusters.png" alt="Kafka Connector UI Configured Clusters"></p>
</li>
<li><p>查看 Dashboard<br><img data-src="/picture/kafka/kafka_connect_ui_dashboard.png" alt="Kafka Connector UI Dashboard"></p>
</li>
<li><p>点击 Create 按钮<br><img data-src="/picture/kafka/kafka_connect_ui_new_connector.png" alt="Kafka Connector UI New Connector"></p>
</li>
<li><p>配置 Connector<br><img data-src="/picture/kafka/kafka_connect_ui_new_connector_config.png" alt="Kafka Connector UI New Connector Config"></p>
</li>
<li><p>创建成功<br><img data-src="/picture/kafka/kafka_connect_ui_new_connector_created.png" alt="Kafka Connector UI Created"></p>
</li>
<li><p>查看 Connector 详情<br><img data-src="/picture/kafka/kafka_connect_ui_new_connector_detail.png" alt="Kafka Connector UI New Connector Detail"></p>
</li>
</ul>
<h6 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic kafka-connect-ui-file-sink --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></span><br><span class="line">  <span class="comment"># 发送数据</span></span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value1"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value2"</span>}</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"value3"</span>}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 持续发送</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> {1..3}; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"{\"f1\": \"value<span class="variable">$i</span>\"}"</span> | ./bin/kafka-avro-console-producer --broker-list localhost:9092 --topic kafka-connect-ui-file-sink --property value.schema=<span class="string">'{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span>; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="接收成功"><a href="#接收成功" class="headerlink" title="接收成功"></a>接收成功</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat ./software/confluent-3.3.1/kafka-connect-ui-file-sink.txt</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Struct{f1=value1}</span><br><span class="line">Struct{f1=value2}</span><br><span class="line">Struct{f1=value3}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="创建-File-Source"><a href="#创建-File-Source" class="headerlink" title="创建 File Source"></a>创建 File Source</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 具体操作步骤，参考上述 File Sink 创建过程，配置如下</span></span><br><span class="line">name=FileStreamSourceConnector</span><br><span class="line">connector.class=org.apache.kafka.connect.file.FileStreamSourceConnector</span><br><span class="line">file=kafka-connect-ui-file-source.txt</span><br><span class="line">tasks.max=1</span><br><span class="line">topic=kafka-connect-ui-file-sink</span><br></pre></td></tr></tbody></table></figure>
<p>　查看 Dashboard 效果如下：</p>
<p><img data-src="/picture/kafka/kafka_connect_ui_file_source_and_sink.png" alt="Kafka Connector UI File Source and Sink"></p>
<h6 id="写入数据到文件"><a href="#写入数据到文件" class="headerlink" title="写入数据到文件"></a>写入数据到文件</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/connect/software/confluent</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"{\"f1\": \"400\"}"</span> &gt; kafka-connect-ui-file-source.txt</span><br><span class="line">$ tail -f kafka-connect-ui-file-sink.txt</span><br><span class="line">  {<span class="string">"f1"</span>: <span class="string">"400"</span>}</span><br><span class="line"><span class="comment"># 可以看到数据已经落入到 File Sink 配置的本地文件中了</span></span><br><span class="line"><span class="comment"># 但是，数据格式和直接发送带 Schema 的数据给 Kafka，然后直接传输给 File Sink 的数据（Struct{f1=397}），有所不同</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="踩过的坑-3"><a href="#踩过的坑-3" class="headerlink" title="踩过的坑"></a>踩过的坑</h6><p>描述</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.apache.kafka.connect.errors.ConnectException: org.apache.hadoop.security.AccessControlException: Permission denied: user=connect, access=WRITE, inode=<span class="string">"/"</span>:bigdata:supergroup:drwxr-xr-x</span><br></pre></td></tr></tbody></table></figure>
<p>解决</p>
<p>　创建 Kafka 2 HDFS 任务时，指定 <code>logs.dir=/user/connect/logs</code> 参数</p>
<p>　a) Connector 和 HDFS 集群均未报错，但是数据无法落 HDFS</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 除了基本的配置外，</span></span><br><span class="line">connector.class=io.confluent.connect.hdfs.HdfsSinkConnector</span><br><span class="line">topics.dir=/user/connect/topics</span><br><span class="line">flush.size=1</span><br><span class="line">topics=hdfs_sink_16</span><br><span class="line">tasks.max=1</span><br><span class="line">hdfs.url=hdfs://192.168.1.101:9000</span><br><span class="line">logs.dir=/user/connect/logs</span><br><span class="line">schema.cache.size=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据格式相关配置，进行显式指定</span></span><br><span class="line">format.class=io.confluent.connect.hdfs.avro.AvroFormat</span><br><span class="line">key.converter=io.confluent.connect.avro.AvroConverter</span><br><span class="line">key.converter.schema.registry.url=http://localhost:8081</span><br><span class="line">value.converter=io.confluent.connect.avro.AvroConverter</span><br><span class="line">value.converter.schema.registry.url=http://localhost:8081</span><br></pre></td></tr></tbody></table></figure>
<p>　b) Missing required configuration “schema.registry.url” which has no default value</p>
<p>　需要指定 <code>schemas.enable=false</code> 配置项</p>
<p>Tips: Live demo is <a href="https://kafka-connect-ui.landoop.com">here</a>.</p>
<h5 id="kafka-topic-ui"><a href="#kafka-topic-ui" class="headerlink" title="kafka-topic-ui"></a>kafka-topic-ui</h5><h6 id="启动-4"><a href="#启动-4" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/Landoop/kafka-topics-ui.git</span><br><span class="line">$ <span class="built_in">cd</span> kafka-topics-ui</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ npm install -g bower</span><br><span class="line">$ npm install -g http-server</span><br><span class="line">$ npm install</span><br><span class="line">$ bower install</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ http-server -p 8081 .</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-Kafka-Rest"><a href="#启动-Kafka-Rest" class="headerlink" title="启动 Kafka Rest"></a>启动 Kafka Rest</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka-rest/kafka-rest.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">id</span>=<span class="string">kafka-rest-test-server</span></span><br><span class="line"><span class="meta">schema.registry.url</span>=<span class="string">http://localhost:8081</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">192.168.1.101:2015,192.168.1.102:2015,192.168.1.103:2015</span></span><br><span class="line"><span class="comment"># 显式地指定 bootstrap server</span></span><br><span class="line"><span class="meta">bootstrap.servers</span>=<span class="string">192.168.1.101:9092,192.168.1.102:9092,192.168.1.103:9092</span></span><br><span class="line"><span class="comment"># 开启 Web 访问的权限</span></span><br><span class="line"><span class="meta">access.control.allow.methods</span>=<span class="string">GET,POST,PUT,DELETE,OPTIONS</span></span><br><span class="line"><span class="meta">access.control.allow.origin</span>=<span class="string">*</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h6><p><img data-src="/picture/kafka/kafka_topics_ui_list.png" alt="Kafka Topics UI"></p>
<h6 id="踩过的坑-4"><a href="#踩过的坑-4" class="headerlink" title="踩过的坑"></a>踩过的坑</h6><p>描述</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">WARN Connection to node -1 could not be established. Broker may not be available.</span><br></pre></td></tr></tbody></table></figure>
<p>解决</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/kafka-rest/kafka-rest.properties</span><br><span class="line">  <span class="comment"># 显式地指定 bootstrap server</span></span><br><span class="line">  bootstrap.servers=192.168.1.101:9092,192.168.1.102:9092,192.168.1.103:9092</span><br></pre></td></tr></tbody></table></figure>
<h5 id="schema-registry-ui"><a href="#schema-registry-ui" class="headerlink" title="schema-registry-ui"></a><a href="https://github.com/landoop/schema-registry-ui">schema-registry-ui</a></h5><h6 id="启动-5"><a href="#启动-5" class="headerlink" title="启动"></a>启动</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/Landoop/schema-registry-ui.git</span><br><span class="line">$ <span class="built_in">cd</span> schema-registry-ui</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ npm install</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ npm start</span><br></pre></td></tr></tbody></table></figure>
<h6 id="启动-Schema-Registry"><a href="#启动-Schema-Registry" class="headerlink" title="启动 Schema Registry"></a>启动 Schema Registry</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim etc/schema-registry/schema-registry.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">http://0.0.0.0:8081</span></span><br><span class="line"><span class="meta">kafkastore.connection.url</span>=<span class="string">192.168.1.101:2015,192.168.1.102:2015,192.168.1.103:2015</span></span><br><span class="line"><span class="meta">kafkastore.topic</span>=<span class="string">_schemas</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 开启 Web 访问的权限</span></span><br><span class="line"><span class="meta">access.control.allow.methods</span>=<span class="string">GET,POST,PUT,DELETE,OPTIONS</span></span><br><span class="line"><span class="meta">access.control.allow.origin</span>=<span class="string">*</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h6><p><img data-src="/picture/kafka/kafka_schema_ui_list.png" alt="Kafka Schema Register UI"></p>
<h6 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cmd 命令行中启动</span></span><br><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝浏览器中的 `http://localhost:8080/#/cluster/prod` 连接</span></span><br><span class="line"><span class="comment"># 并在 WebStorm 里，创建 `JavaScript Debug`，并粘贴 URL 连接，运行即可</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="使用社区-Connector"><a href="#使用社区-Connector" class="headerlink" title="使用社区 Connector"></a>使用社区 Connector</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:confluentinc/kafka-connect-hdfs.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至稳定版本，并打包编译</span></span><br><span class="line">$ <span class="built_in">cd</span> kafka-connect-hdfs; git checkout v3.0.1; mvn package</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 plugins 目录下创建对应的 kafka-connect-hdfs 子目录</span></span><br><span class="line">$ mkdir -p /usr/<span class="built_in">local</span>/share/kafka/plugins/kafka-connect-hdfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝编译出来的 jar 包到 plugins 目录</span></span><br><span class="line">$ cp target/kafka-connect-hdfs-3.0.1-package/share/java/kafka-connect-hdfs/* /usr/<span class="built_in">local</span>/share/kafka/plugins/kafka-connect-hdfs/</span><br></pre></td></tr></tbody></table></figure>
<h3 id="实现自己的-Connector"><a href="#实现自己的-Connector" class="headerlink" title="实现自己的 Connector"></a>实现自己的 Connector</h3><p>Tips: <a href="https://docs.confluent.io/current/connect/devguide.html">Connector Developer Guide</a></p>
<h3 id="修复已知-Bug"><a href="#修复已知-Bug" class="headerlink" title="修复已知 Bug"></a>修复已知 Bug</h3><p>　使用 jira 语法<a href="https://issues.apache.org/jira/browse/KAFKA-6253?jql=project%20%3D%20KAFKA%20AND%20issuetype%20%3D%20Bug%20AND%20component%20%3D%20KafkaConnect">查询</a>出 Kafka Connect 组件的已知 bug，具体语法如下</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">project <span class="operator">=</span> KAFKA <span class="keyword">AND</span> issuetype <span class="operator">=</span> Bug <span class="keyword">AND</span> component <span class="operator">=</span> KafkaConnect</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="zkCli"><a href="#zkCli" class="headerlink" title="zkCli"></a>zkCli</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Command</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>get /consumers/<code>&lt;topic&gt;</code>/owners</td>
<td>查看 topic 实时消费的 group id</td>
</tr>
<tr>
<td>get /consumers/<code>&lt;topic&gt;</code>/offsets/<code>&lt;group id&gt;</code>/<code>&lt;partitionor&gt;</code></td>
<td>查看 offset 情况（ctime: 创建时间; mtime: 修改时间）</td>
</tr>
</tbody>
</table>
</div>
<h3 id="kafka-run-class"><a href="#kafka-run-class" class="headerlink" title="kafka-run-class"></a>kafka-run-class</h3><h4 id="删除-Topic-1"><a href="#删除-Topic-1" class="headerlink" title="删除 Topic"></a>删除 Topic</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/kafka-run-class.sh kafka.admin.DeleteTopicCommand --zookeeper &lt;zk host&gt;:2181,&lt;zk host&gt;:2181,&lt;zk host&gt;:2181 --topic &lt;topic&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Consumer-指定-offset-进行消费，从而达到补数的效果"><a href="#Consumer-指定-offset-进行消费，从而达到补数的效果" class="headerlink" title="Consumer 指定 offset 进行消费，从而达到补数的效果"></a>Consumer 指定 offset 进行消费，从而达到补数的效果</h3><h4 id="Java-Client"><a href="#Java-Client" class="headerlink" title="Java Client"></a>Java Client</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">"bootstrap.servers"</span>, bootstrapServers);</span><br><span class="line">props.put(<span class="string">"group.id"</span>, groupId);</span><br><span class="line">props.put(<span class="string">"enable.auto.commit"</span>, <span class="keyword">false</span>);</span><br><span class="line">props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">props.put(<span class="string">"session.timeout.ms"</span>, <span class="string">"30000"</span>);</span><br><span class="line">props.put(<span class="string">"max.poll.records"</span>, maxPollRecords);</span><br><span class="line">props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line"><span class="comment">// consumer.subscribe(Arrays.asList(topic));</span></span><br><span class="line"></span><br><span class="line">TopicPartition p = <span class="keyword">new</span> TopicPartition(topic, <span class="number">2</span>);</span><br><span class="line">consumer.assign(Arrays.asList(p));</span><br><span class="line">consumer.seek(p, <span class="number">1024</span>);</span><br><span class="line"><span class="comment">// while (true) {</span></span><br><span class="line">  ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) {</span><br><span class="line">    String V = record.value();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  }</span><br><span class="line"><span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Shell-Console"><a href="#Shell-Console" class="headerlink" title="Shell Console"></a>Shell Console</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定从哪个 offset 开始消费</span></span><br><span class="line">$ kafka-console-consumer --bootstrap-server localhost:9092 --topic topic-1 --consumer.config  config/consumer.properties --offset 90 --partition 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 offset 重置到某一个 offset</span></span><br><span class="line">$ kafka-consumer-groups --bootstrap-server kafka-host:9092 --group my-group --reset-offsets --to-offset 1024 --all-topics --execute</span><br></pre></td></tr></tbody></table></figure>
<h3 id="哪些配置可以在-Kafka-Connect-中进行指定"><a href="#哪些配置可以在-Kafka-Connect-中进行指定" class="headerlink" title="哪些配置可以在 Kafka Connect 中进行指定"></a>哪些配置可以在 Kafka Connect 中进行指定</h3><p>　<a href="https://kafka.apache.org/documentation/#newconsumerconfigs">New Consumer Configs</a></p>
<h3 id="优雅地停止-Kafka-服务"><a href="#优雅地停止-Kafka-服务" class="headerlink" title="优雅地停止 Kafka 服务"></a>优雅地停止 Kafka 服务</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim config/server.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">controlled.shutdown.enable</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/kafka-server-stop.sh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数据过期策略"><a href="#数据过期策略" class="headerlink" title="数据过期策略"></a>数据过期策略</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim config/server.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">log.cleanup.policy</span>=<span class="string">delete</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="架构层面"><a href="#架构层面" class="headerlink" title="架构层面"></a>架构层面</h3><h4 id="RingBuffer-Lock-Free"><a href="#RingBuffer-Lock-Free" class="headerlink" title="RingBuffer + Lock Free"></a>RingBuffer + Lock Free</h4><p>　使用 <code>RingBuffer + Lock Free</code> 实现高效的 <code>Producer-Consumer</code> 设计模式，极大地提升 Kafka Producer 发送 Message 的性能</p>
<h4 id="Avro-压缩"><a href="#Avro-压缩" class="headerlink" title="Avro 压缩"></a>Avro 压缩</h4><p>　使用 Avro 压缩，保证了高效地解压缩数据的同时，可以减少网络传输的数据量</p>
<h4 id="多-Partitioner-连接池"><a href="#多-Partitioner-连接池" class="headerlink" title="多 Partitioner + 连接池"></a>多 Partitioner + 连接池</h4><p>　使用连接池可以动态地增减所需的 Kafka 连接，并自己实现 Kafka Partitioner 充分利用多 Partitioner 提高并发度</p>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-bigdata/yuzhouwan-bigdata-kafka/src/main/java/com/yuzhouwan/bigdata/kafka/util">here</a>.</p>
<h3 id="参数层面"><a href="#参数层面" class="headerlink" title="参数层面"></a>参数层面</h3><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">kafka.key.serializer.class</span>=<span class="string">kafka.serializer.StringEncoder</span></span><br><span class="line"><span class="meta">kafka.serializer.class</span>=<span class="string">kafka.serializer.DefaultEncoder</span></span><br><span class="line"><span class="meta">kafka.request.required.acks</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">kafka.async</span>=<span class="string">async</span></span><br><span class="line"><span class="meta">kafka.queue.buffering.max.ms</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">kafka.queue.buffering.max.messages</span>=<span class="string">10000</span></span><br><span class="line"><span class="meta">kafka.queue.enqueue.timeout.ms</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">kafka.batch.num.messages</span>=<span class="string">200</span></span><br><span class="line"><span class="meta">kafka.send.buffer.bytes</span>=<span class="string">102400</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><h4 id="Avro-中-Decimal-字段反序列化之后，全部变成了-pos-0-lim-0-cap-0"><a href="#Avro-中-Decimal-字段反序列化之后，全部变成了-pos-0-lim-0-cap-0" class="headerlink" title="Avro 中 Decimal 字段反序列化之后，全部变成了 [pos=0 lim=0 cap=0]"></a>Avro 中 Decimal 字段反序列化之后，全部变成了 [pos=0 lim=0 cap=0]</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 正常进行 double 转 bytebuffer，并从 bytebuffer 转为 double 都是可以的</span></span><br><span class="line"><span class="keyword">val</span> bb: <span class="type">ByteBuffer</span> = <span class="type">ByteBuffer</span>.allocate(<span class="number">8</span>).putDouble(<span class="string">"666.8"</span>.toDouble)</span><br><span class="line"><span class="keyword">val</span> dd: <span class="type">Double</span> = <span class="type">ByteBuffer</span>.wrap(bb.array()).getDouble()</span><br><span class="line"><span class="comment">// 但是，传入 avro 类中，作为 decimal 类型的字段值，然后进行序列化 和 反序列化，就会出现问题</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h5><ul>
<li>定义 <a href="https://avro.apache.org/docs/current/spec.html#Decimal">decimal</a> 类型字段</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"namespace"</span>: <span class="string">"com.yuzhouwan.bean"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"record"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"BeanA"</span>,</span><br><span class="line">  <span class="attr">"fields"</span>: [</span><br><span class="line">    {<span class="attr">"name"</span>: <span class="string">"id"</span>, <span class="attr">"type"</span>: <span class="string">"int"</span>},</span><br><span class="line">    {<span class="attr">"name"</span>: <span class="string">"price"</span>, <span class="attr">"type"</span>: {<span class="attr">"type"</span>: <span class="string">"bytes"</span>, <span class="attr">"logicalType"</span>: <span class="string">"decimal"</span>, <span class="attr">"precision"</span>: <span class="number">8</span>, <span class="attr">"scale"</span>: <span class="number">4</span>}}</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>配置 Maven <a href="https://yuzhouwan.com/posts/2254/#Avro-插件">自动解析</a> Avro 类</p>
</li>
<li><p>初始化 Avro 类</p>
</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.avro.{<span class="type">Conversions</span>, <span class="type">LogicalTypes</span>, <span class="type">Schema</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> decimal: java.math.<span class="type">BigDecimal</span> = java.math.<span class="type">BigDecimal</span>.valueOf(<span class="string">"666.8"</span>.toDouble)</span><br><span class="line"><span class="keyword">val</span> logicalType: <span class="type">LogicalTypes</span>.<span class="type">Decimal</span> = <span class="type">LogicalTypes</span>.decimal(<span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> schema: <span class="type">Schema</span> = <span class="keyword">new</span> <span class="type">Schema</span>.<span class="type">Parser</span>().parse(</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">    |{</span></span><br><span class="line"><span class="string">    |  "namespace": "com.yuzhouwan.bean",</span></span><br><span class="line"><span class="string">    |  "type": "record",</span></span><br><span class="line"><span class="string">    |  "name": "BeanA",</span></span><br><span class="line"><span class="string">    |  "fields": [</span></span><br><span class="line"><span class="string">    |    {"name": "id", "type": "int"},</span></span><br><span class="line"><span class="string">    |    {"name": "price", "type": {"type": "bytes", "logicalType": "decimal", "precision": 8, "scale": 4}}</span></span><br><span class="line"><span class="string">    |  ]</span></span><br><span class="line"><span class="string">    |}</span></span><br><span class="line"><span class="string">  """</span>.stripMargin)</span><br><span class="line"><span class="keyword">val</span> conversion: <span class="type">ByteBuffer</span> = decimalConversion.toBytes(decimal, schema, logicalType)</span><br><span class="line"><span class="keyword">val</span> trans: <span class="type">Transaction</span> = <span class="keyword">new</span> <span class="type">Transaction</span>(<span class="number">1</span>, conversion)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>反序列化 decimal 字段</li>
</ul>
<figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> precision = schema.getJsonProp(<span class="string">"precision"</span>)</span><br><span class="line"><span class="keyword">val</span> scale = schema.getJsonProp(<span class="string">"scale"</span>)</span><br><span class="line"><span class="keyword">val</span> logicalType = <span class="type">LogicalTypes</span>.decimal(precision.toString.toInt, scale.toString.toInt)</span><br><span class="line"><span class="keyword">val</span> d: java.math.<span class="type">BigDecimal</span> = decimalConversion.fromBytes(trans.getSale, schema, logicalType)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>　看到这里，是不是能感觉出来 decimal 使用起来还是很麻烦的，而且踩到的坑还远不止这一个。那我们不禁要想，为啥非要发明这么一个东西呢，直接用 float（单精度浮点数）、double（双精度浮点数）岂不是很省事？</p>
<p>　其实不然，因为一旦遇到 <a href="https://0.30000000000000004.com/">0.30000000000000004</a> 问题，这些依照 <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a> 标准构建的浮点数（<a href="https://yuzhouwan.com/posts/27328/">Java</a> / <a href="https://yuzhouwan.com/posts/18651/">Scala</a> / <a href="https://yuzhouwan.com/posts/43687/">Python</a>…），都将束手无策。我们可以在命令行运行一个简单的例子，进行验证。这里以 Python 为例，运行 <code>.1 + .2</code> 后会发现，得到的结果不是预期的 <code>0.3</code> 而是 <code>0.30000000000000004</code>。如果是第一次看到这个结果，想必一定会三观崩塌，开始怀疑是不是下载了一个假 Python。然而，一旦理解其中原理，也就不足为奇了。而想要摸清门道也很简单，只需通过<strong>基数连除</strong>和<strong>连乘法</strong>，先将浮点数转换为二进制表示，再对其做加法操作即可。转换后，<code>0.1 + 0.2</code> 就变成了 <code>0.00011001100110011001100110011001100110011001100110011001</code> + <code>0.00110011001100110011001100110011001100110011001100110011</code>，运算后可以得到 <code>0.01001100110011001100110011001100110011001100110011001100</code>，再将二进制结果转换为十进制的浮点数，就是我们看到的 <code>0.30000000000000004</code> 了。从本质上来说，还是因为二进制是连续的，十进制是非连续的。为什么这么说呢？举个例子，小数点后四位用二进制表示时，数值范围为 <code>0.0000</code> 到 <code>0.1111</code> 之间。而对应到十进制，却只能表示出 <code>0.0625</code>、<code>0.125</code>、<code>0.25</code> 和 <code>0.5</code> 这四个数值的组合结果。另外，有些十进制的小数，转换为二进制之后，还会变成了循环小数。但是，计算机里面浮点数只能存有限的位数，所以，同样也无法精确地表示</p>
<p>　这时候，我们再来看，如果用 <a href="https://docs.python.org/3/library/decimal.html">decimal</a> 则不会遇到这个问题：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Decimal(<span class="string">".1"</span>) + Decimal(<span class="string">".2"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">  Decimal(<span class="string">'0.3'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(d)</span><br><span class="line">  <span class="number">0.3</span></span><br></pre></td></tr></tbody></table></figure>
<p>　当然，除了上述精确计算的好处之外，decimal 还有便于控制精度、自动和输入保持精度一致，以及允许除以 0 得到 Infinity 等优点。如此看来，decimal 还真的不是一无是处呢 :D</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Context(prec=<span class="number">6</span>, Emax=<span class="number">999</span>, clamp=<span class="number">1</span>).create_decimal(<span class="string">'1.23e999'</span>)</span><br><span class="line">  Decimal(<span class="string">'1.23000E+999'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.00</span> + <span class="number">0.10</span></span><br><span class="line">  <span class="number">1.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">"1.00"</span>) + Decimal(<span class="string">"0.10"</span>)</span><br><span class="line">  Decimal(<span class="string">'1.10'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setcontext(ExtendedContext)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">1</span>) / Decimal(<span class="number">0</span>)</span><br><span class="line">  Decimal(<span class="string">'Infinity'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(-<span class="number">1</span>) / Decimal(<span class="number">0</span>)</span><br><span class="line">  Decimal(<span class="string">'-Infinity'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">1</span>) / Decimal(<span class="number">0</span>) + Decimal(-<span class="number">1</span>) / Decimal(<span class="number">0</span>)</span><br><span class="line">  Decimal(<span class="string">'NaN'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><h3 id="Kafka-阅读环境搭建"><a href="#Kafka-阅读环境搭建" class="headerlink" title="Kafka 阅读环境搭建"></a>Kafka 阅读环境搭建</h3><h4 id="安装-gradle"><a href="#安装-gradle" class="headerlink" title="安装 gradle"></a>安装 gradle</h4><p>　在 gradle <a href="https://gradle.org/releases/">下载页面</a>，下载 gradle-4.3.1-all.zip 文件，解压至 <code>D:\apps\gradle</code>，并添加环境变量 <code>PATH=D:\apps\gradle\gradle-4.3.1\bin</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">$ gradle -v</span><br><span class="line">  ------------------------------------------------------------</span><br><span class="line">  Gradle 4.3.1</span><br><span class="line">  ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">  Build time:   2017-11-08 08:59:45 UTC</span><br><span class="line">  Revision:     e4f4804807ef7c2829da51877861ff06e07e006d</span><br><span class="line"></span><br><span class="line">  Groovy:       2.4.12</span><br><span class="line">  Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015</span><br><span class="line">  JVM:          1.8.0_111 (Oracle Corporation 25.111-b14)</span><br><span class="line">  OS:           Windows 7 6.1 amd64</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">建议使用 gradlew 命令，可以避免手动安装</div>



<h4 id="gradle-代理设置"><a href="#gradle-代理设置" class="headerlink" title="gradle 代理设置"></a>gradle 代理设置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gradle xxx -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者修改 gradle.properties 配置文件</span></span><br><span class="line">$ vim gradle.properties</span><br><span class="line">  systemProp.http.proxyHost=192.168.1.101</span><br><span class="line">  systemProp.http.proxyPort=8080</span><br><span class="line">  systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</span><br><span class="line">  systemProp.https.proxyHost=192.168.1.101</span><br><span class="line">  systemProp.https.proxyPort=8080</span><br><span class="line">  systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost</span><br><span class="line">  <span class="comment">#systemProp.http.proxyUser=userid</span></span><br><span class="line">  <span class="comment">#systemProp.http.proxyPassword=password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【注意】如果在 Kafka 源码目录下修改的 gradle.properties 无法生效，可以直接拷贝到 $USER_HOME/.gradle 目录下</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line">$ ./gradlew</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 `-x test` 参数，可跳过单元测试</span></span><br><span class="line">$ ./gradlew -x <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随后，生成可以用 Intellij Idea 打开的工程</span></span><br><span class="line">$ ./gradlew idea</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果 gradle 的配置文件里面，没有设置 idea 插件，导致项目模块无法被识别。则需要删除 .idea 文件夹，并以 build.gradle 打开为项目，即可</div>



<h3 id="Kafka-Connect-2"><a href="#Kafka-Connect-2" class="headerlink" title="Kafka Connect"></a>Kafka Connect</h3><h4 id="阅读环境搭建"><a href="#阅读环境搭建" class="headerlink" title="阅读环境搭建"></a>阅读环境搭建</h4><p>　Kafka Connect 项目的 <strong>接口定义</strong> 和 <strong>组件模块化</strong> 做得相当到位，整个工程被拆成很多子项目。同时，搭建源码阅读环境的时候，会发现很多依赖在中央仓库中是找不到的，这时候需要下载源码进行本地编译安装。首先，下载 <a href="https://github.com/confluentinc/common"><strong>kafka-connect-common</strong></a> / <a href="https://github.com/confluentinc/kafka-connect-storage-common"><strong>kafka-connect-storage-common</strong></a> 两个父工程，以及相关的依赖子工程 <a href="https://github.com/confluentinc/rest-utils"><strong>rest-utils</strong></a> / <a href="https://github.com/confluentinc/schema-registry"><strong>schema-registry</strong></a> 的源码。通过 <code>git fetch --tags</code> 命令将 tags 全部下载下来之后，选定一个稳定版本 (这里以 v3.3.1 为例)，并创建新分支 <code>v3.3.1</code>，再在新分支下执行 <code>git reset --hard &lt;commit&gt;</code> 统一所有项目代码到 v3.3.1 版本 (这里还有一个依赖的子项目 <a href="https://github.com/julianhyde/aggdesigner"><strong>aggdesigner</strong></a> 也需要本地编译安装，对应版本为 <code>pentaho-aggdesigner-5.1.5-jhyde</code>)。另外，Kafka 也用了一个非常规的版本 <code>0.11.0.1-cp1</code>，这里只需要选择一个略高的版本 <code>0.11.0.1</code> 保证兼容性即可（当然也可以在 Kafka trunk 分支下执行 <code>gradlew installAll</code> 命令编译出对应版本），最后，依次执行 <code>mvn clean install</code> 命令完成打包编译</p>
<h4 id="主体架构"><a href="#主体架构" class="headerlink" title="主体架构"></a>主体架构</h4><h5 id="ConnectDistributed"><a href="#ConnectDistributed" class="headerlink" title="ConnectDistributed"></a>ConnectDistributed</h5><p>　Command line utility that runs Kafka Connect in distributed mode. In this mode, the process joints a group of other workers and work is distributed among them. This is useful for running Connect as a service, where connectors can be submitted to the cluster to be automatically executed in a scalable, distributed fashion. This also allows you to easily scale out horizontally, elastically adding or removing capacity simply by starting or stopping worker instances.</p>
<h5 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h5><p>　This class ties together all the components of a Kafka Connect process (herder, worker, storage, command interface), managing their lifecycle.</p>
<h5 id="Connector-1"><a href="#Connector-1" class="headerlink" title="Connector"></a>Connector</h5><p>　Connectors manage integration of Kafka Connect with another system, either as an input that ingests data into Kafka or an output that passes data to an external system. Implementations should not use this class directly; they should inherit from SourceConnector or SinkConnector.</p>
<p>　Connectors have two primary tasks. First, given some configuration, they are responsible for creating configurations for a set of <code>{@link Task}s</code> that split up the data processing. For example, a database Connector might create Tasks by dividing the set of tables evenly among tasks. Second, they are responsible for monitoring inputs for changes that require reconfiguration and notifying the Kafka Connect runtime via the ConnectorContext. Continuing the previous example, the connector might periodically check for new tables and notify Kafka Connect of additions and deletions. Kafka Connect will then request new configurations and update the running Tasks.</p>
<h6 id="SinkConnector"><a href="#SinkConnector" class="headerlink" title="SinkConnector"></a>SinkConnector</h6><p>　SourceConnectors implement the connector interface to pull data from another system and send it to Kafka.</p>
<h6 id="SourceConnector"><a href="#SourceConnector" class="headerlink" title="SourceConnector"></a>SourceConnector</h6><p>　SinkConnectors implement the Connector interface to send Kafka data to another system.</p>
<h5 id="Herder"><a href="#Herder" class="headerlink" title="Herder"></a>Herder</h5><p>　The herder interface tracks and manages workers and connectors. It is the main interface for external components to make changes to the state of the cluster. For example, in distributed mode, an implementation of this class knows how to accept a connector configuration, may need to route it to the current leader worker for the cluster so the config can be written to persistent storage, and then ensures the new connector is correctly instantiated on one of the workers.</p>
<p>　This class must implement all the actions that can be taken on the cluster (add/remove connectors, pause/resume tasks, get state of connectors and tasks, etc). The non-Java interfaces to the cluster (REST API and CLI) are very simple wrappers of the functionality provided by this interface.</p>
<p>　In standalone mode, this implementation of this class will be trivial because no coordination is needed. In that case, the implementation will mainly be delegating tasks directly to other components. For example, when creating a new connector in standalone mode, there is no need to persist the config and the connector and its tasks must run in the same process, so the standalone herder implementation can immediately instantiate and start the connector and its tasks.</p>
<h5 id="Worker-1"><a href="#Worker-1" class="headerlink" title="Worker"></a>Worker</h5><p>　Worker runs a (dynamic) set of tasks in a set of threads, doing the work of actually moving<br>data to/from Kafka.</p>
<p>　Since each task has a dedicated thread, this is mainly just a container for them.</p>
<h5 id="Task-1"><a href="#Task-1" class="headerlink" title="Task"></a>Task</h5><p>　Tasks contain the code that actually copies data to/from another system. They receive a configuration from their parent Connector, assigning them a fraction of a Kafka Connect job´s work. The Kafka Connect framework then pushes/pulls data from the Task. The Task must also be able to respond to reconfiguration requests.</p>
<p>　Task only contains the minimal shared functionality between<br><code>{@link org.apache.kafka.connect.source.SourceTask}</code> and<br><code>{@link org.apache.kafka.connect.sink.SinkTask}</code>.</p>
<h6 id="SourceTask"><a href="#SourceTask" class="headerlink" title="SourceTask"></a>SourceTask</h6><p>　SourceTask is a Task that pulls records from another system for storage in Kafka.</p>
<h6 id="SinkTask"><a href="#SinkTask" class="headerlink" title="SinkTask"></a>SinkTask</h6><p>　SinkTask is a Task that takes records loaded from Kafka and sends them to another system. Each task instance is assigned a set of partitions by the Connect framework and will handle all records received from those partitions. As records are fetched from Kafka, they will be passed to the sink task using the {@link #put(Collection)} API, which should either write them to the downstream system or batch them for later writing. Periodically, Connect will call {@link #flush(Map)} to ensure that batched records are actually pushed to the downstream system..</p>
<p>状态机</p>
<ul>
<li><p>Initialization</p>
<p>SinkTasks are first initialized using <code>{@link #initialize(SinkTaskContext)}</code> to prepare the task´s context and <code>{@link #start(Map)}</code> to accept configuration and start any services needed for processing.</p>
</li>
<li><p>Partition Assignment</p>
<p>After initialization, Connect will assign the task a set of partitions using <code>{@link #open(Collection)}</code>. These partitions are owned exclusively by this task until they have been closed with <code>{@link #close(Collection)}</code>.</p>
</li>
<li><p>Record Processing</p>
<p>Once partitions have been opened for writing, Connect will begin forwarding records from Kafka using the <code>{@link #put(Collection)}</code> API. Periodically, Connect will ask the task to flush records using <code>{@link #flush(Map)}</code> as described above.</p>
</li>
<li><p>Partition Rebalancing</p>
<p>Occasionally, Connect will need to change the assignment of this task. When this happens, the currently assigned partitions will be closed with <code>{@link #close(Collection)}</code> and the new assignment will be opened using <code>{@link #open(Collection)}</code>.</p>
</li>
<li><p>Shutdown</p>
<p>When the task needs to be shutdown, Connect will close active partitions (if there are any) and stop the task using <code>{@link #stop()}</code></p>
</li>
</ul>
<h5 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h5><h6 id="OffsetBackingStore"><a href="#OffsetBackingStore" class="headerlink" title="OffsetBackingStore"></a>OffsetBackingStore</h6><p>　OffsetBackingStore is an interface for storage backends that store key-value data. The backing store doesn´t need to handle serialization or deserialization. It only needs to support reading/writing bytes. Since it is expected these operations will require network operations, only bulk operations are supported.</p>
<p>　Since OffsetBackingStore is a shared resource that may be used by many OffsetStorage instances that are associated with individual tasks, the caller must be sure keys include information about the connector so that the shared namespace does not result in conflicting keys.</p>
<ul>
<li>KafkaOffsetBackingStore</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Implementation of OffsetBackingStore that uses a Kafka topic to store offset data.</span><br><span class="line"></span><br><span class="line">Internally, this implementation both produces to and consumes from a Kafka topic <span class="built_in">which</span> stores the offsets. It accepts producer and consumer overrides via its configuration but forces some settings to specific values to ensure correct behavior (e.g. acks, auto.offset.reset).</span><br></pre></td></tr></tbody></table></figure>
<h6 id="StatusBackingStore"><a href="#StatusBackingStore" class="headerlink" title="StatusBackingStore"></a>StatusBackingStore</h6><ul>
<li>KafkaStatusBackingStore</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">StatusBackingStore implementation <span class="built_in">which</span> uses a compacted topic <span class="keyword">for</span> storage of connector and task status information. When a state change is observed, the new state is written to the compacted topic. The new state will not be visible until it has been <span class="built_in">read</span> back from the topic.</span><br><span class="line"></span><br><span class="line">In spite of their names, the putSafe() methods cannot guarantee the safety of the write (since Kafka itself cannot provide such guarantees currently), but it can avoid specific unsafe conditions. In particular, we putSafe() allows writes <span class="keyword">in</span> the following conditions:</span><br><span class="line"></span><br><span class="line">　1) It is (probably) safe to overwrite the state <span class="keyword">if</span> there is no previous value.</span><br><span class="line">　2) It is (probably) safe to overwrite the state <span class="keyword">if</span> the previous value was <span class="built_in">set</span> by a worker with the same workerId.</span><br><span class="line">　3) It is (probably) safe to overwrite the previous state <span class="keyword">if</span> the current generation is higher than the previous .</span><br><span class="line"></span><br><span class="line">Basically all these conditions <span class="keyword">do</span> is reduce the window <span class="keyword">for</span> conflicts. They obviously cannot take into account in-flight requests.</span><br></pre></td></tr></tbody></table></figure>
<h6 id="ConfigBackingStore"><a href="#ConfigBackingStore" class="headerlink" title="ConfigBackingStore"></a>ConfigBackingStore</h6><ul>
<li>KafkaConfigBackingStore</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Provides persistent storage of Kafka Connect connector configurations <span class="keyword">in</span> a Kafka topic.</span><br><span class="line"></span><br><span class="line">This class manages both connector and task configurations. It tracks three types of configuration entries:</span><br><span class="line"></span><br><span class="line">　1. Connector config: map of string -&gt; string configurations passed to the Connector class, with support <span class="keyword">for</span>　expanding this format <span class="keyword">if</span> necessary. (Kafka key: connector-[connector-id]).　These configs are *not* ephemeral. They represent the <span class="built_in">source</span> of truth. If the entire Connect　cluster goes down, this is all that is really needed to recover.</span><br><span class="line"></span><br><span class="line">　2. Task configs: map of string -&gt; string configurations passed to the Task class, with support <span class="keyword">for</span> expanding this format <span class="keyword">if</span> necessary. (Kafka key: task-[connector-id]-[task-id]). These configs are ephemeral; they are stored here to</span><br><span class="line">　　a) disseminate them to all workers <span class="keyword">while</span> ensuring agreement and</span><br><span class="line">　　b) to allow faster cluster/worker recovery since the common <span class="keyword">case</span> of recovery (restoring a connector) will simply result <span class="keyword">in</span> the same configuration as before the failure.</span><br><span class="line"></span><br><span class="line">　3. Task commit <span class="string">"configs"</span>: records indicating that previous task config entries should be committed and all task configs <span class="keyword">for</span> a connector can be applied. (Kafka key: commit-[connector-id]. This config has two effects. First, it records the number of tasks the connector is currently running (and can therefore increase/decrease parallelism). Second, because each task config is stored separately but they need to be applied together to ensure each partition is assigned to a single task, this record also indicates that task configs <span class="keyword">for</span> the specified connector can be <span class="string">"applied"</span> or <span class="string">"committed"</span>.</span><br><span class="line"></span><br><span class="line">This configuration is expected to be stored <span class="keyword">in</span> a *single partition* and *compacted* topic. Using a single partition ensures we can enforce ordering on messages, allowing Kafka to be used as a write ahead <span class="built_in">log</span>. Compaction allows us to clean up outdated configurations over time. However, this combination has some important implications <span class="keyword">for</span> the implementation of this class and the configuration state that it may expose.</span><br><span class="line"></span><br><span class="line">Connector configurations are independent of all other configs, so they are handled easily. Writing a single record is already atomic, so these can be applied as soon as they are <span class="built_in">read</span>. One connectors config does not affect any others, and they <span class="keyword">do</span> not need to coordinate with the connector<span class="string">'s task configuration at all.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　The most obvious implication for task configs is the need for the commit messages. Because Kafka does not currently have multi-record transactions or support atomic batch record writes, task commit messages are required to ensure that readers do not end up using inconsistent configs. For example, consider if a connector wrote configs for its tasks, then was reconfigured and only managed to write updated configs for half its tasks. If task configs were applied immediately you could be using half the old configs and half the new configs. In that condition, some partitions may be double-assigned because the old config and new config may use completely different assignments. Therefore, when reading the log, we must buffer config updates for a connector'</span>s tasks and only apply atomically them once a commit message has been <span class="built_in">read</span>.</span><br><span class="line"></span><br><span class="line">However, there are also further challenges. This simple buffering approach would work fine as long as the entire <span class="built_in">log</span> was always available, but we would like to be able to <span class="built_in">enable</span> compaction so our configuration topic does not grow indefinitely. Compaction may <span class="built_in">break</span> a normal <span class="built_in">log</span> because old entries will suddenly go missing. A new worker reading from the beginning of the <span class="built_in">log</span> <span class="keyword">in</span> order to build up the full current configuration will see task commits, but some records required <span class="keyword">for</span> those commits will have been removed because the same keys have subsequently been rewritten. For example, <span class="keyword">if</span> you have a sequence of record keys <span class="string">"[connector-foo-config, task-foo-1-config, task-foo-2-config, commit-foo (2 tasks), task-foo-1-config, commit-foo (1 task)]"</span>, we can end up with a compacted <span class="built_in">log</span> containing <span class="string">"[connector-foo-config, task-foo-2-config, commit-foo (2 tasks), task-foo-1-config, commit-foo (1 task)]"</span>. When <span class="built_in">read</span> back, the first commit will see an invalid state because the first task-foo-1-config has been cleaned up.</span><br><span class="line"></span><br><span class="line">Compaction can further complicate things <span class="keyword">if</span> writing new task configs fails mid-write. Consider a similar scenario as the previous one, but <span class="keyword">in</span> this <span class="keyword">case</span> both the first and second update will write 2 task configs. However, the second write fails half of the way through: <span class="string">"[connector-foo-config, task-foo-1-config, task-foo-2-config, commit-foo (2 tasks), task-foo-1-config]"</span>. Now compaction occurs and we are left with <span class="string">"[connector-foo-config, task-foo-2-config, commit-foo (2 tasks), task-foo-1-config]"</span>. At the first commit, we donot have a complete <span class="built_in">set</span> of configs. And because of the failure, there is no second commit. We are left <span class="keyword">in</span> an inconsistent state with no obvious way to resolve the issue -- we can try to keep on reading, but the failed node may never recover and write the updated config. Meanwhile, other workers may have seen the entire <span class="built_in">log</span>; they will see the second task-foo-1-config waiting to be applied, but will otherwise think everything is ok -- they have a valid <span class="built_in">set</span> of task configs <span class="keyword">for</span> connector <span class="string">"foo"</span>.</span><br><span class="line"></span><br><span class="line">Because we can encounter these inconsistencies and addressing them requires support from the rest of the system (resolving the task configuration inconsistencies requires support from the connector instance to regenerate updated configs), this class exposes not only the current <span class="built_in">set</span> of configs, but also <span class="built_in">which</span> connectors have inconsistent data. This allows users of this class (i.e., Herder implementations) to take action to resolve any inconsistencies. These inconsistencies should be rare (as described above, due to compaction combined with leader failures <span class="keyword">in</span> the middle of updating task configurations).</span><br><span class="line"></span><br><span class="line">Note that the expectation is that this config storage system has only a single writer at a time. The <span class="built_in">caller</span> (Herder) must ensure this is the <span class="keyword">case</span>. In distributed mode this will require forwarding config change requests to the leader <span class="keyword">in</span> the cluster (i.e. the worker group coordinated by the Kafka broker).</span><br><span class="line"></span><br><span class="line">Since processing of the config <span class="built_in">log</span> occurs <span class="keyword">in</span> a background thread, callers must take care when using accessors. To simplify handling this correctly, this class only exposes a mechanism to snapshot the current state of the cluster. Updates may <span class="built_in">continue</span> to be applied (and callbacks invoked) <span class="keyword">in</span> the background. Callers must take care that they are using a consistent snapshot and only update when it is safe. In particular, <span class="keyword">if</span> task configs are updated <span class="built_in">which</span> require synchronization across workers to commit offsets and update the configuration, callbacks and updates during the rebalance must be deferred.</span><br></pre></td></tr></tbody></table></figure>
<h5 id="RestServer"><a href="#RestServer" class="headerlink" title="RestServer"></a>RestServer</h5><p>　Embedded server for the REST API that provides the control plane for Kafka Connect workers.</p>
<h5 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h5><h6 id="PluginDesc"><a href="#PluginDesc" class="headerlink" title="PluginDesc"></a>PluginDesc</h6><h6 id="DelegatingClassLoader"><a href="#DelegatingClassLoader" class="headerlink" title="DelegatingClassLoader"></a>DelegatingClassLoader</h6><h4 id="Confluent-开源版本"><a href="#Confluent-开源版本" class="headerlink" title="Confluent 开源版本"></a>Confluent 开源版本</h4><h5 id="模块架构图"><a href="#模块架构图" class="headerlink" title="模块架构图"></a>模块架构图</h5><p><img data-src="/picture/kafka/kafka_connect_architecture.png" alt="Kafka Connector Architecture"></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>


<h5 id="kafka-connect-common"><a href="#kafka-connect-common" class="headerlink" title="kafka-connect-common"></a>kafka-connect-common</h5><p>　该项目是整个 Kafka Connect 工程的<strong>根目录级</strong>父工程，其中主要包含了，common 接口定义、配置读取、Metrics /  JMX 指标设计、公共工具类，以及如何 build 编译、package 打包哪些文件、license 著作权标识 等工程类的部分</p>
<h5 id="kafka-connect-storage-common"><a href="#kafka-connect-storage-common" class="headerlink" title="kafka-connect-storage-common"></a>kafka-connect-storage-common</h5><p>　官方对该项目定位描述为简单的一句话：”Kafka Connect common packages for connectors transferring data between Kafka and distributed filesystems or cloud storage”。实际包含了很多实质性内容，Common 模块、Core 模块、Format 模块、Partitioner 模块、WAL 模块、Hive 模块 等</p>
<h6 id="Common-模块"><a href="#Common-模块" class="headerlink" title="Common 模块"></a>Common 模块</h6><p>　主要定义了 ComposableConfig / SchemaGenerator 接口，分别用于 配置组合 和 Schema 生成</p>
<h6 id="Core-模块"><a href="#Core-模块" class="headerlink" title="Core 模块"></a>Core 模块</h6><p>　主要定义了 Storage 接口，用于分布式存储。基于 Storage 接口的不同实现，一个 Storage 对象可以是分布式文件系统里面的一个文件或者一个文件夹，也可以是对象存储系统中的一个存储对象。类似地，路径就对应于分布式文件系统中的实际路径和对象存储库中的查找键</p>
<h6 id="Format-模块"><a href="#Format-模块" class="headerlink" title="Format 模块"></a>Format 模块</h6><p>　主要定义了 Format / SchemaFileReader / RecordWriter 三个接口，分别用于 存储类型格式化（e.g. Path in HDFS, String in S3）、从 Storage 中读取 Schema 和 如何将记录写入 Storage</p>
<h6 id="Partitioner-模块"><a href="#Partitioner-模块" class="headerlink" title="Partitioner 模块"></a>Partitioner 模块</h6><p>　该模块主要定义了 Partitioner 接口，用来对接收到的消息进行分区，生成对应的目录和文件名。支持 Default / Hourly / Daily / TimeBase / Field 和自定义的 Partitioner，另外 TimeBase 的 Partitioner 还同时支持 ingestion time / event time 两种时间类型</p>
<h6 id="WAL-模块"><a href="#WAL-模块" class="headerlink" title="WAL 模块"></a>WAL 模块</h6><p>　定义了 WAL 接口，用于规范 Kafka offset 信息如何编码到 WAL</p>
<h6 id="Hive-模块"><a href="#Hive-模块" class="headerlink" title="Hive 模块"></a>Hive 模块</h6><p>　主要定义了 HiveUtil 抽象类、HiveFactory 接口（HiveUtil 的工厂类） 和 Schema / Config / Exception / MetaStore 等相关实现类</p>
<h5 id="kafka-connect-hdfs"><a href="#kafka-connect-hdfs" class="headerlink" title="kafka-connect-hdfs"></a>kafka-connect-hdfs</h5><p>　首先可以看出 State 枚举类中给出了 <code>RECOVERY_STARTED</code>,  <code>RECOVERY_PARTITION_PAUSED</code>,  <code>WAL_APPLIED</code>,  <code>WAL_TRUNCATED</code>,  <code>OFFSET_RESET</code>,  <code>WRITE_STARTED</code>,  <code>WRITE_PARTITION_PAUSED</code>,  <code>SHOULD_ROTATE</code>,  <code>TEMP_FILE_CLOSED,  WAL_APPENDED</code>,  <code>FILE_COMMITTED</code> 一共 11 种任务运行状态，写入的逻辑全都在 <code>TopicPartitionWriter</code> 的 <code>write</code> 方法里面了，而异常恢复的逻辑，则在 <code>recover</code> 方法中实现</p>
<p><img data-src="/picture/kafka/kafka_connect_process_flow_kafka_2_hdfs.png" alt="Kafka Connector Process Flow about Kafka to HDFS"></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>





<h4 id="落脚点"><a href="#落脚点" class="headerlink" title="落脚点"></a>落脚点</h4><h5 id="Kafka-Connect-组件的-ClassLoader-隔离"><a href="#Kafka-Connect-组件的-ClassLoader-隔离" class="headerlink" title="Kafka Connect 组件的 ClassLoader 隔离"></a>Kafka Connect 组件的 ClassLoader 隔离</h5><p>　Worker <a href="https://github.com/apache/kafka/blob/trunk/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java#L181">启动</a>一个 Task</p>
<h5 id="分布式情况下，如何做到在一个节点上，更新了-ClassLoader，广播到整个集群"><a href="#分布式情况下，如何做到在一个节点上，更新了-ClassLoader，广播到整个集群" class="headerlink" title="分布式情况下，如何做到在一个节点上，更新了 ClassLoader，广播到整个集群"></a>分布式情况下，如何做到在一个节点上，更新了 ClassLoader，广播到整个集群</h5><p>　不需要广播，滚动升级，灰度发布，即可</p>
<h2 id="社区跟进"><a href="#社区跟进" class="headerlink" title="社区跟进"></a>社区跟进</h2><ul>
<li><a href="https://github.com/apache/kafka/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Aasdf2014">Kafka Pull Request</a></li>
<li><a href="https://github.com/Landoop/kafka-connect-ui/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Aasdf2014">Kafka-Connect-UI Pull Request</a></li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li><a href="https://hub.docker.com/r/confluentinc/cp-kafka-connect/">Kafka Connect 镜像</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html">国内镜像源配置</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://www.amazon.cn/Apache-Kafka-Garg-Nishant/dp/B00FYS7OUW">Apache Kafka</a></li>
<li><a href="https://www.amazon.cn/Apache-Kafka-Cookbook-Minni-Saurabh/dp/B015EHCTES">Apache Kafka Cookbook</a></li>
<li><a href="https://www.amazon.cn/Kafka-The-Definitive-Guide-Narkhede-Neha/dp/1491936169">Kafka: The Definitive Guide</a></li>
<li><a href="https://www.amazon.cn/dp/B077698DBP">Kafka 技术内幕：图文详解 Kafka 源码设计与实现</a></li>
<li><a href="https://www.amazon.cn/dp/B072HQC5KB">Apache Kafka 源码剖析</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Apache Storm</tag>
        <tag>Apache Kafka</tag>
        <tag>Gradle</tag>
        <tag>HDFS</tag>
        <tag>Apache Druid</tag>
        <tag>ElasticSearch</tag>
        <tag>Python</tag>
        <tag>Message Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Druid：一款高效的 OLAP 引擎</title>
    <url>/posts/5845/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>　<strong>Apache Druid</strong>™ 是目前非常流行的高性能的，分布式列存储的 <strong>OLAP</strong> 引擎（准确来说是 <strong>MOLAP</strong>）。它是一款可以快速（实时）访问大量的、很少变化的数据的系统。并被设计为，在面对代码部署、机器故障和生产系统的其他可能性问题时，依旧能 100％ 地正常提供服务</p>
<p><img data-src="/picture/druid/druid_pumpkin_compressed.png" alt="Apache Druid Pumpkin"></p>
<center>（图片来源：Vadim Ogievetsky 在万圣节的个人作品，已获得授权）</center>



<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="分析事件流"><a href="#分析事件流" class="headerlink" title="分析事件流"></a>分析事件流</h4><p>　Druid 支持对 event-driven 数据进行快速地高并发查询。还可以实时地摄入流式数据，并提供亚秒级查询能力，以支持强大的 UI 交互</p>
<h4 id="创新的架构设计"><a href="#创新的架构设计" class="headerlink" title="创新的架构设计"></a>创新的架构设计</h4><p>　Druid 是一种新型数据库，它结合了 OLAP 分析数据库、时间序列数据库 和 全文检索 的思想，以支持流式体系架构下的大部分应用场景</p>
<h4 id="构建事件驱动的数据栈"><a href="#构建事件驱动的数据栈" class="headerlink" title="构建事件驱动的数据栈"></a>构建事件驱动的数据栈</h4><p>　Druid 天然集成了消息队列（Kafka、AWS Kinesis 等）和数据湖（HDFS、AWS S3 等），使得其非常适用于流式总线和流处理器的查询层</p>
<h4 id="解锁新的工作流"><a href="#解锁新的工作流" class="headerlink" title="解锁新的工作流"></a>解锁新的工作流</h4><p>　Druid 旨在对实时数据和历史数据进行快速地即时分析。使用可快速更替的查询，进行趋势解释，数据探索，以响应各种分析诉求</p>
<h4 id="多环境部署"><a href="#多环境部署" class="headerlink" title="多环境部署"></a>多环境部署</h4><p>　Druid 可以部署在任何的 <code>*NIX</code> 商用硬件上，无论是在云端还是内部部署。Druid 是 cloud-native 的，这意味着集群扩容和缩容，就像添加和删除进程一样简单</p>
<h4 id="多数据源摄入"><a href="#多数据源摄入" class="headerlink" title="多数据源摄入"></a>多数据源摄入</h4><p>　Druid 支持将多种外部数据系统作为数据源，进行数据摄入，包括 <a href="https://yuzhouwan.com/tags/Apache-Hadoop/">Hadoop</a>、<a href="https://yuzhouwan.com/posts/4735/">Spark</a>、<a href="https://yuzhouwan.com/tags/Apache-Storm/">Storm</a> 和 <a href="https://yuzhouwan.com/posts/26002/">Kafka</a> 等</p>
<h4 id="多版本控制"><a href="#多版本控制" class="headerlink" title="多版本控制"></a>多版本控制</h4><p>　多版本控制（<strong>MVCC</strong>，<strong>M</strong>ulti-<strong>V</strong>ersion <strong>C</strong>oncurrent <strong>C</strong>ontrol），主要是为了解决多用户操作同一条记录时的并发问题。MVCC 设计思路是，在并发访问数据库时，不使用粗暴的行锁，而是在事务型操作更新数据时，生成一个新版本的数据。如此，可以保证读写分离，避免了读写操作互相阻塞，以提高并发性能。另外，约束任意时刻只有最新版本的记录是有效的，即也保证了数据的一致性</p>
<p>　而 Druid 中是使用数据更新时间来区分版本，历史节点只加载最新版本的数据。同时，<strong>实时数据索引</strong>与<strong>离线数据批量覆盖</strong>同时进行的 Lambda 架构设计，既满足了实时响应的需求，又确保了数据的准确性</p>
<h4 id="易于运维"><a href="#易于运维" class="headerlink" title="易于运维"></a>易于运维</h4><p>　Druid 集群可以做到 Self-healing 和 Self-balancing。如果 Druid 服务器发生故障，系统将会自动绕过损坏的路由，直到这些机器恢复或被替换掉。在扩缩容集群的时候，只需要增加或下线服务器，集群本身会在后台自动 re-balance。Druid 在设计上保证了可以全天候工作，不会因为任何原因而停机，包括配置更改和集群升级</p>
<span id="more"></span>
<h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><h4 id="Router-进程"><a href="#Router-进程" class="headerlink" title="Router 进程"></a>Router 进程</h4><p>　Router 进程可以在 Brokers、Overlords 和 Coordinators 进程之上，提供一层统一的 API 网关。Router 进程本身是可选的，不过如果集群的数据规模已经达到了 TB 级别，还是需要考虑启用的（<code>druid.router.managementProxy.enabled=true</code>）。因为一旦集群规模达到一定的数量级，那么发生故障的概率就会变得不容忽视，而 Router 支持将请求只发送给健康的节点，避免请求失败。同时，查询的响应时间和资源消耗，也会随着数据量的增长而变高，而 Router 支持设置查询的优先级和负载均衡策略，避免了大查询造成的队列堆积或查询热点等问题。另外，Router 节点还可用于将查询路由到不同的 Broker 节点，便于实现冷热分层，以更好地应对超大规模数据集。默认情况下，Router 会根据设置的 <a href="https://druid.apache.org/docs/latest/operations/rule-configuration.html">Rule</a> 规则，来路由查询请求。例如，如果将最近 1 个月的数据加载到热集群中，则最近一个月内的查询可以路由到一组专用 Broker，超出该时间范围的查询将被路由到另一组 Broker，如此便实现了查询的冷热隔离</p>
<h4 id="Broker-进程"><a href="#Broker-进程" class="headerlink" title="Broker 进程"></a>Broker 进程</h4><p>　Broker 进程从客户端接收查询请求，并将这些查询转发给 Historical 和 MiddleManager 进程（通过存储在 <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a> 上的元数据，可以准确地知道 Segment 具体在哪个节点上）。Broker 在接收到这些查询的结果之后，将会合并查询结果并将它们返回给客户端。用户通常会查询 Broker，而不是直接查询 Historical 或 MiddleManager 进程</p>
<h4 id="Overlord-进程"><a href="#Overlord-进程" class="headerlink" title="Overlord 进程"></a>Overlord 进程</h4><p>　Overlord 进程监视 MiddleManager 进程，是数据摄入的控制器。负责将数据摄入的任务分配给 MiddleManagers 并协调 Segment 的发布，包括接受、拆解、分配 Task，以及创建 Task 相关的锁，并返回 Task 的状态。大致流程如下图所示：</p>
<p><img data-src="/picture/druid/druid_overlord_and_middle_managers_with_zk.png" alt="Overlord and MiddleManagers with ZooKeeper in Apache Druid"></p>
<center>（图片来源：<a href="https://druid.apache.org/docs/latest/design/" target="_blank">Apache Druid</a>™ 官网）</center>

<div class="note info">在很久远的 0.5.29 版本中，Overlord 被称之为 IndexCoordinator</div>

<h4 id="MiddleManager-进程"><a href="#MiddleManager-进程" class="headerlink" title="MiddleManager 进程"></a>MiddleManager 进程</h4><p>　MiddleManager 进程负责将新数据摄入到集群中，并发布新的 Segment</p>
<p>　MiddleManager 进程是执行提交的任务的工作节点。Middle Managers 将任务转发给在不同 JVM 中运行的 <a href="https://druid.apache.org/docs/latest/design/peons.html">Peon</a> 进程（如此，可以做到资源和日志的隔离）。MiddleManager、Peon、Task 的对应关系是，每个 Peon 进程一次只能运行一个 Task 任务，但一个 MiddleManager 却可以管理多个 Peon 进程</p>
<h4 id="Coordinator-进程"><a href="#Coordinator-进程" class="headerlink" title="Coordinator 进程"></a>Coordinator 进程</h4><p>　Coordinator 进程监视 Historical 节点。Coordinator 负责将 Segment 分配给指定的 Historical 节点，并确保 Segment 在 Historical 节点之间保持负载均衡。另外，Coordinator 还需要加载新的 Segment，以及基于配置的 <a href="https://druid.apache.org/docs/latest/operations/rule-configuration.html">Rule</a> 来丢弃过时的 Segment</p>
<p>　Coordinator 是周期性运行的（由 <code>druid.coordinator.period</code> 配置指定，默认执行间隔为 <code>60s</code>）。因为需要评估集群的当前状态，才能决定应用哪种策略，所以，Coordinator 需要维护和 <a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a> 的连接，以获取集群的信息。而关于 Segment 和 Rule 的信息保存在了元数据库中，所以也需要维护与元数据库的连接</p>
<h4 id="Historical-进程"><a href="#Historical-进程" class="headerlink" title="Historical 进程"></a>Historical 进程</h4><p>　Historical 进程是处理存储和查询“历史”数据（包括系统中所有已经存在足够长时间、可以被提交的流式数据）的主要工具（可以理解为，是整个 Druid 集群的支柱）。Historical 进程从 Deep Storage 中下载 Segment，并响应有关这些 Segment 的查询请求（这些请求来自 Broker 进程）。另外，Historical 进程不处理写入请求</p>
<p>　Historical 进程采用了 <code>无共享架构设计</code>（Shared-nothing Architecture），它知道如何去加载和删除 Segment，以及如何基于 Segment 来响应查询。因此，即便底层的 Deep Storage 无法正常工作，Historical 进程还是能针对其已同步的 Segments，正常提供查询服务</p>
<h3 id="核心插件"><a href="#核心插件" class="headerlink" title="核心插件"></a>核心插件</h3><h4 id="Kafka-Indexing-Service"><a href="#Kafka-Indexing-Service" class="headerlink" title="Kafka Indexing Service"></a>Kafka Indexing Service</h4><p>　Kafka Indexing Service 可以在 Overlord 上配置 Supervisor（这里的监管者具体是指 <code>KafkaSupervisor</code>，负责监控单个 DataSource 下的 KafkaIndexTask（Apache Druid 中的 <a href="https://druid.apache.org/docs/latest/querying/datasource.html">DataSource</a> 可以理解为关系型数据库中的表）。在其构造的时候，可以接受 <code>KafkaSupervisorSpec</code> 以知晓 Kafka 的 Topic 相关的配置信息，以及摄入的规则，用于生成 <code>KafkaIndexTask</code> 索引任务），并负责管理 Kafka 索引任务的创建和生命周期。这些 KIS 任务使用 Kafka 自身的分区和偏移机制来读取事件，因此能够提供 exactly-once 摄取的保证（旧版本下，Tranquility 采用的是 push 的方式，则完全无法实现不丢不重的特性）。KIS 任务还能够从 Kafka 读取非近期事件，并且不受其他摄取机制强加的窗口期限的影响。另外，Supervisor 会监控索引任务的状态，以便管理故障，并保证了可伸缩性和易复制的特性。更多差异点，详见下面的对比表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Before</th>
<th style="text-align:center">After</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插件</td>
<td style="text-align:center">Druid Kafka Eight</td>
<td style="text-align:center">Kafka Indexing Service</td>
</tr>
<tr>
<td style="text-align:center">处理流式数据的模式</td>
<td style="text-align:center">push</td>
<td style="text-align:center">pull</td>
</tr>
<tr>
<td style="text-align:center">Exactly-Once</td>
<td style="text-align:center">push 模式 + 高级 Kafka API，导致无法实现</td>
<td style="text-align:center">pull 模式 + 低级 Kafka API，已实现</td>
</tr>
<tr>
<td style="text-align:center">乱序数据</td>
<td style="text-align:center">超过设定的时间窗口的数据会被丢弃，需通过离线任务补数据</td>
<td style="text-align:center">不受时间窗口限制，能够读取非近期的数据</td>
</tr>
<tr>
<td style="text-align:center">高可用</td>
<td style="text-align:center"><a href="https://druid.apache.org/docs/latest/ingestion/standalone-realtime.html">Realtime</a> 单进程（一旦发生宕机，节点上未提交到 DeepStorage 的数据将全部丢失）</td>
<td style="text-align:center">Historical 多进程</td>
</tr>
<tr>
<td style="text-align:center">易用性</td>
<td style="text-align:center">每个节点都需要唯一的配置，且 Schema 变更后需滚动重启</td>
<td style="text-align:center">统一配置，且无需重启</td>
</tr>
<tr>
<td style="text-align:center">可见性</td>
<td style="text-align:center">实时</td>
<td style="text-align:center">非实时</td>
</tr>
</tbody>
</table>
</div>
<div class="note info">在 0.16.0 版本中，Apache Druid 彻底删除了 Realtime Node 相关的插件，包括了 druid-kafka-eight、druid-kafka-eight-simpleConsumer、druid-rabbitmq 和 druid-rocketmq</div>
<div class="note warning">虽然新引入的 KIS 有诸多好处，但是世上并不存在“银弹”。因为 KIS 采用了 pull 的方式摄入数据，必然会存在拉取的频率一说。该频率由 offsetFetchPeriod 参数控制，默认 30s 会拉取一次，而最快只能 5s 拉取一次。那为什么不能设置更小的值呢？因为如果过于频繁地向 Kafka 发起请求，可能影响到 Kafka 的稳定性</div>



<h3 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h3><h4 id="Metadata-Storage"><a href="#Metadata-Storage" class="headerlink" title="Metadata Storage"></a>Metadata Storage</h4><p>　存储元数据信息，包括 DataSource、Segment 和 Task，以及一些配置信息等。默认使用 Derby，生产环境通常会选择 MySQL 或 PostgreSQL 作为存储媒介</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">表名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">druid_datasource</td>
<td style="text-align:center">存储 DataSources，以便 Kafka Index Service 查找</td>
</tr>
<tr>
<td style="text-align:center">druid_pendingsegments</td>
<td style="text-align:center">存储 pending 的 Segments</td>
</tr>
<tr>
<td style="text-align:center">druid_segments</td>
<td style="text-align:center">存储每个 Segment 的 metadata 信息<br>（表字段：segment_id, datasource, start, end, size, version, partition_num, num_replicas, num_rows, is_published, is_available, is_overshadowed, shardSpec, dimensions, metrics）</td>
</tr>
<tr>
<td style="text-align:center">druid_rules</td>
<td style="text-align:center">关于 Segment 的 load / drop 规则</td>
</tr>
<tr>
<td style="text-align:center">druid_config</td>
<td style="text-align:center">存放运行时配置信息</td>
</tr>
<tr>
<td style="text-align:center">druid_tasks</td>
<td style="text-align:center">为 Indexing Service 保存 Task 信息</td>
</tr>
<tr>
<td style="text-align:center">druid_tasklogs</td>
<td style="text-align:center">为 Indexing Service 保存 Task 日志</td>
</tr>
<tr>
<td style="text-align:center">druid_tasklocks</td>
<td style="text-align:center">为 Indexing Service 保存 Task 锁</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">上面三张表，都是 Overlord 用来存放索引 Task 的数据，防止 Overlord 挂掉，而导致 Task 丢失</td>
</tr>
<tr>
<td style="text-align:center">druid_supervisors</td>
<td style="text-align:center">为 Indexing Service 保存  Supervisor 信息</td>
</tr>
<tr>
<td style="text-align:center">druid_audit</td>
<td style="text-align:center">记录配置、Coordinator 规则的变化</td>
</tr>
</tbody>
</table>
</div>
<div class="note info">在 0.16.0 版本中，Apache Druid 从 druid_segments 表中删除了无用的 is_realtime 字段</div>
<div class="note info">在 0.19.0 版本中，Apache Druid 为了解决反序列化 payload 带来的性能问题，将 payload 字段替换为 dimensions、metrics 和 shardSpec</div>

<h4 id="Deep-Storage"><a href="#Deep-Storage" class="headerlink" title="Deep Storage"></a>Deep Storage</h4><p>　Deep Storage 作为每个 Druid Server 都可以访问的共享文件存储。通常是像 <a href="https://github.com/apache/druid/blob/master/docs/development/extensions-core/hdfs.md">HDFS</a>、<a href="https://github.com/apache/druid/blob/master/docs/development/extensions-contrib/aliyun-oss-extensions.md">AliyunOSS</a> 或 <a href="https://github.com/apache/druid/blob/master/docs/development/extensions-core/s3.md">S3</a> 这样的分布式对象存储，或者是网络文件系统（NFS）。Druid 使用它来存储已被摄入系统的任何数据</p>
<p>　Druid 仅将 Deep Storage 用作数据的备份，并将其作为在 Druid 进程之间在后台传输数据的一种方式。当接受到查询请求，Historical 进程不会从 Deep Storage 读取数据，而是在响应任何查询之前，读取从本地磁盘 pre-fetched 的 Segments。这意味着 Druid 在查询期间永远不需要访问 Deep Storage，从而极大地降低了查询延迟。这也意味着，必须保证 Deep Storage 和 Historical 进程所在节点，能拥有足够的磁盘空间</p>
<h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h4><p>　用于管理集群的当前状态，并涵盖了以下几个主要特性：</p>
<ul>
<li>Coordinator 节点的 Leader 选举</li>
<li>Historical 节点发布 Segment 的协议</li>
<li>Coordinator 和 Historical 之间 load / drop Segment 的协议</li>
<li>Overlord 节点的 Leader 选举</li>
<li>Overlord 和 MiddleManager 之间的 Task 管理</li>
</ul>
<div class="note info">选举通过 Apache Curator 框架中的 LeaderLatch 来完成，具体的实现细节详见 CuratorDruidLeaderSelector</div>



<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img data-src="/picture/druid/druid_data_structure.png" alt="Apache Druid Data Structure"></p>
<center>（使用 Keynote™ 绘制而成）</center>

<h4 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h4><p>　时间序列（Timestamp），本身 Druid 是时间序列数据库，Druid 中所有查询以及索引过程都和时间维度有关。Druid 底层使用绝对毫秒数保存时间戳，默认使用 ISO-8601 格式展示时间：<code>yyyy-MM-ddThh:mm:sss.SSSZ</code></p>
<h4 id="维度列"><a href="#维度列" class="headerlink" title="维度列"></a>维度列</h4><p>　维度列（Dimensions），Druid 的维度概念和广义的 OLAP 定义一致，一条记录中的字符、数值、多值等类型的数据均可看作是维度列。维度列可用于过滤筛选（filter）、分组（group）数据</p>
<h4 id="度量列"><a href="#度量列" class="headerlink" title="度量列"></a>度量列</h4><p>　度量列（Metrics），Druid 的度量概念也与广义的 OLAP 定义一致，一条记录中的数值（Numeric）类型数据可看作是度量列，度量列被用于聚合（aggregation）和计算（computation）操作</p>
<div class="note success">从这里可以看出来，Apache Druid 是天然支持多值数据模型的</div>




<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/druid/0.20.1/apache-druid-0.20.1-bin.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tar zxvf apache-druid-0.20.1-bin.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> apache-druid-0.20.1</span><br><span class="line">$ bin/start-micro-quickstart</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">通过 examples/conf/druid/single-server/micro-quickstart 下的配置项，可以计算得出 1C2G 的机器规格，便可以启动一个完整的 Apache Druid 服务</div>

<h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p>　浏览器中打开 <code>localhost:8888</code> 地址，控制台的界面如下图所示：</p>
<p><img data-src="/picture/druid/druid_console.png" alt="Apache Druid Web Console"></p>
<center>（对 <a href="https://druid.apache.org/docs/latest/operations/druid-console.html" target="_blank">Web Console</a> 可视化页面的截图）</center>



<h3 id="Docker-容器版"><a href="#Docker-容器版" class="headerlink" title="Docker 容器版"></a><a href="https://github.com/apache/druid/tree/master/distribution/docker">Docker 容器版</a></h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索 Docker Hub</span></span><br><span class="line">$ docker search druid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新版本的镜像</span></span><br><span class="line">$ docker pull apache/druid:0.20.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查镜像是否下载成功</span></span><br><span class="line">$ docker image list</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置-Docker-文件共享"><a href="#配置-Docker-文件共享" class="headerlink" title="配置 Docker 文件共享"></a>配置 Docker 文件共享</h4><p>　打开配置面板，进入 <code>File Sharing</code> 配置页面，增加 <code>${the path of your source code}/distribution/docker/storage</code> 路径，随后点击 <code>Apply &amp; Restart</code> 按钮，应用并重启</p>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/apache/druid.git</span><br><span class="line">$ <span class="built_in">cd</span> druid</span><br><span class="line">$ docker-compose -f distribution/docker/docker-compose.yml up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同理，也可以使用 start/stop 命令启停容器</span></span><br><span class="line">$ docker-compose -f distribution/docker/docker-compose.yml stop</span><br><span class="line">$ docker-compose -f distribution/docker/docker-compose.yml start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用 down 命令移除容器</span></span><br><span class="line">$ docker-compose -f distribution/docker/docker-compose.yml down</span><br></pre></td></tr></tbody></table></figure>
<!-- docker run --rm -i -p 8888:8888 apache/druid:0.20.1 -->
<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><h5 id="Historical-容器"><a href="#Historical-容器" class="headerlink" title="Historical 容器"></a>Historical 容器</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it historical sh</span><br><span class="line">$ ls /opt/data/</span><br><span class="line">  indexing-logs  segments</span><br><span class="line">$ ls /opt/data/segments/</span><br><span class="line">  intermediate_pushes  wikipedia</span><br><span class="line">$ ls /opt/data/segments/wikipedia/</span><br><span class="line">  2016-06-27T00:00:00.000Z_2016-06-28T00:00:00.000Z</span><br><span class="line">$ ls /opt/data/segments/wikipedia/2016-06-27T00\:00\:00.000Z_2016-06-28T00\:00\:00.000Z/</span><br><span class="line">  2020-06-04T07:11:42.714Z</span><br><span class="line">$ ls /opt/data/segments/wikipedia/2016-06-27T00\:00\:00.000Z_2016-06-28T00\:00\:00.000Z/2020-06-04T07\:11\:42.714Z/0/</span><br><span class="line">  index.zip</span><br><span class="line">$ ls -lh</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">total 8M</span><br><span class="line">-rw-r--r--    1 druid    druid       5.9M Jun  4 07:49 00000.smoosh</span><br><span class="line">-rw-r--r--    1 druid    druid         29 Jun  4 07:49 factory.json</span><br><span class="line">-rw-r--r--    1 druid    druid       1.7M Jun  4 07:14 index.zip</span><br><span class="line">-rw-r--r--    1 druid    druid        707 Jun  4 07:49 meta.smoosh</span><br><span class="line">-rw-r--r--    1 druid    druid          4 Jun  4 07:49 version.bin</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat factory.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"type"</span>:<span class="string">"mMapSegmentFactory"</span>}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ xxd version.bin</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">00000000: 0000 0009                                ....</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat meta.smoosh</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">v1,<span class="number">2147483647</span>,<span class="number">1</span></span><br><span class="line">__time,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1106</span></span><br><span class="line">channel,<span class="number">0</span>,<span class="number">145739</span>,<span class="number">153122</span></span><br><span class="line">cityName,<span class="number">0</span>,<span class="number">153122</span>,<span class="number">195592</span></span><br><span class="line">comment,<span class="number">0</span>,<span class="number">195592</span>,<span class="number">1598156</span></span><br><span class="line">count,<span class="number">0</span>,<span class="number">1106</span>,<span class="number">2063</span></span><br><span class="line">countryIsoCode,<span class="number">0</span>,<span class="number">1598156</span>,<span class="number">1614170</span></span><br><span class="line">countryName,<span class="number">0</span>,<span class="number">1614170</span>,<span class="number">1630859</span></span><br><span class="line">diffUrl,<span class="number">0</span>,<span class="number">1630859</span>,<span class="number">4224103</span></span><br><span class="line">flags,<span class="number">0</span>,<span class="number">4224103</span>,<span class="number">4252873</span></span><br><span class="line">index<span class="selector-class">.drd</span>,<span class="number">0</span>,<span class="number">6162513</span>,<span class="number">6163275</span></span><br><span class="line">isAnonymous,<span class="number">0</span>,<span class="number">4252873</span>,<span class="number">4262876</span></span><br><span class="line">isMinor,<span class="number">0</span>,<span class="number">4262876</span>,<span class="number">4282592</span></span><br><span class="line">isNew,<span class="number">0</span>,<span class="number">4282592</span>,<span class="number">4290896</span></span><br><span class="line">isRobot,<span class="number">0</span>,<span class="number">4290896</span>,<span class="number">4298796</span></span><br><span class="line">isUnpatrolled,<span class="number">0</span>,<span class="number">4298796</span>,<span class="number">4307345</span></span><br><span class="line">metadata<span class="selector-class">.drd</span>,<span class="number">0</span>,<span class="number">6163275</span>,<span class="number">6163925</span></span><br><span class="line">namespace,<span class="number">0</span>,<span class="number">4307345</span>,<span class="number">4342089</span></span><br><span class="line">page,<span class="number">0</span>,<span class="number">4342089</span>,<span class="number">5710071</span></span><br><span class="line">regionIsoCode,<span class="number">0</span>,<span class="number">5710071</span>,<span class="number">5730339</span></span><br><span class="line">regionName,<span class="number">0</span>,<span class="number">5730339</span>,<span class="number">5759351</span></span><br><span class="line">sum_added,<span class="number">0</span>,<span class="number">2063</span>,<span class="number">37356</span></span><br><span class="line">sum_commentLength,<span class="number">0</span>,<span class="number">37356</span>,<span class="number">66244</span></span><br><span class="line">sum_deleted,<span class="number">0</span>,<span class="number">66244</span>,<span class="number">81170</span></span><br><span class="line">sum_delta,<span class="number">0</span>,<span class="number">81170</span>,<span class="number">126275</span></span><br><span class="line">sum_deltaBucket,<span class="number">0</span>,<span class="number">126275</span>,<span class="number">145739</span></span><br><span class="line">user,<span class="number">0</span>,<span class="number">5759351</span>,<span class="number">6162513</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info">其中，index.drd 包含该 Segment 覆盖的时间范围、指定的 Bitmap 种类（concise / roaring），以及包含的列和维度；而 metadata.drd 包含是否 Rollup、哪些聚合函数、查询的粒度，时间戳字段信息，以及可用于存储任意 Key-Value 数据的 Map 结构（例如 Kafka Firehose 用来存储 offset 信息）。更多细节，详见 org.apache.druid.segment.IndexIO.V9IndexLoader#load</div>



<h5 id="PostgreSQL-容器"><a href="#PostgreSQL-容器" class="headerlink" title="PostgreSQL 容器"></a>PostgreSQL 容器</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it postgres bash</span><br><span class="line">$ psql --version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">psql (PostgreSQL) 11.7</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ psql -U druid -d druid</span><br><span class="line">$ \l</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">                             List of databases</span><br><span class="line">   Name    | Owner | Encoding |  Collate   |   Ctype    | Access privileges</span><br><span class="line">-----------+-------+----------+------------+------------+-------------------</span><br><span class="line"> druid     | druid | UTF8     | en_US.utf8 | en_US.utf8 |</span><br><span class="line"> postgres  | druid | UTF8     | en_US.utf8 | en_US.utf8 |</span><br><span class="line"> template0 | druid | UTF8     | en_US.utf8 | en_US.utf8 | =c/druid         +</span><br><span class="line">           |       |          |            |            | druid=CTc/druid</span><br><span class="line"> template1 | druid | UTF8     | en_US.utf8 | en_US.utf8 | =c/druid         +</span><br><span class="line">           |       |          |            |            | druid=CTc/druid</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ \c druid</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">You are now connected to database <span class="string">"druid"</span> as user <span class="string">"druid"</span>.</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ \dt</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">               List of relations</span><br><span class="line"> Schema |         Name          | Type  | Owner</span><br><span class="line">--------+-----------------------+-------+-------</span><br><span class="line"> public | druid_audit           | table | druid</span><br><span class="line"> public | druid_config          | table | druid</span><br><span class="line"> public | druid_datasource      | table | druid</span><br><span class="line"> public | druid_pendingsegments | table | druid</span><br><span class="line"> public | druid_rules           | table | druid</span><br><span class="line"> public | druid_segments        | table | druid</span><br><span class="line"> public | druid_supervisors     | table | druid</span><br><span class="line"> public | druid_tasklocks       | table | druid</span><br><span class="line"> public | druid_tasklogs        | table | druid</span><br><span class="line"> public | druid_tasks           | table | druid</span><br><span class="line">(10 rows)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">select</span> id, datasource, created_date, <span class="keyword">start</span>, "end", partitioned, version, used <span class="keyword">from</span> public.druid_segments;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wikipedia_2016-06-27T00:00:00.000Z_2016-06-28T00:00:00.000Z_2020-06-04T07:11:42.714Z | wikipedia  | 2020-06-04T07:14:50.619Z | 2016-06-27T00:00:00.000Z | 2016-06-28T00:00:00.000Z | t           | 2020-06-04T07:11:42.714Z | t</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Kubernetes-集群版"><a href="#Kubernetes-集群版" class="headerlink" title="Kubernetes 集群版"></a>Kubernetes 集群版</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com</span><br><span class="line">$ helm install incubator/druid --version 0.2.6 --generate-name</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">NAME: druid-1592218780</span><br><span class="line">LAST DEPLOYED: Mon Jun 15 23:59:42 2020</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">1. Get the router URL by running these commands:</span><br><span class="line">  <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=druid,release=druid-1592218780"</span> -o jsonpath=<span class="string">"{.items[0].metadata.name}"</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Visit http://127.0.0.1:8080 to use your application"</span></span><br><span class="line">  kubectl port-forward <span class="variable">$POD_NAME</span> 8080:8888</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=druid,release=`helm list | grep druid- | awk '{print <span class="variable">$1</span>}'`"</span> | grep router | awk <span class="string">'{print $1}'</span>)</span><br><span class="line">$ nohup kubectl port-forward <span class="variable">$POD_NAME</span> 8888:8888 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="校验-1"><a href="#校验-1" class="headerlink" title="校验"></a>校验</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl get all</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">NAME                                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/druid-1592364086-broker-76bf68c8bc-96d56        1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-coordinator-5f645bd5c8-rhhpz   1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-historical-0                   1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-middle-manager-0               1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-postgresql-0                   1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-router-67f678b6c5-mw6b4        1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-zookeeper-0                    1/1     Running   0          2m36s</span><br><span class="line">pod/druid-1592364086-zookeeper-1                    1/1     Running   0          2m8s</span><br><span class="line">pod/druid-1592364086-zookeeper-2                    1/1     Running   0          85s</span><br><span class="line">pod/local-volume-provisioner-8sjtx                  1/1     Running   0          8m59s</span><br><span class="line">pod/local-volume-provisioner-9z7mh                  1/1     Running   0          8m59s</span><br><span class="line">pod/local-volume-provisioner-m2xrt                  1/1     Running   0          8m59s</span><br><span class="line">pod/local-volume-provisioner-ptbqs                  1/1     Running   0          8m59s</span><br><span class="line">pod/local-volume-provisioner-tw2fn                  1/1     Running   0          8m59s</span><br><span class="line"></span><br><span class="line">NAME                                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">service/druid-1592364086-broker                ClusterIP   10.10.10.128     &lt;none&gt;        8082/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-coordinator           ClusterIP   10.10.10.195     &lt;none&gt;        8081/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-historical            ClusterIP   10.10.10.226     &lt;none&gt;        8083/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-middle-manager        ClusterIP   10.10.10.108     &lt;none&gt;        8091/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-postgresql            ClusterIP   10.10.10.155     &lt;none&gt;        5432/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-postgresql-headless   ClusterIP   None             &lt;none&gt;        5432/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-router                ClusterIP   10.10.10.29      &lt;none&gt;        8888/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-zookeeper             ClusterIP   10.10.10.122     &lt;none&gt;        2181/TCP                     2m36s</span><br><span class="line">service/druid-1592364086-zookeeper-headless    ClusterIP   None             &lt;none&gt;        2181/TCP,3888/TCP,2888/TCP   2m36s</span><br><span class="line">service/kubernetes                             ClusterIP   10.10.10.1       &lt;none&gt;        443/TCP                      30m</span><br><span class="line"></span><br><span class="line">NAME                                      DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">daemonset.apps/local-volume-provisioner   5         5         5       5            5           &lt;none&gt;          9m</span><br><span class="line"></span><br><span class="line">NAME                                           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/druid-1592364086-broker        1/1     1            1           2m36s</span><br><span class="line">deployment.apps/druid-1592364086-coordinator   1/1     1            1           2m36s</span><br><span class="line">deployment.apps/druid-1592364086-router        1/1     1            1           2m36s</span><br><span class="line"></span><br><span class="line">NAME                                                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/druid-1592364086-broker-76bf68c8bc        1         1         1       2m36s</span><br><span class="line">replicaset.apps/druid-1592364086-coordinator-5f645bd5c8   1         1         1       2m36s</span><br><span class="line">replicaset.apps/druid-1592364086-router-67f678b6c5        1         1         1       2m36s</span><br><span class="line"></span><br><span class="line">NAME                                               READY   AGE</span><br><span class="line">statefulset.apps/druid-1592364086-historical       1/1     2m36s</span><br><span class="line">statefulset.apps/druid-1592364086-middle-manager   1/1     2m36s</span><br><span class="line">statefulset.apps/druid-1592364086-postgresql       1/1     2m36s</span><br><span class="line">statefulset.apps/druid-1592364086-zookeeper        3/3     2m36s</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">上述 CLUSTER-IP 信息已脱敏</div>

<h4 id="ZooKeeper-元数据"><a href="#ZooKeeper-元数据" class="headerlink" title="ZooKeeper 元数据"></a>ZooKeeper 元数据</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ zkCli.sh</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls -R /druid</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/druid</span><br><span class="line"></span><br><span class="line">/druid/announcements</span><br><span class="line">/druid/coordinator</span><br><span class="line">/druid/discovery</span><br><span class="line">/druid/indexer</span><br><span class="line">/druid/internal-discovery</span><br><span class="line">/druid/loadQueue</span><br><span class="line">/druid/overlord</span><br><span class="line">/druid/segments</span><br><span class="line">/druid/servedSegments</span><br><span class="line"></span><br><span class="line">/druid/announcements/10.10.10.63:8083</span><br><span class="line"></span><br><span class="line">/druid/coordinator/_COORDINATOR</span><br><span class="line">/druid/coordinator/_COORDINATOR/_c_281fb87b-c40c-4d71-a657-8254cbcf3730-latch-0000000000</span><br><span class="line"></span><br><span class="line">/druid/discovery/druid:broker</span><br><span class="line">/druid/discovery/druid:coordinator</span><br><span class="line">/druid/discovery/druid:overlord</span><br><span class="line">/druid/discovery/druid:router</span><br><span class="line"></span><br><span class="line">/druid/discovery/druid:broker/0e76bfc1-87f8-4799-9c36-0fb0e5617aef</span><br><span class="line">/druid/discovery/druid:coordinator/035b1ada-531e-4a71-865b-7a1a6d6f1734</span><br><span class="line">/druid/discovery/druid:overlord/a74523d6-1708-45b3-9c0b-87f438cda4e3</span><br><span class="line">/druid/discovery/druid:router/c0bb18d3-51b1-4089-932b-a5d6e05ab91c</span><br><span class="line"></span><br><span class="line">/druid/indexer/announcements</span><br><span class="line">/druid/indexer/status</span><br><span class="line">/druid/indexer/tasks</span><br><span class="line"></span><br><span class="line">/druid/indexer/announcements/10.10.10.65:8091</span><br><span class="line">/druid/indexer/status/10.10.10.65:8091</span><br><span class="line">/druid/indexer/tasks/10.10.10.65:8091</span><br><span class="line"></span><br><span class="line">/druid/internal-discovery/BROKER</span><br><span class="line">/druid/internal-discovery/COORDINATOR</span><br><span class="line">/druid/internal-discovery/HISTORICAL</span><br><span class="line">/druid/internal-discovery/INDEXER</span><br><span class="line">/druid/internal-discovery/MIDDLE_MANAGER</span><br><span class="line">/druid/internal-discovery/OVERLORD</span><br><span class="line">/druid/internal-discovery/PEON</span><br><span class="line">/druid/internal-discovery/ROUTER</span><br><span class="line"></span><br><span class="line">/druid/internal-discovery/BROKER/10.10.10.73:8082</span><br><span class="line">/druid/internal-discovery/COORDINATOR/10.10.10.72:8081</span><br><span class="line">/druid/internal-discovery/HISTORICAL/10.10.10.63:8083</span><br><span class="line">/druid/internal-discovery/MIDDLE_MANAGER/10.10.10.65:8091</span><br><span class="line">/druid/internal-discovery/OVERLORD/10.10.10.72:8081</span><br><span class="line">/druid/internal-discovery/ROUTER/10.10.10.55:8888</span><br><span class="line"></span><br><span class="line">/druid/loadQueue/10.10.10.63:8083</span><br><span class="line"></span><br><span class="line">/druid/overlord/_OVERLORD</span><br><span class="line">/druid/overlord/_OVERLORD/_c_ecacbc56-4d36-4ca0-ac1d-0df919c40bff-latch-0000000000</span><br><span class="line"></span><br><span class="line">/druid/segments/10.10.10.63:8083</span><br><span class="line"></span><br><span class="line">/druid/segments/10.10.10.63:8083/10.10.10.63:8083_historical__default_tier_2020-06-20T04:08:23.309Z_1b957acb6850491ca6ea885fca1b3c210</span><br><span class="line">/druid/segments/10.10.10.63:8083/10.10.10.63:8083_historical__default_tier_2020-06-20T04:10:16.643Z_57c1f60104a94c459bf0331eb3c1f0a01</span><br><span class="line"></span><br><span class="line">/druid/servedSegments/10.10.10.63:8083</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">上述 IP 地址相关信息已脱敏</div>

<h4 id="Broker-健康检查"><a href="#Broker-健康检查" class="headerlink" title="Broker 健康检查"></a>Broker 健康检查</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> `ps -ef | grep 8082 | grep -v grep | awk <span class="string">'{print $2}'</span>`; <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=druid,release=`helm list | grep druid- | awk '{print <span class="variable">$1</span>}'`"</span> | grep broker | awk <span class="string">'{print $1}'</span>) ; nohup kubectl port-forward <span class="variable">$POD_NAME</span> 8082:8082 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br><span class="line">$ curl localhost:8082/status/health</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="MiddleManager-任务"><a href="#MiddleManager-任务" class="headerlink" title="MiddleManager 任务"></a>MiddleManager 任务</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it druid-1593317208-middle-manager-0 sh</span><br><span class="line">$ <span class="built_in">cd</span> /opt/druid/var/druid/task</span><br><span class="line">$ find</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">./workerTaskManagerTmp</span><br><span class="line">./completedTasks</span><br><span class="line">./restore.json</span><br><span class="line">./assignedTasks</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat restore.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"runningTasks"</span>:[]}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">MiddleManager 会将运行中的任务 ID（TaskRunnerWorkItem#taskId）的列表持久化在本地 restore.json 文件中，以便重启节点的时候恢复正在运行中的任务</div>

<h4 id="Historical-缓存"><a href="#Historical-缓存" class="headerlink" title="Historical 缓存"></a>Historical 缓存</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/druid/var/druid/segment-cache/info_dir</span><br><span class="line">$ cat wikipedia_2016-06-27T00:00:00.000Z_2016-06-27T01:00:00.000Z_2020-06-20T04:10:01.833Z</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"dataSource"</span>: <span class="string">"wikipedia"</span>,</span><br><span class="line">  <span class="attr">"interval"</span>: <span class="string">"2016-06-27T00:00:00.000Z/2016-06-27T01:00:00.000Z"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"2020-06-20T04:10:01.833Z"</span>,</span><br><span class="line">  <span class="attr">"loadSpec"</span>: {</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"hdfs"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"hdfs://10.10.10.44:8020/druid/segments/wikipedia/20160627T000000.000Z_20160627T010000.000Z/2020-06-20T04_10_01.833Z/0_index.zip"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"dimensions"</span>: <span class="string">"channel,cityName,comment,countryIsoCode,countryName,diffUrl,flags,isAnonymous,isMinor,isNew,isRobot,isUnpatrolled,namespace,page,regionIsoCode,regionName,user"</span>,</span><br><span class="line">  <span class="attr">"metrics"</span>: <span class="string">"count,sum_added,sum_commentLength,sum_deleted,sum_delta,sum_deltaBucket"</span>,</span><br><span class="line">  <span class="attr">"shardSpec"</span>: {</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"numbered"</span>,</span><br><span class="line">    <span class="attr">"partitionNum"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"partitions"</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"binaryVersion"</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">241189</span>,</span><br><span class="line">  <span class="attr">"identifier"</span>: <span class="string">"wikipedia_2016-06-27T00:00:00.000Z_2016-06-27T01:00:00.000Z_2020-06-20T04:10:01.833Z"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">上述 JSON 已格式化，以便于阅读</div>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/druid/var/druid/segment-cache/wikipedia/2016-06-27T00:00:00.000Z_2016-06-27T01:00:00.000Z/2020-06-20T04:10:01.833Z/0</span><br><span class="line">$ ls</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">00000.smoosh  factory.json  meta.smoosh  version.bin</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Segment-文件"><a href="#Segment-文件" class="headerlink" title="Segment 文件"></a>Segment 文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it hdfs-1593317115-namenode-0 bash</span><br><span class="line">$ hdfs dfs -get /druid/segments/wikipedia/20160627T000000.000Z_20160627T010000.000Z/2020-06-28T04_10_01.833Z/0_index.zip /tmp/index/</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ kubectl cp hdfs-1593317115-namenode-0:/tmp/index/0_index.zip /tmp/0_index.zip</span><br><span class="line">$ unzip 0_index.zip</span><br><span class="line">$ ls</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">00000.smoosh  0_index.zip  factory.json  meta.smoosh  version.bin</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Coordinator-动态配置"><a href="#Coordinator-动态配置" class="headerlink" title="Coordinator 动态配置"></a>Coordinator 动态配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> `ps -ef | grep 8081 | grep -v grep | awk <span class="string">'{print $2}'</span>`; <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=druid,release=`helm list | grep druid- | awk '{print <span class="variable">$1</span>}'`"</span> | grep coordinator | awk <span class="string">'{print $1}'</span>) ; nohup kubectl port-forward <span class="variable">$POD_NAME</span> 8081:8081 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br><span class="line">$ curl localhost:8081/druid/coordinator/v1/config | python -m json.tool</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"balancerComputeThreads"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"decommissioningMaxPercentOfMaxSegmentsToMove"</span>: <span class="number">70</span>,</span><br><span class="line">  <span class="attr">"decommissioningNodes"</span>: [],</span><br><span class="line">  <span class="attr">"emitBalancingStats"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"killAllDataSources"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"killDataSourceWhitelist"</span>: [],</span><br><span class="line">  <span class="attr">"killPendingSegmentsSkipList"</span>: [],</span><br><span class="line">  <span class="attr">"maxSegmentsInNodeLoadingQueue"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"maxSegmentsToMove"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"mergeBytesLimit"</span>: <span class="number">524288000</span>,</span><br><span class="line">  <span class="attr">"mergeSegmentsLimit"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"millisToWaitBeforeDeleting"</span>: <span class="number">900000</span>,</span><br><span class="line">  <span class="attr">"pauseCoordination"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"replicantLifetime"</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">"replicationThrottleLimit"</span>: <span class="number">10</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将 maxSegmentsToMove 调整为 50</span></span><br><span class="line">$ curl -XPOST -H <span class="string">'Content-Type:application/json'</span> localhost:8081/druid/coordinator/v1/config -d <span class="string">'{"maxSegmentsToMove":50}'</span></span><br><span class="line">$ curl localhost:8081/druid/coordinator/v1/config | python -m json.tool</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"balancerComputeThreads"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"decommissioningMaxPercentOfMaxSegmentsToMove"</span>: <span class="number">70</span>,</span><br><span class="line">  <span class="attr">"decommissioningNodes"</span>: [],</span><br><span class="line">  <span class="attr">"emitBalancingStats"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"killAllDataSources"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"killDataSourceWhitelist"</span>: [],</span><br><span class="line">  <span class="attr">"killPendingSegmentsSkipList"</span>: [],</span><br><span class="line">  <span class="attr">"maxSegmentsInNodeLoadingQueue"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"maxSegmentsToMove"</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">"mergeBytesLimit"</span>: <span class="number">524288000</span>,</span><br><span class="line">  <span class="attr">"mergeSegmentsLimit"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"millisToWaitBeforeDeleting"</span>: <span class="number">900000</span>,</span><br><span class="line">  <span class="attr">"pauseCoordination"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"replicantLifetime"</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">"replicationThrottleLimit"</span>: <span class="number">10</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">动态配置项 maxSegmentsToMove 可以用于控制同时被 rebalance 的 Segment 数量</div>
<div class="note info">动态配置项 replicantLifetime 可以用于控制 Historical 上 Segment 存活的时间。当 Historical 下线时，其上的 Segment 会被认为已经失效，然后 Coordinator 会通知其他 Historical 来加载这些 Segment。但是在 Historical 升级做滚动重启的时候，如果立即使这些 Segment 失效，会导致严重的数据漂移。因此，需要给这些 Segment 增加一个 lifetime 机制，以规避此类情况</div>

<h4 id="Druid-SQL-查询"><a href="#Druid-SQL-查询" class="headerlink" title="Druid SQL 查询"></a>Druid SQL 查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 映射 Broker 容器的 8082 端口</span></span><br><span class="line">$ <span class="built_in">kill</span> `ps -ef | grep 8082 | grep -v grep | awk <span class="string">'{print $2}'</span>`; <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=druid,release=`helm list | grep druid- | awk '{print <span class="variable">$1</span>}'`"</span> | grep broker | awk <span class="string">'{print $1}'</span>) ; nohup kubectl port-forward <span class="variable">$POD_NAME</span> 8082:8082 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'{"query":"SELECT COUNT(*) as res FROM wikipedia"}'</span> &gt; druid_query.sql</span><br><span class="line">$ curl -XPOST -H<span class="string">'Content-Type: application/json'</span> http://localhost:8082/druid/v2/sql/ -d@druid_query.sql</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[{<span class="attr">"res"</span>:<span class="number">24433</span>}]</span><br></pre></td></tr></tbody></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><a href="https://druid.apache.org/docs/latest/configuration/index.html">配置</a></h2><h3 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a><a href="https://druid.apache.org/docs/latest/tutorials/cluster.html">常用端口</a></h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">端口描述</th>
<th style="text-align:center">端口号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Router, if used</td>
<td style="text-align:center">8088</td>
</tr>
<tr>
<td style="text-align:center">Broker</td>
<td style="text-align:center">8082</td>
</tr>
<tr>
<td style="text-align:center">Overlord</td>
<td style="text-align:center">8090</td>
</tr>
<tr>
<td style="text-align:center">Middle Manager; you may need higher than port 8199 if you have a very high <code>druid.worker.capacity</code></td>
<td style="text-align:center">8091, 8100 ~ 8199</td>
</tr>
<tr>
<td style="text-align:center">Coordinator</td>
<td style="text-align:center">8081</td>
</tr>
<tr>
<td style="text-align:center">Historical</td>
<td style="text-align:center">8083</td>
</tr>
<tr>
<td style="text-align:center">Derby on your Coordinator; not needed if you are using a separate metadata store like MySQL or PostgreSQL</td>
<td style="text-align:center">1527</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yuzhouwan.com/posts/31915/">ZooKeeper</a>; not needed if you are using a separate ZooKeeper cluster</td>
<td style="text-align:center">2181</td>
</tr>
</tbody>
</table>
</div>
<div class="note warning">生产中，建议将 ZooKeeper 和 Metadata Stroage 部署在独立的物理机上，而不是混合部署在 Coordinator 节点上</div>



<h3 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a><a href="https://druid.apache.org/docs/latest/ingestion/index.html#enabling-or-disabling-rollup">rollup</a></h3><p>　在 Apache Druid <a href="https://github.com/apache/druid/releases/tag/druid-0.9.2">0.9.2</a> 版本之后，我们可以通过在 <code>granularitySpec</code> 中配置 <code>"rollup": false</code>，来完全关闭 RollUp 特性，即在数据摄入的过程中，不做任何的预聚合，只保留最原始的数据点。即便是同一时刻的、具有相同维度的、完全相同的多个数据点，都会全部存储下来，不会发生覆盖写</p>
<h3 id="selectStrategy"><a href="#selectStrategy" class="headerlink" title="selectStrategy"></a><a href="https://druid.apache.org/docs/latest/configuration/index.html#overlord">selectStrategy</a></h3><p>　该参数默认为 <code>fillCapacity</code>，意味着分配 Task 的时候，会将某个 MiddleManager 分配满，才会分配新的 Task 到其他 MiddleManager 上。这里可以考虑使用 <code>equalDistribution</code> 策略，将 Task 均匀分配到 MiddleManager 上</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$DRUID_HOME</span></span><br><span class="line">$ vim conf/druid/overlord/runtime.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">druid.indexer.selectStrategy</span>=<span class="string">equalDistribution</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">在 0.11.0 版本中，默认策略已经改成了 equalDistribution。详见 WorkerBehaviorConfig#DEFAULT_STRATEGY</div>



<h3 id="maxRowsPerSegment"><a href="#maxRowsPerSegment" class="headerlink" title="maxRowsPerSegment"></a><a href="https://druid.apache.org/docs/latest/ingestion/native-batch.html#dynamic-partitioning">maxRowsPerSegment</a></h3><p>　该参数用于控制每个 Segment 中最大能够存储的记录行数（默认值为 <code>500,0000</code>），只有二级分区采用的是 <code>dynamic</code> 才会生效。如果 <code>spec.tuningConfig.type</code> 设置的是 <code>hashed</code>，则需要指定 shard 的数量，以及哪些 Dimension 被用于 hash 计算（默认为所有 Dimension）。另外，在 <code>dynamic</code> 类型的二级分区中，还有一个 <code>maxTotalRows</code> 参数（默认值为 <code>2000,0000</code>），用来控制所有尚未被存储到 Deep Storage 中的 segment 的记录行数，一旦达到 <code>maxTotalRows</code> 则会立即触发 push 操作</p>
<div class="note danger">如果该参数设置得很低，会产生很多小的 Segment 文件。一方面，如果 DeepStorage 为 HDFS 的话，会触发小文件问题，影响到集群性能（访问大量小文件不同于访问少数大文件，需要不断地在 DataNode 之间跳转，大部分时间都会耗费在 task 的启动和释放上，并且 NameNode 要监控的数据块变多后，网络带宽和内存占用也会比高，还会拖慢 NameNode 节点的故障恢复）；另一方面，如果操作系统中 vm.max_map_count 参数为默认的 65530 的话，可能会达到这个阈值，使得 MMap 操作失败，进而导致 Historical 进程 crash 退出，如果 Segment 一直无法完成 handoff 的过程，则会促使 Coordinator 进程 kill 实时任务</div>



<h3 id="druid-server-tier"><a href="#druid-server-tier" class="headerlink" title="druid.server.tier"></a><a href="https://druid.apache.org/docs/latest/configuration/index.html#historical-general-configuration">druid.server.tier</a></h3><p>　该参数相当于给 Historical 节点加了一个标签，可以将相同 Tier 名称的 Historical 进行分组，便于实现冷热分层。在 <code>historical/runtime.properties</code> 配置文件中设置，默认值为 <code>_default_tier</code>。例如，可以创建 <code>hot</code> 和 <code>cold</code> 两个 Tier，<code>hot</code> Tier 用于存储最近三个月的数据，<code>cold</code> Tier 用于存储最近一年的数据。如此一来，因为 <code>cold</code> 分组下的 Historical 节点存储的数据只需要应对一些低频查询，便可以使用非 SSD 的磁盘，以节约硬件成本</p>
<h3 id="tieredReplicants"><a href="#tieredReplicants" class="headerlink" title="tieredReplicants"></a><a href="https://druid.apache.org/docs/latest/operations/rule-configuration.html#interval-load-rule">tieredReplicants</a></h3><p>　该参数用于在 Rule 中设置 Tier 存储的副本数量。假设将 tieredReplicants 设置为 2 之后，数据便会在不同的 Historical 节点上各自存储一份，以避免某一个 Historical 故障，而影响到查询</p>
<h3 id="Coordinator-Rule-配置"><a href="#Coordinator-Rule-配置" class="headerlink" title="Coordinator Rule 配置"></a>Coordinator Rule 配置</h3><h4 id="保留最近-30-天数据"><a href="#保留最近-30-天数据" class="headerlink" title="保留最近 30 天数据"></a>保留最近 30 天数据</h4><p><img data-src="/picture/druid/druid_save_30_days_rules.png" alt="Apache Druid Coordinator UI"></p>
<center>（对 <a href="https://druid.apache.org/docs/latest/design/coordinator.html" target="_blank">Coordinator</a> 可视化页面的截图）</center>





<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="Druid-SQL"><a href="#Druid-SQL" class="headerlink" title="Druid SQL"></a><a href="https://druid.apache.org/docs/latest/querying/sql.html">Druid SQL</a></h3><h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">[ EXPLAIN PLAN <span class="keyword">FOR</span> ]</span><br><span class="line">[ <span class="keyword">WITH</span> tableName [ ( column1, column2, ... ) ] <span class="keyword">AS</span> ( query ) ]</span><br><span class="line"><span class="keyword">SELECT</span> [ <span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> ] { <span class="operator">*</span> <span class="operator">|</span> exprs }</span><br><span class="line"><span class="keyword">FROM</span> { <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span> <span class="operator">|</span> (<span class="operator">&lt;</span>subquery<span class="operator">&gt;</span>) <span class="operator">|</span> <span class="operator">&lt;</span>o1<span class="operator">&gt;</span> [ <span class="keyword">INNER</span> <span class="operator">|</span> <span class="keyword">LEFT</span> ] <span class="keyword">JOIN</span> <span class="operator">&lt;</span>o2<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="keyword">condition</span> }</span><br><span class="line">[ <span class="keyword">WHERE</span> expr ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> [ exprs <span class="operator">|</span> <span class="keyword">GROUPING</span> SETS ( (exprs), ... ) <span class="operator">|</span> <span class="keyword">ROLLUP</span> (exprs) <span class="operator">|</span> <span class="keyword">CUBE</span> (exprs) ] ]</span><br><span class="line">[ <span class="keyword">HAVING</span> expr ]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> expr [ <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> ], expr [ <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> ], ... ]</span><br><span class="line">[ LIMIT limit ]</span><br><span class="line">[ <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="operator">&lt;</span>another query<span class="operator">&gt;</span> ]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> "__time", "channel", "cityName", "comment", "count", "countryIsoCode", "countryName", "diffUrl", "flags", "isAnonymous", "isMinor", "isNew", "isRobot", "isUnpatrolled", "namespace", "page", "regionIsoCode", "regionName", "sum_added", "sum_commentLength", "sum_deleted", "sum_delta", "sum_deltaBucket", "user"</span><br><span class="line"><span class="keyword">FROM</span> "wikipedia"</span><br><span class="line"><span class="keyword">WHERE</span> "__time" <span class="operator">&gt;=</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="string">'1'</span> <span class="keyword">DAY</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="PlyQL"><a href="#PlyQL" class="headerlink" title="PlyQL"></a>PlyQL</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>　通过 <code>--host</code> 和 <code>-q</code> 分别指定 <code>Broker 地址</code> 和 <code>查询语句</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/druid/software/imply-1.3.0</span><br><span class="line">$ bin/plyql --host &lt;broker host&gt;:8082 -q <span class="string">"show tables"</span>        <span class="comment"># --host &lt;broker&gt;:&lt;port&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">┌─────────────────────────┐</span><br><span class="line">│ Tables_in_database      │</span><br><span class="line">├─────────────────────────┤</span><br><span class="line">│ COLUMNS                 │</span><br><span class="line">│ SCHEMATA                │</span><br><span class="line">│ TABLES                  │</span><br><span class="line">│ yuzhouwan_metrics       │</span><br><span class="line">└─────────────────────────┘</span><br></pre></td></tr></tbody></table></figure>
<h4 id="表结构查询"><a href="#表结构查询" class="headerlink" title="表结构查询"></a>表结构查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/plyql --host &lt;broker host&gt;:8082 -q <span class="string">"describe yuzhouwan_metrics"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">┌────────────┬────────┬──────┬─────┬─────────┬───────┐</span><br><span class="line">│ Field      │ Type   │ Null │ Key │ Default │ Extra │</span><br><span class="line">├────────────┼────────┼──────┼─────┼─────────┼───────┤</span><br><span class="line">│ __time     │ TIME   │ YES  │     │         │       │</span><br><span class="line">│ metric01   │ NUMBER │ YES  │     │         │       │</span><br><span class="line">│ metric02   │ NUMBER │ YES  │     │         │       │</span><br><span class="line">│ // ...     │        │      │     │         │       │</span><br><span class="line">└────────────┴────────┴──────┴─────┴─────────┴───────┘</span><br></pre></td></tr></tbody></table></figure>
<h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><h5 id="简单聚合"><a href="#简单聚合" class="headerlink" title="简单聚合"></a>简单聚合</h5><p>　简单的 <code>max</code> / <code>min</code> / <code>count</code> 查询语句</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/plyql --host &lt;broker host&gt;:8082 -q <span class="string">"select max(gcCount_max) from yuzhouwan_metrics where serverName='druid01'"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">┌──────────────────┐</span><br><span class="line">│ max(gcCount_max) │</span><br><span class="line">├──────────────────┤</span><br><span class="line">│ 39710            │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></tbody></table></figure>
<h5 id="时间维度聚合"><a href="#时间维度聚合" class="headerlink" title="时间维度聚合"></a>时间维度聚合</h5><p>　利用 <code>TIME_PART</code> 进行时间维度的聚合</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/plyql --host &lt;broker host&gt;:8082 -q <span class="string">"select TIME_PART(__time, MINUTE_OF_DAY, 'Asia/Shanghai'), max(gcCount_max) from yuzhouwan_metrics where serverName='druid01' and __time&gt;='2017-04-04' and __time&lt;'2017-04-05' group by 1"</span> -Z Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不参与 group by 的 指标需要进行 sum / min / max 之类的聚合操作</span></span><br><span class="line">$ bin/plyql --host &lt;broker host&gt;:8082 -q <span class="string">"select TIME_PART(__time, MINUTE_OF_DAY, 'Asia/Shanghai'), metric, sum(sum) as sum_value from yuzhouwan_metrics where level='level1' and metric='metric1' and __time&gt;='2017-04-04' and __time&lt;'2017-04-05' group by 1, 2 order by sum_value desc limit 10"</span> -Z Asia/Shanghai -v</span><br></pre></td></tr></tbody></table></figure>
<h4 id="展示查询对应的-JSON-语句"><a href="#展示查询对应的-JSON-语句" class="headerlink" title="展示查询对应的 JSON 语句"></a>展示查询对应的 JSON 语句</h4><p>　增加 <code>-v</code> 参数，可以将查询的 <code>JSON</code> 语句展示出来，用于检查 <code>plyql</code> 语句是否符合预期</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/plyql --host &lt;broker host&gt;:8082 -q <span class="string">"select distinct level from yuzhouwan_metrics where __time&gt;='2017-01-16 03:00'"</span> -Z Asia/Shanghai -v</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">plyql version 0.9.6 (plywood version 0.15.4)</span><br><span class="line">Received query:</span><br><span class="line">select distinct level from yuzhouwan_metrics <span class="built_in">where</span> __time&gt;=<span class="string">'2017-01-16 03:00'</span></span><br><span class="line">---------------------------</span><br><span class="line">Parsed query as the following plywood expression (as JSON):</span><br><span class="line">{</span><br><span class="line">  <span class="string">"op"</span>: <span class="string">"split"</span>,</span><br><span class="line">  <span class="string">"operand"</span>: {</span><br><span class="line">    <span class="string">"op"</span>: <span class="string">"filter"</span>,</span><br><span class="line">    <span class="string">"operand"</span>: {</span><br><span class="line">      <span class="string">"op"</span>: <span class="string">"ref"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"yuzhouwan_metrics"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"expression"</span>: {</span><br><span class="line">      <span class="string">"op"</span>: <span class="string">"greaterThanOrEqual"</span>,</span><br><span class="line">      <span class="string">"operand"</span>: {</span><br><span class="line">        <span class="string">"op"</span>: <span class="string">"ref"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"__time"</span>,</span><br><span class="line">        <span class="string">"ignoreCase"</span>: <span class="literal">true</span></span><br><span class="line">      },    // ...</span><br><span class="line">      {</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"v1"</span>,</span><br><span class="line">        <span class="string">"timestamp"</span>: <span class="string">"2017-01-16T03:00:00.000Z"</span>,</span><br><span class="line">        <span class="string">"event"</span>: {</span><br><span class="line">          <span class="string">"level"</span>: <span class="string">"level1"</span>,</span><br><span class="line">          <span class="string">"!DUMMY"</span>: 1608</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line">^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">┌────────────────┐</span><br><span class="line">│ level          │</span><br><span class="line">├────────────────┤</span><br><span class="line">│ level1         │</span><br><span class="line">│ level2         │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></tbody></table></figure>
<h4 id="计算查询耗时情况"><a href="#计算查询耗时情况" class="headerlink" title="计算查询耗时情况"></a>计算查询耗时情况</h4><p>　利用 time 命令，可以计算出查询语句的耗时情况</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ time bin/plyql -h &lt;broker host&gt;:8082 -q <span class="string">"select * from yuzhouwan_metrics where __time&gt;='2017-03-18' and __time&lt;'2017-03-19' and level='level01' limit 100"</span> -Z Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">real    0m0.886s</span><br><span class="line">user    0m0.684s</span><br><span class="line">sys     0m0.062s</span><br></pre></td></tr></tbody></table></figure>
<h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><h4 id="获取所有-DataSource"><a href="#获取所有-DataSource" class="headerlink" title="获取所有 DataSource"></a>获取所有 DataSource</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl http://localhost:8082/druid/v2/datasources</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="string">"inline_data"</span>,<span class="string">"wikipedia"</span>]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="聚合查询-1"><a href="#聚合查询-1" class="headerlink" title="聚合查询"></a>聚合查询</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim query.body</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"dimensions"</span>: [</span><br><span class="line">    <span class="string">"dimensions1"</span>,</span><br><span class="line">    <span class="string">"dimensions2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"aggregations"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"filter"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"selector"</span>,</span><br><span class="line">        <span class="attr">"dimension"</span>: <span class="string">"metric"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"metrics01"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"aggregator"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"doubleSum"</span>,</span><br><span class="line">        <span class="attr">"fieldName"</span>: <span class="string">"sum"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"metric01"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"filtered"</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"filter"</span>: {</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"selector"</span>,</span><br><span class="line">    <span class="attr">"dimension"</span>: <span class="string">"level"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: <span class="string">"day"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"intervals"</span>: <span class="string">"2017-02-09T15:03:12+08:00/2017-02-09T16:03:12+08:00"</span>,</span><br><span class="line">  <span class="attr">"limitSpec"</span>: {</span><br><span class="line">    <span class="attr">"limit"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"columns"</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"direction"</span>: <span class="string">"descending"</span>,</span><br><span class="line">        <span class="attr">"dimension"</span>: <span class="string">"metric01"</span></span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"granularity"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"postAggregations"</span>: [],</span><br><span class="line">  <span class="attr">"queryType"</span>: <span class="string">"groupBy"</span>,</span><br><span class="line">  <span class="attr">"dataSource"</span>: <span class="string">"yuzhouwan_metrics"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X POST <span class="string">"http://localhost:8082/druid/v2/?pretty"</span> -H <span class="string">'content-type: application/json'</span> -d @query.body</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">在 postAggregations 中里面是串行执行的，并可以传递计算结果</div>



<h3 id="Apache-Calcite"><a href="#Apache-Calcite" class="headerlink" title="Apache Calcite"></a><a href="https://druid.apache.org/docs/latest/querying/sql.html#jdbc">Apache Calcite</a></h3><h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.calcite<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>calcite-druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String url = <span class="string">"jdbc:avatica:remote:url=http://localhost:8082/druid/v2/sql/avatica/"</span>;</span><br><span class="line">String query = <span class="string">"SELECT COUNT(*) as res FROM wikipedia"</span>;</span><br><span class="line"><span class="keyword">try</span> (Connection connection = DriverManager.getConnection(url)) {</span><br><span class="line">    <span class="keyword">try</span> (Statement statement = connection.createStatement();</span><br><span class="line">         ResultSet resultSet = statement.executeQuery(query)) {</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">            System.out.println(resultSet.getInt(<span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">24433</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">Apache Calcite 的 Druid adapter 持续完善查询算子下推，已支持 count(*) 聚合、filter 过滤和 groupby 分组等</div>



<h3 id="Druid-Client"><a href="#Druid-Client" class="headerlink" title="Druid Client"></a>Druid Client</h3><p>　一旦有了 Client 之后，我们就可以做很多事情，比如流控、权限管理、统一 SQL 层等（社区正在 <a href="https://github.com/apache/druid/issues/5006">!5006</a> 中讨论，欢迎加入）。目前，社区已经有针对 <a href="https://github.com/implydata/druid-client">Java</a>、<a href="https://github.com/druid-io/pydruid">Python</a>、<a href="https://github.com/nisalperi/druid-client">Golang</a>、<a href="https://github.com/daggerrz/druid-scala-client">Scala</a>、<a href="https://github.com/y42/clj-druid">Clojure</a>、<a href="https://github.com/level23/druid-client">PHP</a>、<a href="https://github.com/druid-io/RDruid">R</a> <a href="https://druid.apache.org/libraries">等</a>语言，实现了对应的 Client 工具</p>
<h3 id="Presto"><a href="#Presto" class="headerlink" title="Presto"></a>Presto</h3><p>　PrestoDB 和 PrestoSQL 均支持 Druid Connector。具体的使用方式，详见我的另一篇博客：<a href="https://yuzhouwan.com/posts/200906/#Apache-Druid-Connector">Presto：分布式 SQL 查询引擎</a></p>
<h3 id="InfluxDB-Line-Protocol-Parser"><a href="#InfluxDB-Line-Protocol-Parser" class="headerlink" title="InfluxDB Line Protocol Parser"></a><a href="https://druid.apache.org/docs/latest/development/extensions-contrib/influx.html">InfluxDB Line Protocol Parser</a></h3><p>　Apache Druid 通过 <code>druid-influx-extensions</code> 插件支持解析 InfluxDB 写入协议。更多关于 InfluxDB 的介绍，详见：<a href="https://yuzhouwan.com/posts/200315/">开源时序数据库 InfluxDB</a></p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="设计总图"><a href="#设计总图" class="headerlink" title="设计总图"></a>设计总图</h3><h4 id="初始版本-0-6-0（2012-2013）"><a href="#初始版本-0-6-0（2012-2013）" class="headerlink" title="初始版本~0.6.0（2012~2013）"></a>初始版本~0.6.0（2012~2013）</h4><p><img data-src="/picture/druid/druid_architecture_old_0.png" alt="Apache Druid 初始构架图"></p>
<center>（图片来源：<a href="https://druid.apache.org/docs/img/druid-dataflow-2x.png" target="_blank">Apache Druid</a>™ 官网）</center>

<h4 id="0-7-0-0-12-0（2013-2018）"><a href="#0-7-0-0-12-0（2013-2018）" class="headerlink" title="0.7.0~0.12.0（2013~2018）"></a>0.7.0~0.12.0（2013~2018）</h4><p><img data-src="/picture/druid/druid_architecture_old_1.png" alt="Apache Druid 旧构架图 - 数据流转"><br><img data-src="/picture/druid/druid_architecture_old_2.png" alt="Apache Druid 旧构架图 - 集群管理"></p>
<center>（图片来源：<a href="http://druid.io/docs/0.12.0/design/design.html" target="_blank">Apache Druid</a>™ 官网）</center>

<h4 id="0-13-0-当前版本（2018-now）"><a href="#0-13-0-当前版本（2018-now）" class="headerlink" title="0.13.0~当前版本（2018~now）"></a>0.13.0~当前版本（2018~now）</h4><p><img data-src="/picture/druid/druid_architecture.png" alt="Apache Druid 构架图"></p>
<center>（图片来源：<a href="https://druid.apache.org/docs/latest/design/" target="_blank">Apache Druid</a>™ 官网）</center>

<div class="note info">从架构图中可以看出来 Apache Druid 集群的通讯是基于 Apache ZooKeeper 的</div>



<h3 id="Lambda-流式架构"><a href="#Lambda-流式架构" class="headerlink" title="Lambda 流式架构"></a>Lambda 流式架构</h3><p><img data-src="/picture/druid/druid_lambda.png" alt="Apache Druid Lambda"></p>
<center>（利用 Axure™ 绘制而成）</center>

<div class="note info">通常流式数据的链路为 Raw data → Kafka → Stream processor（optional, typically for ETL) → Kafka（optional）→ Druid → Application / user，而批处理的链路为 Raw data → Kafka（optional）→ HDFS → ETL process（optional）→ Druid → Application / user</div>



<h3 id="OLTP-vs-OLAP"><a href="#OLTP-vs-OLAP" class="headerlink" title="OLTP vs OLAP"></a>OLTP vs OLAP</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">OLTP</th>
<th style="text-align:center">OLAP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">全称</td>
<td style="text-align:center"><strong>O</strong>n<strong>l</strong>ine <strong>T</strong>ransaction <strong>P</strong>rocessing</td>
<td style="text-align:center"><strong>O</strong>n<strong>l</strong>ine <strong>A</strong>nalytical <strong>P</strong>rocessing</td>
</tr>
<tr>
<td style="text-align:center">中文</td>
<td style="text-align:center">联机事务处理</td>
<td style="text-align:center">联机分析处理</td>
</tr>
<tr>
<td style="text-align:center">技术类别</td>
<td style="text-align:center">关系型数据库</td>
<td style="text-align:center">数据仓库</td>
</tr>
<tr>
<td style="text-align:center">场景</td>
<td style="text-align:center">基本的、日常的事务处理</td>
<td style="text-align:center">复杂的分析操作，侧重决策支持</td>
</tr>
<tr>
<td style="text-align:center">例子</td>
<td style="text-align:center">银行交易</td>
<td style="text-align:center">广告投放</td>
</tr>
<tr>
<td style="text-align:center">面向对象</td>
<td style="text-align:center">业务处理人员</td>
<td style="text-align:center">分析决策人员</td>
</tr>
<tr>
<td style="text-align:center">面向维度</td>
<td style="text-align:center">应用</td>
<td style="text-align:center">主题</td>
</tr>
<tr>
<td style="text-align:center">实时性</td>
<td style="text-align:center">高要求（如，银行交易希望能秒级完成）</td>
<td style="text-align:center">低要求（如，报表统计希望能天级完成）</td>
</tr>
<tr>
<td style="text-align:center">主要操作</td>
<td style="text-align:center">增删改</td>
<td style="text-align:center">查询</td>
</tr>
<tr>
<td style="text-align:center">数据的目的</td>
<td style="text-align:center">控制和运行基本业务任务</td>
<td style="text-align:center">帮助规划、解决问题和决策支持</td>
</tr>
<tr>
<td style="text-align:center">数据是什么</td>
<td style="text-align:center">业务流程的快照</td>
<td style="text-align:center">商业活动的多维视图</td>
</tr>
<tr>
<td style="text-align:center">插入和更新</td>
<td style="text-align:center">由终端用户发起</td>
<td style="text-align:center">由长时间运行的批处理作业定时触发</td>
</tr>
<tr>
<td style="text-align:center">查询复杂度</td>
<td style="text-align:center">简单事务查询</td>
<td style="text-align:center">复杂聚合查询</td>
</tr>
<tr>
<td style="text-align:center">查询数据量</td>
<td style="text-align:center">涉及的记录条数相对较少</td>
<td style="text-align:center">涉及大数据量的聚合</td>
</tr>
<tr>
<td style="text-align:center">处理速度</td>
<td style="text-align:center">通常非常快</td>
<td style="text-align:center">取决于所涉及的数据量，以及是否建立索引</td>
</tr>
<tr>
<td style="text-align:center">存储要求</td>
<td style="text-align:center">归档历史数据，以节省空间</td>
<td style="text-align:center">由于聚合结构的存在，相对更大</td>
</tr>
<tr>
<td style="text-align:center">数据量级别</td>
<td style="text-align:center">GB</td>
<td style="text-align:center">TB</td>
</tr>
<tr>
<td style="text-align:center">数据库设计</td>
<td style="text-align:center">相对标准化</td>
<td style="text-align:center">通常使用较少的表进行非规范化</td>
</tr>
<tr>
<td style="text-align:center">数据模型</td>
<td style="text-align:center">3NF、BCNF</td>
<td style="text-align:center">星型、雪花</td>
</tr>
</tbody>
</table>
</div>
<h3 id="MOLAP-vs-ROLAP"><a href="#MOLAP-vs-ROLAP" class="headerlink" title="MOLAP vs ROLAP"></a>MOLAP vs ROLAP</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">MOLAP</th>
<th style="text-align:center">ROLAP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">全称</td>
<td style="text-align:center"><strong>M</strong>ulti-dimensional <strong>OLAP</strong></td>
<td style="text-align:center"><strong>R</strong>elational <strong>OLAP</strong></td>
</tr>
<tr>
<td style="text-align:center">特征</td>
<td style="text-align:center">预聚合原始数据，加速聚合查询</td>
<td style="text-align:center"><a href="https://yuzhouwan.com/posts/200906/#MPP">MPP</a> 并⾏化 / 内存加速查询</td>
</tr>
<tr>
<td style="text-align:center">数据库</td>
<td style="text-align:center"><a href="https://yuzhouwan.com/tags/Apache-Druid/">Apache Druid</a> / Apache Kylin</td>
<td style="text-align:center">Apache Impala / Aapche Drill / <a href="https://yuzhouwan.com/tags/Apache-Spark/">Apache SparkSQL</a> / <a href="https://yuzhouwan.com/posts/200906/">Presto</a></td>
</tr>
</tbody>
</table>
</div>
<div class="note info">MPP（Massively Parallel Processor）大规模并行化处理架构</div>



<h3 id="Task-生命周期"><a href="#Task-生命周期" class="headerlink" title="Task 生命周期"></a>Task 生命周期</h3><pre class="mermaid">sequenceDiagram

participant Overlord
participant ZooKeeper
participant MiddleManager
participant Peon

Overlord -&gt;&gt; ZooKeeper : new_task
ZooKeeper -&gt;&gt; ZooKeeper : create path /tasks/mm1
ZooKeeper -&gt;&gt; MiddleManager : new_task
MiddleManager -&gt;&gt; Peon : new_task
Peon -&gt;&gt; ZooKeeper : new_task_status
ZooKeeper -&gt;&gt; ZooKeeper : create path /status/new_task
ZooKeeper -&gt;&gt; Overlord : new_task_status</pre>



<h3 id="写入链路"><a href="#写入链路" class="headerlink" title="写入链路"></a>写入链路</h3><pre class="mermaid">sequenceDiagram

participant MiddleManager
participant DeepStorage
participant MetadataStorage
participant ZooKeeper
participant Historical
participant Coordinator

MiddleManager -&gt;&gt; MiddleManager : indexing task
MiddleManager -&gt;&gt; MiddleManager : create segment
MiddleManager -&gt;&gt; DeepStorage : push segment
MiddleManager -&gt;&gt; MetadataStorage : record segment meta info
loop regularly
  Coordinator -&gt;&gt;+ MetadataStorage : pull segment info
  MetadataStorage --&gt;&gt;- Coordinator : return segment info
end
Coordinator -&gt;&gt;+ ZooKeeper : create ephemeral znode
ZooKeeper --&gt;&gt;- Historical : trigger watch
DeepStorage -&gt;&gt; Historical : pull segment
Historical -&gt;&gt; ZooKeeper : record segment location info
Historical --&gt;&gt; MiddleManager : handoff done</pre>

<div class="note info">Coordinator 会定期从 MetadataStorage 中获取 Segment 信息，拉取的频率由 druid.manager.segments.pollDuration 参数控制（默认值为 PT1M）。另外，druid.manager.config.pollDuration 参数控制拉取配置信息的频率，druid.manager.rules.pollDuration 参数控制拉取 Rule 规则的频率，这两个参数的默认值也均为 PT1M</div>
<div class="note info">需要注意的是 Coordinator 通知 Historical 从 DeepStorage 中加载 Segment 的操作，是通过 ZooKeeper 来通讯的，并且每一个 Historical 进程都会与 ZooKeeper 之间维护一个长连接，以感知 watch 机制发出的事件</div>



<h3 id="Segment-加载"><a href="#Segment-加载" class="headerlink" title="Segment 加载"></a>Segment 加载</h3><pre class="mermaid">sequenceDiagram

participant Historical
participant Disk
participant ZooKeeper

ZooKeeper --&gt;&gt; Historical : CHILD_ADDED event
Historical -&gt;&gt;+ Disk : get all files under info_dir
Disk -&gt;&gt;- Historical : return cached segments info
alt segment does not exist
Historical -&gt;&gt; Disk : delete the corresponding file under info_dir
end
Historical -&gt;&gt; Historical : load local segment
Historical -&gt;&gt; ZooKeeper : register loaded segment</pre>

<div class="note success">加载 Segment 的过程本质上就是反序列化的过程，如果对 Historical 节点滚动重启的时候，直接对其上的所有 Segment 都进行反序列化操作，会使得节点恢复比较缓慢。针对该问题 Apache Druid 在 0.17.0 版本中，引入了懒加载的机制，将反序列化的过程推迟到 Segment 实际被查询的时候进行。该特性可以通过 druid.segmentCache.lazyLoadOnStart 配置项开启，默认值为 false</div>

<p>　如果某个查询命中的 Segment 都存储在一个 Historical 节点上，则会导致该查询无法被并行化处理，查询的 RT 就会增高。因此，Segment 在各个 Historical 节点中的分布要尽可能保证分散。Segment 负载均衡的策略可以由 <code>druid.coordinator.balancer.strategy</code> 参数指定，默认值为 <code>cost</code>。该策略在 Aapche Druid 的 0.9.1 版本中被引入，其大体思路为：随机选择一个 Segment X 后，依次计算该 Segment X 和 Historical 节点上的所有 Segment Y 的 Cost，选取 Cost 值最小的节点（两个 Segment 对应的时间段相距越远，算出的 Cost 值也就越小，那么同时出现在一个 Historical 节点上的概率也就越大），然后到该节点上重新加载 Segment X。具体的计算公式如下：</p>
<script type="math/tex; mode=display">
Cost(X, Y) = \int_{x_0}^{x_1} \int_{y_0}^{y_1} e^{-\lambda|x-y|}{\rm d}x{\rm d}y</script><p>　其中，$X$ 为需要被重新加载的 Segment，其数据覆盖的时间范围为 $[x_0, x_1)$，$Y$ 为 Historical 上某一个 Segment，其数据覆盖的时间范围为 $[y_0, y_1)$，另外 $\lambda$ 为 $\frac{\log_e^2}{24}$，表示 Cost 函数的半衰期为 24 小时</p>
<p>　使用 Cost 负载均衡策略后，Segment 在 Historical 节点中分布情况如下：</p>
<p><img data-src="/picture/druid/apache_druid_balancer_strategy_cost.gif" alt="Apache Druid Balancer Strategy Cost"></p>
<center>（图片来源：<a href="https://github.com/apache/druid/pull/2972" target="_blank">Apache Druid</a>™ 的 PR）</center>

<p>　图中，一个点就是一个 Segment，而不同的颜色就用来标识来自不同 DataSource 的 Segment，横坐标表示不同的 Historical 节点，纵坐标表示 Segment 中 Interval 的起始时间</p>
<h3 id="查询链路"><a href="#查询链路" class="headerlink" title="查询链路"></a>查询链路</h3><pre class="mermaid">sequenceDiagram

participant Client
participant Broker
participant ZooKeeper
participant Historical
participant MiddleManager

Client -&gt;&gt;+ Broker : http request
Broker -&gt;&gt;+ ZooKeeper : get segment location info
ZooKeeper --&gt;&gt;- Broker : return segment location info
Broker -&gt;&gt; Broker : split subquery
Broker -&gt;&gt;+ MiddleManager : query new data
MiddleManager --&gt;&gt;- Broker : return new data
Broker -&gt;&gt;+ Historical : query old data
Historical --&gt;&gt;- Broker : return old data
Broker -&gt;&gt; Broker : merge results
Broker -&gt;&gt;- Client : http response</pre>

<div class="note info">对于查询来说，Broker 只会将请求分发到 MiddleManager 和 Historical，而 MetadataStorage 和 DeepStorage 都不会参与其中</div>
<div class="note info">到这里我们可以看出来，Apache Druid 属于 AP 类型的分布式系统。首先是 Availability 可用性，主要体现于，Apache Druid 集群中不存在单点问题，即便是外部组件 MetadataStorage 和 DeepStorage 全部都宕机，也是可以正常进行数据查询的。其次是 Partition Tolerance 分区容错性，则体现在 Coordinator 可以根据 Rule 设置数据的副本数量，而 DeepStorage 也是可以使用 HDFS 这类支持数据副本的存储媒介。最后是 Consistency 一致性，这一点在 Apache Druid 中相对而言是被弱化的</div>
<div class="note success">在默认 v2 版本的 GroupBy 策略下，只有字符串字典会存储在堆内内存，Segment 数据都存储在堆外内存。同时，支持将数据压缩（LZ4）并溢出到磁盘上（通过环境变量 java.io.tmpdir 控制存储路径，默认 Linux 系统下为 /tmp），以避免内存出现 OOM 问题。不过，如果用于溢出的磁盘空间不足，仍会导致查询失败。具体的溢出逻辑，详见：org.apache.druid.query.groupby.epinephelinae.SpillingGrouper#spill。另外，Broker 采用多路归并排序（K-way Merge Sort）算法，将计算结果进行汇总</div>



<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><pre class="mermaid">sequenceDiagram

participant HTTP Client
participant JDBC Driver
participant SqlResource
participant Avatica Jetty Handler
participant DruidMeta
participant Parser
participant SqlToRelConverter
participant Optimizer
participant Druid Schema
participant Druid RulesSet
participant QueryMaker
participant Query Execution

opt send SQL
HTTP Client -&gt;&gt; SqlResource : /druid/v2/sql
SqlResource -&gt;&gt; Parser : SQL
JDBC Driver -&gt;&gt; Avatica Jetty Handler : /druid/v2/sql/avatica
Avatica Jetty Handler -&gt;&gt; DruidMeta : meta
DruidMeta -&gt;&gt; Parser : SQL
end

opt parse SQL by calcite
Parser -&gt;&gt; SqlToRelConverter : SqlNode
SqlToRelConverter -&gt;&gt; Optimizer : RelNode
Optimizer -&gt;&gt; QueryMaker : DruidRel
end

opt execute SQL
QueryMaker -&gt;&gt; Query Execution : Query
end

Query Execution --&gt;&gt; HTTP Client : Result</pre>



<h3 id="整体知识树"><a href="#整体知识树" class="headerlink" title="整体知识树"></a>整体知识树</h3><p><img data-src="/picture/druid/apache_druid_ecosphere.png" alt="Apache Druid"></p>
<center>（利用 MindNode™ 绘制而成）</center>





<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="Powered-By"><a href="#Powered-By" class="headerlink" title="Powered By"></a><a href="https://druid.apache.org/druid-powered">Powered By</a></h3><p>　从 Apache Druid 官网看到有 100 多家企业都在使用，也包括了很多国内的公司，例如 BAT、字节跳动™、知乎™、优酷™、小米™、Oppo™、有赞™、作业帮™等等，大概占到 10% 左右</p>
<h3 id="主要应用"><a href="#主要应用" class="headerlink" title="主要应用"></a>主要应用</h3><ul>
<li><p>点击流分析（Web 和 移动端分析）</p>
</li>
<li><p>风控</p>
</li>
<li><p>网络遥测分析（网络性能监控）</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">协议</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">主动测量</td>
<td style="text-align:center">PING、Traceroute、Iperf、IPMP、OWAMP、TWAMP、MPLS L/DM、Pingmesh</td>
<td style="text-align:center">易用且灵活</td>
<td style="text-align:center">网络增加额外带宽 / 处理开销，会引起海森堡测不准效应</td>
</tr>
<tr>
<td style="text-align:center">被动测量</td>
<td style="text-align:center">Netflow、sFlow、IPFIX、PSAMP</td>
<td style="text-align:center">不会因测量产生额外的负载</td>
<td style="text-align:center">只能监测交换节点本地状态信息，而不能监测网络状态和丢包率等全局状态信息</td>
</tr>
<tr>
<td style="text-align:center">混合测量</td>
<td style="text-align:center">Reactive Measurement、In-band Measurement、AM-PM、Postcard Based Telemetry、In-band Flow Analyzer、Hybrid Two Steps</td>
<td style="text-align:center">能够对网络拓扑、网络性能和网络流量实现更细粒度的测量</td>
<td style="text-align:center">1. 带内网络遥测检测范围有限，预先定义的随路检测特性使得带内网络遥测往往无法及时获得全网全状态的网络视图。因此，带内网络遥测只能监测特定路径上的某些数据包的遥测数据；<br>2. 由于将遥测指令和数据封装到正常数据包中，正常数据包的有效载荷比降低，遥测开销较大；<br>3. 遥测指令和数据的构造、封装、填充和提取等环节增加了交换机处理负担</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>服务器指标存储</p>
</li>
<li><p>供应链分析（制造指标）</p>
</li>
<li><p>应用程序性能指标</p>
</li>
<li><p>商业智能 / OLAP</p>
</li>
</ul>
<h3 id="适合的场景"><a href="#适合的场景" class="headerlink" title="适合的场景"></a>适合的场景</h3><ul>
<li>插入率很高，但更新并不常见</li>
<li>大多数查询都是聚合查询和 groupBy 分组查询，包括搜索和扫描查询</li>
<li>查询响应时间为百毫秒~几秒钟之间</li>
<li>时序数据</li>
<li>可能有多个表，但是每个查询仅命中其中某一个表</li>
<li>具有高基数数据列（例如 URL，用户 ID 等），并且需要对其进行快速计数和排序</li>
<li>要从 Kafka，HDFS，本地文件或 Amazon S3、AliyunOSS 之类的对象存储中加载数据</li>
</ul>
<div class="note success">Apache Druid 支持将 groupBy 查询的中间结果溢出存储至磁盘，以应对大查询导致的内存资源不足。通过 druid.query.groupBy.maxOnDiskStorage 配置项可以控制对应的磁盘空间大小，默认值为 0，表示不开启该特性</div>

<h3 id="不合适的场景"><a href="#不合适的场景" class="headerlink" title="不合适的场景"></a>不合适的场景</h3><ul>
<li>使用主键对现有记录进行低延迟更新。 Druid 支持流式插入，但不支持流式更新（使用后台批处理作业完成更新）</li>
<li>正在构建脱机报告系统，此时查询延迟不是很重要</li>
<li>需要进行大的联接查询（将一个大事实表连接到另一个大事实表），并且可以花很长时间来完成这些查询</li>
</ul>
<div class="note danger">网上关于 Apache Druid 教程有很多，其中也会提及一些缺点，但是 Apache Druid 社区发展是十分迅速的，例如“不支持 Join”、“不能存储明细数据”之类的说法已经过时了，希望大家能够以 Apache Druid 官网提供的最新版本为准</div>





<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>　<strong>TPC</strong>™（<strong>T</strong>ransactionprocessing <strong>P</strong>erformance <strong>C</strong>ouncil，事务处理性能委员会）是一个发布基准程序的标准规范的非盈利组织。基于 TPC 定义的 TPC-H 规范，麻省大学定义了一套基准测试规范，可用于测试数据库产品在星型模式下的性能表现，即 <strong><a href="https://github.com/electrum/ssb-dbgen">SSB</a></strong>（<strong>S</strong>tar <strong>S</strong>chema <strong>B</strong>enchmark）。它将 TPC-H 的雪花模式简化为了星型模式，将基准查询由 TPC-H 的复杂 Ad-Hoc 查询改为了结构更固定的 OLAP 查询</p>
<p><img data-src="/picture/druid/apache_druid_benchmark_partition_hashing_on.png" alt="Apache Druid Benchmark with Partition Hashing On"><br><img data-src="/picture/druid/apache_druid_benchmark_partition_hashing_off.png" alt="Apache Druid Benchmark with Partition Hashing Off"></p>
<center>（图片来源：<a href="https://imply.io/post/performance-benchmark-druid-presto-hive" target="_blank">Imply</a>™ 官网）</center>





<h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="R-tree"><a href="#R-tree" class="headerlink" title="R-tree"></a>R-tree</h4><p>　一个空间数据库由一系列对应空间对象的 tuple 组成，而每一个 tuple 具有一个唯一标示（tuple identifier，简称 tupleID），数据库可以通过这个唯一标示获取到该 tuple。R-Tree 所做的就是将这些 tupleID 索引起来</p>
<h4 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h4><p>　基数计数会得到一个近似精确的计算结果，比如在执行 <code>Count</code> / <code>Distinct Count</code> 等计数查询的时候，会返回一个浮点数作为预估值</p>
<h3 id="依赖框架"><a href="#依赖框架" class="headerlink" title="依赖框架"></a>依赖框架</h3><h4 id="Apache-Calcite-查询引擎"><a href="#Apache-Calcite-查询引擎" class="headerlink" title="Apache Calcite 查询引擎"></a><a href="https://yuzhouwan.com/posts/201018/">Apache Calcite 查询引擎</a></h4><h4 id="Google-Guice-注入"><a href="#Google-Guice-注入" class="headerlink" title="Google Guice 注入"></a>Google Guice 注入</h4><h4 id="Google-Guava-扩展库"><a href="#Google-Guava-扩展库" class="headerlink" title="Google Guava 扩展库"></a>Google Guava 扩展库</h4><h4 id="JMH-压测"><a href="#JMH-压测" class="headerlink" title="JMH 压测"></a><a href="https://yuzhouwan.com/posts/190413/#JMH-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">JMH 压测</a></h4><h3 id="Query-查询流程"><a href="#Query-查询流程" class="headerlink" title="Query 查询流程"></a>Query 查询流程</h3><p><img data-src="/picture/druid/druid_query_processing.png" alt="Apache Druid Query Process"></p>
<center>（利用 StarUML™ 绘制而成）</center>







<h2 id="可视化-1"><a href="#可视化-1" class="headerlink" title="可视化"></a>可视化</h2><h3 id="Apache-Superset"><a href="#Apache-Superset" class="headerlink" title="Apache Superset"></a>Apache Superset</h3><p>　出于篇幅考虑，单独写了一篇博客，详见：<a href="https://yuzhouwan.com/posts/743/">Apache Superset 二次开发</a></p>
<h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">$ helm install my-release bitnami/grafana</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">NAME: my-release</span><br><span class="line">LAST DEPLOYED: Mon Jul 19 08:03:13 2020</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">** Please be patient <span class="keyword">while</span> the chart is being deployed **</span><br><span class="line"></span><br><span class="line">1. Get the application URL by running these commands:</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Browse to http://127.0.0.1:8080"</span></span><br><span class="line">    kubectl port-forward svc/my-release-grafana 8080:3000 &amp;</span><br><span class="line"></span><br><span class="line">2. Get the admin credentials:</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"User: admin"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Password: <span class="subst">$(kubectl get secret my-release-grafana-admin --namespace default -o jsonpath=<span class="string">"{.data.GF_SECURITY_ADMIN_PASSWORD}"</span> | base64 --decode)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ grafana-cli --pluginsDir <span class="string">"<span class="variable">${GF_PATHS_PLUGINS}</span>"</span> plugins install abhisant-druid-datasource</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> `ps -ef | grep 3000 | grep -v grep | awk <span class="string">'{print $2}'</span>`; <span class="built_in">export</span> POD_NAME=$(kubectl get pods | grep grafana | awk <span class="string">'{print $1}'</span>) ; nohup kubectl port-forward <span class="variable">$POD_NAME</span> 3000:3000 --address 0.0.0.0 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Pivot"><a href="#Pivot" class="headerlink" title="Pivot"></a>Pivot</h3><h4 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ whereis node</span><br><span class="line">  node: /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line"></span><br><span class="line">$ /usr/<span class="built_in">local</span>/bin/node -v</span><br><span class="line">  v4.2.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将环境变量引入，而不用 sudo su druid</span></span><br><span class="line">$ su - druid</span><br><span class="line"></span><br><span class="line"><span class="comment"># `--with-comments` 指标可以去掉不用，避免 comment 生成出现问题（部分注释，行开头漏 # 号的情况）</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/bin/node /home/druid/software/druid/dist/pivot/bin/pivot --druid &lt;druid.broker.host&gt;:8082 --print-config &gt; /home/druid/software/druid/dist/pivot/bin/yuzhouwan_metrics.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要使用相对路径</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/druid/software/imply-2.0.0</span><br><span class="line">$ nohup dist/pivot/bin/pivot -c /home/druid/software/druid/dist/pivot/bin/config_yuzhouwan_metrics.yaml  &gt;&gt; /home/druid/software/druid/dist/pivot/bin/nohup.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ vim /home/druid/software/druid/dist/pivot/bin/config_yuzhouwan_metrics.yaml</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在 pivot 的配置文件中，可以利用简单的表达式，进行计算，如：除以采集的时间窗口，算得 `OPS`</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">metrics02_OPS</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">metrics02</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">expression:</span> <span class="string">$main.sum($metrics02_Sum)</span> <span class="string">/</span> <span class="string">$main.sum($period_Sum)</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img data-src="/picture/druid/druid_pivot_hbase_metrics.png" alt="HBase Metrics in Pivot"></p>
<center>（对 <a href="https://docs.imply.io/on-prem/visualize/index" target="_blank">Pivot</a>™ 可视化页面的截图）</center>





<h4 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="指标项过多，维护配置困难"><a href="#指标项过多，维护配置困难" class="headerlink" title="指标项过多，维护配置困难"></a>指标项过多，维护配置困难</h5><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><p>　可以通过 <code>列转行</code> 的方式，在 <code>dimensions</code> 里面增加一个 <code>metric</code> 维度，来管理指标项。如此，可以有效地避免在 <code>metricsSpec</code> 里面维护大量的指标。同时，也方便了动态新增指标项</p>
<p>　不过，<code>列换行</code> 也会带来数据膨胀的问题。如果在资源受限的情况下，很可能还是得在 <code>metricsSepc</code> 里面维护指标。这样的话，可以使用我写的 <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-druid/src/main/java/com/yuzhouwan/bigdata/druid/util/DruidUtils.java">DruidUtils</a> 来快速生成配置文件，避免手动去维护配置</p>
<h3 id="Graphite"><a href="#Graphite" class="headerlink" title="Graphite"></a>Graphite</h3><h4 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h4><h5 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">  Linux olap03-sit.yuzhouwan.com 2.6.32-431.el6.x86_64 <span class="comment">#1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">$ cat /proc/version</span><br><span class="line">  Linux version 2.6.32-431.el6.x86_64 (mockbuild@c6b8.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) <span class="comment">#1 SMP Fri Nov 22 03:15:09 UTC 2013</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For Fedora and RHEL-derivatives</span></span><br><span class="line">$ sudo yum upgrade python-setuptools -y</span><br><span class="line">$ sudo yum install openssl openssl-devel install zlib zlib-devel readline readline-devel sqlite-devel libffi-devel -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machines</span></span><br><span class="line">druid.yuzhouwan.com        10.10.10.1        Druid</span><br><span class="line">graphite.yuzhouwan.com     192.168.1.101     Graphite</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a><a href="https://yuzhouwan.com/posts/43687/">Python</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">  Python 2.7.8</span><br><span class="line"></span><br><span class="line">  [Note]: Superset is tested using Python 2.7 and Python 3.4+. Python 3 is the recommended version, Python 2.6 won<span class="string">'t be supported.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 升级 Python（stable: Python 2.7.12 | 3.4.5, lastest: Python 3.5.2 [2016/12/15]）</span></span><br><span class="line">https://www.python.org/downloads/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 python ftp 服务器中下载到 对应版本的 python</span></span><br><span class="line">$ wget http://python.org/ftp/python/2.7.12/Python-2.7.12.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ tar -zxvf Python-2.7.12.tgz</span><br><span class="line">$ <span class="built_in">cd</span> /root/software/Python-2.7.12</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/python27/ -al</span><br><span class="line"></span><br><span class="line">  drwxr-xr-x.  6 root root 4096 12月 15 14:22 .</span><br><span class="line">  drwxr-xr-x. 13 root root 4096 12月 15 14:20 ..</span><br><span class="line">  drwxr-xr-x.  2 root root 4096 12月 15 14:22 bin</span><br><span class="line">  drwxr-xr-x.  3 root root 4096 12月 15 14:21 include</span><br><span class="line">  drwxr-xr-x.  4 root root 4096 12月 15 14:22 lib</span><br><span class="line">  drwxr-xr-x.  3 root root 4096 12月 15 14:22 share</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖原来的 python6</span></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">  /usr/<span class="built_in">local</span>/bin/python</span><br><span class="line"></span><br><span class="line">$ mv /usr/<span class="built_in">local</span>/bin/python /usr/<span class="built_in">local</span>/bin/python_old</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python27/bin/python /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 yum 引用的 python 版本为旧版 2.6 的 python</span></span><br><span class="line">$ vim /usr/bin/yum</span><br><span class="line">  <span class="comment"># 第一行修改为 python2.6</span></span><br><span class="line">  <span class="comment">#!/usr/bin/python2.6</span></span><br><span class="line"></span><br><span class="line">$ yum --version | sed <span class="string">'2,$d'</span></span><br><span class="line">  3.2.29</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Pip"><a href="#Pip" class="headerlink" title="Pip"></a>Pip</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip --version</span><br><span class="line">  pip 9.0.1 from /usr/<span class="built_in">local</span>/lib/python2.7/site-packages (python 2.7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># upgrade setup tools and pip</span></span><br><span class="line">$ pip install --upgrade setuptools pip</span><br><span class="line"></span><br><span class="line"><span class="comment">## Offline 环境下安装 pip</span></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/setuptools#code-of-conduct 下载 setuptools-32.0.0.tar.gz</span></span><br><span class="line">$ tar zxvf setuptools-32.0.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> setuptools-32.0.0</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> setuptools-32.0.0</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/pip 下载 pip-9.0.1.tar.gz</span></span><br><span class="line">$ wget --no-check-certificate https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz<span class="comment">#md5=35f01da33009719497f01a4ba69d63c9</span></span><br><span class="line">$ tar zxvf pip-9.0.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pip-9.0.1</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line">  Installed /usr/<span class="built_in">local</span>/python27/lib/python2.7/site-packages/pip-9.0.1-py2.7.egg</span><br><span class="line">  Processing dependencies <span class="keyword">for</span> pip==9.0.1</span><br><span class="line">  Finished processing dependencies <span class="keyword">for</span> pip==9.0.1</span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">  pip 9.0.1 from /root/software/pip-9.0.1 (python 2.7)</span><br></pre></td></tr></tbody></table></figure>
<h5 id="VirtualEnv"><a href="#VirtualEnv" class="headerlink" title="VirtualEnv"></a>VirtualEnv</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtualenv is shipped in Python 3 as pyvenv</span></span><br><span class="line">$ virtualenv venv</span><br><span class="line">$ . ./venv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment">## Offline 环境下安装 virtualenv</span></span><br><span class="line"><span class="comment"># https://pypi.python.org/pypi/virtualenv#downloads 下载 virtualenv-15.1.0.tar.gz</span></span><br><span class="line">$ tar zxvf virtualenv-15.1.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> virtualenv-15.1.0</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line">$ virtualenv --version</span><br><span class="line">  15.1.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Graphite-相关"><a href="#Graphite-相关" class="headerlink" title="Graphite 相关"></a>Graphite 相关</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># root@graphite-sit.yuzhouwan.com (192.168.1.102)</span></span><br><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ virtualenv -p /usr/<span class="built_in">local</span>/bin/python --system-site-packages graphite</span><br><span class="line">$ <span class="built_in">cd</span> graphite</span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br><span class="line"></span><br><span class="line">$ pip install https://github.com/graphite-project/ceres/tarball/master  (ceres-0.10.0rc1)</span><br><span class="line">$ pip install whisper                                                   (whisper-0.9.15)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># trouble shooting</span></span><br><span class="line">  $ <span class="built_in">which</span> python</span><br><span class="line">    /root/graphite/bin/python      (<span class="keyword">in</span> virtualenv, otherwise <span class="string">"/usr/local/bin/python"</span>)</span><br><span class="line"></span><br><span class="line">  $ ll /root/graphite/bin/whisper*py</span><br><span class="line">    -rwxr-xr-x 1 root root 2847 Jan  3 17:06 /root/graphite/bin/whisper-create.py</span><br><span class="line">    -rwxr-xr-x 1 root root 2208 Jan  3 17:06 /root/graphite/bin/whisper-diff.py</span><br><span class="line">    -rwxr-xr-x 1 root root 2912 Jan  3 17:06 /root/graphite/bin/whisper-dump.py</span><br><span class="line">    -rwxr-xr-x 1 root root 1790 Jan  3 17:06 /root/graphite/bin/whisper-fetch.py</span><br><span class="line">    -rwxr-xr-x 1 root root 4309 Jan  3 17:06 /root/graphite/bin/whisper-fill.py</span><br><span class="line">    -rwxr-xr-x 1 root root 1081 Jan  3 17:06 /root/graphite/bin/whisper-info.py</span><br><span class="line">    -rwxr-xr-x 1 root root  685 Jan  3 17:06 /root/graphite/bin/whisper-merge.py</span><br><span class="line">    -rwxr-xr-x 1 root root 5994 Jan  3 17:06 /root/graphite/bin/whisper-resize.py</span><br><span class="line">    -rwxr-xr-x 1 root root  929 Jan  3 17:06 /root/graphite/bin/whisper-set-aggregation-method.py</span><br><span class="line">    -rwxr-xr-x 1 root root  980 Jan  3 17:06 /root/graphite/bin/whisper-update.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ pip install carbon    (carbon-0.9.15 constantly-15.1.0 incremental-16.10.1 twisted-16.6.0 txamqp-0.6.2 zope.interface-4.3.3)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># trouble shooting</span></span><br><span class="line">  $ ll /root/graphite/bin/carbon*py</span><br><span class="line">    -rwxr-xr-x 1 root root 1095 Jan  3 17:12 /root/graphite/bin/carbon-aggregator.py</span><br><span class="line">    -rwxr-xr-x 1 root root 1095 Jan  3 17:12 /root/graphite/bin/carbon-cache.py</span><br><span class="line">    -rwxr-xr-x 1 root root 4498 Jan  3 17:12 /root/graphite/bin/carbon-client.py</span><br><span class="line">    -rwxr-xr-x 1 root root 1095 Jan  3 17:12 /root/graphite/bin/carbon-relay.py</span><br><span class="line"></span><br><span class="line">$ pip install graphite-web</span><br><span class="line">$ pip install cairocffi</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip freeze | grep graphite-web</span></span><br><span class="line"><span class="comment"># graphite-web==0.9.15</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="graphite-配置"><a href="#graphite-配置" class="headerlink" title="graphite 配置"></a>graphite 配置</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/graphite/conf      (otherwise /opt/graphite/conf)</span><br><span class="line"></span><br><span class="line">$ ls -sail</span><br><span class="line">  total 72</span><br><span class="line">  -rw-r--r-- 1 root root  1798 Jan  3 17:54 aggregation-rules.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root   274 Jan  3 17:54 blacklist.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root  2594 Jan  3 17:54 carbon.amqp.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root 17809 Jan  3 17:54 carbon.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root   888 Jan  3 17:54 relay-rules.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root   558 Jan  3 17:54 rewrite-rules.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root   827 Jan  3 17:54 storage-aggregation.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root   489 Jan  3 17:54 storage-schemas.conf.example</span><br><span class="line">  -rw-r--r-- 1 root root   315 Jan  3 17:54 whitelist.conf.example</span><br><span class="line"></span><br><span class="line">$ cp aggregation-rules.conf.example aggregation-rules.conf</span><br><span class="line">$ cp blacklist.conf.example blacklist.conf</span><br><span class="line">$ cp carbon.amqp.conf.example carbon.amqp.conf</span><br><span class="line">$ cp carbon.conf.example carbon.conf</span><br><span class="line"><span class="comment"># following 3 conf files need to install graphite-web firstly</span></span><br><span class="line">$ cp dashboard.conf.example dashboard.conf</span><br><span class="line">$ cp graphite.wsgi.example graphite.wsgi</span><br><span class="line">$ cp graphTemplates.conf.example graphTemplates.conf</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$ cp relay-rules.conf.example relay-rules.conf</span><br><span class="line">$ cp rewrite-rules.conf.example rewrite-rules.conf</span><br><span class="line">$ cp storage-aggregation.conf.example storage-aggregation.conf</span><br><span class="line">$ cp storage-schemas.conf.example storage-schemas.conf</span><br><span class="line">$ cp whitelist.conf.example whitelist.conf</span><br><span class="line"></span><br><span class="line">$ /root/graphite/bin/carbon-cache.py start</span><br><span class="line"></span><br><span class="line">  Starting carbon-cache (instance a)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># trouble shooting</span></span><br><span class="line">  $ ps -ef | grep carbon</span><br><span class="line">    root     12074     1  0 18:58 ?     00:00:00 /root/graphite/bin/python /root/graphite/bin/carbon-cache.py start</span><br><span class="line"></span><br><span class="line">  $ vim /root/graphite/conf/carbon.conf</span><br><span class="line">    <span class="comment"># carbon.conf 文件中，在 cache 区段下，接收端口这一行包含一个默认值，用于通过平文本协议（plaintext protocol）接受输入指标项</span></span><br><span class="line">    [cache]</span><br><span class="line">    LINE_RECEIVER_INTERFACE = 0.0.0.0</span><br><span class="line">    LINE_RECEIVER_PORT = 2003</span><br><span class="line"></span><br><span class="line">  $ yum install nc -y</span><br><span class="line">  <span class="comment"># echo "&lt;metric path&gt; &lt;metric value&gt; &lt;metric timestamp&gt;" | nc -q0 ${SERVER} ${PORT}</span></span><br><span class="line">  $ <span class="built_in">echo</span> <span class="string">"carbon.agents.graphite-tutorial.metricsReceived 28198 `date +%s`"</span> | nc -c localhost 2003</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Carbon 与 Whisper 交互，将这些时间序列数据存储到文件系统中，可以用 whisper-info 脚本获取为这些指标项创建的 Whisper 文件的元数据信息</span></span><br><span class="line">  $ /root/graphite/bin/whisper-info.py /root/graphite/storage/whisper/carbon/agents/graphite-tutorial/metricsReceived.wsp</span><br></pre></td></tr></tbody></table></figure>
<h5 id="graphite-web-应用"><a href="#graphite-web-应用" class="headerlink" title="graphite web 应用"></a>graphite web 应用</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># dependency</span></span><br><span class="line"><span class="comment"># pip install Django==1.9.12 会导致 'WSGIRequest' object has no attribute 'REQUEST' 异常</span></span><br><span class="line">$ pip install django==1.8.17</span><br><span class="line">$ pip install django-tagging</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite</span><br><span class="line">$ cp local_settings.py.example local_settings.py</span><br><span class="line"><span class="comment"># 创建 SQLite3 数据库 &amp; 赋读写权限 &amp; 修改 local_settings.py</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/conf</span><br><span class="line">$ cp dashboard.conf.example dashboard.conf</span><br><span class="line">$ cp graphTemplates.conf.example graphTemplates.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># init database</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/</span><br><span class="line">$ python /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/manage.py syncdb</span><br><span class="line"></span><br><span class="line"> Would you like to create one now? (yes/no): yes</span><br><span class="line"> Username (leave blank to use <span class="string">'root'</span>): graphite</span><br><span class="line"> Email address: bj@yuzhouwan.com</span><br><span class="line"> Password:</span><br><span class="line"> Password (again):</span><br><span class="line"> Superuser created successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment"># start</span></span><br><span class="line">$ mkdir -p /root/graphite/storage/<span class="built_in">log</span>/webapp/</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">''</span> &gt; /root/graphite/storage/<span class="built_in">log</span>/webapp/process.log</span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite</span><br><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=8085 --libs=/root/graphite/lib/python2.7/site-packages/opt/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 或者用，python /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/manage.py runserver 0.0.0.0:8085</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># trouble shooting</span></span><br><span class="line">  $ tail -f /root/graphite/storage/<span class="built_in">log</span>/webapp/process.log</span><br><span class="line">  http://192.168.1.102:8085/</span><br></pre></td></tr></tbody></table></figure>
<h5 id="graphite-events"><a href="#graphite-events" class="headerlink" title="graphite events"></a>graphite events</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># PYTHONPATH=$GRAPHITE_ROOT/webapp django-admin.py migrate --settings=graphite.settings --run-syncdb</span></span><br><span class="line">$ PYTHONPATH=/root/graphite/lib/python2.7/site-packages/opt/graphite/webapp django-admin.py migrate --settings=graphite.settings --run-syncdb</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">Operations to perform:</span><br><span class="line">  Synchronize unmigrated apps: account, cli, render, whitelist, metrics, url_shortener, dashboard, composer, events, browser</span><br><span class="line">  Apply <span class="built_in">all</span> migrations: admin, contenttypes, tagging, auth, sessions</span><br><span class="line">Synchronizing apps without migrations:</span><br><span class="line">  Creating tables...</span><br><span class="line">  Running deferred SQL...</span><br><span class="line">Running migrations:</span><br><span class="line">  Rendering model states... DONE</span><br><span class="line">  Applying admin<span class="number">.0002</span>_logentry_remove_auto_add... OK</span><br><span class="line">  Applying auth<span class="number">.0007</span>_alter_validators_add_error_messages... OK</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -X POST <span class="string">"http://10.10.10.2:8085/events/"</span> -d <span class="string">'{ "what": "Event - deploy", "tags": ["deploy"], "when": 1467844481, "data": "deploy of master branch happened at Wed Jul  6 22:34:41 UTC 2016" }'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># trouble shooting</span></span><br><span class="line">http://10.10.10.2:8085/events/  graphite events  when  what  tags</span><br><span class="line">22:34:41 Wed 06 Jul 2016        Event - deploy        [u<span class="string">'deploy'</span>]</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ curl -s <span class="string">"http://10.10.10.2:8085/render/?target=events('exception')&amp;format=json"</span> | json_pp</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"events(exception)"</span>,</span><br><span class="line">    <span class="attr">"datapoints"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">1388966651</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        <span class="number">1388966652</span></span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="graphite-index"><a href="#graphite-index" class="headerlink" title="graphite-index"></a>graphite-index</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># douban new UI for graphite</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/douban/graph-index.git</span><br><span class="line">$ <span class="built_in">cd</span> graph-index</span><br><span class="line"></span><br><span class="line">$ vim config.py</span><br><span class="line">  graphite_url = <span class="string">'http://192.168.1.101:9097'</span></span><br><span class="line"></span><br><span class="line">$ crontab -e</span><br><span class="line">  */5 * * * * python /root/software/graphite-index</span><br><span class="line"></span><br><span class="line">$ python /graph-index.py</span><br></pre></td></tr></tbody></table></figure>
<h4 id="整合-Druid"><a href="#整合-Druid" class="headerlink" title="整合 Druid"></a>整合 Druid</h4><h5 id="迁移到内网环境"><a href="#迁移到内网环境" class="headerlink" title="迁移到内网环境"></a>迁移到内网环境</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 192.168.1.102 to 10.10.10.2 (sit)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps -ef | grep graphite # 关闭所有进程</span></span><br><span class="line"><span class="comment"># rsync 替换 scp 可以确保软链接也能被 cp（补充：用 tar zcvf 打包也是不能解决的）</span></span><br><span class="line">$ rsync -avuz -e ssh /root/graphite root@10.10.10.2:/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.1.102 to 192.168.2.101 to 192.168.1.101 (product)</span></span><br><span class="line">$ rsync -avuz -e ssh /root/graphite jinjy@192.168.2.101:/home/jinjy</span><br><span class="line">$ rsync -avuz -e ssh /home/jinjy/graphite root@192.168.1.101:/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># default: --port=8085</span></span><br><span class="line">$ /root/graphite/bin/carbon-cache.py start</span><br><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=9097 --libs=/root/graphite/lib/python2.7/site-packages/opt/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># trouble shooting</span></span><br><span class="line">$ ps -ef | grep graphite</span><br><span class="line">  root     30754     1  0 15:42 ?        00:00:00 /root/graphite/bin/python /root/graphite/bin/carbon-cache.py start</span><br><span class="line">  root     30825 28048  3 15:43 pts/1    00:00:00 /root/graphite/bin/python /root/graphite/bin/django-admin runserver --pythonpath /root/graphite/webapp --settings graphite.settings 0.0.0.0:9097</span><br><span class="line">  root     30829 30825  5 15:43 pts/1    00:00:00 /root/graphite/bin/python /root/graphite/bin/django-admin runserver --pythonpath /root/graphite/webapp --settings graphite.settings 0.0.0.0:9097</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/storage/<span class="built_in">log</span>/carbon-cache/carbon-cache-a</span><br><span class="line">  tail -f console.log creates.log listener.log                <span class="comment"># carbon 接收 event 事件相关的日志记录</span></span><br><span class="line">  tail -f /root/graphite/storage/<span class="built_in">log</span>/webapp/process.log</span><br><span class="line"></span><br><span class="line">http://192.168.1.101:9097/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line">$ rsync -avuz -e ssh /root/software jinjy@192.168.1.101:/home/jinjy</span><br><span class="line">$ rsync -avuz -e ssh /home/jinjy/software/Python-2.7.12.tgz root@192.168.1.101:/root/software</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/software</span><br><span class="line">$ tar zxvf Python-2.7.12.tgz</span><br><span class="line">$ <span class="built_in">cd</span> Python-2.7.12</span><br><span class="line"></span><br><span class="line">$ ./configure --prefix=/usr --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make -j4 &amp;&amp; make -j4 install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line">$ python -V</span><br><span class="line">  Python 2.7.12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然软链接已经 rsync 过来了，但是目标机器相关目录下，没有对应的 python 的动态链接库</span></span><br><span class="line">$ file /root/graphite/lib/python2.7/lib-dynload</span><br><span class="line">  /root/graphite/lib/python2.7/lib-dynload: broken symbolic link to `/usr/<span class="built_in">local</span>/python27/lib/python2.7/lib-dynload<span class="string">'	'</span>`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要和联网环境中，创建 virtualenv 时的 python 全局环境一致</span></span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python27 --enable-shared CFLAGS=-fPIC</span><br><span class="line">$ make -j4 &amp;&amp; make -j4 install</span><br><span class="line">$ /sbin/ldconfig -v | grep /</span><br><span class="line"></span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/python27/lib/python2.7/lib-dynload -sail</span><br></pre></td></tr></tbody></table></figure>
<h5 id="修改-Druid-配置"><a href="#修改-Druid-配置" class="headerlink" title="修改 Druid 配置"></a>修改 Druid 配置</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo su druid</span><br><span class="line">$ <span class="built_in">cd</span> /home/druid/software/druid</span><br><span class="line"></span><br><span class="line">$ find | grep common.runtime.properties | grep -v quickstart | grep -v dist</span><br><span class="line">  ./conf/druid/_common/common.runtime.properties</span><br><span class="line"></span><br><span class="line">$ cp /home/druid/software/druid/conf/druid/_common/common.runtime.properties /home/druid/software/druid/conf/druid/_common/common.runtime.properties.bak</span><br><span class="line">$ vim /home/druid/software/druid/conf/druid/_common/common.runtime.properties</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># module</span></span><br><span class="line"><span class="meta">druid.extensions.loadList</span>=<span class="string">[..., "graphite-emitter"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Monitoring</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="meta">druid.monitoring.monitors</span>=<span class="string">["com.metamx.metrics.JvmMonitor"]</span></span><br><span class="line"><span class="meta">druid.emitter</span>=<span class="string">http</span></span><br><span class="line"><span class="comment">#druid.emitter=logging</span></span><br><span class="line"><span class="meta">druid.emitter.logging.logLevel</span>=<span class="string">info</span></span><br><span class="line"><span class="meta">druid.emitter.http.recipientBaseUrl</span>=<span class="string">http://10.37.2.142:9999/metrics</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># monitor</span></span><br><span class="line"><span class="meta">druid.monitoring.monitors</span>=<span class="string">["com.metamx.metrics.JvmMonitor"]</span></span><br><span class="line"><span class="meta">druid.emitter</span>=<span class="string">composing</span></span><br><span class="line"><span class="meta">druid.emitter.composing.emitters</span>=<span class="string">["graphite", "logging"]</span></span><br><span class="line"><span class="meta">druid.emitter.graphite.hostname</span>=<span class="string">localhost</span></span><br><span class="line"><span class="comment"># 端口需要注意，不是 2003（即，非 /root/graphite/conf/carbon.conf 中的 LINE_RECEIVER_PORT or LINE_RECEIVER_PORT，而是 PICKLE_RECEIVER_PORT）</span></span><br><span class="line"><span class="meta">druid.emitter.graphite.port</span>=<span class="string">2004</span></span><br><span class="line"><span class="comment"># druid.emitter.graphite.eventConverter={"type":"whiteList", "namespacePrefix": "cluster_x", "ignoreHostname":true, "ignoreServiceName":false, "mapFile":"/a/b/c"}</span></span><br><span class="line"><span class="meta">druid.emitter.graphite.eventConverter</span>=<span class="string">{"ingest/events/thrownAway":["dataSource"],"ingest/events/unparseable":["dataSource"],"ingest/events/processed":["dataSource"],"ingest/handoff/failed":["dataSource"],"ingest/persists":[],"ingest/rows/output":[],"jvm/gc":[],"jvm/mem":[],"query/cpu/time":["dataSource","type"],"query/node/time":["dataSource","type"],"query/node/ttfb":["dataSource","type"],"query/partial/time":["dataSource","type"],"query/segment/time":["dataSource","type"],"query/segmentAndCache/time":["dataSource","type"],"query/time":["dataSource","type"],"query/wait/time":["dataSource","type"],"segment/count":[],"segment/dropQueue/count":[],"segment/loadQueue/count":[],"segment/loadQueue/failed":[],"segment/loadQueue/size":[],"segment/scan/pending":[],"segment/size":[],"segment/usedPercent":[]}</span></span><br><span class="line"><span class="meta">druid.emitter.logging.logLevel</span>=<span class="string">info</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">druid.emitter.graphite.eventConverter</span>=<span class="string">{"type":"all", "namespacePrefix": "druid", "ignoreHostname": false, "ignoreServiceName": false}</span></span><br><span class="line"><span class="comment">## pertty format start ##</span></span><br><span class="line"><span class="attr">{</span></span><br><span class="line">  <span class="meta">"ingest/events/thrownAway"</span>: <span class="string">["dataSource"],</span></span><br><span class="line">  <span class="meta">"ingest/events/unparseable"</span>: <span class="string">["dataSource"],</span></span><br><span class="line">  <span class="meta">"ingest/events/processed"</span>: <span class="string">["dataSource"],</span></span><br><span class="line">  <span class="meta">"ingest/handoff/failed"</span>: <span class="string">["dataSource"],</span></span><br><span class="line">  <span class="meta">"ingest/persists"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"ingest/rows/output"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"jvm/gc"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"jvm/mem"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"query/cpu/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/node/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/node/ttfb"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/partial/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/segment/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/segmentAndCache/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"query/wait/time"</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">"dataSource",</span></span><br><span class="line">    <span class="attr">"type"</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="meta">"segment/count"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/dropQueue/count"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/loadQueue/count"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/loadQueue/failed"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/loadQueue/size"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/scan/pending"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/size"</span>: <span class="string">[],</span></span><br><span class="line">  <span class="meta">"segment/usedPercent"</span>: <span class="string">[]</span></span><br><span class="line"><span class="attr">}</span></span><br><span class="line"><span class="comment">## pertty format end ##</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># kill historical process to make configure activate</span></span><br><span class="line">$ jps -m</span><br><span class="line">  1867 Main server historical</span><br><span class="line">  26339 Main server middleManager</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">kill</span> 1867</span><br></pre></td></tr></tbody></table></figure>
<h5 id="校验-2"><a href="#校验-2" class="headerlink" title="校验"></a>校验</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tail -f var/sv/supervise.log</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[Thu Jan  <span class="number">5</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">17</span> <span class="number">2017</span>] Running command[historical], logging to[/home/druid/software/imply-<span class="number">2.0</span><span class="number">.0</span>/<span class="keyword">var</span>/sv/historical.log]: bin/run-druid historical conf</span><br><span class="line">[Thu Jan  <span class="number">5</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">21</span> <span class="number">2017</span>] Command[historical] exited (pid = <span class="number">1752</span>, exited = <span class="number">1</span>)</span><br><span class="line">[Thu Jan  <span class="number">5</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">21</span> <span class="number">2017</span>] Command[historical] failed, see logfile <span class="keyword">for</span> more details: /home/druid/software/imply-<span class="number">2.0</span><span class="number">.0</span>/<span class="keyword">var</span>/sv/historical.log</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tail -f  /home/druid/software/imply-2.0.0/var/sv/historical.log</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">01</span>-05T11:<span class="number">34</span>:<span class="number">29</span>,<span class="number">203</span> INFO [GraphiteEmitter-<span class="number">1</span>] io.druid.emitter.graphite.GraphiteEmitter - trying to connect to graphite server</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">如果连接不上，会报错 ERROR [GraphiteEmitter-1] io.druid.emitter.graphite.GraphiteEmitter - 拒绝连接，则需要检查 Graphite 进程是否运行正常</div>



<h4 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><h6 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip freeze | grep Django</span><br><span class="line">  Django==1.8</span><br><span class="line"></span><br><span class="line">$ pip install --upgrade Django</span><br><span class="line">  Successfully installed Django-1.10.5</span><br><span class="line"></span><br><span class="line">$ pip uninstall Django</span><br><span class="line">$ pip install Django==1.8.17</span><br></pre></td></tr></tbody></table></figure>
<div class="note warning">高版本 Django 会导致 'WSGIRequest' object has no attribute 'REQUEST' 异常</div>

<h6 id="Graphite-Web-相关"><a href="#Graphite-Web-相关" class="headerlink" title="Graphite-Web 相关"></a>Graphite-Web 相关</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim requirements.txt</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">python-memcached</span>=<span class="string">=1.47</span></span><br><span class="line"><span class="attr">txAMQP</span>=<span class="string">=0.4</span></span><br><span class="line"><span class="attr">simplejson</span>=<span class="string">=2.1.6</span></span><br><span class="line"><span class="meta">django-tagging</span>=<span class="string">=0.4.3</span></span><br><span class="line"><span class="attr">gunicorn</span></span><br><span class="line"><span class="attr">pytz</span></span><br><span class="line"><span class="attr">pyparsing</span>=<span class="string">=1.5.7</span></span><br><span class="line"><span class="attr">cairocffi</span></span><br><span class="line"><span class="attr">whitenoise</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>
<h5 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /root/graphite/conf/storage-schemas.conf</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">[carbon]</span></span><br><span class="line"><span class="attr">pattern</span> = <span class="string">^carbon\.</span></span><br><span class="line"><span class="attr">retentions</span> = <span class="string">60:90d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[default_1min_for_1day]</span></span><br><span class="line"><span class="attr">pattern</span> = <span class="string">.*</span></span><br><span class="line"><span class="comment"># retentions = 60s:1d</span></span><br><span class="line"><span class="comment"># 改为 3 种时间粒度</span></span><br><span class="line"><span class="attr">retentions</span> = <span class="string">10s:6h,1m:7d,10m:1y</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python /root/graphite/examples/example-client.py</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">sending message</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">system.loadavg_1min <span class="number">0.26</span> <span class="number">1483690449</span></span><br><span class="line">system.loadavg_5min <span class="number">0.30</span> <span class="number">1483690449</span></span><br><span class="line">system.loadavg_15min <span class="number">0.35</span> <span class="number">1483690449</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="启动命令汇总"><a href="#启动命令汇总" class="headerlink" title="启动命令汇总"></a>启动命令汇总</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/manage.py syncdb</span><br><span class="line">$ PYTHONPATH=/root/graphite/lib/python2.7/site-packages/opt/graphite/webapp django-admin.py migrate --settings=graphite.settings --run-syncdb</span><br><span class="line"></span><br><span class="line">$ /root/graphite/bin/carbon-cache.py start</span><br><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=9097 --libs=/root/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="踩过的坑-1"><a href="#踩过的坑-1" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><h5 id="ImportError-No-module-named-carbon-util"><a href="#ImportError-No-module-named-carbon-util" class="headerlink" title="ImportError: No module named carbon.util"></a>ImportError: No module named carbon.util</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(graphite) [root@graphite-sit.yuzhouwan.com conf]<span class="comment"># /root/graphite/bin/carbon-cache.py start</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/root/graphite/bin/carbon-cache.py"</span>, line <span class="number">28</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> carbon.util <span class="keyword">import</span> run_twistd_plugin</span><br><span class="line">ImportError: No module named carbon.util</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h6><ul>
<li>检查 carbon 是否已安装</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ pip freeze</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">carbon</span>=<span class="string">=0.9.15</span></span><br><span class="line"><span class="attr">ceres</span>=<span class="string">=0.10.0rc1</span></span><br><span class="line"><span class="attr">constantly</span>=<span class="string">=15.1.0</span></span><br><span class="line"><span class="attr">incremental</span>=<span class="string">=16.10.1</span></span><br><span class="line"><span class="attr">Twisted</span>=<span class="string">=16.6.0</span></span><br><span class="line"><span class="attr">txAMQP</span>=<span class="string">=0.6.2</span></span><br><span class="line"><span class="attr">whisper</span>=<span class="string">=0.9.15</span></span><br><span class="line"><span class="meta">zope.interface</span>=<span class="string">=4.3.3</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>graphiteˊs default prefix (/opt/graphite)</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mv /root/graphite/lib/python2.7/site-packages/opt/graphite/lib/carbon /root/graphite/lib/python2.7/site-packages/</span><br><span class="line">$ mv /root/graphite/lib/python2.7/site-packages/opt/graphite/lib/twisted/plugins/carbon_* /root/graphite/lib/python2.7/site-packages/twisted/plugins/</span><br></pre></td></tr></tbody></table></figure>
<h5 id="django-db-utils-OperationalError-unable-to-open-database-file"><a href="#django-db-utils-OperationalError-unable-to-open-database-file" class="headerlink" title="django.db.utils.OperationalError: unable to open database file"></a>django.db.utils.OperationalError: unable to open database file</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python manage.py syncdb</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">/root/graphite/lib/python2<span class="number">.7</span>/site-packages/opt/graphite/webapp/graphite/settings.py:<span class="number">246</span>: UserWarning: SECRET_KEY <span class="keyword">is</span> <span class="built_in">set</span> to an unsafe default. This should be <span class="built_in">set</span> <span class="keyword">in</span> local_settings.py <span class="keyword">for</span> better security</span><br><span class="line">warn(<span class="string">'SECRET_KEY is set to an unsafe default. This should be set in local_settings.py for better security'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"manage.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  execute_from_command_line(sys.argv)</span><br><span class="line">File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/core/management/__init__.py"</span>, line <span class="number">338</span>, <span class="keyword">in</span> execute_from_command_line</span><br><span class="line">utility.execute()</span><br><span class="line">// ...</span><br><span class="line">django.db.utils.OperationalError: unable to <span class="built_in">open</span> database file</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h6><ul>
<li>change default SECRET_KEY in settings.py</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/settings.py</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Django 1.5 requires this so we set a default but warn the user</span></span><br><span class="line"><span class="comment"># SECRET_KEY = 'UNSAFE_DEFAULT'</span></span><br><span class="line">SECRET_KEY = <span class="string">'graphite'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>change DATABASE_NAME in sqlites</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir /root/graphite/sqlite</span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/sqlite</span><br><span class="line"></span><br><span class="line"><span class="comment"># create database</span></span><br><span class="line">$ sqlite3 graphite.db</span><br><span class="line">$ sqlite3</span><br><span class="line">sqlite&gt;.<span class="built_in">help</span></span><br><span class="line">sqlite&gt;.databases</span><br><span class="line">  seq  name             file</span><br><span class="line">  ---  ---------------  ------------------------------------------</span><br><span class="line">  0    main             /root/graphite/sqlite/graphite.db</span><br><span class="line"></span><br><span class="line">  Crtl + D (<span class="built_in">exit</span> like python)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># change DATABASE_NAME</span></span><br><span class="line">  DATABASE_NAME=<span class="string">'/root/graphite/sqlite/graphite.db'</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$DATABASE_NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run 'python manage.py syncdb' again, then the graphite database disappeared</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>modify settings.py for sqlite database</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/graphite/storage</span><br><span class="line">$ mkdir db</span><br><span class="line">$ <span class="built_in">cd</span> db</span><br><span class="line">$ sqlite3 graphite.db</span><br><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/django/conf/project_template/project_name/settings.py</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># GRAPHITE_STORAGE_DIR = '/root/graphite/sqlite/graphite.db'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#DATABASES = {</span></span><br><span class="line"><span class="comment">#    'default': {</span></span><br><span class="line"><span class="comment">#        'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line"><span class="comment">#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line"><span class="comment">#    }</span></span><br><span class="line"><span class="comment">#}</span></span><br><span class="line">DATABASES = {</span><br><span class="line">  <span class="string">'default'</span>: {</span><br><span class="line">    <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">    <span class="string">'NAME'</span>: <span class="string">'/root/graphite/storage/db/graphite.db'</span>, <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">    <span class="string">'USER'</span>: <span class="string">''</span>, <span class="comment"># Not used with sqlite3.</span></span><br><span class="line">    <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment"># Not used with sqlite3.</span></span><br><span class="line">    <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for localhost. Not used with sqlite3.</span></span><br><span class="line">    <span class="string">'PORT'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for default. Not used with sqlite3.</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># trouble shooting</span></span><br><span class="line">$ sqlite3 /root/graphite/storage/db/graphite.db</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">SQLite version 3.6.20</span><br><span class="line">Enter <span class="string">".help"</span> <span class="keyword">for</span> instructions</span><br><span class="line">Enter SQL statements terminated with a <span class="string">";"</span></span><br><span class="line">sqlite&gt; .databases</span><br><span class="line">seq  name             file</span><br><span class="line">---  ---------------  --------------------------------------</span><br><span class="line">0    main             /root/graphite/storage/db/graphite.db</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/graphite/</span><br><span class="line">$ find | grep /settings.py | grep -v pyc</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./lib/python2.7/site-packages/opt/graphite/webapp/graphite/settings.py</span><br><span class="line">./lib/python2.7/site-packages/tagging/tests/settings.py</span><br><span class="line">./lib/python2.7/site-packages/tagging/settings.py</span><br><span class="line">./lib/python2.7/site-packages/django/conf/project_template/project_name/settings.py</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">全部修改完成，即可修复</div>

<ul>
<li>检查 Django 是否版本过低（&lt;= v1.4）</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ django-admin version</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1.8</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>检查访问权限</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cut -d: -f1 /etc/passwd | grep graphite</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$USER</span></span><br><span class="line">  root</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/storage/db</span><br><span class="line">$ sudo chown root:root graphite.db</span><br><span class="line">$ sudo chmod o+rw graphite.db</span><br><span class="line">$ sudo chmod o+rwx db/</span><br><span class="line">$ sudo chmod o+rwx ../webapp/</span><br></pre></td></tr></tbody></table></figure>
<h5 id="ImportError-No-module-named-graphite-settings"><a href="#ImportError-No-module-named-graphite-settings" class="headerlink" title="ImportError: No module named graphite.settings"></a>ImportError: No module named graphite.settings</h5><h6 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./bin/run-graphite-devel-server.py --port=8085 --libs=/root/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">tail: /root/graphite/storage/log/webapp/process.log: file truncated</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/root/graphite/bin/django-admin"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  sys.exit(execute_from_command_line())</span><br><span class="line">  File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/core/management/__init__.py"</span>, line <span class="number">338</span>, <span class="keyword">in</span> execute_from_command_line</span><br><span class="line">  utility.execute()</span><br><span class="line">  File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/core/management/__init__.py"</span>, line <span class="number">303</span>, <span class="keyword">in</span> execute</span><br><span class="line">  settings.INSTALLED_APPS</span><br><span class="line">  File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/conf/__init__.py"</span>, line <span class="number">48</span>, <span class="keyword">in</span> __getattr__</span><br><span class="line">  self._setup(name)</span><br><span class="line">  File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/conf/__init__.py"</span>, line <span class="number">44</span>, <span class="keyword">in</span> _setup</span><br><span class="line">  self._wrapped = Settings(settings_module)</span><br><span class="line">  File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/conf/__init__.py"</span>, line <span class="number">92</span>, <span class="keyword">in</span> __init__</span><br><span class="line">  mod = importlib.import_module(self.SETTINGS_MODULE)</span><br><span class="line">  File <span class="string">"/usr/local/python27/lib/python2.7/importlib/__init__.py"</span>, line <span class="number">37</span>, <span class="keyword">in</span> import_module</span><br><span class="line">  <span class="built_in">__import__</span>(name)</span><br><span class="line">ImportError: No module named graphite.settings</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h6><ul>
<li>修改 local_settings.py</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/local_settings.py</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'/root/graphite/storage/db/graphite.db'</span>, <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">''</span>, <span class="comment"># Not used with sqlite3.</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment"># Not used with sqlite3.</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for localhost. Not used with sqlite3.</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for default. Not used with sqlite3.</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>指定 PYTHONPATH</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=8085 --libs=/root/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># new problem</span></span><br><span class="line">  ImportError: Cannot import either sping or piddle.</span><br><span class="line"></span><br><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=8085 --libs=/root/graphite/lib/python2.7/site-packages/opt/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="OError-Errno-2-No-such-file-or-directory-‘-root-graphite-lib-python2-7-site-packages-opt-graphite-storage-log-webapp-info-log’"><a href="#OError-Errno-2-No-such-file-or-directory-‘-root-graphite-lib-python2-7-site-packages-opt-graphite-storage-log-webapp-info-log’" class="headerlink" title="OError: [Errno 2] No such file or directory: ‘/root/graphite/lib/python2.7/site-packages/opt/graphite/storage/log/webapp/info.log’"></a>OError: [Errno 2] No such file or directory: ‘/root/graphite/lib/python2.7/site-packages/opt/graphite/storage/log/webapp/info.log’</h5><h6 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h6><p>　访问 <code>http://192.168.1.102:8085/</code> 返回如下信息：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"/root/graphite/lib/python2.7/site-packages/django/core/handlers/base.py"</span>, line <span class="number">119</span>, <span class="keyword">in</span> get_response</span><br><span class="line">resolver_match = resolver.resolve(request.path_info)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">File <span class="string">"/usr/local/python27/lib/python2.7/logging/__init__.py"</span>, line <span class="number">943</span>, <span class="keyword">in</span> _<span class="built_in">open</span></span><br><span class="line">stream = <span class="built_in">open</span>(self.baseFilename, self.mode)</span><br><span class="line">IOError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'/root/graphite/lib/python2.7/site-packages/opt/graphite/storage/log/webapp/info.log'</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h6><ul>
<li>增加 <code>info.log</code> 文件</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir -p /root/graphite/lib/python2.7/site-packages/opt/graphite/storage/<span class="built_in">log</span>/webapp/</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">''</span> &gt; /root/graphite/lib/python2.7/site-packages/opt/graphite/storage/<span class="built_in">log</span>/webapp/info.log</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Graphite-Web-页面无-event-数据"><a href="#Graphite-Web-页面无-event-数据" class="headerlink" title="Graphite Web 页面无 event 数据"></a>Graphite Web 页面无 event 数据</h5><h6 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 访问 http://192.168.1.101:9097/events/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Druid 中是能看到 historical 进程的确在产生数据，并且成功连接到了 graphite</span></span><br><span class="line">$ tail -f /home/druid/software/imply-2.0.0/var/sv/historical.log</span><br><span class="line"></span><br><span class="line">  2017-01-05T11:34:29,203 INFO [GraphiteEmitter-1] io.druid.emitter.graphite.GraphiteEmitter - trying to connect to graphite server</span><br><span class="line">  <span class="comment"># 如果连接不上，会报错 ERROR [GraphiteEmitter-1] io.druid.emitter.graphite.GraphiteEmitter - 拒绝连接</span></span><br><span class="line">  <span class="comment"># 则检查 graphite 进程是否正常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Graphite 中也能看到数据被收到了</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/storage/<span class="built_in">log</span>/carbon-cache/carbon-cache-a</span><br><span class="line">$ tail -f console.log creates.log listener.log</span><br><span class="line"></span><br><span class="line">  05/01/2017 20:05:18 :: Sorted 75 cache queues <span class="keyword">in</span> 0.000208 seconds</span><br><span class="line">  <span class="comment"># 如果数据有误，会报错 05/01/2017 20:32:32 :: invalid line ((L1483619493L) received from client 10.10.10.1:41752, ignoring</span></span><br><span class="line">  <span class="comment"># 则检查 druid emitter 配置是否正常</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h6><ul>
<li>是否是 SQLite 数据库没有成功存储</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># graphite 配置没有问题</span></span><br><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/django/conf/project_template/project_name/settings.py</span><br><span class="line"></span><br><span class="line">  DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">      <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">      <span class="string">'NAME'</span>: <span class="string">'/root/graphite/storage/db/graphite.db'</span>, <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">      <span class="string">'USER'</span>: <span class="string">''</span>, <span class="comment"># Not used with sqlite3.</span></span><br><span class="line">      <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment"># Not used with sqlite3.</span></span><br><span class="line">      <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for localhost. Not used with sqlite3.</span></span><br><span class="line">      <span class="string">'PORT'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for default. Not used with sqlite3.</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现 sqlite 中并没有将 events 记录下来</span></span><br><span class="line">(graphite) [root@kylin03-pre db]<span class="comment"># sqlite3 /root/graphite/storage/db/graphite.db </span></span><br><span class="line">SQLite version 3.6.20</span><br><span class="line">Enter <span class="string">".help"</span> <span class="keyword">for</span> instructions</span><br><span class="line">Enter SQL statements terminated with a <span class="string">";"</span></span><br><span class="line">sqlite&gt; .databases</span><br><span class="line">  seq  name             file</span><br><span class="line">  ---  ---------------  ----------------------------------------</span><br><span class="line">  0    main             /root/graphite/storage/db/graphite.db</span><br><span class="line">  sqlite&gt; .tables</span><br><span class="line">    account_mygraph             dashboard_dashboard</span><br><span class="line">    account_profile             dashboard_dashboard_owners</span><br><span class="line">    account_variable            django_admin_log</span><br><span class="line">    account_view                django_content_type</span><br><span class="line">    account_window              django_migrations</span><br><span class="line">    auth_group                  django_session</span><br><span class="line">    auth_group_permissions      events_event</span><br><span class="line">    auth_permission             tagging_tag</span><br><span class="line">    auth_user                   tagging_taggeditem</span><br><span class="line">    auth_user_groups            url_shortener_link</span><br><span class="line">    auth_user_user_permissions</span><br><span class="line">  sqlite&gt; select * from auth_user;</span><br><span class="line">    1|pbkdf2_sha256$20000$oEgzveEmcg9B<span class="variable">$8xbilUymXlwVBAaB48xpUQwsfIucmeP</span>/4C4YF3U6SlI=|1|graphite|||bj@yuzhouwan.com|1|1|2017-01-04 05:59:10.615950|2017-01-05 08:24:54.957631</span><br><span class="line">    2|pbkdf2_sha256$20000$gG1lK6FNg0h7<span class="variable">$dXH47Wqc</span>+Gj/qTyI6EKOajd+Pj1kKN+U5CtnmDo0K/0=|0|default|||default@localhost.localdomain|0|1|2017-01-04 06:53:34.687401|</span><br><span class="line">    3|pbkdf2_sha256$20000$fcQ5sYbw0cjk<span class="variable">$anjZc4J0eRE51HGJ6D50c0c9</span>+d08iY7lhWseke9RmEY=|0|druid||||0|1|2017-01-05 09:03:48.696161|</span><br><span class="line">  sqlite&gt; select * from events_event;      <span class="comment"># no data!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试使用 MySQL 替换 SQLite</span></span><br><span class="line"><span class="comment"># 192.168.1.102</span></span><br><span class="line">$ mkdir -p /root/software/mysql</span><br><span class="line">  yum install -y --downloadonly --downloaddir=/root/software/mysql mysql</span><br><span class="line">  yum install -y --downloadonly --downloaddir=/root/software/mysql mysql-server</span><br><span class="line">  yum install -y --downloadonly --downloaddir=/root/software/mysql MySQL-python</span><br><span class="line">  <span class="comment"># 192.168.1.101</span></span><br><span class="line">  yum install -y mysql mysql-server MySQL-python</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/software/mysql</span><br><span class="line">$ wget http://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm</span><br><span class="line">$ yum localinstall mysql57-community-release-el5-7.noarch.rpm</span><br><span class="line">$ yum repolist enabled | grep <span class="string">"mysql.*-community.*"</span></span><br><span class="line">$ yum install mysql-community-server</span><br><span class="line">$ vim /usr/bin/yum-config-manager</span><br><span class="line">  <span class="comment">#!/usr/bin/python2.6 -tt</span></span><br><span class="line"></span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br><span class="line">$ service mysqld start</span><br><span class="line"></span><br><span class="line">$ mysql -uroot -p -S /home/mysql/data/mysql.sock</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 后面规范化部署的时候，可以创建 graphite 用户，并赋权</span></span><br><span class="line">  CREATE DATABASE graphite;</span><br><span class="line">  <span class="comment"># GRANT ALL PRIVILEGES ON graphite.* TO 'graphite'@'localhost' IDENTIFIED BY 'sysadmin';</span></span><br><span class="line">  GRANT ALL PRIVILEGES ON graphite.* TO <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'sysadmin'</span>;</span><br><span class="line">  FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/django/conf/project_template/project_name/settings.py</span><br><span class="line"></span><br><span class="line">  DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">      <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">      <span class="comment"># 'NAME': 'jdbc:mysql://192.168.1.101:3306/graphite',</span></span><br><span class="line">      <span class="string">'NAME'</span>: <span class="string">'graphite'</span>,</span><br><span class="line">      <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">      <span class="comment"># 'HOST': 'localhost',</span></span><br><span class="line">      <span class="string">'PASSWORD'</span>: <span class="string">'root'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment"># TIME_ZONE = 'UTC'</span></span><br><span class="line">  TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">  <span class="comment"># DEBUG = False</span></span><br><span class="line">  DEBUG = True</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/</span><br><span class="line">$ find | grep /settings.py | grep -v pyc</span><br><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/settings.py</span><br><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/tagging/tests/settings.py</span><br><span class="line">$ vim /root/graphite/lib/python2.7/site-packages/tagging/settings.py</span><br><span class="line"><span class="comment"># ./lib/python2.7/site-packages/django/conf/project_template/project_name/settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部修改完成，即可修复</span></span><br><span class="line"></span><br><span class="line">$ python /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/manage.py syncdb</span><br><span class="line"><span class="comment"># 如果需要添加其他的 superuser，可以使用如下命令 admin/admin</span></span><br><span class="line"><span class="comment"># echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@hihuron.com', 'sysadmin')" | python /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp/graphite/manage.py shell</span></span><br><span class="line"></span><br><span class="line">$ /root/graphite/bin/carbon-cache.py start</span><br><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=9097 --libs=/root/graphite/lib/python2.7/site-packages/opt/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/webapp</span><br><span class="line">$ cp -r content/ /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp</span><br><span class="line">$ <span class="built_in">cd</span> /root/graphite/lib/python2.7/site-packages/opt/graphite/webapp</span><br><span class="line">$ cp -r graphite/ /root/graphite/webapp</span><br><span class="line"></span><br><span class="line">$ PYTHONPATH=/root/graphite/storage/whisper /root/graphite/bin/run-graphite-devel-server.py --port=9097 --libs=/root/graphite/webapp /root/graphite 1&gt;/root/graphite/storage/<span class="built_in">log</span>/webapp/process.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="ImportError-No-module-named-twisted-python-util"><a href="#ImportError-No-module-named-twisted-python-util" class="headerlink" title="ImportError: No module named twisted.python.util"></a>ImportError: No module named twisted.python.util</h5><h6 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python carbon-cache.py start</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"carbon-cache.py"</span>, line <span class="number">28</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="keyword">from</span> carbon.util <span class="keyword">import</span> run_twistd_plugin</span><br><span class="line">File <span class="string">"/opt/graphite/lib/carbon/util.py"</span>, line <span class="number">20</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="keyword">from</span> twisted.python.util <span class="keyword">import</span> initgroups</span><br><span class="line">ImportError: No module named twisted.python.util</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># pip freeze | grep zope.interface # 没有则需要安装</span></span><br><span class="line"><span class="comment"># pip install zope.interface==3.6.0</span></span><br><span class="line">$ wget https://pypi.python.org/packages/<span class="built_in">source</span>/T/Twisted/Twisted-14.0.0.tar.bz2<span class="comment">#md5=9625c094e0a18da77faa4627b98c9815 --no-check-certificate</span></span><br><span class="line">$ tar -jxf Twisted-14.0.0.tar.bz2</span><br><span class="line">$ <span class="built_in">cd</span> Twisted-14.0.0;</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></tbody></table></figure>
<h5 id="‘WSGIRequest’-object-has-no-attribute-‘REQUEST’"><a href="#‘WSGIRequest’-object-has-no-attribute-‘REQUEST’" class="headerlink" title="‘WSGIRequest’ object has no attribute ‘REQUEST’"></a>‘WSGIRequest’ object has no attribute ‘REQUEST’</h5><h6 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h6><p>　访问 <code>http://192.168.1.102:9097/</code> 返回如下信息：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">AttributeError at /render/</span><br><span class="line"><span class="string">'WSGIRequest'</span> object has no attribute <span class="string">'REQUEST'</span></span><br><span class="line">Request Method:  GET</span><br><span class="line">Request URL:  http://192.168.1.102:9097/render/?width=586&amp;height=308&amp;_salt=1483685265.903</span><br><span class="line">Django Version:  1.9.12</span><br><span class="line">Exception Type:  AttributeError</span><br><span class="line">Exception Value:</span><br><span class="line"><span class="string">'WSGIRequest'</span> object has no attribute <span class="string">'REQUEST'</span></span><br><span class="line">Exception Location:  /root/graphite/webapp/graphite/render/views.py <span class="keyword">in</span> parseOptions, line 236</span><br><span class="line">Python Executable:  /root/graphite/bin/python</span><br><span class="line">Python Version:  2.7.12</span><br><span class="line">Python Path:</span><br><span class="line">[<span class="string">'/root/graphite/webapp'</span>,</span><br><span class="line"><span class="string">'/root/graphite/webapp'</span>,</span><br><span class="line"><span class="string">'/root/graphite/webapp'</span>,</span><br><span class="line"><span class="string">'/root/graphite/bin'</span>,</span><br><span class="line"><span class="string">'/root/graphite/webapp'</span>,</span><br><span class="line"><span class="string">'/root/graphite/storage/whisper'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python27.zip'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/plat-linux2'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/lib-tk'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/lib-old'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/lib-dynload'</span>,</span><br><span class="line"><span class="string">'/usr/local/python27/lib/python2.7'</span>,</span><br><span class="line"><span class="string">'/usr/local/python27/lib/python2.7/plat-linux2'</span>,</span><br><span class="line"><span class="string">'/usr/local/python27/lib/python2.7/lib-tk'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/graphite-0.71-py2.7.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/spring-5.8.7-py2.7-linux-x86_64.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/Twisted-12.0.0-py2.7-linux-x86_64.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/requests-2.1.0-py2.7.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/numpy-1.12.0rc2-py2.7-linux-x86_64.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/logger-1.4-py2.7.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/decorator-4.0.10-py2.7.egg'</span>,</span><br><span class="line"><span class="string">'/root/graphite/lib/python2.7/site-packages/sping-1.1.15-py2.5.egg'</span>,</span><br><span class="line"><span class="string">'/usr/local/python27/lib/python2.7/site-packages'</span>,</span><br><span class="line"><span class="string">'/root/graphite/webapp/graphite/thirdparty'</span>]</span><br><span class="line">Server time:  Fri, 6 Jan 2017 14:47:46 +0800</span><br></pre></td></tr></tbody></table></figure>
<h6 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h6><p>　Django 版本不对应导致的，安装 1.8.17 版本即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">django==1.8.17</span><br></pre></td></tr></tbody></table></figure>
<h2 id="踩过的坑-2"><a href="#踩过的坑-2" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="true-false-存为维度后变成了-NULL"><a href="#true-false-存为维度后变成了-NULL" class="headerlink" title="true / false 存为维度后变成了 NULL"></a>true / false 存为维度后变成了 NULL</h3><h4 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h4><p>　Druid 本身是无法将 true / false 之类的 boolean 类型作为维度的，可以考虑将 <code>"true"</code> / <code>"false"</code> 字符串作为维度存入。但是，如果自定义的 Bean 对象中，有 <code>String isTimeout = "false"</code> 的属性存在，就不能直接使用 <code>JSON.toJSONString</code> 进行转换。因为 <code>toJSONString</code> 方法中会识别出 <code>"true"</code> / <code>"false"</code> 字符串，并将其自动转化为 boolean 类型。因此，需要通过 <code>Map&lt;String, Object&gt;</code> 将所有字段都存入，然后再调用 <code>JSON.toJSONString</code> 方法即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/plyql --host localhost:8082 -q <span class="string">"select * from log"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">┌─────────────────────────────────────────┬───────┬───────────┬─────┬─────┬──────┬──────────────────────────────────────┐</span><br><span class="line">│ __time                                  │ count │ isTimeout │ max │ min │ sum  │ uuid                                 │</span><br><span class="line">├─────────────────────────────────────────┼───────┼───────────┼─────┼─────┼──────┼──────────────────────────────────────┤</span><br><span class="line">│ Wed Aug 02 2017 17:35:00 GMT+0800 (CST) │ 4     │ NULL      │ 860 │ 860 │ 3440 │ 4621a23d-8270-4bc3-948a-f577b460d72b │</span><br><span class="line">│ Wed Aug 02 2017 17:42:00 GMT+0800 (CST) │ 1     │ NULL      │ 860 │ 860 │ 860  │ 4621a23d-8270-4bc3-948a-f577b460d72b │</span><br><span class="line">│ Wed Aug 02 2017 17:44:00 GMT+0800 (CST) │ 1     │ NULL      │ 860 │ 860 │ 860  │ 4621a23d-8270-4bc3-948a-f577b460d72b │</span><br><span class="line">│ Wed Aug 02 2017 18:03:00 GMT+0800 (CST) │ 3     │ NULL      │ 0   │ 0   │ 0    │ 85f030bd-d737-4863-9af1-e6fd8bd3b15c │</span><br><span class="line">│ Wed Aug 02 2017 19:01:24 GMT+0800 (CST) │ 2     │ NULL      │ 0   │ 0   │ 0    │ 85f030bd-d737-4863-9af1-e6fd8bd3b15c │</span><br><span class="line">│ Wed Aug 02 2017 19:09:49 GMT+0800 (CST) │ 1     │ <span class="literal">false</span>     │ 0   │ 0   │ 0    │ ba11de00-7faf-4eaf-a8ea-1cf3c5033de5 │</span><br><span class="line">└─────────────────────────────────────────┴───────┴───────────┴─────┴─────┴──────┴──────────────────────────────────────┘</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Pool-was-initialized-with-limit-0"><a href="#Pool-was-initialized-with-limit-0" class="headerlink" title="Pool was initialized with limit = 0"></a>Pool was initialized with limit = 0</h3><h4 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h4><p>　执行 RESTful 查询语句的时候，报错</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Unknown exception"</span>,</span><br><span class="line">  <span class="attr">"errorClass"</span>: <span class="string">"java.lang.IllegalStateException"</span>,</span><br><span class="line">  <span class="attr">"errorMessage"</span>: <span class="string">"Pool was initialized with limit = 0, there are no objects to take."</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"druid01:8101"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-9"><a href="#解决-9" class="headerlink" title="解决"></a>解决</h4><p>　检查 Broker、Historical、MiddleManger 是否都已经配置了 <code>druid.processing.numMergeBuffers</code> 参数</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/druid/software/druid/conf/druid</span><br><span class="line">$ cat broker/runtime.properties historical/runtime.properties middleManager/runtime.properties | grep numMergeBuffers</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">druid.processing.numMergeBuffers</span>=<span class="string">4</span></span><br><span class="line"><span class="meta">druid.processing.numMergeBuffers</span>=<span class="string">4</span></span><br><span class="line"><span class="meta">druid.processing.numMergeBuffers</span>=<span class="string">4</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="No-buckets-seems-there-is-no-data-to-index"><a href="#No-buckets-seems-there-is-no-data-to-index" class="headerlink" title="No buckets?? seems there is no data to index"></a>No buckets?? seems there is no data to index</h3><h4 id="解决-10"><a href="#解决-10" class="headerlink" title="解决"></a>解决</h4><p>　除去 HDFS 里面的确没有数据的情况，还有可能是因为 Hadoop 任务的 TimeZone 没有设置正确</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">"mapreduce.map.java.opts"</span>:<span class="string">"-Duser.timezone=UTC -Dfile.encoding=UTF-8"</span></span><br><span class="line"><span class="meta">"mapreduce.reduce.java.opts"</span>:<span class="string">"-Duser.timezone=UTC -Dfile.encoding=UTF-8"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="hyperUniqueCardinality-输出浮点数，导致-having-无法使用-equalTo-进行过滤"><a href="#hyperUniqueCardinality-输出浮点数，导致-having-无法使用-equalTo-进行过滤" class="headerlink" title="hyperUniqueCardinality 输出浮点数，导致 having 无法使用 equalTo 进行过滤"></a>hyperUniqueCardinality 输出浮点数，导致 having 无法使用 equalTo 进行过滤</h3><h4 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h4><p>　通过下述查询，因为使用了 <code>hyperUniqueCardinality</code> 近似查询，导致 <code>alias-6</code> 输出的值为浮点数（如：10.0000213），如此无法在 <code>having</code> 中使用 <code>equalTo</code> 进行精确过滤（=10）</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"jsonClass"</span>: <span class="string">"GroupByQuerySpec"</span>,</span><br><span class="line">  <span class="attr">"queryType"</span>: <span class="string">"groupBy"</span>,</span><br><span class="line">  <span class="attr">"dataSource"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">  <span class="attr">"dimensions"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"jsonClass"</span>: <span class="string">"ExtractionDimensionSpec"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"extraction"</span>,</span><br><span class="line">      <span class="attr">"dimension"</span>: <span class="string">"__time"</span>,</span><br><span class="line">      <span class="attr">"outputName"</span>: <span class="string">"alias-4"</span>,</span><br><span class="line">      <span class="attr">"extractionFn"</span>: {</span><br><span class="line">        <span class="attr">"jsonClass"</span>: <span class="string">"TimeFormatExtractionFunctionSpec"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"timeFormat"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd"</span>,</span><br><span class="line">        <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span>,</span><br><span class="line">        <span class="attr">"locale"</span>: <span class="string">"en_US"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"having"</span>: {</span><br><span class="line">    <span class="attr">"jsonClass"</span>: <span class="string">"ComparisonHavingSpec"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"greaterThan"</span>,</span><br><span class="line">    <span class="attr">"aggregation"</span>: <span class="string">"alias-6"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: <span class="number">10</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"granularity"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"aggregations"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"hyperUnique"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"alias-5"</span>,</span><br><span class="line">      <span class="attr">"fieldName"</span>: <span class="string">"__HLL_booksnumber1"</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"postAggregations"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"jsonClass"</span>: <span class="string">"HyperUniqueCardinalityPostAggregationSpec"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"hyperUniqueCardinality"</span>,</span><br><span class="line">      <span class="attr">"fieldName"</span>: <span class="string">"alias-5"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"alias-6"</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"intervals"</span>: [</span><br><span class="line">    <span class="string">"2018-08-08T00:00:00.000+08:00/2018-08-18T00:00:00.000+08:00"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"context"</span>: {</span><br><span class="line">    <span class="attr">"queryId"</span>: <span class="string">"yuzhouwan-127.0.0.1-3395157377882475"</span>,</span><br><span class="line">    <span class="attr">"groupByStrategy"</span>: <span class="string">"v2"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决-11"><a href="#解决-11" class="headerlink" title="解决"></a>解决</h4><p>　通过在 <code>postAggregations</code> 中，增加一个 <a href="https://druid.apache.org/docs/latest/querying/post-aggregations.html#javascript-post-aggregator">JavaScript post-aggregator</a> 计算过程，再利用 <code>Math.round</code> 进行<strong>四舍五入</strong>即可</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"jsonClass"</span>: <span class="string">"GroupByQuerySpec"</span>,</span><br><span class="line">  <span class="attr">"queryType"</span>: <span class="string">"groupBy"</span>,</span><br><span class="line">  <span class="attr">"dataSource"</span>: <span class="string">"yuzhouwan"</span>,</span><br><span class="line">  <span class="attr">"dimensions"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"jsonClass"</span>: <span class="string">"ExtractionDimensionSpec"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"extraction"</span>,</span><br><span class="line">      <span class="attr">"dimension"</span>: <span class="string">"__time"</span>,</span><br><span class="line">      <span class="attr">"outputName"</span>: <span class="string">"alias-4"</span>,</span><br><span class="line">      <span class="attr">"extractionFn"</span>: {</span><br><span class="line">        <span class="attr">"jsonClass"</span>: <span class="string">"TimeFormatExtractionFunctionSpec"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"timeFormat"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd"</span>,</span><br><span class="line">        <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span>,</span><br><span class="line">        <span class="attr">"locale"</span>: <span class="string">"en_US"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"having"</span>: {</span><br><span class="line">    <span class="attr">"jsonClass"</span>: <span class="string">"ComparisonHavingSpec"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"equalTo"</span>,</span><br><span class="line">    <span class="attr">"aggregation"</span>: <span class="string">"alias-6"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: <span class="number">10</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"granularity"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"aggregations"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"hyperUnique"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"alias-5"</span>,</span><br><span class="line">      <span class="attr">"fieldName"</span>: <span class="string">"__HLL_booksnumber1"</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"postAggregations"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"jsonClass"</span>: <span class="string">"HyperUniqueCardinalityPostAggregationSpec"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"hyperUniqueCardinality"</span>,</span><br><span class="line">      <span class="attr">"fieldName"</span>: <span class="string">"alias-5"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"alias6"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"alias-6"</span>,</span><br><span class="line">      <span class="attr">"fieldNames"</span>: [</span><br><span class="line">        <span class="string">"alias6"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"function"</span>: <span class="string">"function(alias6) { return Math.round(alias6); }"</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"intervals"</span>: [</span><br><span class="line">    <span class="string">"2018-08-08T00:00:00.000+08:00/2018-08-16T00:00:00.000+08:00"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"context"</span>: {</span><br><span class="line">    <span class="attr">"queryId"</span>: <span class="string">"yuzhouwan-127.0.0.1-3395157377882475"</span>,</span><br><span class="line">    <span class="attr">"groupByStrategy"</span>: <span class="string">"v2"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="修改-Apache-Druid-的默认时区"><a href="#修改-Apache-Druid-的默认时区" class="headerlink" title="修改 Apache Druid 的默认时区"></a>修改 Apache Druid 的默认时区</h3><h4 id="解决-12"><a href="#解决-12" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/druid/conf/druid/cluster</span><br><span class="line">$ find . -name jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./data/middleManager/jvm.config</span><br><span class="line">./data/historical/jvm.config</span><br><span class="line">./query/router/jvm.config</span><br><span class="line">./query/broker/jvm.config</span><br><span class="line">./master/coordinator-overlord/jvm.config</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ grep <span class="string">'user.timezone'</span> `find . -name jvm.config`</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">./data/middleManager/jvm.config</span>:<span class="string">-Duser.timezone=UTC</span></span><br><span class="line"><span class="meta">./data/historical/jvm.config</span>:<span class="string">-Duser.timezone=UTC</span></span><br><span class="line"><span class="meta">./query/router/jvm.config</span>:<span class="string">-Duser.timezone=UTC</span></span><br><span class="line"><span class="meta">./query/broker/jvm.config</span>:<span class="string">-Duser.timezone=UTC</span></span><br><span class="line"><span class="meta">./master/coordinator-overlord/jvm.config</span>:<span class="string">-Duser.timezone=UTC</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sed -in-place -e <span class="string">'s/-Duser.timezone=UTC/-Duser.timezone=UTC+8/g'</span> `find . -name jvm.config`</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ grep <span class="string">'user.timezone'</span> `find . -name jvm.config`</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">./data/middleManager/jvm.config</span>:<span class="string">-Duser.timezone=UTC+8</span></span><br><span class="line"><span class="meta">./data/historical/jvm.config</span>:<span class="string">-Duser.timezone=UTC+8</span></span><br><span class="line"><span class="meta">./query/router/jvm.config</span>:<span class="string">-Duser.timezone=UTC+8</span></span><br><span class="line"><span class="meta">./query/broker/jvm.config</span>:<span class="string">-Duser.timezone=UTC+8</span></span><br><span class="line"><span class="meta">./master/coordinator-overlord/jvm.config</span>:<span class="string">-Duser.timezone=UTC+8</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info">Apache Druid 的默认时区为 UTC，这里我们以东八区为例，将 user.timezone 属性改为 UTC+8 即可</div>





<h2 id="社区发展"><a href="#社区发展" class="headerlink" title="社区发展"></a>社区发展</h2><h3 id="Star-趋势"><a href="#Star-趋势" class="headerlink" title="Star 趋势"></a>Star 趋势</h3><p><img data-src="/picture/tsdb/tsdb_star_history.png" alt="TSDB Star History"></p>
<center>（图片来源：<a href="https://star-history.t9t.io/#apache/druid&amp;apache/pinot&amp;influxdata/influxdb&amp;timescale/timescaledb&amp;OpenTSDB/opentsdb&amp;crate/crate" target="_blank">star-history.t9t.io</a>™ 官网）</center>

<h3 id="个人贡献"><a href="#个人贡献" class="headerlink" title="个人贡献"></a>个人贡献</h3><ul>
<li><a href="https://github.com/apache/druid/issues?utf8=%E2%9C%93&amp;q=%20is%3Aissue%20author%3Aasdf2014">Issues</a></li>
<li><a href="https://github.com/apache/druid/pulls?utf8=✓&amp;q=%20is%3Apr%20author%3Aasdf2014">Pull Request</a></li>
</ul>
<p>　详见：《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h3><ul>
<li><a href="https://imply.io/druid/cheat-sheet">Apache Druid API Cheat Sheet</a></li>
<li><a href="https://druid.apache.org/docs/latest/querying/sql.html#data-types">Data types</a></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">SQL type</th>
<th style="text-align:center">Druid runtime type</th>
<th style="text-align:center">Default value</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR</td>
<td style="text-align:center">STRING</td>
<td style="text-align:center"><code>''</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">VARCHAR</td>
<td style="text-align:center">STRING</td>
<td style="text-align:center"><code>''</code></td>
<td style="text-align:center">Druid STRING columns are reported as VARCHAR. Can include <a href="https://druid.apache.org/docs/latest/querying/sql.html#multi-value-strings">multi-value strings</a> as well.</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL</td>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center"><code>0.0</code></td>
<td style="text-align:center">DECIMAL uses floating point, not fixed point math</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center"><code>0.0</code></td>
<td style="text-align:center">Druid FLOAT columns are reported as FLOAT</td>
</tr>
<tr>
<td style="text-align:center">REAL</td>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center"><code>0.0</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center"><code>0.0</code></td>
<td style="text-align:center">Druid DOUBLE columns are reported as DOUBLE</td>
</tr>
<tr>
<td style="text-align:center">BOOLEAN</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>false</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>0</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>0</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">INTEGER</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>0</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>0</code></td>
<td style="text-align:center">Druid LONG columns (except <code>__time</code>) are reported as BIGINT</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>0</code>, meaning 1970-01-01 00:00:00 UTC</td>
<td style="text-align:center">Druid’s <code>__time</code> column is reported as TIMESTAMP. Casts between string and timestamp types assume standard SQL formatting, e.g. <code>2000-01-02 03:04:05</code>, <em>not</em> ISO8601 formatting. For handling other formats, use one of the <a href="https://druid.apache.org/docs/latest/querying/sql.html#time-functions">time functions</a></td>
</tr>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">LONG</td>
<td style="text-align:center"><code>0</code>, meaning 1970-01-01</td>
<td style="text-align:center">Casting TIMESTAMP to DATE rounds down the timestamp to the nearest day. Casts between string and date types assume standard SQL formatting, e.g. <code>2000-01-02</code>. For handling other formats, use one of the <a href="https://druid.apache.org/docs/latest/querying/sql.html#time-functions">time functions</a></td>
</tr>
<tr>
<td style="text-align:center">OTHER</td>
<td style="text-align:center">COMPLEX</td>
<td style="text-align:center">none</td>
<td style="text-align:center">May represent various Druid column types such as hyperUnique, approxHistogram, etc</td>
</tr>
</tbody>
</table>
</div>
<div class="note info">可以通过 druid.indexing.doubleStorage 配置项，来控制浮点型数据存储为 float 还是 double，默认值为 double</div>

<ul>
<li><a href="https://druid.apache.org/docs/latest/tutorials/tutorial-update-data.html#append-to-the-data">Append to the data</a></li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="https://github.com/apache/druid/issues/6716">引入精确去重</a></li>
<li><a href="https://github.com/apache/druid/issues/6832">全新的 UI 页面</a></li>
<li><a href="https://github.com/apache/druid/issues/7093">查询矢量化</a></li>
<li><a href="https://github.com/apache/druid/issues/8728">支持原生的 Join 查询</a></li>
<li><a href="https://github.com/apache/druid/pull/9898">支持 Aliyun OSS 作为 Deep Storage</a></li>
<li><a href="https://github.com/druid-io/druid-operator">Apache Druid Kubernetes Operator</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li>Druid 实时大数据分析原理与实践</li>
<li>大数据系统构建：可扩展实时数据系统构建原理</li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">Apache Druid</td>
<td style="text-align:center">钉钉群 23318065</td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Apache Calcite</tag>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>Helm</tag>
        <tag>Apache Druid</tag>
        <tag>Apache ZooKeeper</tag>
        <tag>InfluxDB</tag>
        <tag>Grafana</tag>
        <tag>TSDB</tag>
        <tag>Apache Superset</tag>
        <tag>Python</tag>
        <tag>Presto</tag>
        <tag>PostgreSQL</tag>
        <tag>Pivot</tag>
        <tag>Graphite</tag>
        <tag>OLAP</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper 原理与优化</title>
    <url>/posts/31915/</url>
    <content><![CDATA[<h2 id="ZooKeeper-是什么？"><a href="#ZooKeeper-是什么？" class="headerlink" title="ZooKeeper 是什么？"></a>ZooKeeper 是什么？</h2><p>　<strong>ZooKeeper</strong> 是一个基于 <a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/chubby-osdi06.pdf">Google Chubby</a> 论文实现的一款解决分布式数据一致性问题的开源实现，方便了依赖 ZooKeeper 的应用实现 <code>数据发布 / 订阅</code>、<code>负载均衡</code>、<code>服务注册与发现</code>、<code>分布式协调</code>、<code>事件通知</code>、<code>集群管理</code>、<code>Leader 选举</code>、 <code>分布式锁和队列</code> 等功能</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><p>　一般的，在分布式系统中，构成集群的每一台机器都有自己的角色，最为典型的集群模式就是 <code>Master / Slave</code> 主备模式。在该模式中，我们把能够处理所有<code>写操作</code>的机器称为 <code>Master</code> 节点，并把所有通过<code>异步复制</code>方式获取最新数据、提供<code>读服务</code>的机器称为 <code>Slave</code> 节点</p>
<p><img data-src="/picture/zk/zk_master_slave.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>

<p>　而 ZooKeeper 中，则是引入了 <code>领导者（Leader）</code>、<code>跟随者（Follower）</code>、<code>观察者（Observer）</code> 三种角色 和 <code>领导（Leading）</code>、<code>跟随（Following）</code>、<code>观察（Observing）</code>、<code>寻找（Looking）</code> 等相应的<a href="https://github.com/apache/zookeeper/blob/master/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java#L370">状态</a>。在 ZooKeeper 集群中的通过一种 <code>Leader 选举</code>的过程，来选定某个节点作为 <code>Leader</code> 节点，该节点为客户端提供<code>读</code>和<code>写</code>服务。而 <code>Follower</code> 和 <code>Observer</code> 节点，则都能提供<code>读</code>服务，唯一的区别在于，<code>Observer</code> 机器<code>不参与 Leader 选举</code>过程 和 <code>写操作</code>的<code>"过半写成功"</code>策略，<code>Observer</code> 只会被告知已经 commit 的 proposal。因此 <code>Observer</code> 可以在<code>不影响写性能</code>的情况下提升集群的<code>读性能</code>（详见下文 “性能优化 - 优化策略 - Observer 模式” 部分）</p>
<p><img data-src="/picture/zk/zk_leader_follower_observer.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>

<span id="more"></span>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>　<strong>Session</strong> 指客户端会话。在 ZooKeeper 中，一个<code>客户端会话</code>是指 <code>客户端</code>和<code>服务器</code>之间的一个 <code>TCP 长连接</code>。客户端启动的时候，会与服务端建立一个 <code>TCP 连接</code>，客户端会话的生命周期，则是从第一次连接建立开始算起。通过这个连接，客户端能够通过<code>心跳检测</code>与服务器保持有效的会话，并向 ZooKeeper 服务器发送请求并接收响应，以及接收来自服务端的 <code>Watch 事件通知</code></p>
<p>　Session 的 sessionTimeout 参数，用来控制一个客户端会话的超时时间。当<code>服务器压力</code>太大 或者是<code>网络故障</code>等各种原因导致客户端<a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/FAQ">连接断开</a>时，Client 会自动从 ZooKeeper 地址列表中逐一尝试重连（重试策略可使用 <a href="https://github.com/asdf2014/yuzhouwan/tree/master/yuzhouwan-bigdata/yuzhouwan-bigdata-zookeeper/src/main/java/com/yuzhouwan/bigdata/zookeeper">Curator</a> 来实现）。只要在 sessionTimeout 规定的时间内能够<code>重新连接</code>上集群中<code>任意一台服务器</code>，那么之前创建的会话仍然有效。如果，在 sessionTimeout 时间外重连了，就会因为 Session 已经被清除了，而被告知 <code>SESSION_EXPIRED</code>，此时需要程序去恢复临时数据；还有一种 Session 重建后的在新节点上的数据，被之前节点上因<code>网络延迟</code>晚来的<code>写请求</code>所覆盖的情况，在 <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-417">ZOOKEEPER-417</a> 中被提出，并在该 JIRA 中新加入的 <code>SessionMovedException</code>，使得 用同一个 <code>sessionld/sessionPasswd</code> 重建 Session 的客户端能感知到，但是这个问题到 <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2219">ZOOKEEPER-2219</a> 仍然没有得到很好的解决</p>
<p><img data-src="/picture/zk/zk_transition.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>


<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>　在 ZooKeeper 中，<code>节点</code>分为两类，第一类是指 构成集群的<code>机器</code>，称之为<code>机器节点</code>；第二类则是指 数据模型中的<code>数据单元</code>，称之为<code>数据节点 ZNode</code>。ZooKeeper 将所有数据存储在内存中，数据模型的结构类似于树（ZNode Tree），由<code>斜杠（/）</code>进行分割的路径，就是一个 <code>ZNode</code>，例如 <code>/foo/path1</code>。每个 ZNode 上都会保存自己的数据内容 和 一系列属性信息</p>
<p>　ZNode 可以分为<code>持久节点（PERSISTENT）</code>和<code>临时节点（EPHEMERAL）</code>两类。所谓<code>持久节点</code>是指一旦这个 ZNode 被创建了，除非主动进行移除操作，否则这个节点将一直保存在 ZooKeeper 上。而<code>临时节点</code>的生命周期，是与客户端会话绑定的，一旦客户端会话<code>失效</code>，那么这个<code>客户端创建的所有临时节点</code>都会被<code>移除</code>。在 <a href="https://yuzhouwan.com/posts/45888/">HBase</a> 中，集群则是通过 <strong>/hbase/rs/*</strong> 和 <strong>/hbase/master</strong> 两个临时节点，来监控 <strong>HRegionServer 进程的加入和宕机</strong> 和 <strong>HMaster 进程的 Active 状态</strong></p>
<p>　另外，ZooKeeper 还有一种 <code>顺序节点（SEQUENTIAL）</code>。该节点被创建的时候，ZooKeeper 会自动在其子节点名上，加一个由父节点维护的、自增整数的后缀（上限：<code>Integer.MAX_VALUE</code>）。该节点的特性，还可以应用到 持久 / 临时节点 上，组合成 <code>持久顺序节点（PERSISTENT_SEQUENTIAL）</code> 和 <code>临时顺序节点（EPHEMERAL_SEQUENTIAL）</code></p>
<p><img data-src="/picture/zk/zk_znode.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>


<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>　ZooKeeper 的每个 <code>ZNode</code> 上都会存储数据，对应于每个 <code>ZNode</code>，ZooKeeper 都会为其维护一个叫做 <code>Stat</code> 的数据结构，<code>Stat</code> 中记录了这个 <code>ZNode</code> 的三个数据版本，分别是 <code>version</code>（当前 ZNode 数据内容的版本），<code>cversion</code>（当前 ZNode 子节点的版本）和 <code>aversion</code>（当前 ZNode 的 ACL 变更版本）。这里的<code>版本</code>起到了控制 ZooKeeper 操作<code>原子性</code>的作用（详见下文 “源码分析 - 落脚点 - ZooKeeper 乐观锁” 部分）</p>
<p>　如果想要让写入数据的操作支持 CAS，则可以借助 <code>Versionable#withVersion</code> 方法，在 <code>setData()</code> 的同时指定当前数据的 <code>verison</code>。如果写入成功，则说明在当前数据写入的过程中，没有其他用户对该 ZNode 节点的内容进行过修改；否则，会抛出一个 <code>KeeperException.BadVersionException</code>，以此可以判断本次 CAS 写入是失败的。而这样做的好处就是，可以避免“并发局部更新 ZNode 节点内容”时，发生相互覆盖的问题</p>
<h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>　<strong>Watcher</strong>（事件监听器）是 ZooKeeper 提供的一种 <code>发布/订阅</code>的机制。ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些<code>特定事件触发</code>的时候，ZooKeeper 服务端会将事件通知给<code>订阅</code>的客户端。该机制是 ZooKeeper 实现<code>分布式协调</code>的重要特性</p>
<p><img data-src="/picture/zk/zk_watcher.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>

<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>　类似于 Unix 文件系统，ZooKeeper 采用 <code>ACL（Access Control Lists）</code>策略来进行权限控制（使用方式，详见下文 “常用命令 - 执行脚本 - zkCli - 节点操作” 部分；代码实现，详见 PrepRequestProcessor#<a href="https://github.com/apache/zookeeper/blob/master/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L286">checkACL</a>）</p>
<h4 id="常用的权限控制"><a href="#常用的权限控制" class="headerlink" title="常用的权限控制"></a>常用的权限控制</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Command</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>CREATE (<strong>c</strong>)</td>
<td>创建子节点的权限</td>
</tr>
<tr>
<td>READ (<strong>r</strong>)</td>
<td>获取节点数据和子节点列表的权限</td>
</tr>
<tr>
<td>WRITE (<strong>w</strong>)</td>
<td>更新节点数据的权限</td>
</tr>
<tr>
<td>DELETE (<strong>d</strong>)</td>
<td>删除当前节点的权限</td>
</tr>
<tr>
<td>ADMIN (<strong>a</strong>)</td>
<td>管理权限，可以设置当前节点的 permission</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>Scheme</th>
<th>ID</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>world</td>
<td>anyone</td>
<td>ZooKeeper 中对所有人有权限的结点就是属于 <code>world:anyone</code></td>
</tr>
<tr>
<td>auth</td>
<td>不需要 id</td>
<td>通过 authentication 的 user 都有权限</td>
</tr>
<tr>
<td></td>
<td></td>
<td>（ZooKeeper 支持通过 kerberos 来进行 <code>authencation</code>，也支持 <code>username</code>/<code>password</code>形式的 authentication）</td>
</tr>
<tr>
<td>digest</td>
<td>username:BASE64 (SHA1(password))</td>
<td>需要先通过 username:password 形式的 authentication</td>
</tr>
<tr>
<td>ip</td>
<td>id 为客户机的 IP 地址（或者 IP 地址段）</td>
<td>ip:192.168.1.0/14，表示匹配前 14 个 bit 的 IP 段</td>
</tr>
<tr>
<td>super</td>
<td></td>
<td>对应的 id 拥有超级权限（CRWDA）</td>
</tr>
</tbody>
</table>
</div>
<h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><h5 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">  zoo = <span class="keyword">new</span> ZooKeeper(HOST.concat(<span class="string">":"</span> + CLIENT_PORT), TIME_OUT_MILLISECOND, <span class="keyword">null</span>);</span><br><span class="line">  acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.ALL, <span class="keyword">new</span> Id(IP, <span class="string">"10.24.40.178"</span>)));</span><br><span class="line">  acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.ALL, <span class="keyword">new</span> Id(IP, <span class="string">"127.0.0.1"</span>)));</span><br><span class="line">  aclsNoAuth = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  aclsNoAuth.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.ALL, <span class="keyword">new</span> Id(IP, <span class="string">"127.0.0.1"</span>)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ipAcl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">  <span class="keyword">if</span> (zoo.exists(IP_PATH, <span class="keyword">null</span>) != <span class="keyword">null</span>) zoo.delete(IP_PATH, -<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (zoo.exists(IP_PATH_NO_AUTH, <span class="keyword">null</span>) != <span class="keyword">null</span>) zoo.delete(IP_PATH_NO_AUTH, -<span class="number">1</span>);</span><br><span class="line">  zoo.create(IP_PATH, IP.getBytes(), acls, CreateMode.PERSISTENT);</span><br><span class="line">  assertEquals(IP, <span class="keyword">new</span> String(zoo.getData(IP_PATH, <span class="keyword">false</span>, <span class="keyword">null</span>)));</span><br><span class="line">  zoo.create(IP_PATH_NO_AUTH, IP.getBytes(), aclsNoAuth, CreateMode.PERSISTENT);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    zoo.getData(IP_PATH_NO_AUTH, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">  } <span class="keyword">catch</span> (KeeperException.NoAuthException e) {</span><br><span class="line">    assertEquals(<span class="string">"KeeperErrorCode = NoAuth for "</span>.concat(IP_PATH_NO_AUTH), e.getMessage());</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-zookeeper/src/test/java/com/yuzhouwan/bigdata/zookeeper/auth/AuthIPExample.java">here</a>.</p>
<h5 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ zkCli.sh -server localhost:2181</span><br><span class="line">  [zk: localhost:2181(CONNECTED) 16] ls /</span><br><span class="line">    [leader, election, zookeeper, origin, ip, auth_test, benchmark]</span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 17] ls /ip</span><br><span class="line">    Authentication is not valid : /ip</span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 18] getAcl /ip</span><br><span class="line">    <span class="string">'ip,'</span>10.24.40.178</span><br><span class="line">    : cdrwa</span><br><span class="line">    <span class="string">'ip,'</span>127.0.0.1</span><br><span class="line">    : cdrwa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ zkCli.sh -server 127.0.0.1:2181</span><br><span class="line">  [zk: 127.0.0.1:2181(CONNECTED) 1] ls /ip</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">  [zk: 127.0.0.1:2181(CONNECTED) 2] get /ip</span><br><span class="line">    ip</span><br><span class="line">    cZxid = 0x10000c43b</span><br><span class="line">    ctime = Tue Aug 22 16:50:37 CST 2017</span><br><span class="line">    mZxid = 0x10000c43b</span><br><span class="line">    mtime = Tue Aug 22 16:50:37 CST 2017</span><br><span class="line">    pZxid = 0x10000c43b</span><br><span class="line">    cversion = 0</span><br><span class="line">    dataVersion = 0</span><br><span class="line">    aclVersion = 0</span><br><span class="line">    ephemeralOwner = 0x0</span><br><span class="line">    dataLength = 2</span><br><span class="line">    numChildren = 0</span><br></pre></td></tr></tbody></table></figure>
<h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p>　简单易用，直接在物理层面，对用户进行权限隔离；但是，如果不将 <code>127.0.0.1</code> 放入到 IP Acl 列表里，会给服务端的运维带来麻烦</p>
<h4 id="Digest"><a href="#Digest" class="headerlink" title="Digest"></a>Digest</h4><h5 id="编码-1"><a href="#编码-1" class="headerlink" title="编码"></a>编码</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">  zoo = <span class="keyword">new</span> ZooKeeper(HOST.concat(<span class="string">":"</span> + CLIENT_PORT), TIME_OUT_MILLISECOND, <span class="keyword">null</span>);</span><br><span class="line">  zoo.addAuthInfo(<span class="string">"digest"</span>, <span class="string">"yuzhouwan:com"</span>.getBytes());</span><br><span class="line">  zooNoAuth = <span class="keyword">new</span> ZooKeeper(HOST.concat(<span class="string">":"</span> + CLIENT_PORT), TIME_OUT_MILLISECOND, <span class="keyword">null</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">digestAcl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">  <span class="keyword">if</span> (zoo.exists(AUTH_PATH_CHILD, <span class="keyword">null</span>) != <span class="keyword">null</span>) zoo.delete(AUTH_PATH_CHILD, -<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (zoo.exists(AUTH_PATH, <span class="keyword">null</span>) != <span class="keyword">null</span>) zoo.delete(AUTH_PATH, -<span class="number">1</span>);</span><br><span class="line">  zoo.create(AUTH_PATH, bytes, ZooDefs.Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    zooNoAuth.create(AUTH_PATH_CHILD, bytes, ZooDefs.Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);</span><br><span class="line">  } <span class="keyword">catch</span> (KeeperException.InvalidACLException e) {</span><br><span class="line">    assertEquals(<span class="string">"KeeperErrorCode = InvalidACL for /auth_test/child"</span>, e.getMessage());</span><br><span class="line">  }</span><br><span class="line">  zoo.create(AUTH_PATH_CHILD, bytes, ZooDefs.Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    zooNoAuth.delete(AUTH_PATH_CHILD, -<span class="number">1</span>);</span><br><span class="line">  } <span class="keyword">catch</span> (KeeperException.NoAuthException e) {</span><br><span class="line">    assertEquals(<span class="string">"KeeperErrorCode = NoAuth for /auth_test/child"</span>, e.getMessage());</span><br><span class="line">  }</span><br><span class="line">  assertEquals(AUTH_PATH, <span class="keyword">new</span> String(zoo.getData(AUTH_PATH, <span class="keyword">false</span>, <span class="keyword">null</span>)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: Full code is <a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-zookeeper/src/test/java/com/yuzhouwan/bigdata/zookeeper/auth/AuthDigestExample.java">here</a>.</p>
<h5 id="命令行-1"><a href="#命令行-1" class="headerlink" title="命令行"></a>命令行</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ zkCli.sh -server localhost:2181</span><br><span class="line">  [zk: localhost:2181(CONNECTED) 5] ls /</span><br><span class="line">    [leader, auth_test, election, zookeeper, benchmark, origin]</span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 6] ls /auth_test</span><br><span class="line">    Authentication is not valid : /auth_test</span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 7] get /auth_test</span><br><span class="line">    Authentication is not valid : /auth_test</span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 8] getAcl /auth_test</span><br><span class="line">    <span class="string">'digest,'</span>yuzhouwan:h/j+/wDlblTtA48jnbq8snP1glA=</span><br><span class="line">    : cdrwa</span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 9] addauth digest yuzhouwan:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  [zk: localhost:2181(CONNECTED) 10] get /auth_test</span><br><span class="line">    /auth_test</span><br><span class="line">    cZxid = 0x10000c31e</span><br><span class="line">    ctime = Tue Aug 22 15:26:27 CST 2017</span><br><span class="line">    mZxid = 0x10000c31e</span><br><span class="line">    mtime = Tue Aug 22 15:26:27 CST 2017</span><br><span class="line">    pZxid = 0x10000c31e</span><br><span class="line">    cversion = 0</span><br><span class="line">    dataVersion = 0</span><br><span class="line">    aclVersion = 0</span><br><span class="line">    ephemeralOwner = 0x0</span><br><span class="line">    dataLength = 10</span><br><span class="line">    numChildren = 0</span><br></pre></td></tr></tbody></table></figure>
<h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><p>　可以建立角色，按照用户名、密码进行权限控制；但是，想要修改某个用户的密码，需要对所有的 ACLs 做更改</p>
<h4 id="SASL-amp-Kerberos"><a href="#SASL-amp-Kerberos" class="headerlink" title="SASL &amp; Kerberos"></a>SASL &amp; Kerberos</h4><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/install/</span><br><span class="line">$ wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</span><br><span class="line">$ wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz.md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验 MD5</span></span><br><span class="line">$ head -n 1 zookeeper-3.4.10.tar.gz.md5</span><br><span class="line">  e4cf1b1593ca870bf1c7a75188f09678  zookeeper-3.4.10.tar.gz</span><br><span class="line">$ md5sum zookeeper-3.4.10.tar.gz</span><br><span class="line">  e4cf1b1593ca870bf1c7a75188f09678 *zookeeper-3.4.10.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 MD5 码一致后进行解压安装</span></span><br><span class="line">$ tar zxvf zookeeper-3.4.10.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software</span><br><span class="line">$ ln -s zookeeper-3.4.10 zookeeper</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> zookeeper</span><br><span class="line">$ mkdir tmp</span><br><span class="line">$ cp conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class="line">$ mkdir -p /home/zookeeper/data/zookeeper</span><br><span class="line">$ mkdir -p /home/zookeeper/logs/zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多配置，详见下文 “常用配置” 部分</span></span><br><span class="line">$ vim conf/zoo.cfg</span><br><span class="line">  tickTime=2000</span><br><span class="line">  initLimit=10</span><br><span class="line">  syncLimit=5</span><br><span class="line">  dataDir=/home/zookeeper/data/zookeeper</span><br><span class="line">  dataLogDir=/home/zookeeper/logs/zookeeper</span><br><span class="line">  clientPort=2181</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ bin/zkServer.sh start</span><br><span class="line">$ bin/zkServer.sh status</span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /home/zookeeper/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Mode: standalone</span><br><span class="line">$ bin/zkCli.sh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="容器版"><a href="#容器版" class="headerlink" title="容器版"></a>容器版</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker run --restart always -p 2181:2181 -p 2888:2888 -p 3888:3888 -p 8080:8080 -d zookeeper</span><br></pre></td></tr></tbody></table></figure>
<h3 id="集群版"><a href="#集群版" class="headerlink" title="集群版"></a>集群版</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 更多配置，详见下文 “常用配置” 部分</span></span><br><span class="line">$ vim conf/zoo.cfg</span><br><span class="line">  tickTime=2000</span><br><span class="line">  initLimit=10</span><br><span class="line">  syncLimit=5</span><br><span class="line">  dataDir=/home/zookeeper/data/zookeeper</span><br><span class="line">  dataLogDir=/home/zookeeper/logs/zookeeper</span><br><span class="line">  clientPort=2181</span><br><span class="line">  server.1=yuzhouwan01:2281:2282</span><br><span class="line">  server.2=yuzhouwan02:2281:2282</span><br><span class="line">  server.3=yuzhouwan03:2281:2282</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在各个节点的 dataDir下创建 myid 文件，并对应 zoo.cfg中配置的 id</span></span><br><span class="line">[zookeeper@yuzhouwan01 ~] <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /home/zookeeper/data/zookeeper/myid</span><br><span class="line">[zookeeper@yuzhouwan02 ~] <span class="built_in">echo</span> <span class="string">"2"</span> &gt; /home/zookeeper/data/zookeeper/myid</span><br><span class="line">[zookeeper@yuzhouwan03 ~] <span class="built_in">echo</span> <span class="string">"3"</span> &gt; /home/zookeeper/data/zookeeper/myid</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Command</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>conf</td>
<td>输出相关<strong>服务配置</strong>的详细信息</td>
</tr>
<tr>
<td>cons</td>
<td>列出所有连接到服务器的客户端的完全的<code>连接</code> / <code>会话</code>的详细信息(包括“接受 / 发送”的包数量、会话 id 、操作延迟、最后的操作执行等等信息)</td>
</tr>
<tr>
<td>envi</td>
<td>输出关于<strong>服务环境</strong>的详细信息 (区别于 conf 命令)</td>
</tr>
<tr>
<td>dump</td>
<td>列出未经处理的会话和临时节点</td>
</tr>
<tr>
<td>stat</td>
<td>查看哪个节点被选择作为 Follower 或者 Leader</td>
</tr>
<tr>
<td>ruok</td>
<td>测试是否启动了该 Server，若回复 <code>imok</code> 表示已经启动</td>
</tr>
<tr>
<td>mntr</td>
<td>输出一些运行时信息（latency / packets / alive_connections / outstanding_requests / server_state / znode + watch + ephemerals  count …）</td>
</tr>
<tr>
<td>reqs</td>
<td>列出未经处理的请求</td>
</tr>
<tr>
<td>wchs</td>
<td>列出服务器 watch 的简要信息</td>
</tr>
<tr>
<td><strong>wchc</strong></td>
<td>通过 session 列出服务器 watch 的详细信息（输出是一个与 watch 相关的会话的列表）</td>
</tr>
<tr>
<td><strong>wchp</strong></td>
<td>通过路径列出服务器 watch 的详细信息（输出一个与 session 相关的路径）</td>
</tr>
<tr>
<td>srvr</td>
<td>输出服务的所有信息（可以用来检查当前节点同步完毕集群数据，处于 Follower 状态）</td>
</tr>
<tr>
<td>srst</td>
<td>重置服务器统计信息</td>
</tr>
<tr>
<td>kill</td>
<td>关掉 Server</td>
</tr>
</tbody>
</table>
</div>
<div class="note danger">部分加粗命令对资源消耗比较大，生产环境慎用!</div>



<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><h5 id="安装-Netcat"><a href="#安装-Netcat" class="headerlink" title="安装 Netcat"></a>安装 Netcat</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># online</span></span><br><span class="line">$ yum install nc</span><br><span class="line"></span><br><span class="line"><span class="comment"># offline</span></span><br><span class="line">$ uname -a</span><br><span class="line">  Linux yuzhouwan 2.6.32-279.el6_sn.7.x86_64 <span class="comment">#1 SMP Fri May 27 18:04:25 CST 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="comment"># 搜索rpm包 https://rpmfind.net/linux/rpm2html/search.php?query=nc&amp;submit=Search+...&amp;system=&amp;arch=x86_64</span></span><br><span class="line">$ wget ftp://rpmfind.net/linux/centos/6.9/os/x86_64/Packages/nc-1.84-24.el6.x86_64.rpm</span><br><span class="line">$ rpm -ivh nc-1.84-24.el6.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Netcat-执行"><a href="#Netcat-执行" class="headerlink" title="Netcat 执行"></a>Netcat 执行</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &lt;four-letter <span class="built_in">command</span>&gt; | nc 127.0.0.1 2181</span><br></pre></td></tr></tbody></table></figure>
<h4 id="DOS-攻击"><a href="#DOS-攻击" class="headerlink" title="DOS 攻击"></a><a href="https://en.wikipedia.org/wiki/Denial-of-service_attack">DOS</a> <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2693">攻击</a></h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 避免 wchp / wchc 四字命令被 DOS 攻击利用</span></span><br><span class="line">$ vim zoo.cfg</span><br><span class="line">  <span class="comment"># 4lw.commands.whitelist=*</span></span><br><span class="line">  4lw.commands.whitelist=<span class="built_in">stat</span>, ruok, conf, isro</span><br></pre></td></tr></tbody></table></figure>
<h4 id="产生的日志"><a href="#产生的日志" class="headerlink" title="产生的日志"></a>产生的日志</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 可以看到 zk.out 文件中出现 0:0:0:0:0:0:0:1（IPv6 的回送地址，相当于 IPv4 的 127.0.0.1）和 Processing xxxx command 相应的日志</span></span><br><span class="line">2017-06-13 23:05:01,998 [myid:5] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxnFactory@197] - Accepted socket connection from /0:0:0:0:0:0:0:1:40986</span><br><span class="line">2017-06-13 23:05:01,998 [myid:5] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxn@827] - Processing srvr <span class="built_in">command</span> from /0:0:0:0:0:0:0:1:40986</span><br><span class="line">2017-06-13 23:05:02,000 [myid:5] - INFO  [Thread-64778:NIOServerCnxn@1007] - Closed socket connection <span class="keyword">for</span> client /0:0:0:0:0:0:0:1:40986 (no session established <span class="keyword">for</span> client)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><h4 id="zkServer"><a href="#zkServer" class="headerlink" title="zkServer"></a>zkServer</h4><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ bin/zkServer.sh start</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ bin/zkServer.sh status</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">$ bin/zkServer.sh stop</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ bin/zkServer.sh restart</span><br></pre></td></tr></tbody></table></figure>
<h5 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过增加 `start-foreground` 参数来排查失败原因</span></span><br><span class="line">$ bin/zkServer.sh start-foreground</span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /home/eagle/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Error: Could not find or load main class org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line"><span class="comment"># /home/eagle/software/zookeeper/zookeeper-3.4.10.jar 的问题，重新下载，校验 md5 正确后，再次安装即可</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="zkCli"><a href="#zkCli" class="headerlink" title="zkCli"></a>zkCli</h4><h5 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$ZOOKEEPER_HOME</span></span><br><span class="line">$ bin/zkCli -server &lt;zk host&gt;:2181,&lt;zk host&gt;:2181,&lt;zk host&gt;:2181</span><br></pre></td></tr></tbody></table></figure>
<h5 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h5><div class="table-container">
<table>
<thead>
<tr>
<th>Command</th>
<th>Example</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>create</td>
<td></td>
<td>创建一个节点</td>
</tr>
<tr>
<td>ls</td>
<td></td>
<td>查看当前节点数据</td>
</tr>
<tr>
<td>set</td>
<td></td>
<td>修改节点</td>
</tr>
<tr>
<td>get</td>
<td></td>
<td>得到一个节点，包含<code>数据</code>和<code>更新次数</code>等信息</td>
</tr>
<tr>
<td>delete</td>
<td></td>
<td>删除一个节点</td>
</tr>
<tr>
<td>deleteall</td>
<td></td>
<td>递归删除</td>
</tr>
<tr>
<td>history</td>
<td></td>
<td>列出最近的历史命令</td>
</tr>
<tr>
<td>redo <code>&lt;command number: n&gt;</code></td>
<td>redo 1</td>
<td>重做第 n 步命令</td>
</tr>
<tr>
<td>stat</td>
<td></td>
<td>打印节点状态</td>
</tr>
<tr>
<td>close</td>
<td></td>
<td>关闭当前连接</td>
</tr>
<tr>
<td>connect <code>&lt;host&gt;:&lt;port&gt;</code></td>
<td>connect localhost:2181</td>
<td>当 close 当前连接或者意外退出后，可在 <code>zkCli</code> 命令模式中重连</td>
</tr>
<tr>
<td>quit</td>
<td></td>
<td>退出当前连接</td>
</tr>
<tr>
<td>setAcl <code>&lt;path&gt; &lt;acl: scheme + id + permissions&gt;</code></td>
<td>setAcl /zk world:anyone:cdrw</td>
<td>设置节点权限策略（详见上文 “基本概念 - ACL” 部分）</td>
</tr>
<tr>
<td>getAcl <code>&lt;path&gt;</code></td>
<td></td>
<td>获取节点权限策略</td>
</tr>
<tr>
<td>addauth <code>&lt;scheme&gt; &lt;auth&gt;</code></td>
<td>addauth digest username:password</td>
<td>节点权限认证</td>
</tr>
<tr>
<td>setquota -n</td>
<td>-b val <code>&lt;path&gt;</code></td>
<td></td>
</tr>
<tr>
<td>listquota <code>&lt;path&gt;</code></td>
<td>listquota /zookeeper</td>
<td>查看节点的配额</td>
</tr>
<tr>
<td></td>
<td>count=5, bytes=-1</td>
<td>/zookeeper 节点个数限额为 5，长度无限额</td>
</tr>
<tr>
<td>delquota <code>[-n or -b]</code> <code>&lt;path&gt;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>sync <code>&lt;path&gt;</code></td>
<td></td>
<td>强制同步</td>
</tr>
<tr>
<td></td>
<td></td>
<td>（由于“过半原则”，导致某些 ZooKeeper Server 上的数据是旧的，用 <code>sync</code> 命令可强制同步所有的更新操作）</td>
</tr>
<tr>
<td>printwatches on</td>
<td>off</td>
</tr>
</tbody>
</table>
</div>
<div class="note info">在 3.6.0 版本中，Apache ZooKeeper 通过增加批量删除特性改进了 deleteall 命令的性能，并彻底删除了过期的 rmr 命令</div>

<h5 id="常见组合（for-Kafka）"><a href="#常见组合（for-Kafka）" class="headerlink" title="常见组合（for Kafka）"></a>常见组合（for Kafka）</h5><div class="table-container">
<table>
<thead>
<tr>
<th>Command</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>get /consumers/<code>&lt;topic&gt;</code>/owners</td>
<td>查看 Topic 实时消费的 Group ID</td>
</tr>
<tr>
<td>get /consumers/<code>&lt;topic&gt;</code>/offsets/<code>&lt;group id&gt;</code>/<code>&lt;partitionor&gt;</code></td>
<td>查看 Offset 情况（ctime：创建时间；mtime：修改时间）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a><a href="http://zookeeper.apache.org/doc/current/zookeeperAdmin.html">常用配置</a></h2><h3 id="dataDir"><a href="#dataDir" class="headerlink" title="dataDir"></a>dataDir</h3><p>　ZooKeeper 保存服务器存储快照文件的目录，默认情况，ZooKeeper 将 <code>写数据的日志文件</code>也保存在这个目录里（default：/tmp/zookeeper）</p>
<h3 id="dataLogDir"><a href="#dataLogDir" class="headerlink" title="dataLogDir"></a>dataLogDir</h3><p>　用来存储服务器事务日志</p>
<h3 id="clientPort"><a href="#clientPort" class="headerlink" title="clientPort"></a>clientPort</h3><p>　客户端连接 ZooKeeper 服务器的端口，ZooKeeper 会监听这个端口，接受客户端的访问请求（default：2181）</p>
<h3 id="tickTime（SS-CS）"><a href="#tickTime（SS-CS）" class="headerlink" title="tickTime（SS / CS）"></a>tickTime（SS / CS）</h3><p>　用来指示 <code>服务器</code>之间或<code>客户端</code>与<code>服务器</code>之间维护<code>心跳</code>机制的 最小时间单元，<code>Session</code> 最小过期时间默认为两倍的 tickTime（default：<code>2000</code>ms）</p>
<h3 id="initLimit（LF）"><a href="#initLimit（LF）" class="headerlink" title="initLimit（LF）"></a>initLimit（LF）</h3><p>　集群中的 <code>Leader</code> 节点和 <code>Follower</code> 节点之间<code>初始连接</code>时能容忍的最多心跳数（default：5 tickTime）</p>
<h3 id="syncLimit（LF）"><a href="#syncLimit（LF）" class="headerlink" title="syncLimit（LF）"></a>syncLimit（LF）</h3><p>　集群中的 <code>Leader</code> 节点和 <code>Follower</code> 节点之间<code>请求和应答</code>时能容忍的最多心跳数（default：2 tickTime）</p>
<h3 id="minSessionTimeout-amp-maxSessionTimeout"><a href="#minSessionTimeout-amp-maxSessionTimeout" class="headerlink" title="minSessionTimeout &amp; maxSessionTimeout"></a>minSessionTimeout &amp; maxSessionTimeout</h3><p>　默认分别是 2 * tickTime ~ 20 * tickTime，来用控制 客户端设置的 Session 超时时间。如果超出或者小于，将自动被服务端强制设置为 最大或者最小</p>
<h3 id="maxClientCnxns"><a href="#maxClientCnxns" class="headerlink" title="maxClientCnxns"></a>maxClientCnxns</h3><p>　控制单个客户端（以 IP 地址为唯一标识）创建连接数的上限（default：60），设置为 0 则不作限制</p>
<h3 id="集群节点"><a href="#集群节点" class="headerlink" title="集群节点"></a>集群节点</h3><p>　配置 ZooKeeper 集群中的服务器节点<br>　　格式：<code>server.&lt;myid&gt;</code>=<code>&lt;服务器地址&gt;</code>:<code>&lt;LF通讯端口&gt;</code>:<code>&lt;选举端口&gt;</code><br>　　样例：<code>server.1=yuzhouwan:2888:3888</code></p>
<h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a><a href="http://zookeeper.apache.org/doc/r3.5.4-beta/zookeeperReconfig.html">动态配置</a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim zoo_replicated1.cfg</span><br><span class="line">  tickTime=2000</span><br><span class="line">  dataDir=/zookeeper/data/zookeeper1</span><br><span class="line">  initLimit=5</span><br><span class="line">  syncLimit=2</span><br><span class="line">  dynamicConfigFile=/zookeeper/conf/zoo_replicated1.cfg.dynamic</span><br><span class="line"></span><br><span class="line">$ vim zoo_replicated1.cfg.dynamic</span><br><span class="line">  server.1=125.23.63.23:2780:2783:participant;2791</span><br><span class="line">  server.2=125.23.63.24:2781:2784:participant;2792</span><br><span class="line">  server.3=125.23.63.25:2782:2785:participant;2793</span><br></pre></td></tr></tbody></table></figure>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="采集方式"><a href="#采集方式" class="headerlink" title="采集方式"></a>采集方式</h3><h4 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h4><h5 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h5><p>　ZooKeeper 默认支持 JMX 连接，但是只支持本地连接<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启远程 JMX</span></span><br><span class="line">$ vim bin/zkServer.sh</span><br><span class="line">  <span class="comment"># ZOOMAIN="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=$JMXLOCALONLY org.apache.zookeeper.server.quorum.QuorumPeerMain"</span></span><br><span class="line">  ZOOMAIN=<span class="string">"-Dcom.sun.management.jmxremote.port=8888 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false org.apache.zookeeper.server.quorum.QuorumPeerMain"</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="Four-letter-command"><a href="#Four-letter-command" class="headerlink" title="Four-letter command"></a>Four-letter command</h4><h4 id="TCP-Dump"><a href="#TCP-Dump" class="headerlink" title="TCP Dump"></a>TCP Dump</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 tcpdump 命令，需要在 root 权限下执行</span></span><br><span class="line">$ sudo tcpdump tcp port 2181 and host ! 127.0.0.1</span><br><span class="line">  <span class="comment"># 下面抓包到的信息，是 Curator 远程连接，并在 /children 命名空间下，创建临时节点 /yuzhouwan，最终断开 TCP 连接的过程</span></span><br><span class="line">  14:50:16.192736 IP 10.10.10.10.56342 &gt; yuzhouwan01.eforward: Flags [S], seq 818611125, win 8192, options [mss 1460,nop,wscale 8,nop,nop,sackOK], length 0</span><br><span class="line">  14:50:16.192765 IP yuzhouwan01.eforward &gt; 10.10.10.10.56342: Flags [S.], seq 3867146147, ack 818611126, win 14600, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 0</span><br><span class="line">  14:50:16.193502 IP 10.10.10.10.56342 &gt; yuzhouwan01.eforward: Flags [.], ack 1, win 256, length 0</span><br><span class="line">  14:50:16.196755 IP 10.10.10.10.56342 &gt; yuzhouwan01.eforward: Flags [P.], seq 1:50, ack 1, win 256, length 49</span><br><span class="line">  14:50:16.196768 IP yuzhouwan01.eforward &gt; 10.10.10.10.56342: Flags [.], ack 50, win 115, length 0</span><br><span class="line">  14:50:16.198618 IP yuzhouwan01.eforward &gt; 10.10.10.10.56342: Flags [P.], seq 1:42, ack 50, win 115, length 41</span><br><span class="line">  14:50:16.214597 IP 10.10.10.10.56342 &gt; yuzhouwan01.eforward: Flags [P.], seq 50:76, ack 42, win 256, length 26</span><br><span class="line">  14:50:16.215109 IP yuzhouwan01.eforward &gt; 10.10.10.10.56342: Flags [P.], seq 42:62, ack 76, win 115, length 20</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 比较关心的一个问题是，<code>tcpdump</code> 是否会对性能造成影响？答案是：会的。当过滤上千的 IP 时，已经会影响到服务器性能。主要瓶颈在 <code>BPF Filter</code>，这是一个 $O(n)$ 线性时间复杂度的算法，可以考虑 <code>HiPAC 多维树匹配</code> 替代</p>
<h3 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h3><h4 id="ZooKeeper-运行状态（mntr）"><a href="#ZooKeeper-运行状态（mntr）" class="headerlink" title="ZooKeeper 运行状态（mntr）"></a>ZooKeeper 运行状态（mntr）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Metrics</th>
<th>Comment</th>
<th>Threshold</th>
</tr>
</thead>
<tbody>
<tr>
<td>zk_version</td>
<td>版本</td>
<td></td>
</tr>
<tr>
<td>zk_avg_latency</td>
<td>平均 响应延迟</td>
<td>&gt; 50ms，比上次统计增长超过 20ms，且上一次延迟不为 0</td>
</tr>
<tr>
<td>zk_max_latency</td>
<td>最大 响应延迟</td>
<td></td>
</tr>
<tr>
<td>zk_min_latency</td>
<td>最小 响应延迟</td>
<td></td>
</tr>
<tr>
<td>zk_packets_received</td>
<td>收包数</td>
<td></td>
</tr>
<tr>
<td>zk_packets_sent</td>
<td>发包数</td>
<td></td>
</tr>
<tr>
<td>zk_num_alive_connections</td>
<td>活跃连接数</td>
<td>&gt; 3000</td>
</tr>
<tr>
<td>zk_outstanding_requests</td>
<td>堆积请求数</td>
<td>连续两次大于 5（粒度：1min）</td>
</tr>
<tr>
<td>zk_server_state</td>
<td>主从状态</td>
<td>由 Leader 变为 Follower 或 由 Follower 变为 Leader</td>
</tr>
<tr>
<td>zk_znode_count</td>
<td>znode 数</td>
<td>&gt; 40000</td>
</tr>
<tr>
<td>zk_watch_count</td>
<td>watch 数</td>
<td>&gt; 50000</td>
</tr>
<tr>
<td>zk_ephemerals_count</td>
<td>临时节点数</td>
<td></td>
</tr>
<tr>
<td>zk_approximate_data_size</td>
<td>近似数据总和大小</td>
<td></td>
</tr>
<tr>
<td>zk_open_file_descriptor_count</td>
<td>打开 <code>文件描述符</code> 数</td>
<td></td>
</tr>
<tr>
<td>zk_max_file_descriptor_count</td>
<td>最大 <code>文件描述符</code> 数</td>
<td></td>
</tr>
<tr>
<td><strong>zk_followers</strong></td>
<td>Follower 数</td>
<td></td>
</tr>
<tr>
<td><strong>zk_synced_followers</strong></td>
<td>已同步的 Follower 数</td>
<td>连续两次检测到未同步的 Follower 节点 (粒度：1min)</td>
</tr>
<tr>
<td><strong>zk_pending_syncs</strong></td>
<td>阻塞中的 sync 操作</td>
</tr>
</tbody>
</table>
</div>
<div class="note info">加粗指标，只有 Leader 节点才会有</div>






<h3 id="实时预警"><a href="#实时预警" class="headerlink" title="实时预警"></a>实时预警</h3><h4 id="numenta-nupic"><a href="#numenta-nupic" class="headerlink" title="numenta / nupic"></a><a href="https://github.com/numenta">numenta</a> / <strong><a href="https://github.com/numenta/nupic">nupic</a></strong></h4><p>　NuPIC<code>（Numenta Platform for Intelligent Computing，Numenta智能计算平台）</code> 是一个与众不同的开源人工智能平台，它基于一种<code>脑皮质学习算法</code>，即 “层级实时记忆”（<strong>H</strong>ierarchical <strong>T</strong>emporal <strong>M</strong>emory，<a href="https://numenta.com/assets/pdf/whitepapers/hierarchical-temporal-memory-cortical-learning-algorithm-0.2.1-en.pdf">HTM</a>）。该算法旨在模拟新大脑皮层的工作原理，将复杂的问题转化为模式匹配与预测，而传统的 AI 算法大多是针对特定的任务目标而设计的<br>　NuPIC 聚焦于分析实时数据流，可以通过学习数据之间基于时间的状态变化（而非阀值设置），对未知数据进行预测，并揭示其中的非常规特性。详见我的另一篇博客：<a href="https://yuzhouwan.com/posts/42737/#开源项目">人工智能</a></p>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h3><p>　<a href="https://github.com/brownsys">brownsys</a> / <a href="https://github.com/brownsys/zookeeper-benchmark">zookeeper-benchmark</a> （很难找到合适的开源项目，需自己编写 Benchmark 工具）</p>
<h3 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h3><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h5 id="日志目录"><a href="#日志目录" class="headerlink" title="日志目录"></a>日志目录</h5><ul>
<li>快照目录 dataDir 和 事务日志目录 dataLogDir 分离</li>
<li>写事务日志的目录，需要保证目录空间足够大，并挂载到单独的磁盘上（为了保证<code>数据的一致性</code>，ZooKeeper 在返回客户端事务请求响应之前，必须要将此次请求对应的<code>事务日志</code>刷入到磁盘中 [forceSync 参数控制，default：yes]，所以事务日志的写入速度，直接决定了 ZooKeeper 的吞吐率）</li>
</ul>
<h5 id="自动日志清理"><a href="#自动日志清理" class="headerlink" title="自动日志清理"></a>自动日志清理</h5><h6 id="autopurge-purgeInterval"><a href="#autopurge-purgeInterval" class="headerlink" title="autopurge.purgeInterval"></a>autopurge.purgeInterval</h6><p>　指定清理频率，单位为小时（default：0 表示不开启自动清理）</p>
<h6 id="autopurge-snapRetainCount"><a href="#autopurge-snapRetainCount" class="headerlink" title="autopurge.snapRetainCount"></a>autopurge.snapRetainCount</h6><p>　和上面 <code>purgeInterval</code> 参数配合使用，指定需要保留的文件数目（default：3）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/zoo.cfg</span><br><span class="line">  autopurge.snapRetainCount=3</span><br><span class="line">  autopurge.purgeInterval=1</span><br><span class="line"><span class="comment"># 注意：ZooKeeper 重启会自动清除 zookeeper.out 日志，如果有排错需要，则应先备份好日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发现单事务日志量过大，导致定时清理无法及时处理，可以使用 zkCleanup.sh 进行手动清除</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/software/zookeeper1</span><br><span class="line">$ zookeeper1/bin/zkCleanup.sh /home/zookeeper/logs/zookeeper1/version-2/ 3</span><br><span class="line">  Removing file: Aug 9, 2017 12:08:49 PM    /home/zookeeper/logs/zookeeper1/version-2/log.1c00000001</span><br><span class="line">  Removing file: Aug 9, 2017 02:03:33 PM    /home/zookeeper/data/zookeeper1/version-2/snapshot.1c0000ab90</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Log4j-滚动日志"><a href="#Log4j-滚动日志" class="headerlink" title="Log4j 滚动日志"></a>Log4j 滚动日志</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$ZOOKEEPER_HOME</span></span><br><span class="line">$ vim conf/log4j.properties</span><br><span class="line">  zookeeper.root.logger=INFO, CONSOLE</span><br><span class="line">  zookeeper.console.threshold=INFO</span><br><span class="line">  zookeeper.log.dir=.</span><br><span class="line">  zookeeper.log.file=zookeeper.log</span><br><span class="line">  zookeeper.log.threshold=DEBUG</span><br><span class="line">  zookeeper.tracelog.dir=.</span><br><span class="line">  zookeeper.tracelog.file=zookeeper_trace.log</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 可以调整为 DaliyRollingFileAppender，每天滚动创建新的日志文件</span></span><br><span class="line">  log4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender</span><br><span class="line">  log4j.appender.ROLLINGFILE.Threshold=<span class="variable">${zookeeper.log.threshold}</span></span><br><span class="line">  log4j.appender.ROLLINGFILE.File=<span class="variable">${zookeeper.log.dir}</span>/<span class="variable">${zookeeper.log.file}</span></span><br><span class="line"></span><br><span class="line">$ vim bin/zkServer.sh</span><br><span class="line">  <span class="comment"># 增加 ZOO_LOG_DIR 配置</span></span><br><span class="line">  ZOO_LOG_DIR=<span class="variable">$ZOOBINDIR</span>/../log4j</span><br><span class="line"></span><br><span class="line">$ vim bin/zkEnv.sh</span><br><span class="line">  <span class="comment"># if [ "x${ZOO_LOG4J_PROP}" = "x" ]</span></span><br><span class="line">  <span class="comment"># then</span></span><br><span class="line">  <span class="comment">#     ZOO_LOG4J_PROP="INFO,CONSOLE"</span></span><br><span class="line">  <span class="comment"># fi</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"x<span class="variable">${ZOO_LOG4J_PROP}</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">      ZOO_LOG4J_PROP=<span class="string">"INFO,ROLLINGFILE"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Observer-模式"><a href="#Observer-模式" class="headerlink" title="Observer 模式"></a>Observer 模式</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><h6 id="对读请求进行扩展"><a href="#对读请求进行扩展" class="headerlink" title="对读请求进行扩展"></a>对读请求进行扩展</h6><p>　通过增加更多的 <code>Observer</code>，可以接收更多的<code>读请求</code>流量，却不会牺牲<code>写操作</code>的吞吐量（写操作的吞吐量取决于 <code>quorum</code> 法定人数的个数）<br>　如果增加更多的 Server 进行投票，Quorum 会变大，这会降低<code>写操作</code>的吞吐量<br>　然而增加 <code>Observer</code> 并不会完全没有损耗，新的 <code>Observer</code> 在提交一个事务后收到一条额外的 <code>INFORM</code> 消息。这个损耗比加入 <code>Follower</code> 进行投票来说会小很多</p>
<p><img data-src="/picture/zk/zk_observer_throughput.png" alt=""></p>
<center>（图片来源：<a href="https://issues.apache.org/jira/browse/ZOOKEEPER-368" target="_blank">Observers: core functionality</a>™）</center>


<h6 id="跨数据中心部署"><a href="#跨数据中心部署" class="headerlink" title="跨数据中心部署"></a>跨数据中心部署</h6><p>　把 <code>participant</code> 分散到多个数据中心，可能会因为数据中心之间的网络延迟，导致系统被拖慢<br>　使用 <code>Observer</code> 的话，更新操作都在单独的数据中心来处理，再发送到其他数据中心，让 <code>Client</code> 消费数据（分布式数据库[中美异地机房]同步系统 <a href="https://github.com/alibaba/otter">Otter</a> 就使用该模式）</p>
<p><img data-src="/picture/zk/zk_ovserver_multi_cyberroom.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>

<h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim conf/zoo.cfg</span><br><span class="line">  peerType=observer</span><br><span class="line">  server.1:localhost:2181:3181:observer <span class="comment"># 其他需要扩展成 Observer 的 Server 都需要加上 `:observer` 后缀</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="INFORM-消息"><a href="#INFORM-消息" class="headerlink" title="INFORM 消息"></a>INFORM 消息</h5><p>　因为 Observer 不参与到 ZAB 选举中，所以 Leader 节点不会发送 proposal 给 Observer，只会发送一条包含<code>已经通过选举的 zxid</code> 的 INFORM 消息。这里，参与 ZAB 选举的 Leader、Follower 节点称之为 <code>PARTICIPANT</code> Server，而 Observer 则属于 <code>OBSERVER</code> Server</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><h5 id="JVM-相关"><a href="#JVM-相关" class="headerlink" title="JVM 相关"></a>JVM 相关</h5><h6 id="swappiness"><a href="#swappiness" class="headerlink" title="swappiness"></a>swappiness</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$ZOOKEEEPER_HOME</span></span><br><span class="line"><span class="comment"># 常驻进程，需要避免 swapping 损害性能</span></span><br><span class="line"><span class="comment"># 临时生效</span></span><br><span class="line">$ <span class="built_in">echo</span> 0 &gt; /proc/sys/vm/swappiness</span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line">  vm.swappiness=0 <span class="comment"># memory first</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 `-XX:+AlwaysPreTouch` 参数，在进程启动的时候，让 jvm 通过 demand-zeroed 方式将内存一次分配到位（ES #16937 / ZK #301）</span></span><br><span class="line"><span class="comment"># 使用 CMS 垃圾回收器（“jdk7 + 内存使用不多” 的缘故，可以暂不考虑 G1GC）</span></span><br><span class="line">$ vim conf/java.env</span><br><span class="line">  <span class="built_in">export</span> JVMFLAGS=<span class="string">"-Xms3G -Xmx3G -Xmn1G -XX:+AlwaysPreTouch -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC"</span></span><br><span class="line">  <span class="comment"># 如果需要打印 GC 日志，则多增加一些 flag</span></span><br><span class="line">  <span class="built_in">export</span> JVMFLAGS=<span class="string">"-Xms3G -Xmx3G -Xmn1G -XX:+AlwaysPreTouch -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:-PrintGCTimeStamps -Xloggc:/home/zookeeper/logs/zookeeper_`date '+%Y%m%d%H%M%S'`.gc -XX:-UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=64M"</span></span><br><span class="line">  <span class="comment"># 需要注意的是，如果不希望 zkCli 等命令创建 gc 日志文件，需要把 JVMFLAGS 改成 SERVER_JVMFLAGS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更进一步，如果有四字命令在做监控，则建议，直接修改 zkServer.sh，否则因为 zookeeper_`date '+%Y%m%d%H%M%S'`.gc 的存在，导致每次四字命令执行，会有很多小日志被创建（ZK#302 已解决，待分析）</span></span><br><span class="line">$ vim bin/zkServer.sh</span><br><span class="line">  start)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    START_SERVER_JVMFLAGS=<span class="string">"-Xms3G -Xmx3G -Xmn1G -XX:+AlwaysPreTouch -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:-PrintGCTimeStamps -Xloggc:/home/zookeeper/logs/zookeeper_`date '+%Y%m%d%H%M%S'`.gc -XX:-UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=64M"</span></span><br><span class="line">    nohup <span class="string">"<span class="variable">$JAVA</span>"</span> <span class="variable">$ZOO_DATADIR_AUTOCREATE</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">${ZOO_LOG_DIR}</span>"</span> \</span><br><span class="line">    <span class="string">"-Dzookeeper.log.file=<span class="variable">${ZOO_LOG_FILE}</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">${ZOO_LOG4J_PROP}</span>"</span> \</span><br><span class="line">    -XX:+HeapDumpOnOutOfMemoryError -XX:OnOutOfMemoryError=<span class="string">'kill -9 %p'</span> \</span><br><span class="line">    -cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> <span class="variable">$START_SERVER_JVMFLAGS</span> <span class="variable">$ZOOMAIN</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span> &gt; <span class="string">"<span class="variable">$_ZOO_DAEMON_OUT</span>"</span> 2&gt;&amp;1 &lt; /dev/null &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆大小的最终确定，需要在 benchmark 结果的基础之上，再做调整</span></span><br><span class="line"><span class="comment"># 另外，一旦创建完该文件，ZooKeeper 进程会自动加载，因此，需要确保无误之后，再建立 java.env 文件</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="升级-JDK8"><a href="#升级-JDK8" class="headerlink" title="升级 JDK8"></a>升级 JDK8</h6><p>　为何建议升级 JDK8 呢？因为 ZooKeeper 里面很多关键的功能点，都用到了 Atomic 类，而该类在 JDK8 中做了一次升级，性能提升了 6x 倍（JDK8 中加入了 <code>Unsafe.getUnsafe().getAnd[Add|Set][Int|Long|Object]</code> 一系列方法对 Atomic 类做了增强，由于无法看到 Oracle JDK 里 Unsafe 的相关实现，有兴趣可以参考 <a href="http://hg.openjdk.java.net/jdk8u/hs-dev/jdk/file/a006fa0a9e8f/src/share/classes/sun/misc/Unsafe.java">OpenJDK 源码</a>。目前，存在一种比较靠谱的猜测是，<a href="https://github.com/aeste/gcc/blob/master/libjava/sun/misc/natUnsafe.cc#L52"><code>compare-and-swap</code></a> 被替换成系统底层的 <a href="https://github.com/aeste/gcc/blob/d2774faa810502779b6e39b1e1578ceafde5f4cd/gcc/sync-builtins.def#L31"><code>fetch-and-add</code></a>，后者用 <strong>lock xadd</strong> 替代了 <strong>lock cmpxchg</strong> 来实现原子操作。其中 指令前缀 <strong>lock</strong> 用来锁定指令涉及的存储区域，<strong>xadd</strong> 指令作用是 交换两个操作数的值，再进行加法操作，<strong>cmpxchg</strong> 比较交换指令，第一操作数先和 <code>AL/AX/EAX</code> 比较，如果相等 <code>ZF</code> 置 1，第二操作数赋给第一操作数，否则 <code>ZF</code> 清 0，第一操作数赋给 <code>AL/AX/EAX</code>。由此可见，<strong>xadd</strong> 指令实现的 FAA 和 <strong>cmpxchg</strong> 指令实现的 CAS 相比，并没有自旋，因此不用担心循环时间过长之后 CPU 资源消耗过大，并且也没有了 CAS 中 ABA 之类的问题 [该问题在 AtomicStampedReference 中，通过增加版本号解决了]）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## 源码</span></span><br><span class="line"><span class="comment"># JDK 8 - AtomicInteger</span></span><br><span class="line">public final int <span class="function"><span class="title">getAndIncrement</span></span>() {</span><br><span class="line">  <span class="built_in">return</span> unsafe.getAndAddInt(this, valueOffset, 1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># JDK7 - AtomicInteger</span></span><br><span class="line">public final int <span class="function"><span class="title">getAndIncrement</span></span>() {</span><br><span class="line">    <span class="keyword">for</span> (;;) {</span><br><span class="line">        int current = get();</span><br><span class="line">        int next = current + 1;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSet(current, next)) <span class="built_in">return</span> current;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">## 汇编</span></span><br><span class="line"><span class="comment"># JDK 8</span></span><br><span class="line">0x0000000002cf49c7: mov    %rbp,0x10(%rsp)</span><br><span class="line">  0x0000000002cf49cc: mov    <span class="variable">$0x1</span>,%eax</span><br><span class="line">  0x0000000002cf49d1: lock xadd %eax,0xc(%rdx)  ;*invokevirtual getAndAddInt</span><br><span class="line">                                                ; - java.util.concurrent.atomic.AtomicInteger::incrementAndGet@8 (line 186)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JDK 7</span></span><br><span class="line">0x0000000002c207f5: lock cmpxchg %r8d,0xc(%rdx)</span><br><span class="line">  0x0000000002c207fb: sete   %r11b</span><br><span class="line">  0x0000000002c207ff: movzbl %r11b,%r11d        ;*invokevirtual compareAndSwapInt</span><br><span class="line">                                                ; - java.util.concurrent.atomic.AtomicInteger::compareAndSet@9 (line 135)</span><br><span class="line">                                                ; - java.util.concurrent.atomic.AtomicInteger::incrementAndGet@12 (line 206)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指令</span></span><br><span class="line"><span class="comment"># JDK 8</span></span><br><span class="line">XADD—Exchange and Add</span><br><span class="line">  Exchanges the first operand (destination operand) with the second operand (<span class="built_in">source</span> operand), <span class="keyword">then</span> loads the sum of the two values into the destination operand. The destination operand can be a register or a memory location; the <span class="built_in">source</span> operand is a register.</span><br><span class="line">  In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix <span class="keyword">in</span> the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix <span class="keyword">in</span> the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section <span class="keyword">for</span> encoding data and limits.</span><br><span class="line">  This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.</span><br><span class="line"></span><br><span class="line">TEMP ← SRC + DEST;</span><br><span class="line">SRC ← DEST;</span><br><span class="line">DEST ← TEMP;</span><br><span class="line"></span><br><span class="line"><span class="comment"># JDK 7</span></span><br><span class="line">CMPXCHG—Compare and Exchange</span><br><span class="line">  Compares the value <span class="keyword">in</span> the AL, AX, EAX, or RAX register with the first operand (destination operand). If the two values are equal, the second operand (<span class="built_in">source</span> operand) is loaded into the destination operand. Otherwise, the destination operand is loaded into the AL, AX, EAX or RAX register. RAX register is available only <span class="keyword">in</span> 64-bit mode.</span><br><span class="line">  This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically. To simplify the interface to the processor’s bus, the destination operand receives a write cycle without regard to the result of the comparison. The destination operand is written back <span class="keyword">if</span> the comparison fails; otherwise, the <span class="built_in">source</span> operand is written into the destination. (The processor never produces a locked <span class="built_in">read</span> without also producing a locked write.)</span><br><span class="line">  In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers (R8-R15). Use of the REX.W prefix promotes operation to 64 bits. See the summary chart at the beginning of this section <span class="keyword">for</span> encoding data and limits.</span><br><span class="line"></span><br><span class="line">(* Accumulator = AL, AX, EAX, or RAX depending on whether a byte, word, doubleword, or quadword comparison is being performed *)</span><br><span class="line">TEMP ← DEST</span><br><span class="line">IF accumulator = TEMP</span><br><span class="line">  THEN</span><br><span class="line">    ZF ← 1;</span><br><span class="line">    DEST ← SRC;</span><br><span class="line">  ELSE</span><br><span class="line">    ZF ← 0;</span><br><span class="line">    accumulator ← TEMP;</span><br><span class="line">    DEST ← TEMP;</span><br><span class="line">FI;</span><br></pre></td></tr></tbody></table></figure>
<p>Tips: 这里 CAS 还有一个预测分支的损耗，有兴趣可以进一步研究一个问题：为何有序数组的 <code>for</code> 循环遍历，会比无序数组快，以及如何解决？</p>
<p>　截止本文编写时间 <code>2017-6-20 (master:111ae5a)</code>，一共有 70 个 Atomic 实例在 ZooKeeper 中被初始化并使用</p>
<p><img data-src="/picture/zk/zk_atomic.png" alt=""></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>™ 的截图）</center>



<h6 id="G1GC"><a href="#G1GC" class="headerlink" title="G1GC"></a>G1GC</h6><p>　在不牺牲吞吐性能的前提下，<code>G1GC</code> 并能更好地控制 GC 的停顿时间，因此非常合适 ZooKeeper 这类需要控制<code>心跳超时时间（tickTime）</code>的服务<br>　在多处理器和大容量内存的环境下，能更快速地整理空闲空间，避免产生过多的内存碎片<br>　这里只罗列一些常用的配置和特定情况下，需要调整的参数，具体调整到多少才算最佳，还是需要依据 <code>ZooKeeper 具体的使用场景</code>、<code>Beachmark 的结果</code>和 <code>GC 日志</code>的分析</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Params</th>
<th>Meaning</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseG1GC</td>
<td>使用 G1GC</td>
<td></td>
</tr>
<tr>
<td>-XX:G1HeapRegionSize=4m</td>
<td>设置内存分块的大小（1MB~32MB）</td>
<td>当系统中存在大量大对象的时候，大的 Region 会提升 GC 效率</td>
</tr>
<tr>
<td>-XX:MaxGCPauseMillis=200（ms）</td>
<td>此值为建议 <code>JVM</code> 的最长暂停时间</td>
<td>只是建议值，G1GC 只能尽量保证，而无法完全保证</td>
</tr>
<tr>
<td>-XX:InitiatingHeap OccupancyPercent=45</td>
<td>设置使用了<code>整个堆的 n%</code> 时，系统开始进行并行 GC</td>
<td>注意是<strong>整个堆</strong>的百分比。这与 CMS 收集器的类似参数不同</td>
</tr>
<tr>
<td>-XX:ParallelGCThreads=n</td>
<td>设置 STW 工作线程数的值</td>
<td>默认线程数由 CPU 数量决定，通常小于逻辑处理器的个数 m</td>
</tr>
<tr>
<td></td>
<td></td>
<td><strong>m&lt;=8</strong>: $n=m$;</td>
</tr>
<tr>
<td></td>
<td></td>
<td><strong>m&gt;8 &amp; system!=<a href="https://en.wikipedia.org/wiki/SPARC">SPARC</a></strong>: $n\approx5/8*m$;</td>
</tr>
<tr>
<td></td>
<td></td>
<td><strong>m&gt;8 &amp; system=SPARC</strong>: $n\approx5/16*m$</td>
</tr>
<tr>
<td></td>
<td></td>
<td>当有较大的 Update RSet 时间时，可以尝试调整此值</td>
</tr>
<tr>
<td>-XX:ConcGCThreads=n</td>
<td>设置并行标记的线程数</td>
<td>mixed GC 情况下，较长的 cycle start 时间，可以尝试调整此值</td>
</tr>
<tr>
<td></td>
<td></td>
<td>$n\approx1/4 * ParallelGCThreads$</td>
</tr>
<tr>
<td>-XX:+ParallelRefProcEnabled</td>
<td>当看到有较长的 Ref Proc 建议配置此值</td>
<td>CMS 收集器和 G1 收集器均有这个问题。配置以后暂停明显缩小</td>
</tr>
</tbody>
</table>
</div>
<h6 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h6><p>　考虑使用 LongAdder（author：<a href="http://ifeve.com/doug-lea/">Doug Lea</a>）<a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2790">替代 AtomicLong</a>，以提高效率，下面用 100 个线程去 increment 计算 1kw 次，发现效率大致相差 6 倍（已提交 <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2790">jira</a> 欢迎讨论）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// -Xmx512M -Xms512M -Xmn256M -XX:+AlwaysPreTouch -ea</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pressureLongAdder</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="keyword">final</span> LongAdder longAdder = <span class="keyword">new</span> LongAdder();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000_0000</span>; j++) {</span><br><span class="line">                longAdder.increment();</span><br><span class="line">            }</span><br><span class="line">            System.out.print(String.format(<span class="string">"%s %s \t"</span>, Thread.currentThread().getId(), longAdder.longValue()));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            14 19607585 	12 36445036 	20 38985288 	38 76821270 	70 117094732 	18 127252576</span></span><br><span class="line"><span class="comment">            22 137043349 	26 153411172 	30 164051380 	34 165971155  	102 192241678 	134 201104979</span></span><br><span class="line"><span class="comment">            158 232657818 	46 279030056 	174 288502545 	94 347965290 	198 348060553 	118 348087414</span></span><br><span class="line"><span class="comment">            36 353092712 	28 357762215 	44 365464475 	126 379518198 	54 379623515 	182 380077075</span></span><br><span class="line"><span class="comment">            142 385263911 	78 389013887 	62 389085727 	110 389122678 	86 389920423 	166 393535019</span></span><br><span class="line"><span class="comment">            150 396382512 	190 403100499 	32 403161217 	208 403197689 	206 406065520 	16 410725026</span></span><br><span class="line"><span class="comment">            24 415347205 	40 415379997 	48 415733397 	104 418507295 	192 423244160 	176 455793362</span></span><br><span class="line"><span class="comment">            168 458311865 	160 463028656 	136 496375440 	72 541243645 	186 561877000 	170 575352229</span></span><br><span class="line"><span class="comment">            162 584152392 	154 604552121 	138 614092854 	64 638151890 	114 668705836 	58 669235250</span></span><br><span class="line"><span class="comment">            188 699213410 	156 729222401 	124 754336889 	100 784326386 	76 813479501 	120 827569944</span></span><br><span class="line"><span class="comment">            66 830236567 	98 832153503 	112 841408676 	204 849520891 	210 852391130 	202 864804732</span></span><br><span class="line"><span class="comment">            172 875603834 	194 877222893 	200 881090909 	88 882809513 	80 882846368 	56 887174571</span></span><br><span class="line"><span class="comment">            178 889682247 	140 901357028 	146 902169049 	184 904540678 	152 915608988 	130 917896629</span></span><br><span class="line"><span class="comment">            116 924616135 	144 927674541 	122 930399321 	128 939791111 	106 942656234 	84 950848174</span></span><br><span class="line"><span class="comment">            96 951904067 	90 954910184 	74 964338213 	196 966487766 	82 968307139 	52 975854400</span></span><br><span class="line"><span class="comment">            180 977385398 	164 978882525 	50 980896807 	148 988292352 	132 989090669 	108 996891232</span></span><br><span class="line"><span class="comment">            92 996921398 	42 996938988 	68 996953941 	60 1000000000</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        }));</span><br><span class="line">    }</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    <span class="keyword">while</span> (!executorService.isTerminated()) {</span><br><span class="line">        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"\n"</span> + (endTime - startTime));    <span class="comment">// 3275 ms</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// -Xmx512M -Xms512M -Xmn128M -XX:+AlwaysPreTouch -ea</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pressureAtomicLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="keyword">final</span> AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000_0000</span>; j++) {</span><br><span class="line">                atomicLong.getAndIncrement();</span><br><span class="line">            }</span><br><span class="line">            System.out.print(String.format(<span class="string">"%s %s \t"</span>, Thread.currentThread().getId(), atomicLong.longValue()));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            12 390000000 	28 390000000 	44 390000000 	20 390000000 	26 390000000 	18 390000000</span></span><br><span class="line"><span class="comment">            80 390000000 	56 390000000 	96 390000000 	24 390000000 	88 390000000 	72 390000000</span></span><br><span class="line"><span class="comment">            22 390000000 	118 390000000 	54 390000000 	142 390000000 	70 390000000 	86 390000000</span></span><br><span class="line"><span class="comment">            182 390000000 	110 390000000 	62 390000000 	78 390000000 	102 390000000 	158 390000000</span></span><br><span class="line"><span class="comment">            150 390000000 	46 390000000 	38 390000000 	126 390000000 	94 390000000 	134 390000000</span></span><br><span class="line"><span class="comment">            14 390000000 	48 390000000 	40 390000000 	32 390000000 	34 390000000 	64 390000000</span></span><br><span class="line"><span class="comment">            42 390000000 	36 390000000 	16 390000000 	180 416396554 	204 419908287 	196 425536497</span></span><br><span class="line"><span class="comment">            92 732203658 	30 733835560 	202 733835559 	210 733873571 	146 733878564 	186 733883527</span></span><br><span class="line"><span class="comment">            170 733888686 	76 733892691 	84 733888815 	148 733901560 	162 733907032 	172 733908079</span></span><br><span class="line"><span class="comment">            52 733913280 	116 733918421 	124 733906868 	164 733920945 	132 733891348 	68 733923672</span></span><br><span class="line"><span class="comment">            108 733924928 	156 733926091 	60 733921998 	140 733927257 	188 733928891 	154 733871822</span></span><br><span class="line"><span class="comment">            194 733830477 	178 733872527 	100 733830322 	106 748251688 	144 1000000000 	98 1000000000</span></span><br><span class="line"><span class="comment">            58 1000000000 	90 1000000000 	130 1000000000 	138 1000000000 	114 1000000000 	104 1000000000</span></span><br><span class="line"><span class="comment">            168 1000000000 	200 1000000000 	184 1000000000 	160 1000000000 	174 1000000000 	112 1000000000</span></span><br><span class="line"><span class="comment">            190 1000000000 	198 1000000000 	82 1000000000 	206 1000000000 	166 1000000000 	176 1000000000</span></span><br><span class="line"><span class="comment">            136 1000000000 	208 1000000000 	74 1000000000 	122 1000000000 	152 1000000000 	192 1000000000</span></span><br><span class="line"><span class="comment">            120 1000000000 	128 1000000000 	66 1000000000 	50 1000000000</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        }));</span><br><span class="line">    }</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    <span class="keyword">while</span> (!executorService.isTerminated()) {</span><br><span class="line">        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"\n"</span> + (endTime - startTime));    <span class="comment">// 19409 ms</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　下面从源码的角度来分析，首先 LongAdder 继承于 Striped64 类，实现了类似 AtomicLong 的一些 <code>add / increment / decrement / sum / longValue</code> 等方法</p>
<p><img data-src="/picture/zk/zk_long_adder_striped64_number.png" alt=""></p>
<center>（对 <a href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>™ 的截图）</center>

<p>　分析 LongAdder 里面最为核心的一个 <code>add</code> 方法<br></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the given value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x the value to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">    Cell[] as; <span class="keyword">long</span> b, v; <span class="keyword">int</span> m; Cell a;</span><br><span class="line">    <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span> || !casBase(b = base, b + x)) {</span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> || (a = as[getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended = a.cas(v = a.value, v + x)))</span><br><span class="line">            longAccumulate(x, <span class="keyword">null</span>, uncontended);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>　可以看到里面用到了一个 <code>java.util.concurrent.atomic.Striped64.Cell</code> 类，作为最终存放数据的地方，比较特别是，这里是一个数组，而不是 AtomicLong 里面看到的 <code>volatile long</code> 变量，并且 <code>Cell[]</code> 数组的长度是以 <code>2</code> 的指数级进行增长的，到这里多少可以看出 LongAdder 有点想以<strong>空间换时间</strong>的端倪了。之所以是用 <code>Cell[]</code> 数组，是考虑到可以将更新操作分而治之，不必对单一变量进行竞争，而是将压力均分到整个数组里面，这样如果需要得到 <code>LongAdder</code> 的值，只需要做一次 <code>sum</code> 操作</p>
<p>　并且，看 <code>add</code> 方法的第一个 <code>if</code> 分支，<code>cells</code> 是一个 lazy init 的变量，也就是只要是在<strong>单线程无并发</strong>的场景下，就会直接调用 <code>casBase</code> 方法完成 CAS 赋值并返回。如此一来，可以节省下创建数组带来的资源消耗。那么，如果在多线程并发的场景下，<code>casBase</code> 执行失败，则会进行第二个 <code>if</code> 分支的判断，这样就可以发挥 <code>Cell[]</code> 的作用了（AtomicLong 中则是用 while 循环不断进行尝试）。此时 <code>Cell[] as</code> 尚未初始化，因此会进入到 <code>if</code> 分支内，执行 <code>longAccumulate</code> 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Table of cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Cell[] cells;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Padded variant of AtomicLong supporting only raw accesses plus CAS.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * JVM intrinsics note: It would be possible to use a release-only</span></span><br><span class="line"><span class="comment"> * form of CAS here, if it were provided.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>{</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">    Cell(<span class="keyword">long</span> x) { value = x; }</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cas</span><span class="params">(<span class="keyword">long</span> cmp, <span class="keyword">long</span> val)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, cmp, val);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; ak = Cell.class;</span><br><span class="line">            valueOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                (ak.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>　<code>longAccumulate</code> 会首先调用 <code>getProbe</code> 方法获取一个 <code>Probe</code> 当前线程的探测值（利用 <code>java.util.concurrent.ThreadLocalRandom#getProbe</code> 返回随机整数值），因为 <code>Probe</code> 值是通过反射 <code>Thread</code> 类的 <code>threadLocalRandomProbe</code> 变量获取的，而 <code>threadLocalRandomProbe</code> 也是 lazy init，所以如果为 int 默认值 <code>0</code> 的时候，需要用 <code>ThreadLocalRandom.current()</code> 方法进行强制初始化（此处用的是 mix64 <a href="https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed">伪随机数算法</a>，该算法由 Austin Appleby 于  08 年提出的 <a href="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash3</a> 算法的一种变种实现，可以说已经统一了整个伪随机领域，在 <a href="https://github.com/antirez/redis/blob/unstable/src/dict.c#L90"><code>Redis</code></a>、<a href="https://github.com/memcached/memcached/blob/master/murmur3_hash.c"><code>Memcached</code></a>、<a href="https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/MurmurHash.java"><code>Cassandra</code></a>、<a href="https://github.com/apache/hbase/blob/master/hbase-common/src/main/java/org/apache/hadoop/hbase/util/MurmurHash.java"><code>HBase</code></a>、<a href="https://github.com/apache/lucene-solr/blob/master/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/MurmurHash2.java"><code>Lucene</code></a> 和 <a href="https://github.com/elastic/elasticsearch/blob/master/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java"><code>ElasticSearch</code></a> 等各大流行框架中看到 MurmurHash 的身影，具体可参考 Doug Lea 的<a href="http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf">这篇论文</a>）</p>
<p>　随后进入 <code>for (;;)</code> 死循环，这时候会先判断 <code>Cell[]</code> 数组是否为空、长度是否大于 <code>0</code>，如果 <code>Cell[]</code> 未完成初始化，则会去判断 <code>cellsBusy</code> 自旋锁是否为 <code>0</code>，来控制 <code>Cell[]</code> 创建和 resize 大小时的原子性。如果自旋锁为 <code>0</code>，则将其通过 <code>casCellsBusy()</code> 方法设置为 <code>1</code>，之后完成初始化工作并将 <code>cellsBusy</code> 重置为 <code>0</code>（默认 <code>Cell[]</code> 的 size 为 2）</p>
<p>　完成 <code>Cell[]</code> 数组初始化之后，会进入 <code>for (;;)</code> 死循环的第一个 <code>if</code> 分支，计算 <code>as[(n - 1) &amp; h] = as[(2 - 1) &amp; -217768167] = as[1]</code> 获取到一个随机 <code>Cell</code> 是否为空；如果 <code>Cell</code> 为空，则新建 <code>Cell(x)</code> 存入到 <code>Cell[]</code> 的空槽位中；如果 <code>Cell</code> 不为空，则进一步判断 <code>wasUncontended</code> 参数是否为 <code>false</code>，如果是，则说明是预料到可能的冲突，则置为 <code>true</code> 继续尝试新的 <code>Cell</code>；下一个分支 <code>a.cas(v = a.value, ((fn == null) ? v + x : fn.applyAsLong(v, x)))</code> 则是进行对应的操作，这里 <code>fn</code> 为空，则执行 <code>+</code> 累加操作；接下来的一个分支 <code>n &gt;= NCPU || cells != as</code> 则是考虑到 <code>Cell[]</code> 的长度对比操作系统的 <strong>可用虚拟 CPU 核数</strong> 和 <strong>并发竞争的激烈程度</strong>，来判断是否碰撞严重，并和下一个分支一起控制 <code>collide</code> 变量来做标示；最后一个 <code>if</code> 分支 <code>cellsBusy == 0 &amp;&amp; casCellsBusy()</code>，如果到了这里，仍然没有完成 <code>add()</code> 方法的执行，说明需要通过扩展一倍的 <code>Cell[]</code> 数组来满足当前的并发量，之后再次重试，然后会不出意外地落入 <code>a.cas(v = a.value, ((fn == null) ? v + x : fn.applyAsLong(v, x)))</code> 第三个 <code>if</code> 分支中，最终完成 <code>add()</code> 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles cases of updates involving initialization, resizing,</span></span><br><span class="line"><span class="comment"> * creating new Cells, and/or contention. See above for</span></span><br><span class="line"><span class="comment"> * explanation. This method suffers the usual non-modularity</span></span><br><span class="line"><span class="comment"> * problems of optimistic retry code, relying on rechecked sets of</span></span><br><span class="line"><span class="comment"> * reads.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x the value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn the update function, or null for add (this convention</span></span><br><span class="line"><span class="comment"> * avoids the need for an extra field or function in LongAdder).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wasUncontended false if CAS failed before call</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">longAccumulate</span><span class="params">(<span class="keyword">long</span> x, LongBinaryOperator fn,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">boolean</span> wasUncontended)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">if</span> ((h = getProbe()) == <span class="number">0</span>) {</span><br><span class="line">        ThreadLocalRandom.current(); <span class="comment">// force initialization</span></span><br><span class="line">        h = getProbe();</span><br><span class="line">        wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">    <span class="keyword">for</span> (;;) {</span><br><span class="line">        Cell[] as; Cell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) {       <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                    Cell r = <span class="keyword">new</span> Cell(x);   <span class="comment">// Optimistically create</span></span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) {</span><br><span class="line">                        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">try</span> {               <span class="comment">// Recheck under lock</span></span><br><span class="line">                            Cell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                            <span class="keyword">if</span> ((rs = cells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) {</span><br><span class="line">                                rs[j] = r;</span><br><span class="line">                                created = <span class="keyword">true</span>;</span><br><span class="line">                            }</span><br><span class="line">                        } <span class="keyword">finally</span> {</span><br><span class="line">                            cellsBusy = <span class="number">0</span>;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (created) <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.cas(v = a.value, ((fn == <span class="keyword">null</span>) ? v + x : fn.applyAsLong(v, x))))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= NCPU || cells != as) collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!collide) collide = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">if</span> (cells == as) {      <span class="comment">// Expand table unless stale</span></span><br><span class="line">                        Cell[] rs = <span class="keyword">new</span> Cell[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) rs[i] = as[i];</span><br><span class="line">                        cells = rs;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">            }</span><br><span class="line">            h = advanceProbe(h);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) {</span><br><span class="line">            <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> {                           <span class="comment">// Initialize table</span></span><br><span class="line">                <span class="keyword">if</span> (cells == as) {</span><br><span class="line">                    Cell[] rs = <span class="keyword">new</span> Cell[<span class="number">2</span>];</span><br><span class="line">                    rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> Cell(x);</span><br><span class="line">                    cells = rs;</span><br><span class="line">                    init = <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                cellsBusy = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (init) <span class="keyword">break</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (casBase(v = base, ((fn == <span class="keyword">null</span>) ? v + x : fn.applyAsLong(v, x)))) <span class="keyword">break</span>; <span class="comment">// Fall back on using base</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>总结：</p>
<ul>
<li><p><strong>高并发处理能力</strong><br> 从架构的角度来说，<code>AtomicLong</code> 中使用的是单一变量 <code>volatile long</code>，而在 <code>LongAdder</code> 中使用的是 <code>Cell[]</code>，这可以将并发的压力分摊到整个数组上，而非单个变量，可以更加得心应手地处理高并发的场景</p>
</li>
<li><p><strong>低资源消耗</strong><br> <code>Cell[]</code> 数组是延迟初始化的，并且在扩容的操作，是在考虑到 CPU 的核数（即机器的处理能力）和数组操作的碰撞次数（即并发的激烈程度）之后才会发生，尽可能地优化了资源的使用率</p>
</li>
<li><p><strong>更为高效的汇编指令</strong><br> 使用的是 <code>lock xadd</code> 而非 <code>lock cmpxchg</code> 指令来实现原子操作的，避免了 CAS 的 ABA、高并发下不断自旋 导致的 CPU 资源消耗过大、预测分支失败等问题</p>
</li>
</ul>
<h5 id="ZooKeeper-相关"><a href="#ZooKeeper-相关" class="headerlink" title="ZooKeeper 相关"></a>ZooKeeper 相关</h5><h6 id="leaderServes"><a href="#leaderServes" class="headerlink" title="leaderServes"></a>leaderServes</h6><p>　<code>zookeeper.leaderServes</code> 参数用于控制，Leader 节点是否可以被 Client 端连接，默认值为 <code>yes</code><br>　理论上 Leader 可以处理所有 Client 的读写请求，但是在 ZooKeeper 的架构设计中，Leader 的主要作用来对<code>事务更新请求</code>以及集群本身的<code>运行时协调</code><br>　所以，设置成 <code>no</code>，可使得 Leader 节点不接受 Client 端的连接请求，以提高分布式协调能力</p>
<h6 id="jute-maxbuffer"><a href="#jute-maxbuffer" class="headerlink" title="jute.maxbuffer"></a>jute.maxbuffer</h6><p>　<code>jute.maxbuffer</code> 参数用于控制，单个 ZNode 上最大可以存储的数据量，默认值为 1048575（1M - 1, 由<code>BinaryInputArchive.maxBuffer</code> 变量控制）<br>　因为 ZooKeeper 旨在存储大小为<a href="https://github.com/asdf2014/yuzhouwan/blob/master/yuzhouwan-bigdata/yuzhouwan-bigdata-zookeeper/src/test/java/com/yuzhouwan/bigdata/zookeeper/benchmark/ZKBenchmark.java#L98">千字节（1KB）</a> 的数据，因此通常情况下，需要下调这个阀值<br>　需要注意的是，该参数并不是在 Server 和 Client 端同时设置才会生效。实际情况是，在客户端设置后，ZooKeeper 将控制从 Server 端读取数据的大小（<strong>outgoingBuffer</strong>）；而在服务端设置后，则是控制从 Client 端写入数据的大小（<strong>incomingBuffer</strong>）<br>　换句话说，如果 Server 端不设置 maxbuffer，单 <code>ZNode</code> 结点最大可能的写入数据量为 $1024 \cdot 1024 - 42$ $= 1048534$。因为，在数据量达到 1M 的默认限制之前，会因为 <code>org.apache.zookeeper.server.NIOServerCnxn#readLength</code> 中的查看 buffer size 时，<code>lenBuffer.getInt()</code> 的调用就已经抛出了 <code>BufferUnderflowException</code> 了。而如果 Client 端不设置 maxbuffer，将不会对从 Server 端读取到的数据包大小做限制。但是，如果设置了，例如 maxbuffer=1024，但是其实 Client 最大能拿到的数据包大约只有 $1024 - 88 = 936$，因为除了数据本身，还包含了 <code>ReplyHeader（xid/zxid/err, 例如 1,3274,0\n，一般占 9 字节）</code>、<code>Record（Stat，例如 s{2,2,1495790235732,1495790235732,0,2874,0,0,0,0,3273}\n），一般占 55 字节</code>、<code>Tag，例如 response，一般占 8 字节</code> 等其他序列化信息</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 Client 端</span></span><br><span class="line">$ vim <span class="variable">$ZOOKEEPER_HOME</span>/bin/zkCli.sh</span><br><span class="line">  <span class="comment"># 增加 -Djute.maxbuffer=&lt;buffer_size&gt; 参数</span></span><br><span class="line">  <span class="string">"<span class="variable">$JAVA</span>"</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">${ZOO_LOG_DIR}</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">${ZOO_LOG4J_PROP}</span>"</span>  <span class="string">"-Djute.maxbuffer=1073741824"</span>  \</span><br><span class="line">       -cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$CLIENT_JVMFLAGS</span> <span class="variable">$JVMFLAGS</span> \</span><br><span class="line">       org.apache.zookeeper.ZooKeeperMain <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Server 端</span></span><br><span class="line">$ vim <span class="variable">$ZOOKEEPER_HOME</span>/conf/zoo.cfg</span><br><span class="line">  <span class="comment"># 增加 jute.maxbuffer=&lt;buffer_size&gt; 参数</span></span><br><span class="line">  jute.maxbuffer=1073741824</span><br></pre></td></tr></tbody></table></figure>
<h6 id="globalOutstandingLimit"><a href="#globalOutstandingLimit" class="headerlink" title="globalOutstandingLimit"></a>globalOutstandingLimit</h6><p>　<code>zookeeper.globalOutstandingLimit</code> 参数用于控制，服务器最大请求堆积量，默认值为 1000<br>　为防止服务端资源（内存、CPU、网络）被耗尽，根据服务器最大处理能力，可做适当调整</p>
<h6 id="snapCount-amp-preAllocSize"><a href="#snapCount-amp-preAllocSize" class="headerlink" title="snapCount &amp; preAllocSize"></a>snapCount &amp; preAllocSize</h6><p>　<code>zookeeper.snapCount</code> 参数用于控制，两次快照之间事务操作的次数，默认值为 100,000<br>　<code>zookeeper.preAllocSize</code> 参数用于控制，事务日志文件预分配磁盘的大小，默认值为 65536KB（64MB）<br>　两个参数配合设置，可以依据特定业务场景下的事务操作数据量 <code>transactionDataSize</code>，按照 $snapCount * transactionDataSize \ge preAllocSize$ 公式进行适当调整</p>
<h6 id="zookeeper-serverCnxnFactory-amp-zookeeper-clientCnxnSocket"><a href="#zookeeper-serverCnxnFactory-amp-zookeeper-clientCnxnSocket" class="headerlink" title="zookeeper.serverCnxnFactory &amp; zookeeper.clientCnxnSocket"></a>zookeeper.serverCnxnFactory &amp; zookeeper.clientCnxnSocket</h6><p>　在 3.5 版本之后，默认<a href="https://issues.apache.org/jira/browse/ZOOKEEPER-733">使用</a> Netty，在此之前的版本，ZooKeeper 支持将默认使用的 NIO，替代为 Netty。通过在服务端和客户端分配配置以下两个配置项<br>　<code>zookeeper.serverCnxnFactory</code> 设置为 <code>org.apache.zookeeper.server.NettyServerCnxnFactory</code><br>　<code>zookeeper.clientCnxnSocket</code> 设置为 <code>org.apache.zookeeper.ClientCnxnSocketNetty</code></p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="源码环境搭建"><a href="#源码环境搭建" class="headerlink" title="源码环境搭建"></a>源码环境搭建</h3><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 基于 branch-3.4 进行分析</span></span><br><span class="line">$ git fetch https://github.com/apache/zookeeper.git branch-3.4:branch-3.4</span><br></pre></td></tr></tbody></table></figure>
<h4 id="下载安装-Ant"><a href="#下载安装-Ant" class="headerlink" title="下载安装 Ant"></a>下载安装 Ant</h4><ul>
<li>Download: <a href="http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.9-bin.tar.gz">apache-ant-1.9.9-bin.tar.gz</a></li>
<li>安装并设置环境变量</li>
</ul>
<h4 id="执行-Ant-命令"><a href="#执行-Ant-命令" class="headerlink" title="执行 Ant 命令"></a>执行 Ant 命令</h4><h5 id="编译出-IDE-可识别的环境"><a href="#编译出-IDE-可识别的环境" class="headerlink" title="编译出 IDE 可识别的环境"></a>编译出 IDE 可识别的环境</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> %ZOOKEEPER_SOURCE_PATH%</span><br><span class="line">$ ls | grep build.xml</span><br><span class="line">  build.xml</span><br><span class="line">$ ant clean</span><br><span class="line">$ ant eclipse</span><br><span class="line"><span class="comment"># 随后使用 Intellij Idea 导入</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="二次开发后，进行本地测试"><a href="#二次开发后，进行本地测试" class="headerlink" title="二次开发后，进行本地测试"></a>二次开发后，进行本地测试</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 优先编写 JUnit TestCase 进行测试，随后再利用 `ant test-core` 进行一次整体的测试</span></span><br><span class="line">$ ant -Dtest.junit.output.format=xml -Dtest.output=yes -Dtest.junit.threads=2 -Dcompile.c++=yes test-core</span><br></pre></td></tr></tbody></table></figure>
<h5 id="打包编译"><a href="#打包编译" class="headerlink" title="打包编译"></a>打包编译</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ant clean tar -Dbuild.compiler=javac1.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果报错 warning: macro 'AM_PATH_CPPUNIT' not found in library，则需要先安装 cppunit</span></span><br><span class="line"><span class="comment"># 并且，需要保证在 root 用户下执行 ant 编译</span></span><br><span class="line">$ yum install cppunit</span><br></pre></td></tr></tbody></table></figure>
<h4 id="运行-ZooKeeperServerMain"><a href="#运行-ZooKeeperServerMain" class="headerlink" title="运行 ZooKeeperServerMain"></a>运行 ZooKeeperServerMain</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 Program arguments</span></span><br><span class="line"><span class="comment"># Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]</span></span><br><span class="line"><span class="comment"># 传参</span></span><br><span class="line">  2181 E:\data\zk</span><br><span class="line"><span class="comment"># 或者指定配置文件</span></span><br><span class="line">$ cp zoo_sample.cfg zoo.cfg</span><br><span class="line">$ vim zoo.cfg</span><br><span class="line">  <span class="comment"># dataDir=/tmp/zookeeper</span></span><br><span class="line">  dataDir=E:/data/zk</span><br></pre></td></tr></tbody></table></figure>
<h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><h5 id="下载依赖超时"><a href="#下载依赖超时" class="headerlink" title="下载依赖超时"></a>下载依赖超时</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim build.xml</span><br><span class="line">  <span class="comment"># 替换 ant-eclipse 下载地址</span></span><br><span class="line">  <span class="comment"># get src="http://downloads.sourceforge.net/project/ant-eclipse/ant-eclipse/1.0/ant-eclipse-1.0.bin.tar.bz2"</span></span><br><span class="line">  get src=<span class="string">"http://ufpr.dl.sourceforge.net/project/ant-eclipse/ant-eclipse/1.0/ant-eclipse-1.0.bin.tar.bz2"</span></span><br><span class="line"></span><br><span class="line">$ vim ivy.xml</span><br><span class="line">  <span class="comment"># 增加 commons-coolections 依赖</span></span><br><span class="line">  &lt;dependency org=<span class="string">"commons-collections"</span> name=<span class="string">"commons-collections"</span> rev=<span class="string">"3.0"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure>
<h5 id="PowerMock-测试-TestingServer-报错-ClassCastException"><a href="#PowerMock-测试-TestingServer-报错-ClassCastException" class="headerlink" title="PowerMock 测试 TestingServer 报错 ClassCastException"></a>PowerMock 测试 TestingServer 报错 ClassCastException</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">17:32:55.821 [Thread-1] ERROR o.a.c.test.TestingZooKeeperServer - From testing server (random state: <span class="literal">false</span>) <span class="keyword">for</span> instance: InstanceSpec{dataDirectory=/var/folders/4z/h5ftkmm90vg5s7j0kv65j0gw0000gp/T/1542274365502-0, port=2181, electionPort=64470, quorumPort=64471, deleteDataDirectoryOnClose=<span class="literal">true</span>, serverId=1, tickTime=-1, maxClientCnxns=-1, customProperties={}, hostname=127.0.0.1} org.apache.curator.test.InstanceSpec@59c3be02</span><br><span class="line">java.lang.ClassCastException: class sun.security.provider.ConfigFile</span><br><span class="line">	at java.lang.Class.asSubclass(Class.java:3404) ~[na:1.8.0_171]</span><br><span class="line">	at javax.security.auth.login.Configuration<span class="variable">$2</span>.run(Configuration.java:254) ~[na:1.8.0_171]</span><br><span class="line">	at javax.security.auth.login.Configuration<span class="variable">$2</span>.run(Configuration.java:247) ~[na:1.8.0_171]</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_171]</span><br><span class="line">	at javax.security.auth.login.Configuration.getConfiguration(Configuration.java:246) ~[na:1.8.0_171]</span><br><span class="line">	at org.apache.zookeeper.server.ServerCnxnFactory.configureSaslLogin(ServerCnxnFactory.java:189) ~[na:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]</span><br><span class="line">	at org.apache.zookeeper.server.NIOServerCnxnFactory.configure(NIOServerCnxnFactory.java:82) ~[na:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]</span><br><span class="line">	at org.apache.zookeeper.server.ZooKeeperServerMain.runFromConfig(ZooKeeperServerMain.java:119) ~[na:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]</span><br><span class="line">	at org.apache.curator.test.TestingZooKeeperMain.runFromConfig(TestingZooKeeperMain.java:93) ~[na:2.12.0]</span><br><span class="line">	at org.apache.curator.test.TestingZooKeeperServer<span class="variable">$1</span>.run(TestingZooKeeperServer.java:148) ~[na:2.12.0]</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]</span><br></pre></td></tr></tbody></table></figure>
<h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>因为 Mock 使用自定义 <code>ClassLoader</code> 来完成字节码修改，而对于一些需要使用系统原生 <code>ClassLoader</code>的类，则需要通过 <code>@PowerMockIgnore</code> 注解来显式地告知 Mock 框架跳过它们</p>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">@RunWith(PowerMockRunner.class)</span><br><span class="line">@PrepareForTest({Test.class})</span><br><span class="line">@PowerMockIgnore({<span class="string">"javax.net.ssl.*"</span>, <span class="string">"javax.management.*"</span>, <span class="string">"javax.security.*"</span>, <span class="string">"javax.crypto.*"</span>})</span><br></pre></td></tr></tbody></table></figure>
<h3 id="选主机制"><a href="#选主机制" class="headerlink" title="选主机制"></a>选主机制</h3><h4 id="ZAB-选主流程"><a href="#ZAB-选主流程" class="headerlink" title="ZAB 选主流程"></a>ZAB 选主流程</h4><h5 id="ZooKeeper-提供的选主算法"><a href="#ZooKeeper-提供的选主算法" class="headerlink" title="ZooKeeper 提供的选主算法"></a>ZooKeeper 提供的选主算法</h5><p>　ZooKeeper 提供了 LeaderElection / FastLeaderElection（UDP） / AuthFastLeaderElection（UDP） / <strong>FastLeaderElection（TCP）</strong> 这四种选主算法（初始化 QuorumPeer 时需指定到 electionAlg 参数），前三种策略因为 <code>UDP 的不可靠性</code>和 <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-569"><code>LE 中被选举的 Leader 故障会导致无休止的选举</code></a>等问题，在 v3.4.0 开始被<a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1153">废弃</a></p>
<h5 id="Vote-数据结构"><a href="#Vote-数据结构" class="headerlink" title="Vote 数据结构"></a>Vote 数据结构</h5><p><img data-src="/picture/zk/zk_vote_server_state.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>

<h5 id="QuorumCnxManager-网络通讯"><a href="#QuorumCnxManager-网络通讯" class="headerlink" title="QuorumCnxManager 网络通讯"></a>QuorumCnxManager 网络通讯</h5><p>　<code>QuorumCnxManager</code> 起到管理 Election 过程中<code>网络连接</code>、<code>投票接受和发送</code>的作用。通过在 <a href="https://github.com/apache/zookeeper/blob/master/src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java#L605">QuorumCnxManager.Listener</a> 中创建 <code>ServerSocket</code> 对象监听 Leader 选举的通信端口（default：3888），接收到 创建连接的请求后，由 <code>receiveConnection</code> 方法来处理，并在 <code>handleConnection</code> 方法中对连接的合法性进行处理，包括 接受的数据是否合法（大小不可小于 <code>0</code>，大于 <code>maxBuffer 2048 [硬编码]</code>）、权限控制。之后，会对 SID 进行判断，如果 <code>mySID</code> 大于接受到的 SID 要大，则会执行 <code>closeSocket</code> 方法断开连接，并执行 <code>SendWorker#finish</code> 关闭对应 SID 的 SendWorker。反之，则会创建 SendWorker 和 RecvWorker 并启动。此举可用来确保，只有 SID 更高的节点才会主动创建连接，避免重复的 TCP 连接</p>
<p><img data-src="/picture/zk/zk_quorum_cnx_manager.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>


<h5 id="LE-实现细节"><a href="#LE-实现细节" class="headerlink" title="LE 实现细节"></a>LE 实现细节</h5><p>　最终进行选举的逻辑实现，都在 FastLeaderElection 中<br><img data-src="/picture/zk/zk_fastLeader_election.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>


<p>　首先会发送投给自身的一条选票，并进入 <code>LOOKING</code> 状态，不断接受外部的选票。再接收到选票之后，会对<code>选票的轮次（logicalclock）</code>、<code>事务 ID（ZXID）</code>、<code>服务器 ID（SID）</code>依次进行比较，如果有一项比自身的值更大，则会更新自身的选票，并重新发送给其他 Quorum；否则，将忽略外部接受的选票，并统计是否<code>已过半</code>。最终，如果选票已经被过半数的 Quorum 节点所接受（Accept），则更新服务器状态，完成选举；否则，继续进入 <code>LOOKING</code> 状态，重复之前的步骤</p>
<p><img data-src="/picture/zk/zk_leader_election_flow.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>

<p>　相关实现代码如下<br></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Starts a new round of leader election. Whenever our QuorumPeer</span></span><br><span class="line"><span class="comment"> * changes its state to LOOKING, this method is invoked, and it</span></span><br><span class="line"><span class="comment"> * sends notifications to all other peers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Vote <span class="title">lookForLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Loop in which we exchange notifications until we find a leader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> ((self.getPeerState() == ServerState.LOOKING) &amp;&amp; (!stop)){</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Sends more notifications if have not received enough.</span></span><br><span class="line"><span class="comment">         * Otherwise processes new notification.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="keyword">null</span>) { <span class="comment">// ... }</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (self.getCurrentAndNextConfigVoters().contains(n.sid)) {</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Only proceed if the vote comes from a replica in the current or next voting view.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">switch</span> (n.state) {</span><br><span class="line">            <span class="keyword">case</span> LOOKING:</span><br><span class="line">                <span class="keyword">if</span> (getInitLastLoggedZxid() == -<span class="number">1</span>) {</span><br><span class="line">                    LOG.debug(<span class="string">"Ignoring notification as our zxid is -1"</span>); <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (n.zxid == -<span class="number">1</span>) {</span><br><span class="line">                    LOG.debug(<span class="string">"Ignoring notification from member with -1 zxid"</span> + n.sid); <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// If notification &gt; current, replace and send messages out</span></span><br><span class="line">                <span class="keyword">if</span> (n.electionEpoch &gt; logicalclock.get()) {</span><br><span class="line">                    logicalclock.set(n.electionEpoch);</span><br><span class="line">                    recvset.clear();</span><br><span class="line">                    <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {</span><br><span class="line">                        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">                    }</span><br><span class="line">                    sendNotifications();</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (n.electionEpoch &lt; logicalclock.get()) {</span><br><span class="line">                    <span class="keyword">if</span>(LOG.isDebugEnabled()){</span><br><span class="line">                        LOG.debug(<span class="string">"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x"</span></span><br><span class="line">                                + Long.toHexString(n.electionEpoch)</span><br><span class="line">                                + <span class="string">", logicalclock=0x"</span> + Long.toHexString(logicalclock.get()));</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) {</span><br><span class="line">                    updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                    sendNotifications();</span><br><span class="line">                }</span><br><span class="line">                recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch)); <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">case</span> OBSERVING: <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">case</span> FOLLOWING: <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">case</span> LEADING: <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="comment">// ...</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if a pair (server id, zxid) succeeds our current vote.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id    Server identifier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zxid  Last zxid observed by the issuer of this vote</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">totalOrderPredicate</span><span class="params">(<span class="keyword">long</span> newId, <span class="keyword">long</span> newZxid, <span class="keyword">long</span> newEpoch, <span class="keyword">long</span> curId, <span class="keyword">long</span> curZxid, <span class="keyword">long</span> curEpoch)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (self.getQuorumVerifier().getWeight(newId) == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We return true if one of the following three cases hold:</span></span><br><span class="line"><span class="comment">     * 1- New epoch is higher</span></span><br><span class="line"><span class="comment">     * 2- New epoch is the same as current epoch, but new zxid is higher</span></span><br><span class="line"><span class="comment">     * 3- New epoch is the same as current epoch, new zxid is the same as current zxid, but server id is higher.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> ((newEpoch &gt; curEpoch) ||</span><br><span class="line">            ((newEpoch == curEpoch) &amp;&amp;</span><br><span class="line">            ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="ZAB-和-Paxos-的区别"><a href="#ZAB-和-Paxos-的区别" class="headerlink" title="ZAB 和 Paxos 的区别"></a>ZAB 和 Paxos 的区别</h4><p>　<strong>ZAB</strong>，Atomic Broadcast 协议，保证了发给各副本的消息顺序相同（因为 ZooKeeper 是一个树形结构，很多操作都要先检查才能确定能不能执行，如 <code>/a/b</code> 需要在 先创建好 <code>/a</code> 的前提下，才能创建 <code>/a/b</code>）<br>　<strong>Paxos</strong> 保证不了<code>全序顺序</code>，Paxos 算法的确是不关心请求之间的<code>逻辑顺序</code>，而只考虑<code>数据之间的全序</code></p>
<p>　ZAB 的核心思想，形象的说就是保证任意时刻只有一个节点是 <code>Leader</code>，所有更新事务由 <code>Leader</code>发起去更新所有副本（称为 <code>Follower</code>），更新时用的就是 <code>Two-phase</code> 两阶段提交协议，只要多数节点 prepare 成功，就通知他们 commit<br>　各 <code>Follower</code> 要按当初 <code>Leader</code> 让他们 prepare 的顺序来 apply 事务<br>　另外，因为 ZAB 处理的事务永远不会回滚，ZAB 对 2PC 阶段做了点优化，多个事务只要通知 ZXID 最大的那个 commit，之前的各 <code>Follower</code> 会统统 commit</p>
<p>　本质上，二者的设计目标是不一样的，<code>ZAB 协议</code>主要用于构建一个<strong>髙可用的分布式数据主备</strong>系统，而 <code>Paxos 算法</code>则是为了构建一个<strong>分布式的一致性状态机</strong>系统</p>
<h3 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h3><h4 id="ZooKeeper-内存结构"><a href="#ZooKeeper-内存结构" class="headerlink" title="ZooKeeper 内存结构"></a>ZooKeeper 内存结构</h4><p>　<code>ZKDatabase</code> 作为 ZooKeeper 内存数据库的主体，包含了 <strong>Session 会话</strong>、<strong>DataTree</strong>、<strong>Snapshot</strong>（记录 ZooKeeper 服务器上某一个时刻全量的内存数据内容）、<strong>事务日志</strong>（事务操作时间 、客户端会话 ID、 CXID [客户端的操作序列号]、ZXID、操作类型、会话超时时间、节点路径、节点数据内容、节点的 ACL 信息、 是否为临时节点 和 父节点的子节点版本号）等信息。<code>ZKDatabase</code> 会定时地向磁盘 dump 快照数据，并会在 ZooKeeper 服务端节点<code>启动/重启</code>的时候，read 磁盘上的<code>事务日志</code>和 <code>Snapshot 文件</code>，load 相关数据到内存中，重新恢复出整个 <code>ZKDatabase</code></p>
<p><img data-src="/picture/zk/zk_database_data_tree_data_node.png" alt=""></p>
<center>（利用 <a href="https://www.axure.com.cn/" target="_blank">Axure</a>™ 绘制而成）</center>


<h4 id="ZooKeeperServer-初始化流程"><a href="#ZooKeeperServer-初始化流程" class="headerlink" title="ZooKeeperServer 初始化流程"></a>ZooKeeperServer 初始化流程</h4><p>　启动 ZooKeeper 服务器节点的流程，从 <code>ServerMain#main</code> 方法开始。主要的调用链如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.apache.zookeeper.server.ZooKeeperServerMain#runFromConfig</span><br><span class="line">org.apache.zookeeper.server.ServerCnxnFactory#startup(org.apache.zookeeper.server.ZooKeeperServer)</span><br><span class="line">org.apache.zookeeper.server.NettyServerCnxnFactory#startup      <span class="comment">// 这里暂时不考虑 NIO 的实现，只看 Netty 实现的 `ServerCnxnFactory`</span></span><br><span class="line">org.apache.zookeeper.server.ZooKeeperServer#startdata</span><br><span class="line">org.apache.zookeeper.server.ZooKeeperServer#loadData</span><br></pre></td></tr></tbody></table></figure>
<p>　最终 Session 和 数据的恢复，都将在 <code>loadData</code> 方法中完成。<code>ZKServer</code> 首先利用 <code>ZKDatabase#loadDataBase</code> 调用 <code>FileTxnSnapLog#restore</code> 方法，从磁盘中反序列化 <strong>100</strong>（硬编码了在 <code>findNValidSnapshots(100)</code> 代码里）个有效的 Snapshot 文件，恢复出 <code>DataTree</code> 和 <code>sessionsWithTimeouts</code> 两个数据结构，以便获取到最新有效的 <code>ZXID</code>，并使用 <code>FileTxnSnapLog#processTransaction</code> 方法增量地处理 <code>DataTree</code> 中的事务。随后根据 Session 超时时间，将超时的 Session 从 <code>DataTree#ephemerals</code> 变量（<code>Map&lt;Long: sessionId, HashSet&lt;String&gt;: pathList&gt;</code>）中移除。同时，利用 <code>ZooKeeperServer#takeSnapshot</code> 方法，将 <code>DataTree</code> 实例持久化到磁盘，创建一个全新的 <code>Snapshot</code> 文件</p>
<h4 id="Snapshot-策略"><a href="#Snapshot-策略" class="headerlink" title="Snapshot 策略"></a>Snapshot 策略</h4><p>　首先，我们可以看到 <code>SyncRequestProcessor</code> 类的 <code>run()</code> 方法中，<code>ZooKeeperServer#takeSnapshot</code> 方法的调用是在一个新起的线程中发起的，因此 Snapshot 流程是异步发起的</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.zookeeper.server.SyncRequestProcessor#run</span></span><br><span class="line">snapInProcess = <span class="keyword">new</span> ZooKeeperThread(<span class="string">"Snapshot Thread"</span>) {</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      zks.takeSnapshot();</span><br><span class="line">    } <span class="keyword">catch</span>(Exception e) {</span><br><span class="line">      LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">snapInProcess.start();</span><br></pre></td></tr></tbody></table></figure>
<p>　另外，在启动 <code>Snapshot</code> 线程之前，通过 $logCount \gt (snapCount / 2 + randRoll)$ 公式进行计算，是否应该发起 <code>Snapshot</code>（同时会保证前一个 Snapshot 已经结束才会开始）。由此可见 ZooKeeper 的设计巧妙之处，这里加入了 <code>randRoll</code> 随机数，可以降低所有 <code>Server</code> 节点同时发生 <code>Snapshot</code> 的概率，从而避免因 <code>Snapshot</code> 导致服务受影响。因为，<code>Snapshot</code> 的过程会消耗大量的 <code>磁盘 IO</code>、<code>CPU</code> 等资源，所以全部节点同时 <code>Snapshot</code> 会严重影响集群的对外服务能力</p>
<h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h3><p>　按照 <code>ZooKeeperServer</code> 的文档中所示，事务处理的大体流程链应该为 <code>PrepRequestProcessor</code> - <code>SyncRequestProcessor</code> - <code>FinalRequestProcessor</code>。因此，这也将是我们研究源码的阅读顺序</p>
<h4 id="ZooKeeper-乐观锁"><a href="#ZooKeeper-乐观锁" class="headerlink" title="ZooKeeper 乐观锁"></a>ZooKeeper 乐观锁</h4><p>　分布式中锁分类为，悲观锁（又称悲观并发控制 <strong>P</strong>essimistic <strong>C</strong>oncurrency <strong>C</strong>ontrol，PCC）和 乐观锁（又称乐观并发控制 <strong>O</strong>ptimistic <strong>C</strong>oncurrency <strong>C</strong>ontrol，OCC）。乐观锁事务控制流程，分为 <code>数据读取</code>、<code>写入校验</code>和<code>数据写入</code>三个阶段，常见实现为 JDK 中的 <a href="http://ifeve.com/atomic-operation/">CAS</a>（synchronized / Atomic 类）。如果是<code>并发竞争少</code>或<code>事务冲突频率低</code>的场景，可使用<code>乐观锁</code>，<code>写入校验</code>成功就执行，不成功就失败回滚；如果<code>冲突频率高</code>或者<code>重试代价大</code>的场景，则建议使用<code>悲观锁</code></p>
<p>　而 ZooKeeper 中，是在执行 <code>OpCode.setData</code> 操作的时候，对 <code>version</code> 版本进行校验，从而实现了 <code>乐观锁</code>的 <code>写入校验</code>流程。如果，发现 <code>version</code> 和 <code>currentVersion</code> 是不一致的，则抛出 <code>BadVersionException</code> 异常进而回滚。不过，如果 <code>version</code> 的值为 <code>-1</code>，意味着 Client 的此次操作请求，不需要进行 <code>乐观锁</code>来控制并发，则无需校验。此处，只是对 <code>version</code> 进行了一次数据写入前的校验，如果并发导致失败了，将直接返回 <code>KeeperErrorCode = BadVersion</code> 错误信息</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.zookeeper.server.PrepRequestProcessor#pRequest2Txn</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pRequest2Txn</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> zxid, Request request, Record record, <span class="keyword">boolean</span> deserialize)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> KeeperException, IOException, RequestProcessorException</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    request.hdr = <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid, zks.getTime(), type);</span><br><span class="line">    <span class="keyword">switch</span> (type) {</span><br><span class="line">        <span class="keyword">case</span> OpCode.create: <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">case</span> OpCode.delete: <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">case</span> OpCode.setData: <span class="comment">//...</span></span><br><span class="line">            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());</span><br><span class="line">            SetDataRequest setDataRequest = (SetDataRequest)record;</span><br><span class="line">            <span class="keyword">if</span>(deserialize)</span><br><span class="line">                ByteBufferInputStream.byteBuffer2Record(request.request, setDataRequest);</span><br><span class="line">            path = setDataRequest.getPath();</span><br><span class="line">            validatePath(path, request.sessionId);</span><br><span class="line">            nodeRecord = getRecordForPath(path);</span><br><span class="line">            checkACL(zks, nodeRecord.acl, ZooDefs.Perms.WRITE,</span><br><span class="line">                    request.authInfo);</span><br><span class="line">            version = setDataRequest.getVersion();</span><br><span class="line">            <span class="keyword">int</span> currentVersion = nodeRecord.stat.getVersion();</span><br><span class="line">            <span class="keyword">if</span> (version != -<span class="number">1</span> &amp;&amp; version != currentVersion) {  <span class="comment">// CAS</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.BadVersionException(path);</span><br><span class="line">            }</span><br><span class="line">            version = currentVersion + <span class="number">1</span>;</span><br><span class="line">            request.txn = <span class="keyword">new</span> SetDataTxn(path, setDataRequest.getData(), version);</span><br><span class="line">            nodeRecord = nodeRecord.duplicate(request.hdr.getZxid());</span><br><span class="line">            nodeRecord.stat.setVersion(version);</span><br><span class="line">            addChangeRecord(nodeRecord);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OpCode.setACL: <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">case</span> OpCode.createSession: <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">case</span> OpCode.closeSession: <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">case</span> OpCode.check: <span class="comment">//...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="ZooKeeper-连接地址列表的连接策略"><a href="#ZooKeeper-连接地址列表的连接策略" class="headerlink" title="ZooKeeper 连接地址列表的连接策略"></a>ZooKeeper 连接地址列表的连接策略</h4><p>　ZooKeeper 考虑到第一次连接的时候，使用 <code>StaticHostProvider#resolveAndShuffle</code> 方法进行一次 shuffle，避免第一台节点处于热点状态；而 ZooKeeper 的 Session 连接断开之后，会使用 <code>StaticHostProvider#next</code> 方法，从第一个连接地址开始逐个尝试；另外，在集群<code>扩容/缩容</code>的时候，使用 <code>StaticHostProvider#updateServerList</code> 方法，更新服务器列表，并计算集群扩容的概率，对连接做重新分配，使得集群的负载更加均衡</p>
<h4 id="Follower-和-Observer-请求转发"><a href="#Follower-和-Observer-请求转发" class="headerlink" title="Follower 和 Observer 请求转发"></a>Follower 和 Observer 请求转发</h4><p>　为了事务的一致性，所有 Follower、Observer 接收到的事务请求，都会通过 <code>Learner#request</code> 方法，将请求发送给 Leader 节点来处理</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.zookeeper.server.quorum.FollowerRequestProcessor | ObserverRequestProcessor</span></span><br><span class="line"><span class="keyword">switch</span> (request.type) {</span><br><span class="line">    <span class="keyword">case</span> OpCode.sync:</span><br><span class="line">        zks.pendingSyncs.add(request);</span><br><span class="line">        zks.getFollower().request(request);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> OpCode.create:</span><br><span class="line">    <span class="keyword">case</span> OpCode.create2:</span><br><span class="line">    <span class="keyword">case</span> OpCode.createTTL:</span><br><span class="line">    <span class="keyword">case</span> OpCode.createContainer:</span><br><span class="line">    <span class="keyword">case</span> OpCode.delete:</span><br><span class="line">    <span class="keyword">case</span> OpCode.deleteContainer:</span><br><span class="line">    <span class="keyword">case</span> OpCode.setData:</span><br><span class="line">    <span class="keyword">case</span> OpCode.reconfig:</span><br><span class="line">    <span class="keyword">case</span> OpCode.setACL:</span><br><span class="line">    <span class="keyword">case</span> OpCode.multi:</span><br><span class="line">    <span class="keyword">case</span> OpCode.check:</span><br><span class="line">        zks.getFollower().request(request);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> OpCode.createSession:</span><br><span class="line">    <span class="keyword">case</span> OpCode.closeSession:</span><br><span class="line">        <span class="comment">// Do not forward local sessions to the leader.</span></span><br><span class="line">        <span class="keyword">if</span> (!request.isLocalSession()) {</span><br><span class="line">            zks.getFollower().request(request);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Watch-事件触发流程"><a href="#Watch-事件触发流程" class="headerlink" title="Watch 事件触发流程"></a>Watch 事件触发流程</h4><p>　所有的 Watch 事件都通过 <code>WatchManager#triggerWatch</code> 进行触发。该方法会从 <code>HashMap&lt;String, HashSet&lt;Watcher&gt;&gt;</code> <code>watchTable</code> 中，通过 <code>ServerCnxn#process</code> 方法，将 <code>Watch</code> 对象取出（<code>HashMap#remove</code> 意味着 Watch 只会在 ZooKeeper 触发一次，不过 Curator 框架中已封装，只需注册一次，可多次触发 Watch 事件），并随后通过 <code>ServerCnxn#sendResponse</code> 封装并发送网络包</p>
<p>　由此可见，如果 Socket 通讯出现<strong>网络故障</strong>等问题，可能会丢失 Watch 事件。同时，因为注册一次之后，<code>Watcher</code> 就会从 <code>watchTable</code> 中被移除，<strong>再次注册完成之前</strong>，发生的 Watch 事件，将无法被监控到。并且，如果 Client 端和 Server 端断开连接之后，因为服务端并没有对 Watch 事件做任何留存，所以重连之后也是无法接受到任何 Watch 事件的（因此，程序中需要在接收到 disconnect 事件之后，进入某种<strong>安全模式</strong>，使得程序更为谨慎地处理 “依赖于 ZooKeeper Watch 的操作”）。另外，还要一个需要注意的地方是，同一个 ZNode 节点被 Watch 了多种事件，针对该 ZNode 节点 Client 端<strong>只会获取到一个 Watch 事件</strong>（例如，监控 ZNode A 的 <code>exists</code> / <code>getData</code> 事件，在删除了 A 之后，Client 端只会接受到一个 Delete 事件）</p>
<p>　总而言之，强依赖于 ZooKeeper Watch 事件的程序逻辑，都是不可靠的</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// [NIO 相关的流程]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxn#sendResponse</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxn#sendBuffer</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;ByteBuffer&gt; outgoingBuffers = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBuffer</span><span class="params">(ByteBuffer bb)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (LOG.isTraceEnabled()) {</span><br><span class="line">        LOG.trace(<span class="string">"Add a buffer to outgoingBuffers, sk "</span> + sk + <span class="string">" is valid: "</span> + sk.isValid());</span><br><span class="line">    }</span><br><span class="line">    outgoingBuffers.add(bb);</span><br><span class="line">    requestInterestOpsUpdate();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Queue&lt;ByteBuffer&gt; 队列被异步发送，整个调用流程如下：</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.quorum.QuorumPeerMain#main</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.quorum.QuorumPeerMain#initializeAndRun</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.quorum.QuorumPeerMain#runFromConfig</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxnFactory#configure</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxnFactory#ZOOKEEPER_NIO_NUM_SELECTOR_THREADS</span></span><br><span class="line">如果没有配置该选项，则默认使用 Math.max((<span class="keyword">int</span>) Math.sqrt((<span class="keyword">float</span>) numCores/<span class="number">2</span>), <span class="number">1</span>) 公式进行计算 SelectorThread 的线程数量</span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxnFactory.SelectorThread#run</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxnFactory.SelectorThread#select</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxnFactory.SelectorThread#handleIO</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.WorkerService#schedule(org.apache.zookeeper.server.WorkerService.WorkRequest)</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.WorkerService#schedule(org.apache.zookeeper.server.WorkerService.WorkRequest, long)</span></span><br><span class="line">worker.execute(scheduledWorkRequest);  <span class="comment">// 启动 ExecutorService</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.WorkerService.ScheduledWorkRequest#run</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxnFactory.IOWorkRequest#doWork</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxn#doIO</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NIOServerCnxn#handleWrite</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// [Netty 相关的流程]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NettyServerCnxn#sendResponse</span></span><br><span class="line"><span class="comment">// org.apache.zookeeper.server.NettyServerCnxn#sendBuffer</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBuffer</span><span class="params">(ByteBuffer sendBuffer)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (sendBuffer == ServerCnxnFactory.closeConn) {</span><br><span class="line">        close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    channel.write(wrappedBuffer(sendBuffer));</span><br><span class="line">    packetSent();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="mntr-四字命令使用-JVMFLAGS-和-SERVER-JVMFLAGS-中配置的-JVM-参数"><a href="#mntr-四字命令使用-JVMFLAGS-和-SERVER-JVMFLAGS-中配置的-JVM-参数" class="headerlink" title="mntr 四字命令使用 JVMFLAGS 和 SERVER_JVMFLAGS 中配置的 JVM 参数"></a>mntr 四字命令使用 JVMFLAGS 和 SERVER_JVMFLAGS 中配置的 JVM 参数</h4><p>　通过增加 <code>START_SERVER_JVMFLAGS</code> 参数，来避免这个问题（已提交 PR<a href="https://github.com/apache/zookeeper/pull/302">#302</a>）</p>
<h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><h4 id="ZooKeeper-的-Server-ID-如果重复会有什么风险？"><a href="#ZooKeeper-的-Server-ID-如果重复会有什么风险？" class="headerlink" title="ZooKeeper 的 Server ID 如果重复会有什么风险？"></a>ZooKeeper 的 Server ID 如果重复会有什么风险？</h4><p>　截止 v3.5.3 并没有对这个问题进行代码层级的限制，已提交 <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2784">ZOOKEEPER-2784</a> issues 和 对应的 <a href="https://github.com/apache/zookeeper/pull/257">#257</a> PR，进行反馈和修复</p>
<h4 id="ZooKeeper-的事务-ID-超过-32-位，ZooKeeper-的-Leader-节点抛出-XidRolloverException-强制进行-re-election"><a href="#ZooKeeper-的事务-ID-超过-32-位，ZooKeeper-的-Leader-节点抛出-XidRolloverException-强制进行-re-election" class="headerlink" title="ZooKeeper 的事务 ID 超过 32 位，ZooKeeper 的 Leader 节点抛出 XidRolloverException 强制进行 re-election"></a>ZooKeeper 的事务 ID 超过 32 位，ZooKeeper 的 Leader 节点抛出 XidRolloverException <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1277">强制进行 re-election</a></h4><p>　<a href="http://zookeeper.apache.org/doc/current/zookeeperInternals.html">ZXID</a> 的高 32 位用于 <code>epoch（LE 选举轮次）</code>、低 32 位是一个记录 <code>Leader</code> 节点每一次改动的 <code>counter</code><br>　如果是 1k/s ops，那么只要 $2^{32} / (86400 * 1000)$ $\approx 49.7$ days 就会将 ZXID 耗尽</p>
<h5 id="重度依赖-ZooKeeper-的应用，可能一周内发生-ZooKeeper-自重启一两次，每次需-30-秒，有无更好的解决方法"><a href="#重度依赖-ZooKeeper-的应用，可能一周内发生-ZooKeeper-自重启一两次，每次需-30-秒，有无更好的解决方法" class="headerlink" title="重度依赖 ZooKeeper 的应用，可能一周内发生 ZooKeeper 自重启一两次，每次需 30 秒，有无更好的解决方法"></a>重度依赖 ZooKeeper 的应用，可能一周内发生 ZooKeeper 自重启一两次，每次需 30 秒，有无更好的解决方法</h5><p>　在 <code>ZXID</code> 快要溢出的时候，一次性进行自重启的所有操作，必然会比较慢。可以考虑把非依赖的关键步骤拆开，提前做好自重启的准备，以减少延迟<br></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * create a proposal and send it out to all the members</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the proposal that is queued to send to all the members</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Proposal <span class="title">propose</span><span class="params">(Request request)</span> <span class="keyword">throws</span> XidRolloverException </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Address the rollover issue. All lower 32bits set indicate a new leader</span></span><br><span class="line"><span class="comment">     * election. Force a re-election instead. See ZOOKEEPER-1277</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((request.zxid &amp; <span class="number">0xffffffffL</span>) == <span class="number">0xffffffffL</span>) {</span><br><span class="line">        String msg = <span class="string">"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start"</span>;</span><br><span class="line">        shutdown(msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> XidRolloverException(msg);</span><br><span class="line">    } <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>　或者，重新设计 ZXID，高 24 位用于 epoch，低 40 位用于 counter，那么意味着 Math.min($2^{24}$ / 365 / 24, $2^{40}$ / 365 / 86400 / 1000) $\approx$ Math.min(1915.2, 34.9) = 34.9 years 之后才会进行一次强制选举。不过考虑到 <code>ZXID</code> 是 <code>long</code> 类型，32 bit 的 JVM 在对 <code>long</code> 读写时（和 <code>double</code> 类型一样），是分为高 32 位和 低 32 位两部分进行操作的，由于 <code>ZXID</code> 变量没有用 <code>volatile</code> 修饰，且也没有装箱为对应的引用类型（<code>Long</code> / <code>Double</code>），属于<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7">非原子操作</a>。因此，如果将高 32 位的低 8 位划分给整个 <code>long</code> 的低 32 位，就可能存在并发的问题了（已提交 <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2789">Jira</a> / <a href="https://github.com/apache/zookeeper/pull/262">PR</a>，欢迎加入讨论）<p></p>
<h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><h3 id="Paxos-的强一致性"><a href="#Paxos-的强一致性" class="headerlink" title="Paxos 的强一致性"></a>Paxos 的强一致性</h3><p>　Paxos 本身只是用来选主的算法，用来在分布式节点之间达成<code>共识</code>（Consensus）。只有到了上层应用（ZooKeeper / <a href="https://yuzhouwan.com/posts/2129/">Redis</a>），出现 数据“副本”的概念，在维持其<code>一致性</code>（Consistency）的时候 才会有强弱之分（一致性模型 vs 一致性协议）<br>　而且，整个副本系统的一致性级别，并不只取决于<code>共识算法</code>，客户端的实现规范也会起到关键作用。如果，Client 客户端允许访问 <code>非 Leader 节点</code> 获取数据，而<code>过半写成功</code>导致有部分 <code>Follower 节点</code>数据副本并没有完成更新（也可以调用 <code>sync()</code> 方法完成强制同步），仍然会表现出弱一致性</p>
<div class="note info">因为 ZooKeeper 存在可能长时间选举而服务不可用的情况，所以它是 CP 型系统</div>


<h3 id="有了逻辑时钟后，物理时钟就不再需要了"><a href="#有了逻辑时钟后，物理时钟就不再需要了" class="headerlink" title="有了逻辑时钟后，物理时钟就不再需要了"></a>有了逻辑时钟后，物理时钟就不再需要了</h3><p><img data-src="/picture/zk/zk_lamport_logic_clock.png" alt=""></p>
<center>（图片来源：<a href="https://commons.wikimedia.org/wiki/File:Lamport-Clock-en.svg" target="_blank">wikimedia.org</a>，已确认版权为 CC BY-SA 3.0 协议）</center>


<p>　上图就是一个经典的 <code>Lamport</code> 逻辑时钟图，大致的算法描述如下（详见该篇<a href="http://amturing.acm.org/p558-lamport.pdf">论文</a>）：</p>
<ul>
<li>每个事件对应一个 <code>Lamport</code> 时间戳（初始值为 <code>0</code>）</li>
<li>如果，事件在自己本节点内发生，时间戳加 <code>1</code> 即可</li>
<li>如果，事件属于<strong>发送事件</strong>，时间戳加 <code>1</code> 并在消息中带上该时间戳</li>
<li>如果，事件属于<strong>接收事件</strong>，时间戳 = Max(本地时间戳，消息中的时间戳) + 1</li>
</ul>
<p>　并且规定，Lamport 逻辑时钟内做<code>全序</code>，是按事件的时间戳大小为时间排序的，任何两个事件不可能在同一时间发生（并发发生的 <code>B4</code> 和 <code>C3</code> 被认为是有先后顺序的，这里直接按照<code>进程 ID</code> 的大小认定事件发生顺序），并且任何消息收到的时间都应该比发送的时间晚</p>
<p>　同时，如果 <code>B4</code> 和 <code>C3</code> 两个事件之间，在逻辑时钟系统之外，有额外的操作，使其有了依赖关系 <code>B4 -&gt; C3</code>，如果 C 进程的 ID 又大于 B 进程的 ID，则无法完成<code>全序</code>操作。因此，需要通过 FTP 时钟同步 或者 Berkeley 算法去调整误差 的方式加入<strong>物理时钟</strong>。物理时钟的引入，是为了能够区分，系统是处于事件间隔中，还是出错中断了（有兴趣，还可深入研究下 Lamport Logic Lock 的演化版 Vector clock）</p>
<h2 id="依赖组件梳理"><a href="#依赖组件梳理" class="headerlink" title="依赖组件梳理"></a>依赖组件梳理</h2><h3 id="梳理点"><a href="#梳理点" class="headerlink" title="梳理点"></a>梳理点</h3><ul>
<li>依赖框架中哪部分组件在使用 ZooKeeper，以及使用方式</li>
<li>存储的数据（路径、大小、读写的频率 等）</li>
<li>对 ZooKeeper 可能产生的压力（并发度、Watcher 数 等）</li>
<li>是否对 ZooKeeper 强依赖</li>
</ul>
<h3 id="依赖-ZooKeeper-的框架"><a href="#依赖-ZooKeeper-的框架" class="headerlink" title="依赖 ZooKeeper 的框架"></a>依赖 ZooKeeper 的框架</h3><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><h5 id="遇到的坑-1"><a href="#遇到的坑-1" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><h6 id="滚动重启升级-ZooKeeper-之后，Yarn-一直重试"><a href="#滚动重启升级-ZooKeeper-之后，Yarn-一直重试" class="headerlink" title="滚动重启升级 ZooKeeper 之后，Yarn 一直重试"></a>滚动重启升级 ZooKeeper 之后，Yarn 一直重试</h6><ul>
<li><p>描述</p>
<p>一直重连的原因是，Yarn 发送的数据包超过了 1MB <code>（我们遇到的情况是 1.3MB）</code>，服务端默认会设置 1MB 的阀值，避免影响 ZooKeeper 自身的服务</p>
</li>
<li><p>解决</p>
<p>重启 ResourceManager 即可</p>
</li>
</ul>
<h4 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a><a href="https://yuzhouwan.com/posts/45888/">HBase</a></h4><h5 id="遇到的坑-2"><a href="#遇到的坑-2" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><h6 id="KeeperErrorCode-Session-expired-for-hbase-meta-region-server"><a href="#KeeperErrorCode-Session-expired-for-hbase-meta-region-server" class="headerlink" title="KeeperErrorCode = Session expired for /hbase/meta-region-server"></a>KeeperErrorCode = Session expired for /hbase/meta-region-server</h6><ul>
<li><p>描述<br> 连接 HBase 的 Client 突然一段时间 间歇性地报错 <code>KeeperErrorCode = Session expired for /hbase/meta-region-server</code></p>
</li>
<li><p>解决</p>
<ul>
<li>查看 HBase、ZooKeeper 的日志和监控告警，并没有发现异常（也就是说，集群没有故障，也没有出现负载过大的情况）</li>
<li>发现 <code>/hbase/meta-region-server</code> ZNode 结点保存的信息（meta 表存在于哪一个 RegionServer），并没有和 HBase 集群真实的情况不一致。并且，meta 表的迁移，除非机房断电之类的异常情况，一般是很少发生的</li>
<li>尝试在 HBase Client 端的程序，加上 <code>-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log</code> 的 JVM 参数，来观察是否是客户端程序发生 Long GC 导致的</li>
</ul>
</li>
</ul>
<h6 id="fsync-ing-the-write-ahead-log-in-SyncThread-1-took-5051ms-which-will-adversely-effect-operation-latency"><a href="#fsync-ing-the-write-ahead-log-in-SyncThread-1-took-5051ms-which-will-adversely-effect-operation-latency" class="headerlink" title="fsync-ing the write ahead log in SyncThread:1 took 5051ms which will adversely effect operation latency"></a>fsync-ing the write ahead log in SyncThread:1 took 5051ms which will adversely effect operation latency</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2017-06-28 15:28:01,149 [myid:1] - WARN  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:Follower@89] - Exception when following the leader</span><br><span class="line">java.io.EOFException</span><br><span class="line">        at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">        at org.apache.jute.BinaryInputArchive.readInt(BinaryInputArchive.java:63)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPacket.deserialize(QuorumPacket.java:83)</span><br><span class="line">        at org.apache.jute.BinaryInputArchive.readRecord(BinaryInputArchive.java:103)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.Learner.readPacket(Learner.java:153)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:85)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:786)</span><br><span class="line">2017-06-28 15:28:02,198 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:Follower@166] - shutdown called</span><br><span class="line">java.lang.Exception: shutdown Follower</span><br><span class="line">        at org.apache.zookeeper.server.quorum.Follower.shutdown(Follower.java:166)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:790)</span><br><span class="line">2017-06-28 15:28:02,198 [myid:1] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxnFactory@197] - Accepted socket connection from /0:0:0:0:0:0:0:1:39781</span><br><span class="line">2017-06-28 15:28:02,198 [myid:1] - ERROR [FollowerRequestProcessor:1:FollowerRequestProcessor@93] - Unexpected exception causing <span class="built_in">exit</span></span><br><span class="line">java.net.SocketException: Socket closed</span><br><span class="line">        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:121)</span><br><span class="line">        at java.net.SocketOutputStream.write(SocketOutputStream.java:159)</span><br><span class="line">        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)</span><br><span class="line">        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.Learner.writePacket(Learner.java:139)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.Learner.request(Learner.java:188)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.FollowerRequestProcessor.run(FollowerRequestProcessor.java:88)</span><br><span class="line">2017-06-28 15:28:02,198 [myid:1] - WARN  [SyncThread:1:FileTxnLog@334] - fsync-ing the write ahead <span class="built_in">log</span> <span class="keyword">in</span> SyncThread:1 took 5051ms <span class="built_in">which</span> will adversely effect operation latency. See the ZooKeeper troubleshooting guide</span><br><span class="line">2017-06-28 15:28:02,198 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:NIOServerCnxn@1007] - Closed socket connection <span class="keyword">for</span> client /10.37.2.145:47384 <span class="built_in">which</span> had sessionid 0x15cc330c7d99117</span><br><span class="line">2017-06-28 15:28:02,199 [myid:1] - WARN  [SyncThread:1:SendAckRequestProcessor@64] - Closing connection to leader, exception during packet send</span><br><span class="line">java.net.SocketException: Socket closed</span><br><span class="line">        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:121)</span><br><span class="line">        at java.net.SocketOutputStream.write(SocketOutputStream.java:159)</span><br><span class="line">        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)</span><br><span class="line">        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.Learner.writePacket(Learner.java:139)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.SendAckRequestProcessor.flush(SendAckRequestProcessor.java:62)</span><br><span class="line">        at org.apache.zookeeper.server.SyncRequestProcessor.flush(SyncRequestProcessor.java:204)</span><br><span class="line">        at org.apache.zookeeper.server.SyncRequestProcessor.run(SyncRequestProcessor.java:131)</span><br><span class="line">2017-06-28 15:28:02,198 [myid:1] - INFO  [FollowerRequestProcessor:1:FollowerRequestProcessor@95] - FollowerRequestProcessor exited loop!</span><br></pre></td></tr></tbody></table></figure>
<p>　<code>FollowerRequestProcessor.java:88</code> 这行代码是 <code>OpCode.closeSession</code> 操作转发给 Leader，需要发送一个请求包，但是网络问题导致 Socket 连接断开了；另外，<code>fsync-ing the write ahead log in SyncThread:1 took 5051ms which will adversely effect operation latency</code> 告警，意味着 <code>FileTxnLog#commit</code> 进行写事务日志到磁盘的过程过慢</p>
<p>　这里可能会导致一个疑问，到底是因为需要写入的事务日志过大导致的告警，还是因为机器磁盘当前的 I/O 负载比较高，所以这里最好再打印出 <code>FileChannel#size()</code> 的信息（已提交 PR<a href="https://github.com/apache/zookeeper/pull/296">#296</a>）</p>
<h4 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a><a href="https://yuzhouwan.com/posts/5845/">Druid</a></h4><h5 id="遇到的坑-3"><a href="#遇到的坑-3" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><h6 id="DruidTaskResolver-Poll-failed-trying-again"><a href="#DruidTaskResolver-Poll-failed-trying-again" class="headerlink" title="DruidTaskResolver: Poll failed, trying again"></a>DruidTaskResolver: Poll failed, trying again</h6><ul>
<li><p>描述</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">28 Feb 2018 10:41:45,065 WARN  [DruidTaskResolver[com.metamx.tranquility.druid.IndexService@214fd977]] (?.?:?)  - Poll failed, trying again at[2018-02-28T10:42:03.867+08:00].</span><br><span class="line">java.lang.IllegalStateException: Service is closed</span><br><span class="line">	at com.metamx.tranquility.druid.IndexService.com$metamx$tranquility$druid$IndexService$<span class="variable">$client</span>(IndexService.scala:57)</span><br><span class="line">	at com.metamx.tranquility.druid.IndexService$$anonfun$call<span class="variable">$1</span>.apply(IndexService.scala:131)</span><br><span class="line">	at com.metamx.tranquility.druid.IndexService$$anonfun$call<span class="variable">$1</span>.apply(IndexService.scala:131)</span><br><span class="line">	at com.metamx.tranquility.finagle.FutureRetry$.onErrors(FutureRetry.scala:47)</span><br><span class="line">	at com.metamx.tranquility.druid.IndexService.call(IndexService.scala:130)</span><br><span class="line">	at com.metamx.tranquility.druid.IndexService.runningTasks(IndexService.scala:101)</span><br><span class="line">	at com.metamx.tranquility.finagle.DruidTaskResolver$$anon<span class="variable">$1</span>.run(DruidTaskResolver.scala:83)</span><br><span class="line">	at java.util.concurrent.Executors<span class="variable">$RunnableAdapter</span>.call(Executors.java:511)</span><br><span class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>解决</p>
<p>定位原因是 Apache Curator 2.11.1 的 bug（详见 <a href="https://issues.apache.org/jira/browse/CURATOR-394">CURATOR-394</a> 和 <a href="https://github.com/apache/curator/pull/208">PR#208</a>），将 patch 代码合进 Curator 的 curator-x-discovery 模块后，重新打包 curator-x-discovery-2.11.1.jar，并替换原生的，即可</p>
</li>
</ul>
<h4 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a><a href="https://yuzhouwan.com/posts/13977/">Storm</a></h4><h5 id="遇到的坑-4"><a href="#遇到的坑-4" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><h6 id="Unable-to-load-database-on-disk"><a href="#Unable-to-load-database-on-disk" class="headerlink" title="Unable to load database on disk"></a>Unable to load database on disk</h6><ul>
<li><p>描述</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2017-12-08 22:01:01,943 [myid:4] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxnFactory@197] - Accepted socket connection from /0:0:0:0:0:0:0:1:24756</span><br><span class="line">2017-12-08 22:01:01,943 [myid:4] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxn@838] - Processing srst <span class="built_in">command</span> from /0:0:0:0:0:0:0:1:24756</span><br><span class="line">2017-12-08 22:01:01,944 [myid:4] - INFO  [Thread-342422:NIOServerCnxn@1018] - Closed socket connection <span class="keyword">for</span> client /0:0:0:0:0:0:0:1:24756 (no session established <span class="keyword">for</span> client)</span><br><span class="line">2017-12-08 22:02:01,111 [myid:4] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxnFactory@197] - Accepted socket connection from /0:0:0:0:0:0:0:1:25076</span><br><span class="line">2017-12-08 22:02:01,111 [myid:4] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxn@838] - Processing ruok <span class="built_in">command</span> from /0:0:0:0:0:0:0:1:25076</span><br><span class="line">2017-12-08 22:02:01,112 [myid:4] - INFO  [Thread-342423:NIOServerCnxn@1018] - Closed socket connection <span class="keyword">for</span> client /0:0:0:0:0:0:0:1:25076 (no session established <span class="keyword">for</span> client)</span><br><span class="line">22017-12-08 22:46:17,702 [myid:] - INFO  [main:QuorumPeerConfig@103] - Reading configuration from: /home/zookeeper/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">2017-12-08 22:46:17,730 [myid:] - INFO  [main:QuorumPeerConfig@340] - Defaulting to majority quorums</span><br><span class="line">2017-12-08 22:46:17,793 [myid:4] - INFO  [main:DatadirCleanupManager@78] - autopurge.snapRetainCount <span class="built_in">set</span> to 3</span><br><span class="line">2017-12-08 22:46:17,794 [myid:4] - INFO  [main:DatadirCleanupManager@79] - autopurge.purgeInterval <span class="built_in">set</span> to 1</span><br><span class="line">2017-12-08 22:46:17,796 [myid:4] - INFO  [PurgeTask:DatadirCleanupManager<span class="variable">$PurgeTask</span>@138] - Purge task started.</span><br><span class="line">2017-12-08 22:46:17,855 [myid:4] - INFO  [main:QuorumPeerMain@127] - Starting quorum peer</span><br><span class="line">2017-12-08 22:46:18,193 [myid:4] - INFO  [main:NIOServerCnxnFactory@94] - binding to port 0.0.0.0/0.0.0.0:2181</span><br><span class="line">2017-12-08 22:46:18,266 [myid:4] - INFO  [main:QuorumPeer@959] - tickTime <span class="built_in">set</span> to 2000</span><br><span class="line">2017-12-08 22:46:18,266 [myid:4] - INFO  [main:QuorumPeer@979] - minSessionTimeout <span class="built_in">set</span> to -1</span><br><span class="line">2017-12-08 22:46:18,266 [myid:4] - INFO  [main:QuorumPeer@990] - maxSessionTimeout <span class="built_in">set</span> to -1</span><br><span class="line">2017-12-08 22:46:18,266 [myid:4] - INFO  [main:QuorumPeer@1005] - initLimit <span class="built_in">set</span> to 10</span><br><span class="line">2017-12-08 22:46:18,650 [myid:4] - INFO  [main:FileSnap@83] - Reading snapshot /data/zookeeper/datadir/version-2/snapshot.e72200034</span><br><span class="line">2017-12-08 22:46:18,831 [myid:4] - INFO  [PurgeTask:DatadirCleanupManager<span class="variable">$PurgeTask</span>@144] - Purge task completed.</span><br><span class="line">2017-12-08 22:46:31,861 [myid:4] - ERROR [main:QuorumPeer@497] - Unable to load database on disk</span><br><span class="line">java.io.EOFException</span><br><span class="line">        at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">        at org.apache.jute.BinaryInputArchive.readInt(BinaryInputArchive.java:63)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileHeader.deserialize(FileHeader.java:64)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.inStreamCreated(FileTxnLog.java:580)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.createInputArchive(FileTxnLog.java:599)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.goToNextLog(FileTxnLog.java:565)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.next(FileTxnLog.java:647)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(FileTxnSnapLog.java:158)</span><br><span class="line">        at org.apache.zookeeper.server.ZKDatabase.loadDataBase(ZKDatabase.java:223)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.loadDataBase(QuorumPeer.java:450)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.start(QuorumPeer.java:440)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:153)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:111)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:78)</span><br><span class="line">2017-12-08 22:46:31,868 [myid:4] - ERROR [main:QuorumPeerMain@89] - Unexpected exception, exiting abnormally</span><br><span class="line">java.lang.RuntimeException: Unable to run quorum server</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.loadDataBase(QuorumPeer.java:498)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.start(QuorumPeer.java:440)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:153)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:111)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:78)</span><br><span class="line">Caused by: java.io.EOFException</span><br><span class="line">        at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">        at org.apache.jute.BinaryInputArchive.readInt(BinaryInputArchive.java:63)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileHeader.deserialize(FileHeader.java:64)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.inStreamCreated(FileTxnLog.java:580)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.createInputArchive(FileTxnLog.java:599)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.goToNextLog(FileTxnLog.java:565)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnLog<span class="variable">$FileTxnIterator</span>.next(FileTxnLog.java:647)</span><br><span class="line">        at org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(FileTxnSnapLog.java:158)</span><br><span class="line">        at org.apache.zookeeper.server.ZKDatabase.loadDataBase(ZKDatabase.java:223)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumPeer.loadDataBase(QuorumPeer.java:450)</span><br><span class="line">        ... 4 more</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>分析</p>
<p>可以看到 <code>2017-12-08 22:02:01,112</code> 到 <code>22017-12-08 22:46:17,702</code> 日志有一个断层，可以看出之前的日志写入被中断了（后续在 <code>/var/log/message</code> 系统日志里面也验证了）。基本可以确定是，单独挂的盘发生了故障，导致了 Snapshot 文件损坏。而自启动脚本尝试重启 ZooKeeper 进程的时候，ZooKeeper 会依据事务日志里面的最新的 ZXID，一直去尝试读取最后一个已损坏的 Snapshot 文件，导致一直无法恢复</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /var/<span class="built_in">log</span>/messages</span><br><span class="line">  kernel: EXT4-fs (vdb): warning: mounting fs with errors, running e2fsck is recommended</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>解决</p>
<p>因为 <code>EOFException</code> 导致当前 ZooKeeper 进程退出后，集群已经选主出新的 Leader 节点，所以，可以直接删除事务日志和 Snapshot 文件，分别对应于 <code>dataDir</code> 和 <code>dataLogDir</code> 两个目录（理论上只需要保存 <code>myid</code> 文件，其他数据会从 Leader 节点重新拉取）。删除数据完成之后，直接启动 ZooKeeper 进程，当前节点即可重新加入 ZooKeeper 集群</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 读取配置</span></span><br><span class="line">2017-12-08 23:20:07,161 [myid:] - INFO  [main:QuorumPeerConfig@103] - Reading configuration from: /home/zookeeper/software/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">2017-12-08 23:20:07,165 [myid:] - INFO  [main:QuorumPeerConfig@340] - Defaulting to majority quorums</span><br><span class="line">2017-12-08 23:20:07,168 [myid:4] - INFO  [main:DatadirCleanupManager@78] - autopurge.snapRetainCount <span class="built_in">set</span> to 3</span><br><span class="line">2017-12-08 23:20:07,169 [myid:4] - INFO  [main:DatadirCleanupManager@79] - autopurge.purgeInterval <span class="built_in">set</span> to 1</span><br><span class="line">2017-12-08 23:20:07,170 [myid:4] - INFO  [PurgeTask:DatadirCleanupManager<span class="variable">$PurgeTask</span>@138] - Purge task started.</span><br><span class="line">2017-12-08 23:20:07,179 [myid:4] - INFO  [PurgeTask:DatadirCleanupManager<span class="variable">$PurgeTask</span>@144] - Purge task completed.</span><br><span class="line">2017-12-08 23:20:07,181 [myid:4] - INFO  [main:QuorumPeerMain@127] - Starting quorum peer</span><br><span class="line">2017-12-08 23:20:07,191 [myid:4] - INFO  [main:NIOServerCnxnFactory@94] - binding to port 0.0.0.0/0.0.0.0:2181</span><br><span class="line">2017-12-08 23:20:07,201 [myid:4] - INFO  [main:QuorumPeer@959] - tickTime <span class="built_in">set</span> to 2000</span><br><span class="line">2017-12-08 23:20:07,202 [myid:4] - INFO  [main:QuorumPeer@979] - minSessionTimeout <span class="built_in">set</span> to -1</span><br><span class="line">2017-12-08 23:20:07,202 [myid:4] - INFO  [main:QuorumPeer@990] - maxSessionTimeout <span class="built_in">set</span> to -1</span><br><span class="line">2017-12-08 23:20:07,202 [myid:4] - INFO  [main:QuorumPeer@1005] - initLimit <span class="built_in">set</span> to 10</span><br><span class="line"><span class="comment"># 开始进行选举</span></span><br><span class="line">2017-12-08 23:20:07,214 [myid:4] - INFO  [main:QuorumPeer@473] - currentEpoch not found! Creating with a reasonable default of 0. This should only happen when you are upgrading your installation</span><br><span class="line">2017-12-08 23:20:07,223 [myid:4] - INFO  [main:QuorumPeer@488] - acceptedEpoch not found! Creating with a reasonable default of 0. This should only happen when you are upgrading your installation</span><br><span class="line">2017-12-08 23:20:07,228 [myid:4] - INFO  [Thread-2:QuorumCnxManager<span class="variable">$Listener</span>@505] - My election <span class="built_in">bind</span> port: /192.168.1.104:3888</span><br><span class="line"><span class="comment"># 进入 LOOKING 状态，并创建自己的选票</span></span><br><span class="line">2017-12-08 23:20:07,238 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:QuorumPeer@714] - LOOKING</span><br><span class="line">2017-12-08 23:20:07,243 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:FastLeaderElection@815] - New election. My id =  4, proposed zxid=0x0</span><br><span class="line">2017-12-08 23:20:07,250 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LOOKING (n.state), 1 (n.sid), 0xe (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,250 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), FOLLOWING (n.state), 1 (n.sid), 0xf (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,252 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 4 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 4 (n.sid), 0x0 (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,253 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LOOKING (n.state), 3 (n.sid), 0xe (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,253 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), FOLLOWING (n.state), 3 (n.sid), 0xf (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,253 [myid:4] - INFO  [WorkerSender[myid=4]:QuorumCnxManager@195] - Have smaller server identifier, so dropping the connection: (5, 4)</span><br><span class="line">2017-12-08 23:20:07,254 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LOOKING (n.state), 4 (n.sid), 0xe (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,254 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), FOLLOWING (n.state), 3 (n.sid), 0xf (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,254 [myid:4] - INFO  [WorkerSender[myid=4]:QuorumCnxManager@195] - Have smaller server identifier, so dropping the connection: (5, 4)</span><br><span class="line">2017-12-08 23:20:07,254 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), FOLLOWING (n.state), 1 (n.sid), 0xf (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,255 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LOOKING (n.state), 4 (n.sid), 0xe (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,272 [myid:4] - INFO  [/192.168.1.104:3888:QuorumCnxManager<span class="variable">$Listener</span>@512] - Received connection request /192.168.1.105:18290</span><br><span class="line">2017-12-08 23:20:07,273 [myid:4] - INFO  [/192.168.1.104:3888:QuorumCnxManager<span class="variable">$Listener</span>@512] - Received connection request /192.168.1.105:18291</span><br><span class="line">2017-12-08 23:20:07,274 [myid:4] - WARN  [RecvWorker:5:QuorumCnxManager<span class="variable">$RecvWorker</span>@781] - Connection broken <span class="keyword">for</span> id 5, my id = 4, error =</span><br><span class="line">java.io.EOFException</span><br><span class="line">        at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumCnxManager<span class="variable">$RecvWorker</span>.run(QuorumCnxManager.java:766)</span><br><span class="line">2017-12-08 23:20:07,296 [myid:4] - WARN  [RecvWorker:5:QuorumCnxManager<span class="variable">$RecvWorker</span>@784] - Interrupting SendWorker</span><br><span class="line">2017-12-08 23:20:07,295 [myid:4] - WARN  [SendWorker:5:QuorumCnxManager<span class="variable">$SendWorker</span>@698] - Interrupted <span class="keyword">while</span> waiting <span class="keyword">for</span> message on queue</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2017)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2095)</span><br><span class="line">        at java.util.concurrent.ArrayBlockingQueue.poll(ArrayBlockingQueue.java:389)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumCnxManager.pollSendQueue(QuorumCnxManager.java:850)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumCnxManager.access<span class="variable">$500</span>(QuorumCnxManager.java:61)</span><br><span class="line">        at org.apache.zookeeper.server.quorum.QuorumCnxManager<span class="variable">$SendWorker</span>.run(QuorumCnxManager.java:686)</span><br><span class="line">2017-12-08 23:20:07,280 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LOOKING (n.state), 2 (n.sid), 0xe (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,297 [myid:4] - WARN  [SendWorker:5:QuorumCnxManager<span class="variable">$SendWorker</span>@707] - Send worker leaving thread</span><br><span class="line">2017-12-08 23:20:07,297 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), FOLLOWING (n.state), 2 (n.sid), 0xf (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,297 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LOOKING (n.state), 5 (n.sid), 0xe (n.peerEpoch) LOOKING (my state)</span><br><span class="line">2017-12-08 23:20:07,297 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@597] - Notification: 1 (message format version), 5 (n.leader), 0xe72217dad (n.zxid), 0x6 (n.round), LEADING (n.state), 5 (n.sid), 0xf (n.peerEpoch) LOOKING (my state)</span><br><span class="line"><span class="comment"># 经过 84ms，进入 FOLLOWING 状态，完成选举过程</span></span><br><span class="line">2017-12-08 23:20:07,298 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:QuorumPeer@784] - FOLLOWING</span><br><span class="line">2017-12-08 23:20:07,303 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Learner@86] - TCP NoDelay <span class="built_in">set</span> to: <span class="literal">true</span></span><br><span class="line">2017-12-08 23:20:07,317 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:zookeeper.version=3.4.6--1, built on 08/30/2017 09:55 GMT</span><br><span class="line">2017-12-08 23:20:07,317 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:host.name=yuzhouwan-storm-4</span><br><span class="line">2017-12-08 23:20:07,317 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.version=1.7.0_60-ea</span><br><span class="line">2017-12-08 23:20:07,317 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.vendor=Oracle Corporation</span><br><span class="line">2017-12-08 23:20:07,317 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.home=/home/zookeeper/software/jdk1.7.0_60/jre</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.class.path=/home/zookeeper/software/zookeeper/bin/../build/classes:/home/zookeeper/software/zookeeper/bin/../build/lib/*.jar:/home/zookeeper/software/zookeeper/bin/../lib/slf4j-log4j12-1.6.1.jar:/home/zookeeper/software/zookeeper/bin/../lib/slf4j-api-1.6.1.jar:/home/zookeeper/software/zookeeper/bin/../lib/netty-3.7.0.Final.jar:/home/zookeeper/software/zookeeper/bin/../lib/log4j-1.2.16.jar:/home/zookeeper/software/zookeeper/bin/../lib/jline-0.9.94.jar:/home/zookeeper/software/zookeeper/bin/../zookeeper-3.4.6.4.jar:/home/zookeeper/software/zookeeper/bin/../src/java/lib/*.jar:/home/zookeeper/software/zookeeper/bin/../conf:/home/zookeeper/software/java/lib/dt.jar:/home/zookeeper/software/java/lib/tools.jar:.</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.io.tmpdir=/tmp</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:os.name=Linux</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:os.arch=amd64</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:os.version=2.6.32-279.19.1.el6_sn.11.x86_64</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:user.name=zookeeper</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:user.home=/home/zookeeper</span><br><span class="line">2017-12-08 23:20:07,318 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Environment@100] - Server environment:user.dir=/data/zookeeper</span><br><span class="line">2017-12-08 23:20:07,320 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:ZooKeeperServer@162] - Created server with tickTime 2000 minSessionTimeout 4000 maxSessionTimeout 40000 datadir /data/zookeeper/dataLogDir/version-2 snapdir /data/zookeeper/datadir/version-2</span><br><span class="line">2017-12-08 23:20:07,320 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Follower@63] - FOLLOWING - LEADER ELECTION TOOK - 77</span><br><span class="line"><span class="comment"># 从 Leader 节点获取最新的 Snapshot 文件</span></span><br><span class="line">2017-12-08 23:20:07,335 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Learner@326] - Getting a snapshot from leader</span><br><span class="line">2017-12-08 23:20:07,545 [myid:4] - WARN  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Learner@374] - Got zxid 0xf001761dc expected 0x1</span><br><span class="line"><span class="comment"># 创建 Snapshot 文件（实际内容是 zxid - 1，而不是直接用最新的 zxid）</span></span><br><span class="line">2017-12-08 23:20:07,545 [myid:4] - INFO  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:FileTxnSnapLog@240] - Snapshotting: 0xf001761db to /data/zookeeper/datadir/version-2/snapshot.f001761db</span><br><span class="line"><span class="comment"># 创建事务日志文件</span></span><br><span class="line">2017-12-08 23:20:07,655 [myid:4] - INFO  [SyncThread:4:FileTxnLog@203] - Creating new <span class="built_in">log</span> file: log.f001761dc</span><br><span class="line">2017-12-08 23:20:07,657 [myid:4] - WARN  [QuorumPeer[myid=4]/0:0:0:0:0:0:0:0:2181:Follower@118] - Got zxid 0xf00176261 expected 0x1</span><br><span class="line"><span class="comment"># 至此，完成最终恢复，历时 496ms</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h4 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a><a href="https://yuzhouwan.com/posts/20644/">Flink</a></h4><h5 id="遇到的坑-5"><a href="#遇到的坑-5" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><h6 id="Node-not-empty-flink-sportsa-StarterALLJSPlaying-jobgraphs-6f96a21ae1aaf087b7423f504e554694"><a href="#Node-not-empty-flink-sportsa-StarterALLJSPlaying-jobgraphs-6f96a21ae1aaf087b7423f504e554694" class="headerlink" title="Node not empty: /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694"></a>Node not empty: /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</h6><ul>
<li><p>描述</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 没有子目录也无法删除</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br><span class="line">  []</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] delete /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br><span class="line">  Node not empty: /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] rmr /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br><span class="line">  Node not empty: /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>解决</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 get 命令发现，6f96a21ae1aaf087b7423f504e554694 本身就是有数据的</span></span><br><span class="line"><span class="comment"># 设置对应 version 为 '' 空字符串，再执行 delete 操作即可</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] <span class="built_in">set</span> /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694 <span class="string">''</span> 1</span><br><span class="line">  cZxid = 0x1b01e697c7</span><br><span class="line">  ctime = Mon Jun 11 14:29:58 CST 2018</span><br><span class="line">  mZxid = 0x1b01ebc650</span><br><span class="line">  mtime = Mon Jun 11 17:04:50 CST 2018</span><br><span class="line">  pZxid = 0x1b01e6adb8</span><br><span class="line">  cversion = 2</span><br><span class="line">  dataVersion = 2</span><br><span class="line">  aclVersion = 0</span><br><span class="line">  ephemeralOwner = 0x0</span><br><span class="line">  dataLength = 0</span><br><span class="line">  numChildren = 0</span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] delete /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br><span class="line">[zk: localhost:2181(CONNECTED) 14] ls /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br><span class="line">  Node does not exist: /flink/sportsa/StarterALLJSPlaying/jobgraphs/6f96a21ae1aaf087b7423f504e554694</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h4 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a><a href="https://yuzhouwan.com/posts/60504/">Hadoop</a></h4><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a><a href="https://yuzhouwan.com/posts/26002/">Kafka</a></h4><h2 id="其他技术比对"><a href="#其他技术比对" class="headerlink" title="其他技术比对"></a>其他技术比对</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img data-src="/picture/zk/zk_ecosystem.png" alt="ZooKeeper Ecosystem"></p>
<center>（利用 <a href="https://www.xmind.net/" target="_blank">XMind</a>™ 绘制而成）</center>



<h3 id="分布式框架"><a href="#分布式框架" class="headerlink" title="分布式框架"></a>分布式框架</h3><h4 id="Chubby"><a href="#Chubby" class="headerlink" title="Chubby"></a>Chubby</h4><p>　Google Chubby 是一种分布式锁服务，解决了分布式协作、元数据存储和 Leader 选举等一系列与分布式锁服务相关的问题，有着以下的优势：</p>
<ul>
<li>提供了一个完整的、独立的分布式锁服务</li>
<li>提供粗粒度的锁服务</li>
<li>在提供锁服务的同时提供对小文件的读写功能</li>
<li>高可用</li>
<li>提供事件通知机制</li>
</ul>
<p>　和 ZooKeeper 的区别主要有三点：</p>
<ul>
<li><p>一致性算法不同</p>
<p>ZooKeeper 用的是 ZAB 原子广播协议；Chubby 是带租约的 Paxos</p>
</li>
<li><p>API 设计不同</p>
<p>ZooKeeper 用 <code>ZNode</code> 节点来实现锁；Chubby 提供了直接的加锁 API</p>
</li>
<li><p>集群设计不同</p>
<p>ZooKeeper 每个机器都可以读，提供 sync 方法同步刷新，保证了吞吐量；Chubby 读写都在 Master 单节点上</p>
</li>
</ul>
<h4 id="HyperTable"><a href="#HyperTable" class="headerlink" title="HyperTable"></a><a href="https://github.com/hypertable/hypertable">HyperTable</a></h4><p>　Hypertable 和 HBase 是最知名的两款基于 BigTable 为蓝本设计的数据库，他们的不同之处在于 Hypertable 基于 Boost C++ 实现，而 HBase 则基于 Java。虽然前者架构足够精细、代码足够高质，但是流行度远不及 HBase</p>
<h3 id="一致性算法"><a href="#一致性算法" class="headerlink" title="一致性算法"></a>一致性算法</h3><h4 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a><a href="https://raft.github.io/">Raft</a></h4><p>　相比 Paxos，<a href="http://thesecretlivesofdata.com/raft/">Raft</a> 算法则更加易于理解和实现（目前 <a href="https://yuzhouwan.com/posts/2129/">Redis</a> 的集群设计用的是 Raft 算法）</p>
<p><img data-src="/picture/zk/zk_raft_1.png" alt=""><br><img data-src="/picture/zk/zk_raft_2.png" alt=""><br><img data-src="/picture/zk/zk_raft_3.png" alt=""><br><img data-src="/picture/zk/zk_raft_4.png" alt=""><br><img data-src="/picture/zk/zk_raft_5.png" alt=""><br><img data-src="/picture/zk/zk_raft_6.png" alt=""></p>
<center>（对 <a href="https://raft.github.io/" target="_blank">Raft.io</a>™ 的截图，已确定版权为 CC BY 3.0 协议）</center>



<h3 id="分布式协同"><a href="#分布式协同" class="headerlink" title="分布式协同"></a>分布式协同</h3><h4 id="Fourinone"><a href="#Fourinone" class="headerlink" title="Fourinone"></a>Fourinone</h4><p>　<strong>Fourinone</strong> 是阿里自主研发的一个分布式并行计算框架，它集成了 Hadoop、ZooKeeper、MQ、分布式缓存 四大主要的分布式计算功能。同时，还提供完整的分布式缓存支持，包括中小型缓存以及大型集群缓存，不过已经很长时间没有维护了</p>
<h3 id="分布式服务注册与发现"><a href="#分布式服务注册与发现" class="headerlink" title="分布式服务注册与发现"></a>分布式服务注册与发现</h3><h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a><a href="https://github.com/hashicorp/consul">Consul</a></h4><p>　<strong>Consul</strong> 是强一致性的数据存储，使用 Gossip 形成动态集群。它提供分级<code>键/值</code>存储方式，不仅可以存储数据，而且可以用于注册各种事件，从发送数据改变通知到运行健康检查和自定义命令<br>　相比于 ZooKeeper 只能提供 KV 存储，Consul 内嵌了 服务发现系统，并且原生支持多数据中心部署。同时，还可以执行健康检查，并提供一个可视化的 Dashboard 用于管理</p>
<h4 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a><a href="https://github.com/coreos/etcd">Etcd</a></h4><p>　<strong>Etcd</strong> 是一个采用 HTTP 协议的<code>键/值</code>对存储系统，它是一个分布式和功能层次配置系统，可用于构建服务发现系统。其很容易部署、安装和使用，提供了可靠的数据持久化特性</p>
<h4 id="Registrator"><a href="#Registrator" class="headerlink" title="Registrator"></a><a href="https://github.com/gliderlabs/registrator">Registrator</a></h4><p>　<strong>Registrator</strong> 通过检查容器在线或者停止运行状态<code>自动注册</code>和<code>卸载注册服务</code>，它目前支持 etcd、Consul 和 SkyDNS2<br>　Registrator 与 etcd 是一个简单但是功能强大的组合，可以运行很多先进的技术。每当打开一个容器，所有数据将被存储在 etcd 并同步复制到集群中的所有节点上</p>
<h4 id="Confd"><a href="#Confd" class="headerlink" title="Confd"></a><a href="https://github.com/kelseyhightower/confd">Confd</a></h4><p>　<strong>Confd</strong> 是一个轻量级的配置管理工具，常见的用法是通过使用存储在 etcd、consul 和 其他一些数据登记处的数据保持配置文件的最新状态，它也可以用来在配置文件改变时重新加载应用程序。换句话说，我们可以用存储在 etcd（或者其他注册中心）的信息来重新配置所有服务</p>
<h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><h3 id="日志可视化工具"><a href="#日志可视化工具" class="headerlink" title="日志可视化工具"></a><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-773">日志可视化</a>工具</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/zookeeper</span><br><span class="line">$ java -cp zookeeper-3.4.6.jar:lib/log4j-1.2.16.jar:lib/slf4j-log4j12-1.6.1.jar:lib/slf4j-api-1.6.1.jar org.apache.zookeeper.server.LogFormatter ~/data/version-2/log.xxx</span><br><span class="line"></span><br><span class="line">  ZooKeeper Transactional Log File with dbid 0 txnlog format version 2</span><br><span class="line">  8/16/17 1:28:36 AM CST session 0x25d0d0e60d373ed cxid 0xcdd3 zxid 0xf0345fbfb setData <span class="string">'/hbase/replication/rs/slave08-yuzhouwan%2C60020%2C1502718266335/1/slave08-yuzhouwan%252C60020%252C1502718266335.1502817956398,#ffffffff0001a726567696f6e7365727665723a36303032306cffffffe8ffffffa1ffffffd0ffffff9824ffffffb616504255468ffffff8effffff92fffffff61d,34</span></span><br><span class="line"><span class="string">  8/16/17 1:28:36 AM CST session 0x35d0d0e72d4c5af cxid 0x0 zxid 0xf0345fbfd createSession 40000</span></span><br><span class="line"><span class="string">  8/16/17 1:28:37 AM CST session 0x15d0d0e5fc25bb2 cxid 0x0 zxid 0xf0345fc08 createSession 40000</span></span><br><span class="line"><span class="string">  8/16/17 1:28:37 AM CST session 0x35d0d0e72d4c5b2 cxid 0x4 zxid 0xf0345fc09 closeSession null</span></span><br><span class="line"><span class="string">  8/16/17 1:28:37 AM CST session 0x15d0d0e5fc25bb2 cxid 0x3 zxid 0xf0345fc0a closeSession null</span></span><br><span class="line"><span class="string">  8/16/17 1:28:37 AM CST session 0x25d0d0e60a7e937 cxid 0x26eeeb zxid 0xf0345fc0b setData '</span>/hbase/replication/rs/slave06-yuzhouwan%2C60020%2C1499390463838/1/slave06-yuzhouwan%252C60020%252C1499390463838.1502817657055,<span class="comment">#ffffffff0001a726567696f6e7365727665723a3630303230ffffff882fffffff8f7ffffff8b6ffffff89ffffffa7504255468ffffffeaffffff8effffffc52e,183</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Snapshot-可视化工具"><a href="#Snapshot-可视化工具" class="headerlink" title="Snapshot 可视化工具"></a><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1377">Snapshot 可视化</a>工具</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/zookeeper</span><br><span class="line">$ java -cp zookeeper-3.4.6.jar:lib/log4j-1.2.16.jar:lib/slf4j-log4j12-1.6.1.jar:lib/slf4j-api-1.6.1.jar org.apache.zookeeper.server.SnapshotFormatter ~/data/version-2/snapshot.xxx</span><br><span class="line"></span><br><span class="line">  ZNode Details (count=4):</span><br><span class="line">  ----</span><br><span class="line">  /</span><br><span class="line">    cZxid = 0x00000000000000</span><br><span class="line">    ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">    mZxid = 0x00000000000000</span><br><span class="line">    mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">    pZxid = 0x00000000000000</span><br><span class="line">    cversion = 0</span><br><span class="line">    dataVersion = 0</span><br><span class="line">    aclVersion = 0</span><br><span class="line">    ephemeralOwner = 0x00000000000000</span><br><span class="line">    dataLength = 0</span><br><span class="line">  ----</span><br><span class="line">  /zookeeper</span><br><span class="line">    cZxid = 0x00000000000000</span><br><span class="line">    ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">    mZxid = 0x00000000000000</span><br><span class="line">    mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">    pZxid = 0x00000000000000</span><br><span class="line">    cversion = 0</span><br><span class="line">    dataVersion = 0</span><br><span class="line">    aclVersion = 0</span><br><span class="line">    ephemeralOwner = 0x00000000000000</span><br><span class="line">    dataLength = 0</span><br><span class="line">  ----</span><br><span class="line">  /zookeeper/quota</span><br><span class="line">    cZxid = 0x00000000000000</span><br><span class="line">    ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">    mZxid = 0x00000000000000</span><br><span class="line">    mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">    pZxid = 0x00000000000000</span><br><span class="line">    cversion = 0</span><br><span class="line">    dataVersion = 0</span><br><span class="line">    aclVersion = 0</span><br><span class="line">    ephemeralOwner = 0x00000000000000</span><br><span class="line">    dataLength = 0</span><br><span class="line">  ----</span><br><span class="line">  Session Details (sid, timeout, ephemeralCount):</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Hue-Browser-集群页面监控工具"><a href="#Hue-Browser-集群页面监控工具" class="headerlink" title="Hue Browser 集群页面监控工具"></a>Hue Browser 集群页面<a href="https://issues.apache.org/jira/browse/ZOOKEEPER-808">监控</a>工具</h3><h4 id="Rest-服务"><a href="#Rest-服务" class="headerlink" title="Rest 服务"></a>Rest 服务</h4><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tar zxvf zookeeper-3.4.10.tar.gz -C ~/software/</span><br><span class="line">$ <span class="built_in">cd</span> ~/software/zookeeper-3.4.10/</span><br><span class="line">$ ant clean</span><br><span class="line">$ ant</span><br></pre></td></tr></tbody></table></figure>
<h5 id="拷贝-Jar-包"><a href="#拷贝-Jar-包" class="headerlink" title="拷贝 Jar 包"></a>拷贝 Jar 包</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cp build/contrib/rest/zookeeper-dev-rest.jar src/contrib/rest/lib/</span><br><span class="line">$ cp build/contrib/rest/lib/*.jar src/contrib/rest/lib/</span><br><span class="line">$ wget https://repository.cloudera.com/content/repositories/releases/org/apache/zookeeper/zookeeper/3.4.5-cdh5.11.1/zookeeper-3.4.5-cdh5.11.1.jar</span><br><span class="line">$ cp zookeeper-3.4.5-cdh5.2.0.jar src/contrib/rest/lib/</span><br><span class="line">$ cp src/java/lib/*.jar src/contrib/rest/lib/</span><br></pre></td></tr></tbody></table></figure>
<h5 id="启动-Rest-Service"><a href="#启动-Rest-Service" class="headerlink" title="启动 Rest Service"></a>启动 Rest Service</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/zookeeper/software/zookeeper1/src/contrib/rest</span><br><span class="line">$ ./rest.sh start</span><br><span class="line">  Starting ZooKeeper REST Gateway ... </span><br><span class="line">  STARTED</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">$ ./rest.sh stop</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">$ tail -f zkrest.log</span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装-Hue"><a href="#安装-Hue" class="headerlink" title="安装 Hue"></a>安装 Hue</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加 ZooKeeper 用户</span></span><br><span class="line"><span class="comment"># 安装 jdk7 / python2.7.12 / virtualenv</span></span><br><span class="line">$ su - zookeeper</span><br><span class="line">$ mkdir software &amp;&amp; <span class="built_in">cd</span> software</span><br><span class="line">$ virtualenv -p /usr/<span class="built_in">local</span>/bin/python --system-site-packages hue</span><br><span class="line">$ <span class="built_in">cd</span> hue &amp;&amp; <span class="built_in">source</span> bin/activate</span><br><span class="line"><span class="comment"># 检查 virtualEnv 里的 python 版本和路径，是否正确</span></span><br><span class="line">(hue) [zookeeper@zoo hue]$ python -V</span><br><span class="line">  Python 2.7.12</span><br><span class="line">(hue) [zookeeper@edeppreapp01 software]$ <span class="built_in">which</span> python</span><br><span class="line">~/software/hue/bin/python</span><br><span class="line">$ <span class="built_in">cd</span> /home/zookeeper/install</span><br><span class="line">$ wget https://codeload.github.com/cloudera/hue/tar.gz/cdh5.8.5-release</span><br><span class="line">$ wget https://issues.apache.org/jira/secure/attachment/12452258/huebrowser.tar.gz</span><br><span class="line">$ ll</span><br><span class="line">  -rw-r--r-- 1 root root 50421006 Jun 22 16:57 hue-1.0.tgz</span><br><span class="line">  -rw-r--r-- 1 root root    23412 Jun 22 16:57 huebrowser.tar.gz</span><br><span class="line">$ mv cdh5.8.5-release cdh5.8.5-release.tar.gz</span><br><span class="line">$ tar zxvf cdh5.8.5-release.tar.gz -C ~/software/</span><br><span class="line">$ tar zxvf hue-1.0.tgz -C ~/software/ &amp;&amp; tar zxvf huebrowser.tar.gz -C ~/software/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hue</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/software/hue-1.0</span><br><span class="line">$ make apps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能需要安装一些第三方包，无需则跳过</span></span><br><span class="line">$ pip install simplejson</span><br><span class="line"></span><br><span class="line">$ mkdir apps/zkui</span><br><span class="line">$ python tools/app_reg/app_reg.py --install apps/zkui</span><br><span class="line">$ python tools/app_reg/app_reg.py --list 2&gt;&amp;1 | grep zkui</span><br><span class="line">  zkui           0.1     /Users/philip/src/hue/apps/zkui</span><br></pre></td></tr></tbody></table></figure>
<div class="note warning">Hue Browser 因为常年未维护更新（只兼容到 ZooKeeper v3.4.5 版本），导致安装时容易出现很多问题。另外，Rest Service 必须所有的节点都开启才行，一旦某一台故障，则整个 Hue 不可用。所以，最好还是自己实现一套监控系统</div>




<h3 id="移除-Watch-工具"><a href="#移除-Watch-工具" class="headerlink" title="移除 Watch 工具"></a><a href="https://github.com/phunt/zookeeper-removewatch-ex">移除 Watch</a> 工具</h3><h3 id="Docker-开发环境部署工具"><a href="#Docker-开发环境部署工具" class="headerlink" title="Docker 开发环境部署工具"></a><a href="https://github.com/phunt/zk-docker-devenv">Docker 开发环境部署</a>工具</h3><h3 id="生成配置工具"><a href="#生成配置工具" class="headerlink" title="生成配置工具"></a><a href="https://github.com/phunt/zkconf">生成配置</a>工具</h3><h3 id="冒烟测试工具"><a href="#冒烟测试工具" class="headerlink" title="冒烟测试工具"></a><a href="https://github.com/phunt/zk-smoketest">冒烟测试</a>工具</h3><h3 id="Curator-框架"><a href="#Curator-框架" class="headerlink" title="Curator 框架"></a><a href="https://github.com/apache/curator">Curator</a> 框架</h3><h2 id="社区跟进"><a href="#社区跟进" class="headerlink" title="社区跟进"></a>社区跟进</h2><h3 id="PR-amp-Issues"><a href="#PR-amp-Issues" class="headerlink" title="PR &amp; Issues"></a>PR &amp; Issues</h3><ul>
<li><p><a href="https://github.com/apache/zookeeper/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aasdf2014%20">Pull Request</a></p>
</li>
<li><p><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2784?jql=project%20%3D%20ZOOKEEPER%20AND%20reporter%20in%20(%22benedict%20jin%22)">Issues</a></p>
</li>
</ul>
<p>　详见，《<a href="https://yuzhouwan.com/posts/19631/">如何成为 Apache 的 PMC</a>》</p>
<h3 id="ZooKeeper-社区的一些“规则”"><a href="#ZooKeeper-社区的一些“规则”" class="headerlink" title="ZooKeeper 社区的一些“规则”"></a>ZooKeeper 社区的一些<a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute">“规则”</a></h3><p>　同时也是共享其他开源项目时，需要注意和养成的好习惯，只是 ZooKeeper 中控制更加严格</p>
<h4 id="保持-Diff-信息最简"><a href="#保持-Diff-信息最简" class="headerlink" title="保持 Diff 信息最简"></a>保持 Diff 信息最简</h4><p>　PR 中不应该做无关的 Code Format（import / 代码缩进 等）</p>
<h4 id="保持-PR-的相关性"><a href="#保持-PR-的相关性" class="headerlink" title="保持 PR 的相关性"></a>保持 PR 的相关性</h4><p>　不做无关的 代码优化，尤其是对其他不相关的类（可以另起 PR 进行优化）</p>
<h4 id="保持-代码风格一致"><a href="#保持-代码风格一致" class="headerlink" title="保持 代码风格一致"></a>保持 代码风格一致</h4><p>　关闭 IDE 自动优化 import 合并为通配符 <code>*</code> 的功能（如，<code>import java.io.*</code> 等）</p>
<p>　类似的，还有 Apache <a href="https://yuzhouwan.com/posts/5845/">Druid</a> 里的参数列表，需要分行写；Apache <a href="https://yuzhouwan.com/posts/743/">Superset</a> 之类的 Python 项目，需要注意 <a href="https://www.python.org/dev/peps/pep-0537/">PEP</a> 规范；Apache <a href="https://yuzhouwan.com/posts/39683/">Eagle</a> 需要 squash PR 中的 commits 等等。更多相关内容，参见我的另一篇文章：《<a href="https://yuzhouwan.com/posts/19631/#代码提交的几个注意点">如何成为 Apache 的 PMC</a>》</p>
<h3 id="规避已知-issues"><a href="#规避已知-issues" class="headerlink" title="规避已知 issues"></a><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2186?jql=project%20%3D%20ZOOKEEPER%20AND%20issuetype%20%3D%20Bug%20AND%20resolution%20%3D%20Fixed%20AND%20affectedVersion%20%3D%203.4.6%20AND%20priority%20%3D%20Major%20AND%20component%20%3D%20server%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC">规避已知 issues</a></h3><p>　在 jira 中，根据自己的版本（affectedVersion），找到 Major 级别的 Bug，按照各个组件，对组件（component）进行筛选，并合并 patch 到自己的本地代码库里，从而规避一些已知的 issues，提高集群稳定性</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">project <span class="operator">=</span> ZOOKEEPER <span class="keyword">AND</span> issuetype <span class="operator">=</span> Bug <span class="keyword">AND</span> resolution <span class="operator">=</span> Fixed <span class="keyword">AND</span> affectedVersion <span class="operator">=</span> <span class="number">3.4</span><span class="number">.6</span> <span class="keyword">AND</span> priority <span class="operator">=</span> Major <span class="keyword">AND</span> component <span class="operator">=</span> server <span class="keyword">ORDER</span> <span class="keyword">BY</span> priority <span class="keyword">DESC</span>, updated <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="以-v3-4-6-为例"><a href="#以-v3-4-6-为例" class="headerlink" title="以 v3.4.6 为例"></a>以 v3.4.6 为例</h4><h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2026">ZOOKEEPER-2026</a>: Startup order in ServerCnxnFactory-ies is wrong</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2044">ZOOKEEPER-2044</a>: CancelledKeyException in zookeeper branch-3.4</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2052">ZOOKEEPER-2052</a>: Unable to delete a node when the node has no children</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2060">ZOOKEEPER-2060</a>: Trace bug in NettyServerCnxnFactory</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2186">ZOOKEEPER-2186</a>: QuorumCnxManager#receiveConnection may crash with random input</li>
</ul>
<h5 id="quorum"><a href="#quorum" class="headerlink" title="quorum"></a>quorum</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1774">ZOOKEEPER-1774</a>: QuorumPeerMainTest fails consistently with “complains about host” assertion failure</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2029">ZOOKEEPER-2029</a>: Leader.LearnerCnxAcceptor should handle exceptions in run()</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2033">ZOOKEEPER-2033</a>: zookeeper follower fails to start after a restart immediately following a new epoch</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2195">ZOOKEEPER-2195</a>: fsync.warningthresholdms in zoo.cfg not working</li>
</ul>
<h5 id="java-client"><a href="#java-client" class="headerlink" title="java client"></a>java client</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1853">ZOOKEEPER-1853</a>: zkCli.sh cannot issue a CREATE command containing spaces in the data</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1897">ZOOKEEPER-1897</a>: ZK Shell/Cli not processing commands</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2375">ZOOKEEPER-2375</a>: Prevent multiple initialization of login object in each ZooKeeperSaslClient instance</li>
<li><a href="https://github.com/apache/zookeeper/pull/430">ZOOKEEPER-2893</a>: very poor choice of logging if client fails to connect to server</li>
</ul>
<h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1913">ZOOKEEPER-1913</a>: Invalid manifest files due to bogus revision property value</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1991">ZOOKEEPER-1991</a>: zkServer.sh returns with a zero exit status when a ZooKeeper process is already running</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2039">ZOOKEEPER-2039</a>: Jute compareBytes incorrect comparison index</li>
</ul>
<h5 id="improvement"><a href="#improvement" class="headerlink" title="improvement"></a>improvement</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1506">ZOOKEEPER-1506</a>: Re-try DNS hostname -&gt; IP resolution if node connection fails</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2270">ZOOKEEPER-2270</a>: Allow MBeanRegistry to be overridden for better unit tests</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1948">ZOOKEEPER-1948</a>: Enable JMX remote monitoring</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2205">ZOOKEEPER-2205</a>: Log type of unexpected quorum packet in learner handler loop</li>
<li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2194">ZOOKEEPER-2194</a>: Let DataNode.getChildren() return an unmodifiable view of its children set</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li><a href="https://book.douban.com/subject/25765743/">ZooKeeper</a></li>
<li><a href="https://book.douban.com/subject/26292004/">Paxos 到 ZooKeeper：分布式一致性原理与实践</a></li>
</ul>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><ul>
<li><a href="https://www.microsoft.com/en-us/research/publication/paxos-made-simple/">Paxos Made Simple</a></li>
<li><a href="https://numenta.com/assets/pdf/whitepapers/hierarchical-temporal-memory-cortical-learning-algorithm-0.2.1-en.pdf">HIERARCHICAL TEMPORAL MEMORY including HTM Cortical Learning Algorithms</a></li>
</ul>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><ul>
<li><a href="https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf">Intel® 64 and IA-32 architectures software developer’s manual combined volumes: 1, 2A, 2B, 2C, 2D, 3A, 3B, 3C, 3D, and 4</a></li>
</ul>
<h2 id="欢迎加入我们的技术群，一起交流学习"><a href="#欢迎加入我们的技术群，一起交流学习" class="headerlink" title="欢迎加入我们的技术群，一起交流学习"></a><a href="https://github.com/asdf2014/yuzhouwan#technical-discussion-group">欢迎加入我们的技术群，一起交流学习</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">群名称</th>
<th style="text-align:center">群号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工智能（高级）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=71c6bd3fb0ff01d93abca654140387d99d3be752f92a53c1fbfd27f2dd4b4247"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1020982-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">人工智能（进阶）</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=deb268f65589a1a0a1dbaf7b72c849ed45298697805bef81e0c613dea40cd05e"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1217710-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">BigData</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=f86b3c8de20da1658a3bb42df17a2fc4eee0d75c4a130a63585fdd257e3565ed"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-1670647-blue.svg" alt=""></a></td>
</tr>
<tr>
<td style="text-align:center">算法</td>
<td style="text-align:center"><a href="https://shang.qq.com/wpa/qunwpa?idkey=bfbcf1453371a0810fd6be235ace47147f6fb9d262fb768b497c861f50af0af4"><img data-src="https://img.shields.io/badge/QQ%E7%BE%A4-5366753-blue.svg" alt=""></a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Apache Storm</tag>
        <tag>Apache Kafka</tag>
        <tag>Apache Hadoop</tag>
        <tag>Apache Druid</tag>
        <tag>JVM</tag>
        <tag>Apache ZooKeeper</tag>
        <tag>Paxos</tag>
        <tag>Raft</tag>
        <tag>Apache Flink</tag>
        <tag>Apache HBase</tag>
        <tag>Apache Yarn</tag>
        <tag>ZAB</tag>
        <tag>Chubby</tag>
        <tag>HyperTable</tag>
        <tag>Fourinone</tag>
        <tag>Consul</tag>
        <tag>Etcd</tag>
        <tag>Registrator</tag>
        <tag>Confd</tag>
      </tags>
  </entry>
</search>
